/***************************************************************************
 *
 * Copyright (c) 2017 miHoYo.com, Inc. All Rights Reserved
 *
 **************************************************************************/

/**
 * @file cmd_pathfinding.proto
 * @作者 jingyi.cai(jingyi.cai@mihoyo.com)
 * @日期 2019/10/09 14:48:09
 * @brief 寻路相关协议[2301 - 2400]
 **/

syntax = "proto3";
import "define.proto";
package proto;

message QueryFilter
{
    int32 type_id = 1;
    int32 area_mask = 2;
}

message QueryPathReq
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2301;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }

    enum OptionType
    {
        OPTION_NONE = 0;
        OPTION_NORMAL = 1;         // 普通查询, 给一个目标查询从起点到终点
        OPTION_FIRST_CAN_GO = 2;   // 尝试查询一条可行的路, 给多个目标, 依次查询, 直到找到第一个可行结果, 作为返回值
    }

    OptionType query_type = 1;
    int32 query_id = 2;
    uint32 scene_id = 3;
    Vector source_pos = 4;
    repeated Vector destination_pos = 5;
    QueryFilter filter = 6;
    Vector3Int destination_extend = 7;
}

message QueryPathRsp
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2302;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    enum PathStatusType
    {
        STATUS_FAIL = 0;
        STATUS_SUCC = 1;
        STATUS_PARTIAL = 2;
    }

    int32 retcode = 1;
    int32 query_id = 2;
    PathStatusType query_status = 3;
    repeated Vector corners = 4;
}

message ObstacleInfo
{
    enum ShapeType
    {
        OBSTACLE_SHAPE_CAPSULE = 0;
        OBSTACLE_SHAPE_BOX = 1;
    }
    int32 obstacle_id = 1;
    ShapeType shape = 2;
    Vector center = 3;
    MathQuaternion rotation = 4;
    Vector3Int extents = 5; // OBSTACLE_SHAPE_CAPSULE => (radius, height, radius)
}

message ObstacleModifyNotify
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2303;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
    uint32 scene_id = 1;
    repeated ObstacleInfo add_obstacles = 2;
    repeated int32 remove_obstacle_ids = 3;
}

message PathfindingPingNotify
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2304;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PathfindingEnterSceneReq
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2305;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
    uint32 scene_id = 1;
    uint32 version = 2;
    repeated ObstacleInfo obstacles = 3;
    bool is_editor = 4; //由gateserver填充
    uint32 activity_id = 5; //临时方案, 后续要考虑多个活动并存的情况
}

message PathfindingEnterSceneRsp
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2306;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
    int32 retcode = 1;
}

//GMTest
message GMShowObstacleReq
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2351;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GMShowObstacleRsp
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2352;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
    int32 retcode = 1;
    repeated ObstacleInfo obstacles = 2;
}

message GMShowNavMeshReq
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2353;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
    Vector center = 1;
    Vector extent = 2;
}


message PBNavMeshPoly
{
    enum EdgeType
    {
        INNER = 0;
        TILE_BOUND = 1;
        TILE_BOUND_UNCONNECT = 2;
    }
    repeated int32 vects = 1;
    repeated EdgeType edge_types = 2;
}

message PBNavMeshTile
{
    repeated Vector vecs = 1;
    repeated PBNavMeshPoly polys = 2;
}
message GMShowNavMeshRsp
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2354;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
    int32 retcode = 1;
    repeated PBNavMeshTile tiles = 2;
}