// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet_head.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "packet_head.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
class PacketHeadDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PacketHead>
     _instance;
} _PacketHead_default_instance_;
class DebugNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DebugNotify>
     _instance;
} _DebugNotify_default_instance_;

namespace protobuf_packet_5fhead_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHead, packet_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHead, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHead, user_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHead, user_session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHead, dispatch_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHead, gameserver_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHead, rpc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHead, enet_channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHead, enet_is_reliable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHead, nodeserver_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHead, recv_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHead, rpc_begin_time_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHead, target_service_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHead, dbgate_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHead, custom_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHead, custom_2_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugNotify, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugNotify, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugNotify, retcode_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(PacketHead)},
  { 21, -1, sizeof(DebugNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PacketHead_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DebugNotify_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "packet_head.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PacketHead_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PacketHead_default_instance_);_DebugNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DebugNotify_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021packet_head.proto\022\005proto\"\335\002\n\nPacketHea"
      "d\022\021\n\tpacket_id\030\001 \001(\r\022\017\n\007user_id\030\002 \001(\r\022\017\n"
      "\007user_ip\030\003 \001(\r\022\027\n\017user_session_id\030\004 \001(\r\022"
      "\023\n\013dispatch_ip\030\005 \001(\r\022\025\n\rgameserver_ip\030\006 "
      "\001(\r\022\016\n\006rpc_id\030\007 \001(\r\022\027\n\017enet_channel_id\030\010"
      " \001(\r\022\030\n\020enet_is_reliable\030\t \001(\r\022\025\n\rnodese"
      "rver_ip\030\n \001(\r\022\021\n\trecv_time\030\013 \001(\r\022\031\n\021rpc_"
      "begin_time_ms\030\014 \001(\r\022\026\n\016target_service\030\r "
      "\001(\r\022\021\n\tdbgate_ip\030\016 \001(\r\022\020\n\010custom_1\030\017 \001(\r"
      "\022\020\n\010custom_2\030\020 \001(\r\"\324\001\n\013DebugNotify\022\n\n\002id"
      "\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022+\n\007retcode\030\003 \001(\0162\032."
      "proto.DebugNotify.Retcode\"_\n\004Enum\022\010\n\004ZER"
      "O\020\000\022\n\n\006CMD_ID\020e\022\022\n\016TARGET_SERVICE\020e\022\023\n\017E"
      "NET_CHANNEL_ID\020\002\022\024\n\020ENET_IS_RELIABLE\020\001\032\002"
      "\020\001\"\035\n\007Retcode\022\010\n\004SUCC\020\000\022\010\n\004FAIL\020\001b\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 601);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "packet_head.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_packet_5fhead_2eproto

const ::google::protobuf::EnumDescriptor* DebugNotify_Enum_descriptor() {
  protobuf_packet_5fhead_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_packet_5fhead_2eproto::file_level_enum_descriptors[0];
}
bool DebugNotify_Enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 101:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DebugNotify_Enum DebugNotify::ZERO;
const DebugNotify_Enum DebugNotify::CMD_ID;
const DebugNotify_Enum DebugNotify::TARGET_SERVICE;
const DebugNotify_Enum DebugNotify::ENET_CHANNEL_ID;
const DebugNotify_Enum DebugNotify::ENET_IS_RELIABLE;
const DebugNotify_Enum DebugNotify::Enum_MIN;
const DebugNotify_Enum DebugNotify::Enum_MAX;
const int DebugNotify::Enum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DebugNotify_Retcode_descriptor() {
  protobuf_packet_5fhead_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_packet_5fhead_2eproto::file_level_enum_descriptors[1];
}
bool DebugNotify_Retcode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DebugNotify_Retcode DebugNotify::SUCC;
const DebugNotify_Retcode DebugNotify::FAIL;
const DebugNotify_Retcode DebugNotify::Retcode_MIN;
const DebugNotify_Retcode DebugNotify::Retcode_MAX;
const int DebugNotify::Retcode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketHead::kPacketIdFieldNumber;
const int PacketHead::kUserIdFieldNumber;
const int PacketHead::kUserIpFieldNumber;
const int PacketHead::kUserSessionIdFieldNumber;
const int PacketHead::kDispatchIpFieldNumber;
const int PacketHead::kGameserverIpFieldNumber;
const int PacketHead::kRpcIdFieldNumber;
const int PacketHead::kEnetChannelIdFieldNumber;
const int PacketHead::kEnetIsReliableFieldNumber;
const int PacketHead::kNodeserverIpFieldNumber;
const int PacketHead::kRecvTimeFieldNumber;
const int PacketHead::kRpcBeginTimeMsFieldNumber;
const int PacketHead::kTargetServiceFieldNumber;
const int PacketHead::kDbgateIpFieldNumber;
const int PacketHead::kCustom1FieldNumber;
const int PacketHead::kCustom2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketHead::PacketHead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_packet_5fhead_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PacketHead)
}
PacketHead::PacketHead(const PacketHead& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&packet_id_, &from.packet_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&custom_2_) -
    reinterpret_cast<char*>(&packet_id_)) + sizeof(custom_2_));
  // @@protoc_insertion_point(copy_constructor:proto.PacketHead)
}

void PacketHead::SharedCtor() {
  ::memset(&packet_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&custom_2_) -
      reinterpret_cast<char*>(&packet_id_)) + sizeof(custom_2_));
  _cached_size_ = 0;
}

PacketHead::~PacketHead() {
  // @@protoc_insertion_point(destructor:proto.PacketHead)
  SharedDtor();
}

void PacketHead::SharedDtor() {
}

void PacketHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketHead::descriptor() {
  protobuf_packet_5fhead_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_packet_5fhead_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PacketHead& PacketHead::default_instance() {
  protobuf_packet_5fhead_2eproto::InitDefaults();
  return *internal_default_instance();
}

PacketHead* PacketHead::New(::google::protobuf::Arena* arena) const {
  PacketHead* n = new PacketHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PacketHead::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PacketHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&packet_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&custom_2_) -
      reinterpret_cast<char*>(&packet_id_)) + sizeof(custom_2_));
  _internal_metadata_.Clear();
}

bool PacketHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PacketHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 packet_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packet_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 user_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 user_session_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dispatch_ip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dispatch_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gameserver_ip = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameserver_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rpc_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 enet_channel_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enet_channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 enet_is_reliable = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enet_is_reliable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nodeserver_ip = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nodeserver_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 recv_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recv_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rpc_begin_time_ms = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpc_begin_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_service = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_service_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dbgate_ip = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dbgate_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 custom_1 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 custom_2 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PacketHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PacketHead)
  return false;
#undef DO_
}

void PacketHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PacketHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 packet_id = 1;
  if (this->packet_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->packet_id(), output);
  }

  // uint32 user_id = 2;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // uint32 user_ip = 3;
  if (this->user_ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->user_ip(), output);
  }

  // uint32 user_session_id = 4;
  if (this->user_session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->user_session_id(), output);
  }

  // uint32 dispatch_ip = 5;
  if (this->dispatch_ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dispatch_ip(), output);
  }

  // uint32 gameserver_ip = 6;
  if (this->gameserver_ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gameserver_ip(), output);
  }

  // uint32 rpc_id = 7;
  if (this->rpc_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rpc_id(), output);
  }

  // uint32 enet_channel_id = 8;
  if (this->enet_channel_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->enet_channel_id(), output);
  }

  // uint32 enet_is_reliable = 9;
  if (this->enet_is_reliable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->enet_is_reliable(), output);
  }

  // uint32 nodeserver_ip = 10;
  if (this->nodeserver_ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->nodeserver_ip(), output);
  }

  // uint32 recv_time = 11;
  if (this->recv_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->recv_time(), output);
  }

  // uint32 rpc_begin_time_ms = 12;
  if (this->rpc_begin_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->rpc_begin_time_ms(), output);
  }

  // uint32 target_service = 13;
  if (this->target_service() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->target_service(), output);
  }

  // uint32 dbgate_ip = 14;
  if (this->dbgate_ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->dbgate_ip(), output);
  }

  // uint32 custom_1 = 15;
  if (this->custom_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->custom_1(), output);
  }

  // uint32 custom_2 = 16;
  if (this->custom_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->custom_2(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PacketHead)
}

::google::protobuf::uint8* PacketHead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PacketHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 packet_id = 1;
  if (this->packet_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->packet_id(), target);
  }

  // uint32 user_id = 2;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // uint32 user_ip = 3;
  if (this->user_ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->user_ip(), target);
  }

  // uint32 user_session_id = 4;
  if (this->user_session_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->user_session_id(), target);
  }

  // uint32 dispatch_ip = 5;
  if (this->dispatch_ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dispatch_ip(), target);
  }

  // uint32 gameserver_ip = 6;
  if (this->gameserver_ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gameserver_ip(), target);
  }

  // uint32 rpc_id = 7;
  if (this->rpc_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rpc_id(), target);
  }

  // uint32 enet_channel_id = 8;
  if (this->enet_channel_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->enet_channel_id(), target);
  }

  // uint32 enet_is_reliable = 9;
  if (this->enet_is_reliable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->enet_is_reliable(), target);
  }

  // uint32 nodeserver_ip = 10;
  if (this->nodeserver_ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->nodeserver_ip(), target);
  }

  // uint32 recv_time = 11;
  if (this->recv_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->recv_time(), target);
  }

  // uint32 rpc_begin_time_ms = 12;
  if (this->rpc_begin_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->rpc_begin_time_ms(), target);
  }

  // uint32 target_service = 13;
  if (this->target_service() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->target_service(), target);
  }

  // uint32 dbgate_ip = 14;
  if (this->dbgate_ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->dbgate_ip(), target);
  }

  // uint32 custom_1 = 15;
  if (this->custom_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->custom_1(), target);
  }

  // uint32 custom_2 = 16;
  if (this->custom_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->custom_2(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PacketHead)
  return target;
}

size_t PacketHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PacketHead)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 packet_id = 1;
  if (this->packet_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packet_id());
  }

  // uint32 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 user_ip = 3;
  if (this->user_ip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_ip());
  }

  // uint32 user_session_id = 4;
  if (this->user_session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_session_id());
  }

  // uint32 dispatch_ip = 5;
  if (this->dispatch_ip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dispatch_ip());
  }

  // uint32 gameserver_ip = 6;
  if (this->gameserver_ip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameserver_ip());
  }

  // uint32 rpc_id = 7;
  if (this->rpc_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rpc_id());
  }

  // uint32 enet_channel_id = 8;
  if (this->enet_channel_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->enet_channel_id());
  }

  // uint32 enet_is_reliable = 9;
  if (this->enet_is_reliable() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->enet_is_reliable());
  }

  // uint32 nodeserver_ip = 10;
  if (this->nodeserver_ip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nodeserver_ip());
  }

  // uint32 recv_time = 11;
  if (this->recv_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recv_time());
  }

  // uint32 rpc_begin_time_ms = 12;
  if (this->rpc_begin_time_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rpc_begin_time_ms());
  }

  // uint32 target_service = 13;
  if (this->target_service() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_service());
  }

  // uint32 dbgate_ip = 14;
  if (this->dbgate_ip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dbgate_ip());
  }

  // uint32 custom_1 = 15;
  if (this->custom_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->custom_1());
  }

  // uint32 custom_2 = 16;
  if (this->custom_2() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->custom_2());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PacketHead)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketHead* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PacketHead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PacketHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PacketHead)
    MergeFrom(*source);
  }
}

void PacketHead::MergeFrom(const PacketHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PacketHead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.packet_id() != 0) {
    set_packet_id(from.packet_id());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.user_ip() != 0) {
    set_user_ip(from.user_ip());
  }
  if (from.user_session_id() != 0) {
    set_user_session_id(from.user_session_id());
  }
  if (from.dispatch_ip() != 0) {
    set_dispatch_ip(from.dispatch_ip());
  }
  if (from.gameserver_ip() != 0) {
    set_gameserver_ip(from.gameserver_ip());
  }
  if (from.rpc_id() != 0) {
    set_rpc_id(from.rpc_id());
  }
  if (from.enet_channel_id() != 0) {
    set_enet_channel_id(from.enet_channel_id());
  }
  if (from.enet_is_reliable() != 0) {
    set_enet_is_reliable(from.enet_is_reliable());
  }
  if (from.nodeserver_ip() != 0) {
    set_nodeserver_ip(from.nodeserver_ip());
  }
  if (from.recv_time() != 0) {
    set_recv_time(from.recv_time());
  }
  if (from.rpc_begin_time_ms() != 0) {
    set_rpc_begin_time_ms(from.rpc_begin_time_ms());
  }
  if (from.target_service() != 0) {
    set_target_service(from.target_service());
  }
  if (from.dbgate_ip() != 0) {
    set_dbgate_ip(from.dbgate_ip());
  }
  if (from.custom_1() != 0) {
    set_custom_1(from.custom_1());
  }
  if (from.custom_2() != 0) {
    set_custom_2(from.custom_2());
  }
}

void PacketHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PacketHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketHead::CopyFrom(const PacketHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PacketHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketHead::IsInitialized() const {
  return true;
}

void PacketHead::Swap(PacketHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketHead::InternalSwap(PacketHead* other) {
  using std::swap;
  swap(packet_id_, other->packet_id_);
  swap(user_id_, other->user_id_);
  swap(user_ip_, other->user_ip_);
  swap(user_session_id_, other->user_session_id_);
  swap(dispatch_ip_, other->dispatch_ip_);
  swap(gameserver_ip_, other->gameserver_ip_);
  swap(rpc_id_, other->rpc_id_);
  swap(enet_channel_id_, other->enet_channel_id_);
  swap(enet_is_reliable_, other->enet_is_reliable_);
  swap(nodeserver_ip_, other->nodeserver_ip_);
  swap(recv_time_, other->recv_time_);
  swap(rpc_begin_time_ms_, other->rpc_begin_time_ms_);
  swap(target_service_, other->target_service_);
  swap(dbgate_ip_, other->dbgate_ip_);
  swap(custom_1_, other->custom_1_);
  swap(custom_2_, other->custom_2_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PacketHead::GetMetadata() const {
  protobuf_packet_5fhead_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_packet_5fhead_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PacketHead

// uint32 packet_id = 1;
void PacketHead::clear_packet_id() {
  packet_id_ = 0u;
}
::google::protobuf::uint32 PacketHead::packet_id() const {
  // @@protoc_insertion_point(field_get:proto.PacketHead.packet_id)
  return packet_id_;
}
void PacketHead::set_packet_id(::google::protobuf::uint32 value) {
  
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PacketHead.packet_id)
}

// uint32 user_id = 2;
void PacketHead::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 PacketHead::user_id() const {
  // @@protoc_insertion_point(field_get:proto.PacketHead.user_id)
  return user_id_;
}
void PacketHead::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PacketHead.user_id)
}

// uint32 user_ip = 3;
void PacketHead::clear_user_ip() {
  user_ip_ = 0u;
}
::google::protobuf::uint32 PacketHead::user_ip() const {
  // @@protoc_insertion_point(field_get:proto.PacketHead.user_ip)
  return user_ip_;
}
void PacketHead::set_user_ip(::google::protobuf::uint32 value) {
  
  user_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.PacketHead.user_ip)
}

// uint32 user_session_id = 4;
void PacketHead::clear_user_session_id() {
  user_session_id_ = 0u;
}
::google::protobuf::uint32 PacketHead::user_session_id() const {
  // @@protoc_insertion_point(field_get:proto.PacketHead.user_session_id)
  return user_session_id_;
}
void PacketHead::set_user_session_id(::google::protobuf::uint32 value) {
  
  user_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PacketHead.user_session_id)
}

// uint32 dispatch_ip = 5;
void PacketHead::clear_dispatch_ip() {
  dispatch_ip_ = 0u;
}
::google::protobuf::uint32 PacketHead::dispatch_ip() const {
  // @@protoc_insertion_point(field_get:proto.PacketHead.dispatch_ip)
  return dispatch_ip_;
}
void PacketHead::set_dispatch_ip(::google::protobuf::uint32 value) {
  
  dispatch_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.PacketHead.dispatch_ip)
}

// uint32 gameserver_ip = 6;
void PacketHead::clear_gameserver_ip() {
  gameserver_ip_ = 0u;
}
::google::protobuf::uint32 PacketHead::gameserver_ip() const {
  // @@protoc_insertion_point(field_get:proto.PacketHead.gameserver_ip)
  return gameserver_ip_;
}
void PacketHead::set_gameserver_ip(::google::protobuf::uint32 value) {
  
  gameserver_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.PacketHead.gameserver_ip)
}

// uint32 rpc_id = 7;
void PacketHead::clear_rpc_id() {
  rpc_id_ = 0u;
}
::google::protobuf::uint32 PacketHead::rpc_id() const {
  // @@protoc_insertion_point(field_get:proto.PacketHead.rpc_id)
  return rpc_id_;
}
void PacketHead::set_rpc_id(::google::protobuf::uint32 value) {
  
  rpc_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PacketHead.rpc_id)
}

// uint32 enet_channel_id = 8;
void PacketHead::clear_enet_channel_id() {
  enet_channel_id_ = 0u;
}
::google::protobuf::uint32 PacketHead::enet_channel_id() const {
  // @@protoc_insertion_point(field_get:proto.PacketHead.enet_channel_id)
  return enet_channel_id_;
}
void PacketHead::set_enet_channel_id(::google::protobuf::uint32 value) {
  
  enet_channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PacketHead.enet_channel_id)
}

// uint32 enet_is_reliable = 9;
void PacketHead::clear_enet_is_reliable() {
  enet_is_reliable_ = 0u;
}
::google::protobuf::uint32 PacketHead::enet_is_reliable() const {
  // @@protoc_insertion_point(field_get:proto.PacketHead.enet_is_reliable)
  return enet_is_reliable_;
}
void PacketHead::set_enet_is_reliable(::google::protobuf::uint32 value) {
  
  enet_is_reliable_ = value;
  // @@protoc_insertion_point(field_set:proto.PacketHead.enet_is_reliable)
}

// uint32 nodeserver_ip = 10;
void PacketHead::clear_nodeserver_ip() {
  nodeserver_ip_ = 0u;
}
::google::protobuf::uint32 PacketHead::nodeserver_ip() const {
  // @@protoc_insertion_point(field_get:proto.PacketHead.nodeserver_ip)
  return nodeserver_ip_;
}
void PacketHead::set_nodeserver_ip(::google::protobuf::uint32 value) {
  
  nodeserver_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.PacketHead.nodeserver_ip)
}

// uint32 recv_time = 11;
void PacketHead::clear_recv_time() {
  recv_time_ = 0u;
}
::google::protobuf::uint32 PacketHead::recv_time() const {
  // @@protoc_insertion_point(field_get:proto.PacketHead.recv_time)
  return recv_time_;
}
void PacketHead::set_recv_time(::google::protobuf::uint32 value) {
  
  recv_time_ = value;
  // @@protoc_insertion_point(field_set:proto.PacketHead.recv_time)
}

// uint32 rpc_begin_time_ms = 12;
void PacketHead::clear_rpc_begin_time_ms() {
  rpc_begin_time_ms_ = 0u;
}
::google::protobuf::uint32 PacketHead::rpc_begin_time_ms() const {
  // @@protoc_insertion_point(field_get:proto.PacketHead.rpc_begin_time_ms)
  return rpc_begin_time_ms_;
}
void PacketHead::set_rpc_begin_time_ms(::google::protobuf::uint32 value) {
  
  rpc_begin_time_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.PacketHead.rpc_begin_time_ms)
}

// uint32 target_service = 13;
void PacketHead::clear_target_service() {
  target_service_ = 0u;
}
::google::protobuf::uint32 PacketHead::target_service() const {
  // @@protoc_insertion_point(field_get:proto.PacketHead.target_service)
  return target_service_;
}
void PacketHead::set_target_service(::google::protobuf::uint32 value) {
  
  target_service_ = value;
  // @@protoc_insertion_point(field_set:proto.PacketHead.target_service)
}

// uint32 dbgate_ip = 14;
void PacketHead::clear_dbgate_ip() {
  dbgate_ip_ = 0u;
}
::google::protobuf::uint32 PacketHead::dbgate_ip() const {
  // @@protoc_insertion_point(field_get:proto.PacketHead.dbgate_ip)
  return dbgate_ip_;
}
void PacketHead::set_dbgate_ip(::google::protobuf::uint32 value) {
  
  dbgate_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.PacketHead.dbgate_ip)
}

// uint32 custom_1 = 15;
void PacketHead::clear_custom_1() {
  custom_1_ = 0u;
}
::google::protobuf::uint32 PacketHead::custom_1() const {
  // @@protoc_insertion_point(field_get:proto.PacketHead.custom_1)
  return custom_1_;
}
void PacketHead::set_custom_1(::google::protobuf::uint32 value) {
  
  custom_1_ = value;
  // @@protoc_insertion_point(field_set:proto.PacketHead.custom_1)
}

// uint32 custom_2 = 16;
void PacketHead::clear_custom_2() {
  custom_2_ = 0u;
}
::google::protobuf::uint32 PacketHead::custom_2() const {
  // @@protoc_insertion_point(field_get:proto.PacketHead.custom_2)
  return custom_2_;
}
void PacketHead::set_custom_2(::google::protobuf::uint32 value) {
  
  custom_2_ = value;
  // @@protoc_insertion_point(field_set:proto.PacketHead.custom_2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugNotify::kIdFieldNumber;
const int DebugNotify::kNameFieldNumber;
const int DebugNotify::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugNotify::DebugNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_packet_5fhead_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DebugNotify)
}
DebugNotify::DebugNotify(const DebugNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&id_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:proto.DebugNotify)
}

void DebugNotify::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&id_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

DebugNotify::~DebugNotify() {
  // @@protoc_insertion_point(destructor:proto.DebugNotify)
  SharedDtor();
}

void DebugNotify::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DebugNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugNotify::descriptor() {
  protobuf_packet_5fhead_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_packet_5fhead_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugNotify& DebugNotify::default_instance() {
  protobuf_packet_5fhead_2eproto::InitDefaults();
  return *internal_default_instance();
}

DebugNotify* DebugNotify::New(::google::protobuf::Arena* arena) const {
  DebugNotify* n = new DebugNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DebugNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&id_)) + sizeof(retcode_));
  _internal_metadata_.Clear();
}

bool DebugNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DebugNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.DebugNotify.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.DebugNotify.Retcode retcode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_retcode(static_cast< ::proto::DebugNotify_Retcode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DebugNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DebugNotify)
  return false;
#undef DO_
}

void DebugNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DebugNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.DebugNotify.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .proto.DebugNotify.Retcode retcode = 3;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DebugNotify)
}

::google::protobuf::uint8* DebugNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DebugNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.DebugNotify.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .proto.DebugNotify.Retcode retcode = 3;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DebugNotify)
  return target;
}

size_t DebugNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DebugNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // .proto.DebugNotify.Retcode retcode = 3;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DebugNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DebugNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DebugNotify)
    MergeFrom(*source);
  }
}

void DebugNotify::MergeFrom(const DebugNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DebugNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void DebugNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DebugNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugNotify::CopyFrom(const DebugNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DebugNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugNotify::IsInitialized() const {
  return true;
}

void DebugNotify::Swap(DebugNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugNotify::InternalSwap(DebugNotify* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(id_, other->id_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugNotify::GetMetadata() const {
  protobuf_packet_5fhead_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_packet_5fhead_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugNotify

// uint32 id = 1;
void DebugNotify::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 DebugNotify::id() const {
  // @@protoc_insertion_point(field_get:proto.DebugNotify.id)
  return id_;
}
void DebugNotify::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.DebugNotify.id)
}

// string name = 2;
void DebugNotify::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DebugNotify::name() const {
  // @@protoc_insertion_point(field_get:proto.DebugNotify.name)
  return name_.GetNoArena();
}
void DebugNotify::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.DebugNotify.name)
}
#if LANG_CXX11
void DebugNotify::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.DebugNotify.name)
}
#endif
void DebugNotify::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.DebugNotify.name)
}
void DebugNotify::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.DebugNotify.name)
}
::std::string* DebugNotify::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.DebugNotify.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DebugNotify::release_name() {
  // @@protoc_insertion_point(field_release:proto.DebugNotify.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DebugNotify::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.DebugNotify.name)
}

// .proto.DebugNotify.Retcode retcode = 3;
void DebugNotify::clear_retcode() {
  retcode_ = 0;
}
::proto::DebugNotify_Retcode DebugNotify::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DebugNotify.retcode)
  return static_cast< ::proto::DebugNotify_Retcode >(retcode_);
}
void DebugNotify::set_retcode(::proto::DebugNotify_Retcode value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DebugNotify.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
