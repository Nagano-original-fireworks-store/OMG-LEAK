// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_mp.proto

#ifndef PROTOBUF_cmd_2fcmd_5fmp_2eproto__INCLUDED
#define PROTOBUF_cmd_2fcmd_5fmp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "define.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
class GetPlayerMpModeAvailabilityReq;
class GetPlayerMpModeAvailabilityReqDefaultTypeInternal;
extern GetPlayerMpModeAvailabilityReqDefaultTypeInternal _GetPlayerMpModeAvailabilityReq_default_instance_;
class GetPlayerMpModeAvailabilityRsp;
class GetPlayerMpModeAvailabilityRspDefaultTypeInternal;
extern GetPlayerMpModeAvailabilityRspDefaultTypeInternal _GetPlayerMpModeAvailabilityRsp_default_instance_;
class PlayerApplyEnterMpNotify;
class PlayerApplyEnterMpNotifyDefaultTypeInternal;
extern PlayerApplyEnterMpNotifyDefaultTypeInternal _PlayerApplyEnterMpNotify_default_instance_;
class PlayerApplyEnterMpReq;
class PlayerApplyEnterMpReqDefaultTypeInternal;
extern PlayerApplyEnterMpReqDefaultTypeInternal _PlayerApplyEnterMpReq_default_instance_;
class PlayerApplyEnterMpResultNotify;
class PlayerApplyEnterMpResultNotifyDefaultTypeInternal;
extern PlayerApplyEnterMpResultNotifyDefaultTypeInternal _PlayerApplyEnterMpResultNotify_default_instance_;
class PlayerApplyEnterMpResultReq;
class PlayerApplyEnterMpResultReqDefaultTypeInternal;
extern PlayerApplyEnterMpResultReqDefaultTypeInternal _PlayerApplyEnterMpResultReq_default_instance_;
class PlayerApplyEnterMpResultRsp;
class PlayerApplyEnterMpResultRspDefaultTypeInternal;
extern PlayerApplyEnterMpResultRspDefaultTypeInternal _PlayerApplyEnterMpResultRsp_default_instance_;
class PlayerApplyEnterMpRsp;
class PlayerApplyEnterMpRspDefaultTypeInternal;
extern PlayerApplyEnterMpRspDefaultTypeInternal _PlayerApplyEnterMpRsp_default_instance_;
class PlayerPreEnterMpNotify;
class PlayerPreEnterMpNotifyDefaultTypeInternal;
extern PlayerPreEnterMpNotifyDefaultTypeInternal _PlayerPreEnterMpNotify_default_instance_;
class PlayerQuitFromMpNotify;
class PlayerQuitFromMpNotifyDefaultTypeInternal;
extern PlayerQuitFromMpNotifyDefaultTypeInternal _PlayerQuitFromMpNotify_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_cmd_2fcmd_5fmp_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cmd_2fcmd_5fmp_2eproto

enum PlayerApplyEnterMpNotify_CmdId {
  PlayerApplyEnterMpNotify_CmdId_NONE = 0,
  PlayerApplyEnterMpNotify_CmdId_CMD_ID = 1801,
  PlayerApplyEnterMpNotify_CmdId_ENET_CHANNEL_ID = 0,
  PlayerApplyEnterMpNotify_CmdId_ENET_IS_RELIABLE = 1,
  PlayerApplyEnterMpNotify_CmdId_PlayerApplyEnterMpNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerApplyEnterMpNotify_CmdId_PlayerApplyEnterMpNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerApplyEnterMpNotify_CmdId_IsValid(int value);
const PlayerApplyEnterMpNotify_CmdId PlayerApplyEnterMpNotify_CmdId_CmdId_MIN = PlayerApplyEnterMpNotify_CmdId_NONE;
const PlayerApplyEnterMpNotify_CmdId PlayerApplyEnterMpNotify_CmdId_CmdId_MAX = PlayerApplyEnterMpNotify_CmdId_CMD_ID;
const int PlayerApplyEnterMpNotify_CmdId_CmdId_ARRAYSIZE = PlayerApplyEnterMpNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerApplyEnterMpNotify_CmdId_descriptor();
inline const ::std::string& PlayerApplyEnterMpNotify_CmdId_Name(PlayerApplyEnterMpNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerApplyEnterMpNotify_CmdId_descriptor(), value);
}
inline bool PlayerApplyEnterMpNotify_CmdId_Parse(
    const ::std::string& name, PlayerApplyEnterMpNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerApplyEnterMpNotify_CmdId>(
    PlayerApplyEnterMpNotify_CmdId_descriptor(), name, value);
}
enum PlayerApplyEnterMpReq_CmdId {
  PlayerApplyEnterMpReq_CmdId_NONE = 0,
  PlayerApplyEnterMpReq_CmdId_CMD_ID = 1802,
  PlayerApplyEnterMpReq_CmdId_ENET_CHANNEL_ID = 0,
  PlayerApplyEnterMpReq_CmdId_ENET_IS_RELIABLE = 1,
  PlayerApplyEnterMpReq_CmdId_IS_ALLOW_CLIENT = 1,
  PlayerApplyEnterMpReq_CmdId_PlayerApplyEnterMpReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerApplyEnterMpReq_CmdId_PlayerApplyEnterMpReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerApplyEnterMpReq_CmdId_IsValid(int value);
const PlayerApplyEnterMpReq_CmdId PlayerApplyEnterMpReq_CmdId_CmdId_MIN = PlayerApplyEnterMpReq_CmdId_NONE;
const PlayerApplyEnterMpReq_CmdId PlayerApplyEnterMpReq_CmdId_CmdId_MAX = PlayerApplyEnterMpReq_CmdId_CMD_ID;
const int PlayerApplyEnterMpReq_CmdId_CmdId_ARRAYSIZE = PlayerApplyEnterMpReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerApplyEnterMpReq_CmdId_descriptor();
inline const ::std::string& PlayerApplyEnterMpReq_CmdId_Name(PlayerApplyEnterMpReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerApplyEnterMpReq_CmdId_descriptor(), value);
}
inline bool PlayerApplyEnterMpReq_CmdId_Parse(
    const ::std::string& name, PlayerApplyEnterMpReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerApplyEnterMpReq_CmdId>(
    PlayerApplyEnterMpReq_CmdId_descriptor(), name, value);
}
enum PlayerApplyEnterMpRsp_CmdId {
  PlayerApplyEnterMpRsp_CmdId_NONE = 0,
  PlayerApplyEnterMpRsp_CmdId_CMD_ID = 1803,
  PlayerApplyEnterMpRsp_CmdId_ENET_CHANNEL_ID = 0,
  PlayerApplyEnterMpRsp_CmdId_ENET_IS_RELIABLE = 1,
  PlayerApplyEnterMpRsp_CmdId_PlayerApplyEnterMpRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerApplyEnterMpRsp_CmdId_PlayerApplyEnterMpRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerApplyEnterMpRsp_CmdId_IsValid(int value);
const PlayerApplyEnterMpRsp_CmdId PlayerApplyEnterMpRsp_CmdId_CmdId_MIN = PlayerApplyEnterMpRsp_CmdId_NONE;
const PlayerApplyEnterMpRsp_CmdId PlayerApplyEnterMpRsp_CmdId_CmdId_MAX = PlayerApplyEnterMpRsp_CmdId_CMD_ID;
const int PlayerApplyEnterMpRsp_CmdId_CmdId_ARRAYSIZE = PlayerApplyEnterMpRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerApplyEnterMpRsp_CmdId_descriptor();
inline const ::std::string& PlayerApplyEnterMpRsp_CmdId_Name(PlayerApplyEnterMpRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerApplyEnterMpRsp_CmdId_descriptor(), value);
}
inline bool PlayerApplyEnterMpRsp_CmdId_Parse(
    const ::std::string& name, PlayerApplyEnterMpRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerApplyEnterMpRsp_CmdId>(
    PlayerApplyEnterMpRsp_CmdId_descriptor(), name, value);
}
enum PlayerApplyEnterMpResultNotify_CmdId {
  PlayerApplyEnterMpResultNotify_CmdId_NONE = 0,
  PlayerApplyEnterMpResultNotify_CmdId_CMD_ID = 1804,
  PlayerApplyEnterMpResultNotify_CmdId_ENET_CHANNEL_ID = 0,
  PlayerApplyEnterMpResultNotify_CmdId_ENET_IS_RELIABLE = 1,
  PlayerApplyEnterMpResultNotify_CmdId_PlayerApplyEnterMpResultNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerApplyEnterMpResultNotify_CmdId_PlayerApplyEnterMpResultNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerApplyEnterMpResultNotify_CmdId_IsValid(int value);
const PlayerApplyEnterMpResultNotify_CmdId PlayerApplyEnterMpResultNotify_CmdId_CmdId_MIN = PlayerApplyEnterMpResultNotify_CmdId_NONE;
const PlayerApplyEnterMpResultNotify_CmdId PlayerApplyEnterMpResultNotify_CmdId_CmdId_MAX = PlayerApplyEnterMpResultNotify_CmdId_CMD_ID;
const int PlayerApplyEnterMpResultNotify_CmdId_CmdId_ARRAYSIZE = PlayerApplyEnterMpResultNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerApplyEnterMpResultNotify_CmdId_descriptor();
inline const ::std::string& PlayerApplyEnterMpResultNotify_CmdId_Name(PlayerApplyEnterMpResultNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerApplyEnterMpResultNotify_CmdId_descriptor(), value);
}
inline bool PlayerApplyEnterMpResultNotify_CmdId_Parse(
    const ::std::string& name, PlayerApplyEnterMpResultNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerApplyEnterMpResultNotify_CmdId>(
    PlayerApplyEnterMpResultNotify_CmdId_descriptor(), name, value);
}
enum PlayerApplyEnterMpResultNotify_Reason {
  PlayerApplyEnterMpResultNotify_Reason_PLAYER_JUDGE = 0,
  PlayerApplyEnterMpResultNotify_Reason_SCENE_CANNOT_ENTER = 1,
  PlayerApplyEnterMpResultNotify_Reason_PLAYER_CANNOT_ENTER_MP = 2,
  PlayerApplyEnterMpResultNotify_Reason_SYSTEM_JUDGE = 3,
  PlayerApplyEnterMpResultNotify_Reason_ALLOW_ENTER_PLAYER_FULL = 4,
  PlayerApplyEnterMpResultNotify_Reason_WORLD_LEVEL_LOWER_THAN_HOST = 5,
  PlayerApplyEnterMpResultNotify_Reason_PlayerApplyEnterMpResultNotify_Reason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerApplyEnterMpResultNotify_Reason_PlayerApplyEnterMpResultNotify_Reason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerApplyEnterMpResultNotify_Reason_IsValid(int value);
const PlayerApplyEnterMpResultNotify_Reason PlayerApplyEnterMpResultNotify_Reason_Reason_MIN = PlayerApplyEnterMpResultNotify_Reason_PLAYER_JUDGE;
const PlayerApplyEnterMpResultNotify_Reason PlayerApplyEnterMpResultNotify_Reason_Reason_MAX = PlayerApplyEnterMpResultNotify_Reason_WORLD_LEVEL_LOWER_THAN_HOST;
const int PlayerApplyEnterMpResultNotify_Reason_Reason_ARRAYSIZE = PlayerApplyEnterMpResultNotify_Reason_Reason_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerApplyEnterMpResultNotify_Reason_descriptor();
inline const ::std::string& PlayerApplyEnterMpResultNotify_Reason_Name(PlayerApplyEnterMpResultNotify_Reason value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerApplyEnterMpResultNotify_Reason_descriptor(), value);
}
inline bool PlayerApplyEnterMpResultNotify_Reason_Parse(
    const ::std::string& name, PlayerApplyEnterMpResultNotify_Reason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerApplyEnterMpResultNotify_Reason>(
    PlayerApplyEnterMpResultNotify_Reason_descriptor(), name, value);
}
enum PlayerApplyEnterMpResultReq_CmdId {
  PlayerApplyEnterMpResultReq_CmdId_NONE = 0,
  PlayerApplyEnterMpResultReq_CmdId_CMD_ID = 1805,
  PlayerApplyEnterMpResultReq_CmdId_ENET_CHANNEL_ID = 0,
  PlayerApplyEnterMpResultReq_CmdId_ENET_IS_RELIABLE = 1,
  PlayerApplyEnterMpResultReq_CmdId_IS_ALLOW_CLIENT = 1,
  PlayerApplyEnterMpResultReq_CmdId_PlayerApplyEnterMpResultReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerApplyEnterMpResultReq_CmdId_PlayerApplyEnterMpResultReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerApplyEnterMpResultReq_CmdId_IsValid(int value);
const PlayerApplyEnterMpResultReq_CmdId PlayerApplyEnterMpResultReq_CmdId_CmdId_MIN = PlayerApplyEnterMpResultReq_CmdId_NONE;
const PlayerApplyEnterMpResultReq_CmdId PlayerApplyEnterMpResultReq_CmdId_CmdId_MAX = PlayerApplyEnterMpResultReq_CmdId_CMD_ID;
const int PlayerApplyEnterMpResultReq_CmdId_CmdId_ARRAYSIZE = PlayerApplyEnterMpResultReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerApplyEnterMpResultReq_CmdId_descriptor();
inline const ::std::string& PlayerApplyEnterMpResultReq_CmdId_Name(PlayerApplyEnterMpResultReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerApplyEnterMpResultReq_CmdId_descriptor(), value);
}
inline bool PlayerApplyEnterMpResultReq_CmdId_Parse(
    const ::std::string& name, PlayerApplyEnterMpResultReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerApplyEnterMpResultReq_CmdId>(
    PlayerApplyEnterMpResultReq_CmdId_descriptor(), name, value);
}
enum PlayerApplyEnterMpResultRsp_CmdId {
  PlayerApplyEnterMpResultRsp_CmdId_NONE = 0,
  PlayerApplyEnterMpResultRsp_CmdId_CMD_ID = 1806,
  PlayerApplyEnterMpResultRsp_CmdId_ENET_CHANNEL_ID = 0,
  PlayerApplyEnterMpResultRsp_CmdId_ENET_IS_RELIABLE = 1,
  PlayerApplyEnterMpResultRsp_CmdId_PlayerApplyEnterMpResultRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerApplyEnterMpResultRsp_CmdId_PlayerApplyEnterMpResultRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerApplyEnterMpResultRsp_CmdId_IsValid(int value);
const PlayerApplyEnterMpResultRsp_CmdId PlayerApplyEnterMpResultRsp_CmdId_CmdId_MIN = PlayerApplyEnterMpResultRsp_CmdId_NONE;
const PlayerApplyEnterMpResultRsp_CmdId PlayerApplyEnterMpResultRsp_CmdId_CmdId_MAX = PlayerApplyEnterMpResultRsp_CmdId_CMD_ID;
const int PlayerApplyEnterMpResultRsp_CmdId_CmdId_ARRAYSIZE = PlayerApplyEnterMpResultRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerApplyEnterMpResultRsp_CmdId_descriptor();
inline const ::std::string& PlayerApplyEnterMpResultRsp_CmdId_Name(PlayerApplyEnterMpResultRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerApplyEnterMpResultRsp_CmdId_descriptor(), value);
}
inline bool PlayerApplyEnterMpResultRsp_CmdId_Parse(
    const ::std::string& name, PlayerApplyEnterMpResultRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerApplyEnterMpResultRsp_CmdId>(
    PlayerApplyEnterMpResultRsp_CmdId_descriptor(), name, value);
}
enum PlayerQuitFromMpNotify_CmdId {
  PlayerQuitFromMpNotify_CmdId_NONE = 0,
  PlayerQuitFromMpNotify_CmdId_CMD_ID = 1807,
  PlayerQuitFromMpNotify_CmdId_ENET_CHANNEL_ID = 0,
  PlayerQuitFromMpNotify_CmdId_ENET_IS_RELIABLE = 1,
  PlayerQuitFromMpNotify_CmdId_PlayerQuitFromMpNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerQuitFromMpNotify_CmdId_PlayerQuitFromMpNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerQuitFromMpNotify_CmdId_IsValid(int value);
const PlayerQuitFromMpNotify_CmdId PlayerQuitFromMpNotify_CmdId_CmdId_MIN = PlayerQuitFromMpNotify_CmdId_NONE;
const PlayerQuitFromMpNotify_CmdId PlayerQuitFromMpNotify_CmdId_CmdId_MAX = PlayerQuitFromMpNotify_CmdId_CMD_ID;
const int PlayerQuitFromMpNotify_CmdId_CmdId_ARRAYSIZE = PlayerQuitFromMpNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerQuitFromMpNotify_CmdId_descriptor();
inline const ::std::string& PlayerQuitFromMpNotify_CmdId_Name(PlayerQuitFromMpNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerQuitFromMpNotify_CmdId_descriptor(), value);
}
inline bool PlayerQuitFromMpNotify_CmdId_Parse(
    const ::std::string& name, PlayerQuitFromMpNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerQuitFromMpNotify_CmdId>(
    PlayerQuitFromMpNotify_CmdId_descriptor(), name, value);
}
enum PlayerQuitFromMpNotify_QuitReason {
  PlayerQuitFromMpNotify_QuitReason_INVALID = 0,
  PlayerQuitFromMpNotify_QuitReason_HOST_NO_OTHER_PLAYER = 1,
  PlayerQuitFromMpNotify_QuitReason_KICK_BY_HOST = 2,
  PlayerQuitFromMpNotify_QuitReason_BACK_TO_MY_WORLD = 3,
  PlayerQuitFromMpNotify_QuitReason_KICK_BY_HOST_LOGOUT = 4,
  PlayerQuitFromMpNotify_QuitReason_PlayerQuitFromMpNotify_QuitReason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerQuitFromMpNotify_QuitReason_PlayerQuitFromMpNotify_QuitReason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerQuitFromMpNotify_QuitReason_IsValid(int value);
const PlayerQuitFromMpNotify_QuitReason PlayerQuitFromMpNotify_QuitReason_QuitReason_MIN = PlayerQuitFromMpNotify_QuitReason_INVALID;
const PlayerQuitFromMpNotify_QuitReason PlayerQuitFromMpNotify_QuitReason_QuitReason_MAX = PlayerQuitFromMpNotify_QuitReason_KICK_BY_HOST_LOGOUT;
const int PlayerQuitFromMpNotify_QuitReason_QuitReason_ARRAYSIZE = PlayerQuitFromMpNotify_QuitReason_QuitReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerQuitFromMpNotify_QuitReason_descriptor();
inline const ::std::string& PlayerQuitFromMpNotify_QuitReason_Name(PlayerQuitFromMpNotify_QuitReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerQuitFromMpNotify_QuitReason_descriptor(), value);
}
inline bool PlayerQuitFromMpNotify_QuitReason_Parse(
    const ::std::string& name, PlayerQuitFromMpNotify_QuitReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerQuitFromMpNotify_QuitReason>(
    PlayerQuitFromMpNotify_QuitReason_descriptor(), name, value);
}
enum PlayerPreEnterMpNotify_CmdId {
  PlayerPreEnterMpNotify_CmdId_NONE = 0,
  PlayerPreEnterMpNotify_CmdId_CMD_ID = 1808,
  PlayerPreEnterMpNotify_CmdId_ENET_CHANNEL_ID = 0,
  PlayerPreEnterMpNotify_CmdId_ENET_IS_RELIABLE = 1,
  PlayerPreEnterMpNotify_CmdId_PlayerPreEnterMpNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerPreEnterMpNotify_CmdId_PlayerPreEnterMpNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerPreEnterMpNotify_CmdId_IsValid(int value);
const PlayerPreEnterMpNotify_CmdId PlayerPreEnterMpNotify_CmdId_CmdId_MIN = PlayerPreEnterMpNotify_CmdId_NONE;
const PlayerPreEnterMpNotify_CmdId PlayerPreEnterMpNotify_CmdId_CmdId_MAX = PlayerPreEnterMpNotify_CmdId_CMD_ID;
const int PlayerPreEnterMpNotify_CmdId_CmdId_ARRAYSIZE = PlayerPreEnterMpNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerPreEnterMpNotify_CmdId_descriptor();
inline const ::std::string& PlayerPreEnterMpNotify_CmdId_Name(PlayerPreEnterMpNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerPreEnterMpNotify_CmdId_descriptor(), value);
}
inline bool PlayerPreEnterMpNotify_CmdId_Parse(
    const ::std::string& name, PlayerPreEnterMpNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerPreEnterMpNotify_CmdId>(
    PlayerPreEnterMpNotify_CmdId_descriptor(), name, value);
}
enum PlayerPreEnterMpNotify_State {
  PlayerPreEnterMpNotify_State_INVALID = 0,
  PlayerPreEnterMpNotify_State_START = 1,
  PlayerPreEnterMpNotify_State_TIMEOUT = 2,
  PlayerPreEnterMpNotify_State_PlayerPreEnterMpNotify_State_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerPreEnterMpNotify_State_PlayerPreEnterMpNotify_State_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerPreEnterMpNotify_State_IsValid(int value);
const PlayerPreEnterMpNotify_State PlayerPreEnterMpNotify_State_State_MIN = PlayerPreEnterMpNotify_State_INVALID;
const PlayerPreEnterMpNotify_State PlayerPreEnterMpNotify_State_State_MAX = PlayerPreEnterMpNotify_State_TIMEOUT;
const int PlayerPreEnterMpNotify_State_State_ARRAYSIZE = PlayerPreEnterMpNotify_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerPreEnterMpNotify_State_descriptor();
inline const ::std::string& PlayerPreEnterMpNotify_State_Name(PlayerPreEnterMpNotify_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerPreEnterMpNotify_State_descriptor(), value);
}
inline bool PlayerPreEnterMpNotify_State_Parse(
    const ::std::string& name, PlayerPreEnterMpNotify_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerPreEnterMpNotify_State>(
    PlayerPreEnterMpNotify_State_descriptor(), name, value);
}
enum GetPlayerMpModeAvailabilityReq_CmdId {
  GetPlayerMpModeAvailabilityReq_CmdId_NONE = 0,
  GetPlayerMpModeAvailabilityReq_CmdId_CMD_ID = 1809,
  GetPlayerMpModeAvailabilityReq_CmdId_ENET_CHANNEL_ID = 0,
  GetPlayerMpModeAvailabilityReq_CmdId_ENET_IS_RELIABLE = 1,
  GetPlayerMpModeAvailabilityReq_CmdId_IS_ALLOW_CLIENT = 1,
  GetPlayerMpModeAvailabilityReq_CmdId_GetPlayerMpModeAvailabilityReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GetPlayerMpModeAvailabilityReq_CmdId_GetPlayerMpModeAvailabilityReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GetPlayerMpModeAvailabilityReq_CmdId_IsValid(int value);
const GetPlayerMpModeAvailabilityReq_CmdId GetPlayerMpModeAvailabilityReq_CmdId_CmdId_MIN = GetPlayerMpModeAvailabilityReq_CmdId_NONE;
const GetPlayerMpModeAvailabilityReq_CmdId GetPlayerMpModeAvailabilityReq_CmdId_CmdId_MAX = GetPlayerMpModeAvailabilityReq_CmdId_CMD_ID;
const int GetPlayerMpModeAvailabilityReq_CmdId_CmdId_ARRAYSIZE = GetPlayerMpModeAvailabilityReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetPlayerMpModeAvailabilityReq_CmdId_descriptor();
inline const ::std::string& GetPlayerMpModeAvailabilityReq_CmdId_Name(GetPlayerMpModeAvailabilityReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetPlayerMpModeAvailabilityReq_CmdId_descriptor(), value);
}
inline bool GetPlayerMpModeAvailabilityReq_CmdId_Parse(
    const ::std::string& name, GetPlayerMpModeAvailabilityReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetPlayerMpModeAvailabilityReq_CmdId>(
    GetPlayerMpModeAvailabilityReq_CmdId_descriptor(), name, value);
}
enum GetPlayerMpModeAvailabilityRsp_CmdId {
  GetPlayerMpModeAvailabilityRsp_CmdId_NONE = 0,
  GetPlayerMpModeAvailabilityRsp_CmdId_CMD_ID = 1810,
  GetPlayerMpModeAvailabilityRsp_CmdId_ENET_CHANNEL_ID = 0,
  GetPlayerMpModeAvailabilityRsp_CmdId_ENET_IS_RELIABLE = 1,
  GetPlayerMpModeAvailabilityRsp_CmdId_GetPlayerMpModeAvailabilityRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GetPlayerMpModeAvailabilityRsp_CmdId_GetPlayerMpModeAvailabilityRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GetPlayerMpModeAvailabilityRsp_CmdId_IsValid(int value);
const GetPlayerMpModeAvailabilityRsp_CmdId GetPlayerMpModeAvailabilityRsp_CmdId_CmdId_MIN = GetPlayerMpModeAvailabilityRsp_CmdId_NONE;
const GetPlayerMpModeAvailabilityRsp_CmdId GetPlayerMpModeAvailabilityRsp_CmdId_CmdId_MAX = GetPlayerMpModeAvailabilityRsp_CmdId_CMD_ID;
const int GetPlayerMpModeAvailabilityRsp_CmdId_CmdId_ARRAYSIZE = GetPlayerMpModeAvailabilityRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetPlayerMpModeAvailabilityRsp_CmdId_descriptor();
inline const ::std::string& GetPlayerMpModeAvailabilityRsp_CmdId_Name(GetPlayerMpModeAvailabilityRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetPlayerMpModeAvailabilityRsp_CmdId_descriptor(), value);
}
inline bool GetPlayerMpModeAvailabilityRsp_CmdId_Parse(
    const ::std::string& name, GetPlayerMpModeAvailabilityRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetPlayerMpModeAvailabilityRsp_CmdId>(
    GetPlayerMpModeAvailabilityRsp_CmdId_descriptor(), name, value);
}
// ===================================================================

class PlayerApplyEnterMpNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PlayerApplyEnterMpNotify) */ {
 public:
  PlayerApplyEnterMpNotify();
  virtual ~PlayerApplyEnterMpNotify();

  PlayerApplyEnterMpNotify(const PlayerApplyEnterMpNotify& from);

  inline PlayerApplyEnterMpNotify& operator=(const PlayerApplyEnterMpNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerApplyEnterMpNotify(PlayerApplyEnterMpNotify&& from) noexcept
    : PlayerApplyEnterMpNotify() {
    *this = ::std::move(from);
  }

  inline PlayerApplyEnterMpNotify& operator=(PlayerApplyEnterMpNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerApplyEnterMpNotify& default_instance();

  static inline const PlayerApplyEnterMpNotify* internal_default_instance() {
    return reinterpret_cast<const PlayerApplyEnterMpNotify*>(
               &_PlayerApplyEnterMpNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PlayerApplyEnterMpNotify* other);
  friend void swap(PlayerApplyEnterMpNotify& a, PlayerApplyEnterMpNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerApplyEnterMpNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerApplyEnterMpNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerApplyEnterMpNotify& from);
  void MergeFrom(const PlayerApplyEnterMpNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerApplyEnterMpNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PlayerApplyEnterMpNotify_CmdId CmdId;
  static const CmdId NONE =
    PlayerApplyEnterMpNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    PlayerApplyEnterMpNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    PlayerApplyEnterMpNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    PlayerApplyEnterMpNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return PlayerApplyEnterMpNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    PlayerApplyEnterMpNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    PlayerApplyEnterMpNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    PlayerApplyEnterMpNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return PlayerApplyEnterMpNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return PlayerApplyEnterMpNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return PlayerApplyEnterMpNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .proto.OnlinePlayerInfo src_player_info = 1;
  bool has_src_player_info() const;
  void clear_src_player_info();
  static const int kSrcPlayerInfoFieldNumber = 1;
  const ::proto::OnlinePlayerInfo& src_player_info() const;
  ::proto::OnlinePlayerInfo* mutable_src_player_info();
  ::proto::OnlinePlayerInfo* release_src_player_info();
  void set_allocated_src_player_info(::proto::OnlinePlayerInfo* src_player_info);

  // @@protoc_insertion_point(class_scope:proto.PlayerApplyEnterMpNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::OnlinePlayerInfo* src_player_info_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerApplyEnterMpReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PlayerApplyEnterMpReq) */ {
 public:
  PlayerApplyEnterMpReq();
  virtual ~PlayerApplyEnterMpReq();

  PlayerApplyEnterMpReq(const PlayerApplyEnterMpReq& from);

  inline PlayerApplyEnterMpReq& operator=(const PlayerApplyEnterMpReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerApplyEnterMpReq(PlayerApplyEnterMpReq&& from) noexcept
    : PlayerApplyEnterMpReq() {
    *this = ::std::move(from);
  }

  inline PlayerApplyEnterMpReq& operator=(PlayerApplyEnterMpReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerApplyEnterMpReq& default_instance();

  static inline const PlayerApplyEnterMpReq* internal_default_instance() {
    return reinterpret_cast<const PlayerApplyEnterMpReq*>(
               &_PlayerApplyEnterMpReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PlayerApplyEnterMpReq* other);
  friend void swap(PlayerApplyEnterMpReq& a, PlayerApplyEnterMpReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerApplyEnterMpReq* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerApplyEnterMpReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerApplyEnterMpReq& from);
  void MergeFrom(const PlayerApplyEnterMpReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerApplyEnterMpReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PlayerApplyEnterMpReq_CmdId CmdId;
  static const CmdId NONE =
    PlayerApplyEnterMpReq_CmdId_NONE;
  static const CmdId CMD_ID =
    PlayerApplyEnterMpReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    PlayerApplyEnterMpReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    PlayerApplyEnterMpReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    PlayerApplyEnterMpReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return PlayerApplyEnterMpReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    PlayerApplyEnterMpReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    PlayerApplyEnterMpReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    PlayerApplyEnterMpReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return PlayerApplyEnterMpReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return PlayerApplyEnterMpReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return PlayerApplyEnterMpReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 target_uid = 1;
  void clear_target_uid();
  static const int kTargetUidFieldNumber = 1;
  ::google::protobuf::uint32 target_uid() const;
  void set_target_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.PlayerApplyEnterMpReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 target_uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerApplyEnterMpRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PlayerApplyEnterMpRsp) */ {
 public:
  PlayerApplyEnterMpRsp();
  virtual ~PlayerApplyEnterMpRsp();

  PlayerApplyEnterMpRsp(const PlayerApplyEnterMpRsp& from);

  inline PlayerApplyEnterMpRsp& operator=(const PlayerApplyEnterMpRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerApplyEnterMpRsp(PlayerApplyEnterMpRsp&& from) noexcept
    : PlayerApplyEnterMpRsp() {
    *this = ::std::move(from);
  }

  inline PlayerApplyEnterMpRsp& operator=(PlayerApplyEnterMpRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerApplyEnterMpRsp& default_instance();

  static inline const PlayerApplyEnterMpRsp* internal_default_instance() {
    return reinterpret_cast<const PlayerApplyEnterMpRsp*>(
               &_PlayerApplyEnterMpRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PlayerApplyEnterMpRsp* other);
  friend void swap(PlayerApplyEnterMpRsp& a, PlayerApplyEnterMpRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerApplyEnterMpRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerApplyEnterMpRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerApplyEnterMpRsp& from);
  void MergeFrom(const PlayerApplyEnterMpRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerApplyEnterMpRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PlayerApplyEnterMpRsp_CmdId CmdId;
  static const CmdId NONE =
    PlayerApplyEnterMpRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    PlayerApplyEnterMpRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    PlayerApplyEnterMpRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    PlayerApplyEnterMpRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return PlayerApplyEnterMpRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    PlayerApplyEnterMpRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    PlayerApplyEnterMpRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    PlayerApplyEnterMpRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return PlayerApplyEnterMpRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return PlayerApplyEnterMpRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return PlayerApplyEnterMpRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 target_uid = 2;
  void clear_target_uid();
  static const int kTargetUidFieldNumber = 2;
  ::google::protobuf::uint32 target_uid() const;
  void set_target_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.PlayerApplyEnterMpRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 target_uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerApplyEnterMpResultNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PlayerApplyEnterMpResultNotify) */ {
 public:
  PlayerApplyEnterMpResultNotify();
  virtual ~PlayerApplyEnterMpResultNotify();

  PlayerApplyEnterMpResultNotify(const PlayerApplyEnterMpResultNotify& from);

  inline PlayerApplyEnterMpResultNotify& operator=(const PlayerApplyEnterMpResultNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerApplyEnterMpResultNotify(PlayerApplyEnterMpResultNotify&& from) noexcept
    : PlayerApplyEnterMpResultNotify() {
    *this = ::std::move(from);
  }

  inline PlayerApplyEnterMpResultNotify& operator=(PlayerApplyEnterMpResultNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerApplyEnterMpResultNotify& default_instance();

  static inline const PlayerApplyEnterMpResultNotify* internal_default_instance() {
    return reinterpret_cast<const PlayerApplyEnterMpResultNotify*>(
               &_PlayerApplyEnterMpResultNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PlayerApplyEnterMpResultNotify* other);
  friend void swap(PlayerApplyEnterMpResultNotify& a, PlayerApplyEnterMpResultNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerApplyEnterMpResultNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerApplyEnterMpResultNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerApplyEnterMpResultNotify& from);
  void MergeFrom(const PlayerApplyEnterMpResultNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerApplyEnterMpResultNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PlayerApplyEnterMpResultNotify_CmdId CmdId;
  static const CmdId NONE =
    PlayerApplyEnterMpResultNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    PlayerApplyEnterMpResultNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    PlayerApplyEnterMpResultNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    PlayerApplyEnterMpResultNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return PlayerApplyEnterMpResultNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    PlayerApplyEnterMpResultNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    PlayerApplyEnterMpResultNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    PlayerApplyEnterMpResultNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return PlayerApplyEnterMpResultNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return PlayerApplyEnterMpResultNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return PlayerApplyEnterMpResultNotify_CmdId_Parse(name, value);
  }

  typedef PlayerApplyEnterMpResultNotify_Reason Reason;
  static const Reason PLAYER_JUDGE =
    PlayerApplyEnterMpResultNotify_Reason_PLAYER_JUDGE;
  static const Reason SCENE_CANNOT_ENTER =
    PlayerApplyEnterMpResultNotify_Reason_SCENE_CANNOT_ENTER;
  static const Reason PLAYER_CANNOT_ENTER_MP =
    PlayerApplyEnterMpResultNotify_Reason_PLAYER_CANNOT_ENTER_MP;
  static const Reason SYSTEM_JUDGE =
    PlayerApplyEnterMpResultNotify_Reason_SYSTEM_JUDGE;
  static const Reason ALLOW_ENTER_PLAYER_FULL =
    PlayerApplyEnterMpResultNotify_Reason_ALLOW_ENTER_PLAYER_FULL;
  static const Reason WORLD_LEVEL_LOWER_THAN_HOST =
    PlayerApplyEnterMpResultNotify_Reason_WORLD_LEVEL_LOWER_THAN_HOST;
  static inline bool Reason_IsValid(int value) {
    return PlayerApplyEnterMpResultNotify_Reason_IsValid(value);
  }
  static const Reason Reason_MIN =
    PlayerApplyEnterMpResultNotify_Reason_Reason_MIN;
  static const Reason Reason_MAX =
    PlayerApplyEnterMpResultNotify_Reason_Reason_MAX;
  static const int Reason_ARRAYSIZE =
    PlayerApplyEnterMpResultNotify_Reason_Reason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Reason_descriptor() {
    return PlayerApplyEnterMpResultNotify_Reason_descriptor();
  }
  static inline const ::std::string& Reason_Name(Reason value) {
    return PlayerApplyEnterMpResultNotify_Reason_Name(value);
  }
  static inline bool Reason_Parse(const ::std::string& name,
      Reason* value) {
    return PlayerApplyEnterMpResultNotify_Reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 target_uid = 1;
  void clear_target_uid();
  static const int kTargetUidFieldNumber = 1;
  ::google::protobuf::uint32 target_uid() const;
  void set_target_uid(::google::protobuf::uint32 value);

  // bool is_agreed = 2;
  void clear_is_agreed();
  static const int kIsAgreedFieldNumber = 2;
  bool is_agreed() const;
  void set_is_agreed(bool value);

  // .proto.PlayerApplyEnterMpResultNotify.Reason reason = 3;
  void clear_reason();
  static const int kReasonFieldNumber = 3;
  ::proto::PlayerApplyEnterMpResultNotify_Reason reason() const;
  void set_reason(::proto::PlayerApplyEnterMpResultNotify_Reason value);

  // @@protoc_insertion_point(class_scope:proto.PlayerApplyEnterMpResultNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 target_uid_;
  bool is_agreed_;
  int reason_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerApplyEnterMpResultReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PlayerApplyEnterMpResultReq) */ {
 public:
  PlayerApplyEnterMpResultReq();
  virtual ~PlayerApplyEnterMpResultReq();

  PlayerApplyEnterMpResultReq(const PlayerApplyEnterMpResultReq& from);

  inline PlayerApplyEnterMpResultReq& operator=(const PlayerApplyEnterMpResultReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerApplyEnterMpResultReq(PlayerApplyEnterMpResultReq&& from) noexcept
    : PlayerApplyEnterMpResultReq() {
    *this = ::std::move(from);
  }

  inline PlayerApplyEnterMpResultReq& operator=(PlayerApplyEnterMpResultReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerApplyEnterMpResultReq& default_instance();

  static inline const PlayerApplyEnterMpResultReq* internal_default_instance() {
    return reinterpret_cast<const PlayerApplyEnterMpResultReq*>(
               &_PlayerApplyEnterMpResultReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PlayerApplyEnterMpResultReq* other);
  friend void swap(PlayerApplyEnterMpResultReq& a, PlayerApplyEnterMpResultReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerApplyEnterMpResultReq* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerApplyEnterMpResultReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerApplyEnterMpResultReq& from);
  void MergeFrom(const PlayerApplyEnterMpResultReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerApplyEnterMpResultReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PlayerApplyEnterMpResultReq_CmdId CmdId;
  static const CmdId NONE =
    PlayerApplyEnterMpResultReq_CmdId_NONE;
  static const CmdId CMD_ID =
    PlayerApplyEnterMpResultReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    PlayerApplyEnterMpResultReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    PlayerApplyEnterMpResultReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    PlayerApplyEnterMpResultReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return PlayerApplyEnterMpResultReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    PlayerApplyEnterMpResultReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    PlayerApplyEnterMpResultReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    PlayerApplyEnterMpResultReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return PlayerApplyEnterMpResultReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return PlayerApplyEnterMpResultReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return PlayerApplyEnterMpResultReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 apply_uid = 1;
  void clear_apply_uid();
  static const int kApplyUidFieldNumber = 1;
  ::google::protobuf::uint32 apply_uid() const;
  void set_apply_uid(::google::protobuf::uint32 value);

  // bool is_agreed = 2;
  void clear_is_agreed();
  static const int kIsAgreedFieldNumber = 2;
  bool is_agreed() const;
  void set_is_agreed(bool value);

  // @@protoc_insertion_point(class_scope:proto.PlayerApplyEnterMpResultReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 apply_uid_;
  bool is_agreed_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerApplyEnterMpResultRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PlayerApplyEnterMpResultRsp) */ {
 public:
  PlayerApplyEnterMpResultRsp();
  virtual ~PlayerApplyEnterMpResultRsp();

  PlayerApplyEnterMpResultRsp(const PlayerApplyEnterMpResultRsp& from);

  inline PlayerApplyEnterMpResultRsp& operator=(const PlayerApplyEnterMpResultRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerApplyEnterMpResultRsp(PlayerApplyEnterMpResultRsp&& from) noexcept
    : PlayerApplyEnterMpResultRsp() {
    *this = ::std::move(from);
  }

  inline PlayerApplyEnterMpResultRsp& operator=(PlayerApplyEnterMpResultRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerApplyEnterMpResultRsp& default_instance();

  static inline const PlayerApplyEnterMpResultRsp* internal_default_instance() {
    return reinterpret_cast<const PlayerApplyEnterMpResultRsp*>(
               &_PlayerApplyEnterMpResultRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(PlayerApplyEnterMpResultRsp* other);
  friend void swap(PlayerApplyEnterMpResultRsp& a, PlayerApplyEnterMpResultRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerApplyEnterMpResultRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerApplyEnterMpResultRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerApplyEnterMpResultRsp& from);
  void MergeFrom(const PlayerApplyEnterMpResultRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerApplyEnterMpResultRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PlayerApplyEnterMpResultRsp_CmdId CmdId;
  static const CmdId NONE =
    PlayerApplyEnterMpResultRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    PlayerApplyEnterMpResultRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    PlayerApplyEnterMpResultRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    PlayerApplyEnterMpResultRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return PlayerApplyEnterMpResultRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    PlayerApplyEnterMpResultRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    PlayerApplyEnterMpResultRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    PlayerApplyEnterMpResultRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return PlayerApplyEnterMpResultRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return PlayerApplyEnterMpResultRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return PlayerApplyEnterMpResultRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 apply_uid = 2;
  void clear_apply_uid();
  static const int kApplyUidFieldNumber = 2;
  ::google::protobuf::uint32 apply_uid() const;
  void set_apply_uid(::google::protobuf::uint32 value);

  // bool is_agreed = 3;
  void clear_is_agreed();
  static const int kIsAgreedFieldNumber = 3;
  bool is_agreed() const;
  void set_is_agreed(bool value);

  // @@protoc_insertion_point(class_scope:proto.PlayerApplyEnterMpResultRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 apply_uid_;
  bool is_agreed_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerQuitFromMpNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PlayerQuitFromMpNotify) */ {
 public:
  PlayerQuitFromMpNotify();
  virtual ~PlayerQuitFromMpNotify();

  PlayerQuitFromMpNotify(const PlayerQuitFromMpNotify& from);

  inline PlayerQuitFromMpNotify& operator=(const PlayerQuitFromMpNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerQuitFromMpNotify(PlayerQuitFromMpNotify&& from) noexcept
    : PlayerQuitFromMpNotify() {
    *this = ::std::move(from);
  }

  inline PlayerQuitFromMpNotify& operator=(PlayerQuitFromMpNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerQuitFromMpNotify& default_instance();

  static inline const PlayerQuitFromMpNotify* internal_default_instance() {
    return reinterpret_cast<const PlayerQuitFromMpNotify*>(
               &_PlayerQuitFromMpNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(PlayerQuitFromMpNotify* other);
  friend void swap(PlayerQuitFromMpNotify& a, PlayerQuitFromMpNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerQuitFromMpNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerQuitFromMpNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerQuitFromMpNotify& from);
  void MergeFrom(const PlayerQuitFromMpNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerQuitFromMpNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PlayerQuitFromMpNotify_CmdId CmdId;
  static const CmdId NONE =
    PlayerQuitFromMpNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    PlayerQuitFromMpNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    PlayerQuitFromMpNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    PlayerQuitFromMpNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return PlayerQuitFromMpNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    PlayerQuitFromMpNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    PlayerQuitFromMpNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    PlayerQuitFromMpNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return PlayerQuitFromMpNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return PlayerQuitFromMpNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return PlayerQuitFromMpNotify_CmdId_Parse(name, value);
  }

  typedef PlayerQuitFromMpNotify_QuitReason QuitReason;
  static const QuitReason INVALID =
    PlayerQuitFromMpNotify_QuitReason_INVALID;
  static const QuitReason HOST_NO_OTHER_PLAYER =
    PlayerQuitFromMpNotify_QuitReason_HOST_NO_OTHER_PLAYER;
  static const QuitReason KICK_BY_HOST =
    PlayerQuitFromMpNotify_QuitReason_KICK_BY_HOST;
  static const QuitReason BACK_TO_MY_WORLD =
    PlayerQuitFromMpNotify_QuitReason_BACK_TO_MY_WORLD;
  static const QuitReason KICK_BY_HOST_LOGOUT =
    PlayerQuitFromMpNotify_QuitReason_KICK_BY_HOST_LOGOUT;
  static inline bool QuitReason_IsValid(int value) {
    return PlayerQuitFromMpNotify_QuitReason_IsValid(value);
  }
  static const QuitReason QuitReason_MIN =
    PlayerQuitFromMpNotify_QuitReason_QuitReason_MIN;
  static const QuitReason QuitReason_MAX =
    PlayerQuitFromMpNotify_QuitReason_QuitReason_MAX;
  static const int QuitReason_ARRAYSIZE =
    PlayerQuitFromMpNotify_QuitReason_QuitReason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  QuitReason_descriptor() {
    return PlayerQuitFromMpNotify_QuitReason_descriptor();
  }
  static inline const ::std::string& QuitReason_Name(QuitReason value) {
    return PlayerQuitFromMpNotify_QuitReason_Name(value);
  }
  static inline bool QuitReason_Parse(const ::std::string& name,
      QuitReason* value) {
    return PlayerQuitFromMpNotify_QuitReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .proto.PlayerQuitFromMpNotify.QuitReason reason = 1;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  ::proto::PlayerQuitFromMpNotify_QuitReason reason() const;
  void set_reason(::proto::PlayerQuitFromMpNotify_QuitReason value);

  // @@protoc_insertion_point(class_scope:proto.PlayerQuitFromMpNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int reason_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerPreEnterMpNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PlayerPreEnterMpNotify) */ {
 public:
  PlayerPreEnterMpNotify();
  virtual ~PlayerPreEnterMpNotify();

  PlayerPreEnterMpNotify(const PlayerPreEnterMpNotify& from);

  inline PlayerPreEnterMpNotify& operator=(const PlayerPreEnterMpNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerPreEnterMpNotify(PlayerPreEnterMpNotify&& from) noexcept
    : PlayerPreEnterMpNotify() {
    *this = ::std::move(from);
  }

  inline PlayerPreEnterMpNotify& operator=(PlayerPreEnterMpNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerPreEnterMpNotify& default_instance();

  static inline const PlayerPreEnterMpNotify* internal_default_instance() {
    return reinterpret_cast<const PlayerPreEnterMpNotify*>(
               &_PlayerPreEnterMpNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(PlayerPreEnterMpNotify* other);
  friend void swap(PlayerPreEnterMpNotify& a, PlayerPreEnterMpNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerPreEnterMpNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerPreEnterMpNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerPreEnterMpNotify& from);
  void MergeFrom(const PlayerPreEnterMpNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerPreEnterMpNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PlayerPreEnterMpNotify_CmdId CmdId;
  static const CmdId NONE =
    PlayerPreEnterMpNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    PlayerPreEnterMpNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    PlayerPreEnterMpNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    PlayerPreEnterMpNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return PlayerPreEnterMpNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    PlayerPreEnterMpNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    PlayerPreEnterMpNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    PlayerPreEnterMpNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return PlayerPreEnterMpNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return PlayerPreEnterMpNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return PlayerPreEnterMpNotify_CmdId_Parse(name, value);
  }

  typedef PlayerPreEnterMpNotify_State State;
  static const State INVALID =
    PlayerPreEnterMpNotify_State_INVALID;
  static const State START =
    PlayerPreEnterMpNotify_State_START;
  static const State TIMEOUT =
    PlayerPreEnterMpNotify_State_TIMEOUT;
  static inline bool State_IsValid(int value) {
    return PlayerPreEnterMpNotify_State_IsValid(value);
  }
  static const State State_MIN =
    PlayerPreEnterMpNotify_State_State_MIN;
  static const State State_MAX =
    PlayerPreEnterMpNotify_State_State_MAX;
  static const int State_ARRAYSIZE =
    PlayerPreEnterMpNotify_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return PlayerPreEnterMpNotify_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return PlayerPreEnterMpNotify_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return PlayerPreEnterMpNotify_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string nickname = 3;
  void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // uint32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // .proto.PlayerPreEnterMpNotify.State state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::proto::PlayerPreEnterMpNotify_State state() const;
  void set_state(::proto::PlayerPreEnterMpNotify_State value);

  // @@protoc_insertion_point(class_scope:proto.PlayerPreEnterMpNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::uint32 uid_;
  int state_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPlayerMpModeAvailabilityReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetPlayerMpModeAvailabilityReq) */ {
 public:
  GetPlayerMpModeAvailabilityReq();
  virtual ~GetPlayerMpModeAvailabilityReq();

  GetPlayerMpModeAvailabilityReq(const GetPlayerMpModeAvailabilityReq& from);

  inline GetPlayerMpModeAvailabilityReq& operator=(const GetPlayerMpModeAvailabilityReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPlayerMpModeAvailabilityReq(GetPlayerMpModeAvailabilityReq&& from) noexcept
    : GetPlayerMpModeAvailabilityReq() {
    *this = ::std::move(from);
  }

  inline GetPlayerMpModeAvailabilityReq& operator=(GetPlayerMpModeAvailabilityReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPlayerMpModeAvailabilityReq& default_instance();

  static inline const GetPlayerMpModeAvailabilityReq* internal_default_instance() {
    return reinterpret_cast<const GetPlayerMpModeAvailabilityReq*>(
               &_GetPlayerMpModeAvailabilityReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(GetPlayerMpModeAvailabilityReq* other);
  friend void swap(GetPlayerMpModeAvailabilityReq& a, GetPlayerMpModeAvailabilityReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPlayerMpModeAvailabilityReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPlayerMpModeAvailabilityReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPlayerMpModeAvailabilityReq& from);
  void MergeFrom(const GetPlayerMpModeAvailabilityReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPlayerMpModeAvailabilityReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GetPlayerMpModeAvailabilityReq_CmdId CmdId;
  static const CmdId NONE =
    GetPlayerMpModeAvailabilityReq_CmdId_NONE;
  static const CmdId CMD_ID =
    GetPlayerMpModeAvailabilityReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    GetPlayerMpModeAvailabilityReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    GetPlayerMpModeAvailabilityReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    GetPlayerMpModeAvailabilityReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return GetPlayerMpModeAvailabilityReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    GetPlayerMpModeAvailabilityReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    GetPlayerMpModeAvailabilityReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    GetPlayerMpModeAvailabilityReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return GetPlayerMpModeAvailabilityReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return GetPlayerMpModeAvailabilityReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return GetPlayerMpModeAvailabilityReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.GetPlayerMpModeAvailabilityReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPlayerMpModeAvailabilityRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetPlayerMpModeAvailabilityRsp) */ {
 public:
  GetPlayerMpModeAvailabilityRsp();
  virtual ~GetPlayerMpModeAvailabilityRsp();

  GetPlayerMpModeAvailabilityRsp(const GetPlayerMpModeAvailabilityRsp& from);

  inline GetPlayerMpModeAvailabilityRsp& operator=(const GetPlayerMpModeAvailabilityRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPlayerMpModeAvailabilityRsp(GetPlayerMpModeAvailabilityRsp&& from) noexcept
    : GetPlayerMpModeAvailabilityRsp() {
    *this = ::std::move(from);
  }

  inline GetPlayerMpModeAvailabilityRsp& operator=(GetPlayerMpModeAvailabilityRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPlayerMpModeAvailabilityRsp& default_instance();

  static inline const GetPlayerMpModeAvailabilityRsp* internal_default_instance() {
    return reinterpret_cast<const GetPlayerMpModeAvailabilityRsp*>(
               &_GetPlayerMpModeAvailabilityRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(GetPlayerMpModeAvailabilityRsp* other);
  friend void swap(GetPlayerMpModeAvailabilityRsp& a, GetPlayerMpModeAvailabilityRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPlayerMpModeAvailabilityRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPlayerMpModeAvailabilityRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPlayerMpModeAvailabilityRsp& from);
  void MergeFrom(const GetPlayerMpModeAvailabilityRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPlayerMpModeAvailabilityRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GetPlayerMpModeAvailabilityRsp_CmdId CmdId;
  static const CmdId NONE =
    GetPlayerMpModeAvailabilityRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    GetPlayerMpModeAvailabilityRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    GetPlayerMpModeAvailabilityRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    GetPlayerMpModeAvailabilityRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return GetPlayerMpModeAvailabilityRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    GetPlayerMpModeAvailabilityRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    GetPlayerMpModeAvailabilityRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    GetPlayerMpModeAvailabilityRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return GetPlayerMpModeAvailabilityRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return GetPlayerMpModeAvailabilityRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return GetPlayerMpModeAvailabilityRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 param_list = 3;
  int param_list_size() const;
  void clear_param_list();
  static const int kParamListFieldNumber = 3;
  ::google::protobuf::uint32 param_list(int index) const;
  void set_param_list(int index, ::google::protobuf::uint32 value);
  void add_param_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      param_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_param_list();

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // int32 mp_ret = 2;
  void clear_mp_ret();
  static const int kMpRetFieldNumber = 2;
  ::google::protobuf::int32 mp_ret() const;
  void set_mp_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.GetPlayerMpModeAvailabilityRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > param_list_;
  mutable int _param_list_cached_byte_size_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::int32 mp_ret_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerApplyEnterMpNotify

// .proto.OnlinePlayerInfo src_player_info = 1;
inline bool PlayerApplyEnterMpNotify::has_src_player_info() const {
  return this != internal_default_instance() && src_player_info_ != NULL;
}
inline void PlayerApplyEnterMpNotify::clear_src_player_info() {
  if (GetArenaNoVirtual() == NULL && src_player_info_ != NULL) delete src_player_info_;
  src_player_info_ = NULL;
}
inline const ::proto::OnlinePlayerInfo& PlayerApplyEnterMpNotify::src_player_info() const {
  const ::proto::OnlinePlayerInfo* p = src_player_info_;
  // @@protoc_insertion_point(field_get:proto.PlayerApplyEnterMpNotify.src_player_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::OnlinePlayerInfo*>(
      &::proto::_OnlinePlayerInfo_default_instance_);
}
inline ::proto::OnlinePlayerInfo* PlayerApplyEnterMpNotify::mutable_src_player_info() {
  
  if (src_player_info_ == NULL) {
    src_player_info_ = new ::proto::OnlinePlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.PlayerApplyEnterMpNotify.src_player_info)
  return src_player_info_;
}
inline ::proto::OnlinePlayerInfo* PlayerApplyEnterMpNotify::release_src_player_info() {
  // @@protoc_insertion_point(field_release:proto.PlayerApplyEnterMpNotify.src_player_info)
  
  ::proto::OnlinePlayerInfo* temp = src_player_info_;
  src_player_info_ = NULL;
  return temp;
}
inline void PlayerApplyEnterMpNotify::set_allocated_src_player_info(::proto::OnlinePlayerInfo* src_player_info) {
  delete src_player_info_;
  src_player_info_ = src_player_info;
  if (src_player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.PlayerApplyEnterMpNotify.src_player_info)
}

// -------------------------------------------------------------------

// PlayerApplyEnterMpReq

// uint32 target_uid = 1;
inline void PlayerApplyEnterMpReq::clear_target_uid() {
  target_uid_ = 0u;
}
inline ::google::protobuf::uint32 PlayerApplyEnterMpReq::target_uid() const {
  // @@protoc_insertion_point(field_get:proto.PlayerApplyEnterMpReq.target_uid)
  return target_uid_;
}
inline void PlayerApplyEnterMpReq::set_target_uid(::google::protobuf::uint32 value) {
  
  target_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerApplyEnterMpReq.target_uid)
}

// -------------------------------------------------------------------

// PlayerApplyEnterMpRsp

// int32 retcode = 1;
inline void PlayerApplyEnterMpRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 PlayerApplyEnterMpRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.PlayerApplyEnterMpRsp.retcode)
  return retcode_;
}
inline void PlayerApplyEnterMpRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerApplyEnterMpRsp.retcode)
}

// uint32 target_uid = 2;
inline void PlayerApplyEnterMpRsp::clear_target_uid() {
  target_uid_ = 0u;
}
inline ::google::protobuf::uint32 PlayerApplyEnterMpRsp::target_uid() const {
  // @@protoc_insertion_point(field_get:proto.PlayerApplyEnterMpRsp.target_uid)
  return target_uid_;
}
inline void PlayerApplyEnterMpRsp::set_target_uid(::google::protobuf::uint32 value) {
  
  target_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerApplyEnterMpRsp.target_uid)
}

// -------------------------------------------------------------------

// PlayerApplyEnterMpResultNotify

// uint32 target_uid = 1;
inline void PlayerApplyEnterMpResultNotify::clear_target_uid() {
  target_uid_ = 0u;
}
inline ::google::protobuf::uint32 PlayerApplyEnterMpResultNotify::target_uid() const {
  // @@protoc_insertion_point(field_get:proto.PlayerApplyEnterMpResultNotify.target_uid)
  return target_uid_;
}
inline void PlayerApplyEnterMpResultNotify::set_target_uid(::google::protobuf::uint32 value) {
  
  target_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerApplyEnterMpResultNotify.target_uid)
}

// bool is_agreed = 2;
inline void PlayerApplyEnterMpResultNotify::clear_is_agreed() {
  is_agreed_ = false;
}
inline bool PlayerApplyEnterMpResultNotify::is_agreed() const {
  // @@protoc_insertion_point(field_get:proto.PlayerApplyEnterMpResultNotify.is_agreed)
  return is_agreed_;
}
inline void PlayerApplyEnterMpResultNotify::set_is_agreed(bool value) {
  
  is_agreed_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerApplyEnterMpResultNotify.is_agreed)
}

// .proto.PlayerApplyEnterMpResultNotify.Reason reason = 3;
inline void PlayerApplyEnterMpResultNotify::clear_reason() {
  reason_ = 0;
}
inline ::proto::PlayerApplyEnterMpResultNotify_Reason PlayerApplyEnterMpResultNotify::reason() const {
  // @@protoc_insertion_point(field_get:proto.PlayerApplyEnterMpResultNotify.reason)
  return static_cast< ::proto::PlayerApplyEnterMpResultNotify_Reason >(reason_);
}
inline void PlayerApplyEnterMpResultNotify::set_reason(::proto::PlayerApplyEnterMpResultNotify_Reason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerApplyEnterMpResultNotify.reason)
}

// -------------------------------------------------------------------

// PlayerApplyEnterMpResultReq

// uint32 apply_uid = 1;
inline void PlayerApplyEnterMpResultReq::clear_apply_uid() {
  apply_uid_ = 0u;
}
inline ::google::protobuf::uint32 PlayerApplyEnterMpResultReq::apply_uid() const {
  // @@protoc_insertion_point(field_get:proto.PlayerApplyEnterMpResultReq.apply_uid)
  return apply_uid_;
}
inline void PlayerApplyEnterMpResultReq::set_apply_uid(::google::protobuf::uint32 value) {
  
  apply_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerApplyEnterMpResultReq.apply_uid)
}

// bool is_agreed = 2;
inline void PlayerApplyEnterMpResultReq::clear_is_agreed() {
  is_agreed_ = false;
}
inline bool PlayerApplyEnterMpResultReq::is_agreed() const {
  // @@protoc_insertion_point(field_get:proto.PlayerApplyEnterMpResultReq.is_agreed)
  return is_agreed_;
}
inline void PlayerApplyEnterMpResultReq::set_is_agreed(bool value) {
  
  is_agreed_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerApplyEnterMpResultReq.is_agreed)
}

// -------------------------------------------------------------------

// PlayerApplyEnterMpResultRsp

// int32 retcode = 1;
inline void PlayerApplyEnterMpResultRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 PlayerApplyEnterMpResultRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.PlayerApplyEnterMpResultRsp.retcode)
  return retcode_;
}
inline void PlayerApplyEnterMpResultRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerApplyEnterMpResultRsp.retcode)
}

// uint32 apply_uid = 2;
inline void PlayerApplyEnterMpResultRsp::clear_apply_uid() {
  apply_uid_ = 0u;
}
inline ::google::protobuf::uint32 PlayerApplyEnterMpResultRsp::apply_uid() const {
  // @@protoc_insertion_point(field_get:proto.PlayerApplyEnterMpResultRsp.apply_uid)
  return apply_uid_;
}
inline void PlayerApplyEnterMpResultRsp::set_apply_uid(::google::protobuf::uint32 value) {
  
  apply_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerApplyEnterMpResultRsp.apply_uid)
}

// bool is_agreed = 3;
inline void PlayerApplyEnterMpResultRsp::clear_is_agreed() {
  is_agreed_ = false;
}
inline bool PlayerApplyEnterMpResultRsp::is_agreed() const {
  // @@protoc_insertion_point(field_get:proto.PlayerApplyEnterMpResultRsp.is_agreed)
  return is_agreed_;
}
inline void PlayerApplyEnterMpResultRsp::set_is_agreed(bool value) {
  
  is_agreed_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerApplyEnterMpResultRsp.is_agreed)
}

// -------------------------------------------------------------------

// PlayerQuitFromMpNotify

// .proto.PlayerQuitFromMpNotify.QuitReason reason = 1;
inline void PlayerQuitFromMpNotify::clear_reason() {
  reason_ = 0;
}
inline ::proto::PlayerQuitFromMpNotify_QuitReason PlayerQuitFromMpNotify::reason() const {
  // @@protoc_insertion_point(field_get:proto.PlayerQuitFromMpNotify.reason)
  return static_cast< ::proto::PlayerQuitFromMpNotify_QuitReason >(reason_);
}
inline void PlayerQuitFromMpNotify::set_reason(::proto::PlayerQuitFromMpNotify_QuitReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerQuitFromMpNotify.reason)
}

// -------------------------------------------------------------------

// PlayerPreEnterMpNotify

// uint32 uid = 1;
inline void PlayerPreEnterMpNotify::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 PlayerPreEnterMpNotify::uid() const {
  // @@protoc_insertion_point(field_get:proto.PlayerPreEnterMpNotify.uid)
  return uid_;
}
inline void PlayerPreEnterMpNotify::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerPreEnterMpNotify.uid)
}

// .proto.PlayerPreEnterMpNotify.State state = 2;
inline void PlayerPreEnterMpNotify::clear_state() {
  state_ = 0;
}
inline ::proto::PlayerPreEnterMpNotify_State PlayerPreEnterMpNotify::state() const {
  // @@protoc_insertion_point(field_get:proto.PlayerPreEnterMpNotify.state)
  return static_cast< ::proto::PlayerPreEnterMpNotify_State >(state_);
}
inline void PlayerPreEnterMpNotify::set_state(::proto::PlayerPreEnterMpNotify_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerPreEnterMpNotify.state)
}

// string nickname = 3;
inline void PlayerPreEnterMpNotify::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerPreEnterMpNotify::nickname() const {
  // @@protoc_insertion_point(field_get:proto.PlayerPreEnterMpNotify.nickname)
  return nickname_.GetNoArena();
}
inline void PlayerPreEnterMpNotify::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.PlayerPreEnterMpNotify.nickname)
}
#if LANG_CXX11
inline void PlayerPreEnterMpNotify::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.PlayerPreEnterMpNotify.nickname)
}
#endif
inline void PlayerPreEnterMpNotify::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PlayerPreEnterMpNotify.nickname)
}
inline void PlayerPreEnterMpNotify::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PlayerPreEnterMpNotify.nickname)
}
inline ::std::string* PlayerPreEnterMpNotify::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:proto.PlayerPreEnterMpNotify.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerPreEnterMpNotify::release_nickname() {
  // @@protoc_insertion_point(field_release:proto.PlayerPreEnterMpNotify.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerPreEnterMpNotify::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:proto.PlayerPreEnterMpNotify.nickname)
}

// -------------------------------------------------------------------

// GetPlayerMpModeAvailabilityReq

// -------------------------------------------------------------------

// GetPlayerMpModeAvailabilityRsp

// int32 retcode = 1;
inline void GetPlayerMpModeAvailabilityRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GetPlayerMpModeAvailabilityRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetPlayerMpModeAvailabilityRsp.retcode)
  return retcode_;
}
inline void GetPlayerMpModeAvailabilityRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpModeAvailabilityRsp.retcode)
}

// int32 mp_ret = 2;
inline void GetPlayerMpModeAvailabilityRsp::clear_mp_ret() {
  mp_ret_ = 0;
}
inline ::google::protobuf::int32 GetPlayerMpModeAvailabilityRsp::mp_ret() const {
  // @@protoc_insertion_point(field_get:proto.GetPlayerMpModeAvailabilityRsp.mp_ret)
  return mp_ret_;
}
inline void GetPlayerMpModeAvailabilityRsp::set_mp_ret(::google::protobuf::int32 value) {
  
  mp_ret_ = value;
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpModeAvailabilityRsp.mp_ret)
}

// repeated uint32 param_list = 3;
inline int GetPlayerMpModeAvailabilityRsp::param_list_size() const {
  return param_list_.size();
}
inline void GetPlayerMpModeAvailabilityRsp::clear_param_list() {
  param_list_.Clear();
}
inline ::google::protobuf::uint32 GetPlayerMpModeAvailabilityRsp::param_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetPlayerMpModeAvailabilityRsp.param_list)
  return param_list_.Get(index);
}
inline void GetPlayerMpModeAvailabilityRsp::set_param_list(int index, ::google::protobuf::uint32 value) {
  param_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GetPlayerMpModeAvailabilityRsp.param_list)
}
inline void GetPlayerMpModeAvailabilityRsp::add_param_list(::google::protobuf::uint32 value) {
  param_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GetPlayerMpModeAvailabilityRsp.param_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GetPlayerMpModeAvailabilityRsp::param_list() const {
  // @@protoc_insertion_point(field_list:proto.GetPlayerMpModeAvailabilityRsp.param_list)
  return param_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GetPlayerMpModeAvailabilityRsp::mutable_param_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetPlayerMpModeAvailabilityRsp.param_list)
  return &param_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::PlayerApplyEnterMpNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PlayerApplyEnterMpNotify_CmdId>() {
  return ::proto::PlayerApplyEnterMpNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::PlayerApplyEnterMpReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PlayerApplyEnterMpReq_CmdId>() {
  return ::proto::PlayerApplyEnterMpReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::PlayerApplyEnterMpRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PlayerApplyEnterMpRsp_CmdId>() {
  return ::proto::PlayerApplyEnterMpRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::PlayerApplyEnterMpResultNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PlayerApplyEnterMpResultNotify_CmdId>() {
  return ::proto::PlayerApplyEnterMpResultNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::PlayerApplyEnterMpResultNotify_Reason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PlayerApplyEnterMpResultNotify_Reason>() {
  return ::proto::PlayerApplyEnterMpResultNotify_Reason_descriptor();
}
template <> struct is_proto_enum< ::proto::PlayerApplyEnterMpResultReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PlayerApplyEnterMpResultReq_CmdId>() {
  return ::proto::PlayerApplyEnterMpResultReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::PlayerApplyEnterMpResultRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PlayerApplyEnterMpResultRsp_CmdId>() {
  return ::proto::PlayerApplyEnterMpResultRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::PlayerQuitFromMpNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PlayerQuitFromMpNotify_CmdId>() {
  return ::proto::PlayerQuitFromMpNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::PlayerQuitFromMpNotify_QuitReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PlayerQuitFromMpNotify_QuitReason>() {
  return ::proto::PlayerQuitFromMpNotify_QuitReason_descriptor();
}
template <> struct is_proto_enum< ::proto::PlayerPreEnterMpNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PlayerPreEnterMpNotify_CmdId>() {
  return ::proto::PlayerPreEnterMpNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::PlayerPreEnterMpNotify_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PlayerPreEnterMpNotify_State>() {
  return ::proto::PlayerPreEnterMpNotify_State_descriptor();
}
template <> struct is_proto_enum< ::proto::GetPlayerMpModeAvailabilityReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GetPlayerMpModeAvailabilityReq_CmdId>() {
  return ::proto::GetPlayerMpModeAvailabilityReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::GetPlayerMpModeAvailabilityRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GetPlayerMpModeAvailabilityRsp_CmdId>() {
  return ::proto::GetPlayerMpModeAvailabilityRsp_CmdId_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cmd_2fcmd_5fmp_2eproto__INCLUDED
