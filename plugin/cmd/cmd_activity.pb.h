// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_activity.proto

#ifndef PROTOBUF_cmd_2fcmd_5factivity_2eproto__INCLUDED
#define PROTOBUF_cmd_2fcmd_5factivity_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "define.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
class ActivityInfo;
class ActivityInfoDefaultTypeInternal;
extern ActivityInfoDefaultTypeInternal _ActivityInfo_default_instance_;
class ActivityInfoNotify;
class ActivityInfoNotifyDefaultTypeInternal;
extern ActivityInfoNotifyDefaultTypeInternal _ActivityInfoNotify_default_instance_;
class ActivityPlayOpenAnimNotify;
class ActivityPlayOpenAnimNotifyDefaultTypeInternal;
extern ActivityPlayOpenAnimNotifyDefaultTypeInternal _ActivityPlayOpenAnimNotify_default_instance_;
class ActivityScheduleInfo;
class ActivityScheduleInfoDefaultTypeInternal;
extern ActivityScheduleInfoDefaultTypeInternal _ActivityScheduleInfo_default_instance_;
class ActivityScheduleInfoNotify;
class ActivityScheduleInfoNotifyDefaultTypeInternal;
extern ActivityScheduleInfoNotifyDefaultTypeInternal _ActivityScheduleInfoNotify_default_instance_;
class AnnounceData;
class AnnounceDataDefaultTypeInternal;
extern AnnounceDataDefaultTypeInternal _AnnounceData_default_instance_;
class GetActivityInfoReq;
class GetActivityInfoReqDefaultTypeInternal;
extern GetActivityInfoReqDefaultTypeInternal _GetActivityInfoReq_default_instance_;
class GetActivityInfoRsp;
class GetActivityInfoRspDefaultTypeInternal;
extern GetActivityInfoRspDefaultTypeInternal _GetActivityInfoRsp_default_instance_;
class GetActivityScheduleReq;
class GetActivityScheduleReqDefaultTypeInternal;
extern GetActivityScheduleReqDefaultTypeInternal _GetActivityScheduleReq_default_instance_;
class GetActivityScheduleRsp;
class GetActivityScheduleRspDefaultTypeInternal;
extern GetActivityScheduleRspDefaultTypeInternal _GetActivityScheduleRsp_default_instance_;
class LoadActivityTerrainNotify;
class LoadActivityTerrainNotifyDefaultTypeInternal;
extern LoadActivityTerrainNotifyDefaultTypeInternal _LoadActivityTerrainNotify_default_instance_;
class SeaLampActivityDetailInfo;
class SeaLampActivityDetailInfoDefaultTypeInternal;
extern SeaLampActivityDetailInfoDefaultTypeInternal _SeaLampActivityDetailInfo_default_instance_;
class SeaLampContributeItemReq;
class SeaLampContributeItemReqDefaultTypeInternal;
extern SeaLampContributeItemReqDefaultTypeInternal _SeaLampContributeItemReq_default_instance_;
class SeaLampContributeItemRsp;
class SeaLampContributeItemRspDefaultTypeInternal;
extern SeaLampContributeItemRspDefaultTypeInternal _SeaLampContributeItemRsp_default_instance_;
class SeaLampFlyLampReq;
class SeaLampFlyLampReqDefaultTypeInternal;
extern SeaLampFlyLampReqDefaultTypeInternal _SeaLampFlyLampReq_default_instance_;
class SeaLampFlyLampRsp;
class SeaLampFlyLampRspDefaultTypeInternal;
extern SeaLampFlyLampRspDefaultTypeInternal _SeaLampFlyLampRsp_default_instance_;
class SeaLampTakeContributionRewardReq;
class SeaLampTakeContributionRewardReqDefaultTypeInternal;
extern SeaLampTakeContributionRewardReqDefaultTypeInternal _SeaLampTakeContributionRewardReq_default_instance_;
class SeaLampTakeContributionRewardRsp;
class SeaLampTakeContributionRewardRspDefaultTypeInternal;
extern SeaLampTakeContributionRewardRspDefaultTypeInternal _SeaLampTakeContributionRewardRsp_default_instance_;
class SeaLampTakePhaseRewardReq;
class SeaLampTakePhaseRewardReqDefaultTypeInternal;
extern SeaLampTakePhaseRewardReqDefaultTypeInternal _SeaLampTakePhaseRewardReq_default_instance_;
class SeaLampTakePhaseRewardRsp;
class SeaLampTakePhaseRewardRspDefaultTypeInternal;
extern SeaLampTakePhaseRewardRspDefaultTypeInternal _SeaLampTakePhaseRewardRsp_default_instance_;
class ServerAnnounceNotify;
class ServerAnnounceNotifyDefaultTypeInternal;
extern ServerAnnounceNotifyDefaultTypeInternal _ServerAnnounceNotify_default_instance_;
class ServerAnnounceRevokeNotify;
class ServerAnnounceRevokeNotifyDefaultTypeInternal;
extern ServerAnnounceRevokeNotifyDefaultTypeInternal _ServerAnnounceRevokeNotify_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_cmd_2fcmd_5factivity_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cmd_2fcmd_5factivity_2eproto

enum GetActivityScheduleReq_CmdId {
  GetActivityScheduleReq_CmdId_NONE = 0,
  GetActivityScheduleReq_CmdId_CMD_ID = 2001,
  GetActivityScheduleReq_CmdId_ENET_CHANNEL_ID = 0,
  GetActivityScheduleReq_CmdId_ENET_IS_RELIABLE = 1,
  GetActivityScheduleReq_CmdId_IS_ALLOW_CLIENT = 1,
  GetActivityScheduleReq_CmdId_GetActivityScheduleReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GetActivityScheduleReq_CmdId_GetActivityScheduleReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GetActivityScheduleReq_CmdId_IsValid(int value);
const GetActivityScheduleReq_CmdId GetActivityScheduleReq_CmdId_CmdId_MIN = GetActivityScheduleReq_CmdId_NONE;
const GetActivityScheduleReq_CmdId GetActivityScheduleReq_CmdId_CmdId_MAX = GetActivityScheduleReq_CmdId_CMD_ID;
const int GetActivityScheduleReq_CmdId_CmdId_ARRAYSIZE = GetActivityScheduleReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetActivityScheduleReq_CmdId_descriptor();
inline const ::std::string& GetActivityScheduleReq_CmdId_Name(GetActivityScheduleReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetActivityScheduleReq_CmdId_descriptor(), value);
}
inline bool GetActivityScheduleReq_CmdId_Parse(
    const ::std::string& name, GetActivityScheduleReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetActivityScheduleReq_CmdId>(
    GetActivityScheduleReq_CmdId_descriptor(), name, value);
}
enum GetActivityScheduleRsp_CmdId {
  GetActivityScheduleRsp_CmdId_NONE = 0,
  GetActivityScheduleRsp_CmdId_CMD_ID = 2002,
  GetActivityScheduleRsp_CmdId_ENET_CHANNEL_ID = 0,
  GetActivityScheduleRsp_CmdId_ENET_IS_RELIABLE = 1,
  GetActivityScheduleRsp_CmdId_GetActivityScheduleRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GetActivityScheduleRsp_CmdId_GetActivityScheduleRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GetActivityScheduleRsp_CmdId_IsValid(int value);
const GetActivityScheduleRsp_CmdId GetActivityScheduleRsp_CmdId_CmdId_MIN = GetActivityScheduleRsp_CmdId_NONE;
const GetActivityScheduleRsp_CmdId GetActivityScheduleRsp_CmdId_CmdId_MAX = GetActivityScheduleRsp_CmdId_CMD_ID;
const int GetActivityScheduleRsp_CmdId_CmdId_ARRAYSIZE = GetActivityScheduleRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetActivityScheduleRsp_CmdId_descriptor();
inline const ::std::string& GetActivityScheduleRsp_CmdId_Name(GetActivityScheduleRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetActivityScheduleRsp_CmdId_descriptor(), value);
}
inline bool GetActivityScheduleRsp_CmdId_Parse(
    const ::std::string& name, GetActivityScheduleRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetActivityScheduleRsp_CmdId>(
    GetActivityScheduleRsp_CmdId_descriptor(), name, value);
}
enum GetActivityInfoReq_CmdId {
  GetActivityInfoReq_CmdId_NONE = 0,
  GetActivityInfoReq_CmdId_CMD_ID = 2003,
  GetActivityInfoReq_CmdId_ENET_CHANNEL_ID = 0,
  GetActivityInfoReq_CmdId_ENET_IS_RELIABLE = 1,
  GetActivityInfoReq_CmdId_IS_ALLOW_CLIENT = 1,
  GetActivityInfoReq_CmdId_GetActivityInfoReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GetActivityInfoReq_CmdId_GetActivityInfoReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GetActivityInfoReq_CmdId_IsValid(int value);
const GetActivityInfoReq_CmdId GetActivityInfoReq_CmdId_CmdId_MIN = GetActivityInfoReq_CmdId_NONE;
const GetActivityInfoReq_CmdId GetActivityInfoReq_CmdId_CmdId_MAX = GetActivityInfoReq_CmdId_CMD_ID;
const int GetActivityInfoReq_CmdId_CmdId_ARRAYSIZE = GetActivityInfoReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetActivityInfoReq_CmdId_descriptor();
inline const ::std::string& GetActivityInfoReq_CmdId_Name(GetActivityInfoReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetActivityInfoReq_CmdId_descriptor(), value);
}
inline bool GetActivityInfoReq_CmdId_Parse(
    const ::std::string& name, GetActivityInfoReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetActivityInfoReq_CmdId>(
    GetActivityInfoReq_CmdId_descriptor(), name, value);
}
enum GetActivityInfoRsp_CmdId {
  GetActivityInfoRsp_CmdId_NONE = 0,
  GetActivityInfoRsp_CmdId_CMD_ID = 2004,
  GetActivityInfoRsp_CmdId_ENET_CHANNEL_ID = 0,
  GetActivityInfoRsp_CmdId_ENET_IS_RELIABLE = 1,
  GetActivityInfoRsp_CmdId_GetActivityInfoRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GetActivityInfoRsp_CmdId_GetActivityInfoRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GetActivityInfoRsp_CmdId_IsValid(int value);
const GetActivityInfoRsp_CmdId GetActivityInfoRsp_CmdId_CmdId_MIN = GetActivityInfoRsp_CmdId_NONE;
const GetActivityInfoRsp_CmdId GetActivityInfoRsp_CmdId_CmdId_MAX = GetActivityInfoRsp_CmdId_CMD_ID;
const int GetActivityInfoRsp_CmdId_CmdId_ARRAYSIZE = GetActivityInfoRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetActivityInfoRsp_CmdId_descriptor();
inline const ::std::string& GetActivityInfoRsp_CmdId_Name(GetActivityInfoRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetActivityInfoRsp_CmdId_descriptor(), value);
}
inline bool GetActivityInfoRsp_CmdId_Parse(
    const ::std::string& name, GetActivityInfoRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetActivityInfoRsp_CmdId>(
    GetActivityInfoRsp_CmdId_descriptor(), name, value);
}
enum ActivityPlayOpenAnimNotify_CmdId {
  ActivityPlayOpenAnimNotify_CmdId_NONE = 0,
  ActivityPlayOpenAnimNotify_CmdId_CMD_ID = 2005,
  ActivityPlayOpenAnimNotify_CmdId_ENET_CHANNEL_ID = 0,
  ActivityPlayOpenAnimNotify_CmdId_ENET_IS_RELIABLE = 1,
  ActivityPlayOpenAnimNotify_CmdId_IS_ALLOW_CLIENT = 1,
  ActivityPlayOpenAnimNotify_CmdId_ActivityPlayOpenAnimNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ActivityPlayOpenAnimNotify_CmdId_ActivityPlayOpenAnimNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ActivityPlayOpenAnimNotify_CmdId_IsValid(int value);
const ActivityPlayOpenAnimNotify_CmdId ActivityPlayOpenAnimNotify_CmdId_CmdId_MIN = ActivityPlayOpenAnimNotify_CmdId_NONE;
const ActivityPlayOpenAnimNotify_CmdId ActivityPlayOpenAnimNotify_CmdId_CmdId_MAX = ActivityPlayOpenAnimNotify_CmdId_CMD_ID;
const int ActivityPlayOpenAnimNotify_CmdId_CmdId_ARRAYSIZE = ActivityPlayOpenAnimNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActivityPlayOpenAnimNotify_CmdId_descriptor();
inline const ::std::string& ActivityPlayOpenAnimNotify_CmdId_Name(ActivityPlayOpenAnimNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActivityPlayOpenAnimNotify_CmdId_descriptor(), value);
}
inline bool ActivityPlayOpenAnimNotify_CmdId_Parse(
    const ::std::string& name, ActivityPlayOpenAnimNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActivityPlayOpenAnimNotify_CmdId>(
    ActivityPlayOpenAnimNotify_CmdId_descriptor(), name, value);
}
enum ActivityInfoNotify_CmdId {
  ActivityInfoNotify_CmdId_NONE = 0,
  ActivityInfoNotify_CmdId_CMD_ID = 2006,
  ActivityInfoNotify_CmdId_ENET_CHANNEL_ID = 0,
  ActivityInfoNotify_CmdId_ENET_IS_RELIABLE = 1,
  ActivityInfoNotify_CmdId_IS_ALLOW_CLIENT = 1,
  ActivityInfoNotify_CmdId_ActivityInfoNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ActivityInfoNotify_CmdId_ActivityInfoNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ActivityInfoNotify_CmdId_IsValid(int value);
const ActivityInfoNotify_CmdId ActivityInfoNotify_CmdId_CmdId_MIN = ActivityInfoNotify_CmdId_NONE;
const ActivityInfoNotify_CmdId ActivityInfoNotify_CmdId_CmdId_MAX = ActivityInfoNotify_CmdId_CMD_ID;
const int ActivityInfoNotify_CmdId_CmdId_ARRAYSIZE = ActivityInfoNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActivityInfoNotify_CmdId_descriptor();
inline const ::std::string& ActivityInfoNotify_CmdId_Name(ActivityInfoNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActivityInfoNotify_CmdId_descriptor(), value);
}
inline bool ActivityInfoNotify_CmdId_Parse(
    const ::std::string& name, ActivityInfoNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActivityInfoNotify_CmdId>(
    ActivityInfoNotify_CmdId_descriptor(), name, value);
}
enum ActivityScheduleInfoNotify_CmdId {
  ActivityScheduleInfoNotify_CmdId_NONE = 0,
  ActivityScheduleInfoNotify_CmdId_CMD_ID = 2007,
  ActivityScheduleInfoNotify_CmdId_ENET_CHANNEL_ID = 0,
  ActivityScheduleInfoNotify_CmdId_ENET_IS_RELIABLE = 1,
  ActivityScheduleInfoNotify_CmdId_IS_ALLOW_CLIENT = 1,
  ActivityScheduleInfoNotify_CmdId_ActivityScheduleInfoNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ActivityScheduleInfoNotify_CmdId_ActivityScheduleInfoNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ActivityScheduleInfoNotify_CmdId_IsValid(int value);
const ActivityScheduleInfoNotify_CmdId ActivityScheduleInfoNotify_CmdId_CmdId_MIN = ActivityScheduleInfoNotify_CmdId_NONE;
const ActivityScheduleInfoNotify_CmdId ActivityScheduleInfoNotify_CmdId_CmdId_MAX = ActivityScheduleInfoNotify_CmdId_CMD_ID;
const int ActivityScheduleInfoNotify_CmdId_CmdId_ARRAYSIZE = ActivityScheduleInfoNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActivityScheduleInfoNotify_CmdId_descriptor();
inline const ::std::string& ActivityScheduleInfoNotify_CmdId_Name(ActivityScheduleInfoNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActivityScheduleInfoNotify_CmdId_descriptor(), value);
}
inline bool ActivityScheduleInfoNotify_CmdId_Parse(
    const ::std::string& name, ActivityScheduleInfoNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActivityScheduleInfoNotify_CmdId>(
    ActivityScheduleInfoNotify_CmdId_descriptor(), name, value);
}
enum SeaLampFlyLampReq_CmdId {
  SeaLampFlyLampReq_CmdId_NONE = 0,
  SeaLampFlyLampReq_CmdId_CMD_ID = 2014,
  SeaLampFlyLampReq_CmdId_ENET_CHANNEL_ID = 0,
  SeaLampFlyLampReq_CmdId_ENET_IS_RELIABLE = 1,
  SeaLampFlyLampReq_CmdId_IS_ALLOW_CLIENT = 1,
  SeaLampFlyLampReq_CmdId_SeaLampFlyLampReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SeaLampFlyLampReq_CmdId_SeaLampFlyLampReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SeaLampFlyLampReq_CmdId_IsValid(int value);
const SeaLampFlyLampReq_CmdId SeaLampFlyLampReq_CmdId_CmdId_MIN = SeaLampFlyLampReq_CmdId_NONE;
const SeaLampFlyLampReq_CmdId SeaLampFlyLampReq_CmdId_CmdId_MAX = SeaLampFlyLampReq_CmdId_CMD_ID;
const int SeaLampFlyLampReq_CmdId_CmdId_ARRAYSIZE = SeaLampFlyLampReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* SeaLampFlyLampReq_CmdId_descriptor();
inline const ::std::string& SeaLampFlyLampReq_CmdId_Name(SeaLampFlyLampReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    SeaLampFlyLampReq_CmdId_descriptor(), value);
}
inline bool SeaLampFlyLampReq_CmdId_Parse(
    const ::std::string& name, SeaLampFlyLampReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SeaLampFlyLampReq_CmdId>(
    SeaLampFlyLampReq_CmdId_descriptor(), name, value);
}
enum SeaLampFlyLampRsp_CmdId {
  SeaLampFlyLampRsp_CmdId_NONE = 0,
  SeaLampFlyLampRsp_CmdId_CMD_ID = 2015,
  SeaLampFlyLampRsp_CmdId_ENET_CHANNEL_ID = 0,
  SeaLampFlyLampRsp_CmdId_ENET_IS_RELIABLE = 1,
  SeaLampFlyLampRsp_CmdId_SeaLampFlyLampRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SeaLampFlyLampRsp_CmdId_SeaLampFlyLampRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SeaLampFlyLampRsp_CmdId_IsValid(int value);
const SeaLampFlyLampRsp_CmdId SeaLampFlyLampRsp_CmdId_CmdId_MIN = SeaLampFlyLampRsp_CmdId_NONE;
const SeaLampFlyLampRsp_CmdId SeaLampFlyLampRsp_CmdId_CmdId_MAX = SeaLampFlyLampRsp_CmdId_CMD_ID;
const int SeaLampFlyLampRsp_CmdId_CmdId_ARRAYSIZE = SeaLampFlyLampRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* SeaLampFlyLampRsp_CmdId_descriptor();
inline const ::std::string& SeaLampFlyLampRsp_CmdId_Name(SeaLampFlyLampRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    SeaLampFlyLampRsp_CmdId_descriptor(), value);
}
inline bool SeaLampFlyLampRsp_CmdId_Parse(
    const ::std::string& name, SeaLampFlyLampRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SeaLampFlyLampRsp_CmdId>(
    SeaLampFlyLampRsp_CmdId_descriptor(), name, value);
}
enum SeaLampTakeContributionRewardReq_CmdId {
  SeaLampTakeContributionRewardReq_CmdId_NONE = 0,
  SeaLampTakeContributionRewardReq_CmdId_CMD_ID = 2016,
  SeaLampTakeContributionRewardReq_CmdId_ENET_CHANNEL_ID = 0,
  SeaLampTakeContributionRewardReq_CmdId_ENET_IS_RELIABLE = 1,
  SeaLampTakeContributionRewardReq_CmdId_IS_ALLOW_CLIENT = 1,
  SeaLampTakeContributionRewardReq_CmdId_SeaLampTakeContributionRewardReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SeaLampTakeContributionRewardReq_CmdId_SeaLampTakeContributionRewardReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SeaLampTakeContributionRewardReq_CmdId_IsValid(int value);
const SeaLampTakeContributionRewardReq_CmdId SeaLampTakeContributionRewardReq_CmdId_CmdId_MIN = SeaLampTakeContributionRewardReq_CmdId_NONE;
const SeaLampTakeContributionRewardReq_CmdId SeaLampTakeContributionRewardReq_CmdId_CmdId_MAX = SeaLampTakeContributionRewardReq_CmdId_CMD_ID;
const int SeaLampTakeContributionRewardReq_CmdId_CmdId_ARRAYSIZE = SeaLampTakeContributionRewardReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* SeaLampTakeContributionRewardReq_CmdId_descriptor();
inline const ::std::string& SeaLampTakeContributionRewardReq_CmdId_Name(SeaLampTakeContributionRewardReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    SeaLampTakeContributionRewardReq_CmdId_descriptor(), value);
}
inline bool SeaLampTakeContributionRewardReq_CmdId_Parse(
    const ::std::string& name, SeaLampTakeContributionRewardReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SeaLampTakeContributionRewardReq_CmdId>(
    SeaLampTakeContributionRewardReq_CmdId_descriptor(), name, value);
}
enum SeaLampTakeContributionRewardRsp_CmdId {
  SeaLampTakeContributionRewardRsp_CmdId_NONE = 0,
  SeaLampTakeContributionRewardRsp_CmdId_CMD_ID = 2017,
  SeaLampTakeContributionRewardRsp_CmdId_ENET_CHANNEL_ID = 0,
  SeaLampTakeContributionRewardRsp_CmdId_ENET_IS_RELIABLE = 1,
  SeaLampTakeContributionRewardRsp_CmdId_SeaLampTakeContributionRewardRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SeaLampTakeContributionRewardRsp_CmdId_SeaLampTakeContributionRewardRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SeaLampTakeContributionRewardRsp_CmdId_IsValid(int value);
const SeaLampTakeContributionRewardRsp_CmdId SeaLampTakeContributionRewardRsp_CmdId_CmdId_MIN = SeaLampTakeContributionRewardRsp_CmdId_NONE;
const SeaLampTakeContributionRewardRsp_CmdId SeaLampTakeContributionRewardRsp_CmdId_CmdId_MAX = SeaLampTakeContributionRewardRsp_CmdId_CMD_ID;
const int SeaLampTakeContributionRewardRsp_CmdId_CmdId_ARRAYSIZE = SeaLampTakeContributionRewardRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* SeaLampTakeContributionRewardRsp_CmdId_descriptor();
inline const ::std::string& SeaLampTakeContributionRewardRsp_CmdId_Name(SeaLampTakeContributionRewardRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    SeaLampTakeContributionRewardRsp_CmdId_descriptor(), value);
}
inline bool SeaLampTakeContributionRewardRsp_CmdId_Parse(
    const ::std::string& name, SeaLampTakeContributionRewardRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SeaLampTakeContributionRewardRsp_CmdId>(
    SeaLampTakeContributionRewardRsp_CmdId_descriptor(), name, value);
}
enum SeaLampTakePhaseRewardReq_CmdId {
  SeaLampTakePhaseRewardReq_CmdId_NONE = 0,
  SeaLampTakePhaseRewardReq_CmdId_CMD_ID = 2018,
  SeaLampTakePhaseRewardReq_CmdId_ENET_CHANNEL_ID = 0,
  SeaLampTakePhaseRewardReq_CmdId_ENET_IS_RELIABLE = 1,
  SeaLampTakePhaseRewardReq_CmdId_IS_ALLOW_CLIENT = 1,
  SeaLampTakePhaseRewardReq_CmdId_SeaLampTakePhaseRewardReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SeaLampTakePhaseRewardReq_CmdId_SeaLampTakePhaseRewardReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SeaLampTakePhaseRewardReq_CmdId_IsValid(int value);
const SeaLampTakePhaseRewardReq_CmdId SeaLampTakePhaseRewardReq_CmdId_CmdId_MIN = SeaLampTakePhaseRewardReq_CmdId_NONE;
const SeaLampTakePhaseRewardReq_CmdId SeaLampTakePhaseRewardReq_CmdId_CmdId_MAX = SeaLampTakePhaseRewardReq_CmdId_CMD_ID;
const int SeaLampTakePhaseRewardReq_CmdId_CmdId_ARRAYSIZE = SeaLampTakePhaseRewardReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* SeaLampTakePhaseRewardReq_CmdId_descriptor();
inline const ::std::string& SeaLampTakePhaseRewardReq_CmdId_Name(SeaLampTakePhaseRewardReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    SeaLampTakePhaseRewardReq_CmdId_descriptor(), value);
}
inline bool SeaLampTakePhaseRewardReq_CmdId_Parse(
    const ::std::string& name, SeaLampTakePhaseRewardReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SeaLampTakePhaseRewardReq_CmdId>(
    SeaLampTakePhaseRewardReq_CmdId_descriptor(), name, value);
}
enum SeaLampTakePhaseRewardRsp_CmdId {
  SeaLampTakePhaseRewardRsp_CmdId_NONE = 0,
  SeaLampTakePhaseRewardRsp_CmdId_CMD_ID = 2019,
  SeaLampTakePhaseRewardRsp_CmdId_ENET_CHANNEL_ID = 0,
  SeaLampTakePhaseRewardRsp_CmdId_ENET_IS_RELIABLE = 1,
  SeaLampTakePhaseRewardRsp_CmdId_SeaLampTakePhaseRewardRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SeaLampTakePhaseRewardRsp_CmdId_SeaLampTakePhaseRewardRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SeaLampTakePhaseRewardRsp_CmdId_IsValid(int value);
const SeaLampTakePhaseRewardRsp_CmdId SeaLampTakePhaseRewardRsp_CmdId_CmdId_MIN = SeaLampTakePhaseRewardRsp_CmdId_NONE;
const SeaLampTakePhaseRewardRsp_CmdId SeaLampTakePhaseRewardRsp_CmdId_CmdId_MAX = SeaLampTakePhaseRewardRsp_CmdId_CMD_ID;
const int SeaLampTakePhaseRewardRsp_CmdId_CmdId_ARRAYSIZE = SeaLampTakePhaseRewardRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* SeaLampTakePhaseRewardRsp_CmdId_descriptor();
inline const ::std::string& SeaLampTakePhaseRewardRsp_CmdId_Name(SeaLampTakePhaseRewardRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    SeaLampTakePhaseRewardRsp_CmdId_descriptor(), value);
}
inline bool SeaLampTakePhaseRewardRsp_CmdId_Parse(
    const ::std::string& name, SeaLampTakePhaseRewardRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SeaLampTakePhaseRewardRsp_CmdId>(
    SeaLampTakePhaseRewardRsp_CmdId_descriptor(), name, value);
}
enum SeaLampContributeItemReq_CmdId {
  SeaLampContributeItemReq_CmdId_NONE = 0,
  SeaLampContributeItemReq_CmdId_CMD_ID = 2020,
  SeaLampContributeItemReq_CmdId_ENET_CHANNEL_ID = 0,
  SeaLampContributeItemReq_CmdId_ENET_IS_RELIABLE = 1,
  SeaLampContributeItemReq_CmdId_IS_ALLOW_CLIENT = 1,
  SeaLampContributeItemReq_CmdId_SeaLampContributeItemReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SeaLampContributeItemReq_CmdId_SeaLampContributeItemReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SeaLampContributeItemReq_CmdId_IsValid(int value);
const SeaLampContributeItemReq_CmdId SeaLampContributeItemReq_CmdId_CmdId_MIN = SeaLampContributeItemReq_CmdId_NONE;
const SeaLampContributeItemReq_CmdId SeaLampContributeItemReq_CmdId_CmdId_MAX = SeaLampContributeItemReq_CmdId_CMD_ID;
const int SeaLampContributeItemReq_CmdId_CmdId_ARRAYSIZE = SeaLampContributeItemReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* SeaLampContributeItemReq_CmdId_descriptor();
inline const ::std::string& SeaLampContributeItemReq_CmdId_Name(SeaLampContributeItemReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    SeaLampContributeItemReq_CmdId_descriptor(), value);
}
inline bool SeaLampContributeItemReq_CmdId_Parse(
    const ::std::string& name, SeaLampContributeItemReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SeaLampContributeItemReq_CmdId>(
    SeaLampContributeItemReq_CmdId_descriptor(), name, value);
}
enum SeaLampContributeItemRsp_CmdId {
  SeaLampContributeItemRsp_CmdId_NONE = 0,
  SeaLampContributeItemRsp_CmdId_CMD_ID = 2021,
  SeaLampContributeItemRsp_CmdId_ENET_CHANNEL_ID = 0,
  SeaLampContributeItemRsp_CmdId_ENET_IS_RELIABLE = 1,
  SeaLampContributeItemRsp_CmdId_SeaLampContributeItemRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SeaLampContributeItemRsp_CmdId_SeaLampContributeItemRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SeaLampContributeItemRsp_CmdId_IsValid(int value);
const SeaLampContributeItemRsp_CmdId SeaLampContributeItemRsp_CmdId_CmdId_MIN = SeaLampContributeItemRsp_CmdId_NONE;
const SeaLampContributeItemRsp_CmdId SeaLampContributeItemRsp_CmdId_CmdId_MAX = SeaLampContributeItemRsp_CmdId_CMD_ID;
const int SeaLampContributeItemRsp_CmdId_CmdId_ARRAYSIZE = SeaLampContributeItemRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* SeaLampContributeItemRsp_CmdId_descriptor();
inline const ::std::string& SeaLampContributeItemRsp_CmdId_Name(SeaLampContributeItemRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    SeaLampContributeItemRsp_CmdId_descriptor(), value);
}
inline bool SeaLampContributeItemRsp_CmdId_Parse(
    const ::std::string& name, SeaLampContributeItemRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SeaLampContributeItemRsp_CmdId>(
    SeaLampContributeItemRsp_CmdId_descriptor(), name, value);
}
enum LoadActivityTerrainNotify_CmdId {
  LoadActivityTerrainNotify_CmdId_NONE = 0,
  LoadActivityTerrainNotify_CmdId_CMD_ID = 2024,
  LoadActivityTerrainNotify_CmdId_ENET_CHANNEL_ID = 0,
  LoadActivityTerrainNotify_CmdId_ENET_IS_RELIABLE = 1,
  LoadActivityTerrainNotify_CmdId_IS_ALLOW_CLIENT = 1,
  LoadActivityTerrainNotify_CmdId_LoadActivityTerrainNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LoadActivityTerrainNotify_CmdId_LoadActivityTerrainNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LoadActivityTerrainNotify_CmdId_IsValid(int value);
const LoadActivityTerrainNotify_CmdId LoadActivityTerrainNotify_CmdId_CmdId_MIN = LoadActivityTerrainNotify_CmdId_NONE;
const LoadActivityTerrainNotify_CmdId LoadActivityTerrainNotify_CmdId_CmdId_MAX = LoadActivityTerrainNotify_CmdId_CMD_ID;
const int LoadActivityTerrainNotify_CmdId_CmdId_ARRAYSIZE = LoadActivityTerrainNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoadActivityTerrainNotify_CmdId_descriptor();
inline const ::std::string& LoadActivityTerrainNotify_CmdId_Name(LoadActivityTerrainNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoadActivityTerrainNotify_CmdId_descriptor(), value);
}
inline bool LoadActivityTerrainNotify_CmdId_Parse(
    const ::std::string& name, LoadActivityTerrainNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoadActivityTerrainNotify_CmdId>(
    LoadActivityTerrainNotify_CmdId_descriptor(), name, value);
}
enum ServerAnnounceNotify_CmdId {
  ServerAnnounceNotify_CmdId_NONE = 0,
  ServerAnnounceNotify_CmdId_CMD_ID = 2022,
  ServerAnnounceNotify_CmdId_ENET_CHANNEL_ID = 0,
  ServerAnnounceNotify_CmdId_ENET_IS_RELIABLE = 1,
  ServerAnnounceNotify_CmdId_ServerAnnounceNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServerAnnounceNotify_CmdId_ServerAnnounceNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServerAnnounceNotify_CmdId_IsValid(int value);
const ServerAnnounceNotify_CmdId ServerAnnounceNotify_CmdId_CmdId_MIN = ServerAnnounceNotify_CmdId_NONE;
const ServerAnnounceNotify_CmdId ServerAnnounceNotify_CmdId_CmdId_MAX = ServerAnnounceNotify_CmdId_CMD_ID;
const int ServerAnnounceNotify_CmdId_CmdId_ARRAYSIZE = ServerAnnounceNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerAnnounceNotify_CmdId_descriptor();
inline const ::std::string& ServerAnnounceNotify_CmdId_Name(ServerAnnounceNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerAnnounceNotify_CmdId_descriptor(), value);
}
inline bool ServerAnnounceNotify_CmdId_Parse(
    const ::std::string& name, ServerAnnounceNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerAnnounceNotify_CmdId>(
    ServerAnnounceNotify_CmdId_descriptor(), name, value);
}
enum ServerAnnounceRevokeNotify_CmdId {
  ServerAnnounceRevokeNotify_CmdId_NONE = 0,
  ServerAnnounceRevokeNotify_CmdId_CMD_ID = 2023,
  ServerAnnounceRevokeNotify_CmdId_ENET_CHANNEL_ID = 0,
  ServerAnnounceRevokeNotify_CmdId_ENET_IS_RELIABLE = 1,
  ServerAnnounceRevokeNotify_CmdId_ServerAnnounceRevokeNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServerAnnounceRevokeNotify_CmdId_ServerAnnounceRevokeNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServerAnnounceRevokeNotify_CmdId_IsValid(int value);
const ServerAnnounceRevokeNotify_CmdId ServerAnnounceRevokeNotify_CmdId_CmdId_MIN = ServerAnnounceRevokeNotify_CmdId_NONE;
const ServerAnnounceRevokeNotify_CmdId ServerAnnounceRevokeNotify_CmdId_CmdId_MAX = ServerAnnounceRevokeNotify_CmdId_CMD_ID;
const int ServerAnnounceRevokeNotify_CmdId_CmdId_ARRAYSIZE = ServerAnnounceRevokeNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerAnnounceRevokeNotify_CmdId_descriptor();
inline const ::std::string& ServerAnnounceRevokeNotify_CmdId_Name(ServerAnnounceRevokeNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerAnnounceRevokeNotify_CmdId_descriptor(), value);
}
inline bool ServerAnnounceRevokeNotify_CmdId_Parse(
    const ::std::string& name, ServerAnnounceRevokeNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerAnnounceRevokeNotify_CmdId>(
    ServerAnnounceRevokeNotify_CmdId_descriptor(), name, value);
}
// ===================================================================

class GetActivityScheduleReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetActivityScheduleReq) */ {
 public:
  GetActivityScheduleReq();
  virtual ~GetActivityScheduleReq();

  GetActivityScheduleReq(const GetActivityScheduleReq& from);

  inline GetActivityScheduleReq& operator=(const GetActivityScheduleReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetActivityScheduleReq(GetActivityScheduleReq&& from) noexcept
    : GetActivityScheduleReq() {
    *this = ::std::move(from);
  }

  inline GetActivityScheduleReq& operator=(GetActivityScheduleReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetActivityScheduleReq& default_instance();

  static inline const GetActivityScheduleReq* internal_default_instance() {
    return reinterpret_cast<const GetActivityScheduleReq*>(
               &_GetActivityScheduleReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GetActivityScheduleReq* other);
  friend void swap(GetActivityScheduleReq& a, GetActivityScheduleReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetActivityScheduleReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetActivityScheduleReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetActivityScheduleReq& from);
  void MergeFrom(const GetActivityScheduleReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetActivityScheduleReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GetActivityScheduleReq_CmdId CmdId;
  static const CmdId NONE =
    GetActivityScheduleReq_CmdId_NONE;
  static const CmdId CMD_ID =
    GetActivityScheduleReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    GetActivityScheduleReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    GetActivityScheduleReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    GetActivityScheduleReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return GetActivityScheduleReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    GetActivityScheduleReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    GetActivityScheduleReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    GetActivityScheduleReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return GetActivityScheduleReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return GetActivityScheduleReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return GetActivityScheduleReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.GetActivityScheduleReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5factivity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ActivityScheduleInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ActivityScheduleInfo) */ {
 public:
  ActivityScheduleInfo();
  virtual ~ActivityScheduleInfo();

  ActivityScheduleInfo(const ActivityScheduleInfo& from);

  inline ActivityScheduleInfo& operator=(const ActivityScheduleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActivityScheduleInfo(ActivityScheduleInfo&& from) noexcept
    : ActivityScheduleInfo() {
    *this = ::std::move(from);
  }

  inline ActivityScheduleInfo& operator=(ActivityScheduleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityScheduleInfo& default_instance();

  static inline const ActivityScheduleInfo* internal_default_instance() {
    return reinterpret_cast<const ActivityScheduleInfo*>(
               &_ActivityScheduleInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ActivityScheduleInfo* other);
  friend void swap(ActivityScheduleInfo& a, ActivityScheduleInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActivityScheduleInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ActivityScheduleInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActivityScheduleInfo& from);
  void MergeFrom(const ActivityScheduleInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActivityScheduleInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 activity_id = 1;
  void clear_activity_id();
  static const int kActivityIdFieldNumber = 1;
  ::google::protobuf::uint32 activity_id() const;
  void set_activity_id(::google::protobuf::uint32 value);

  // bool is_open = 2;
  void clear_is_open();
  static const int kIsOpenFieldNumber = 2;
  bool is_open() const;
  void set_is_open(bool value);

  // uint32 schedule_id = 3;
  void clear_schedule_id();
  static const int kScheduleIdFieldNumber = 3;
  ::google::protobuf::uint32 schedule_id() const;
  void set_schedule_id(::google::protobuf::uint32 value);

  // uint32 begin_time = 4;
  void clear_begin_time();
  static const int kBeginTimeFieldNumber = 4;
  ::google::protobuf::uint32 begin_time() const;
  void set_begin_time(::google::protobuf::uint32 value);

  // uint32 end_time = 5;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 5;
  ::google::protobuf::uint32 end_time() const;
  void set_end_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ActivityScheduleInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 activity_id_;
  bool is_open_;
  ::google::protobuf::uint32 schedule_id_;
  ::google::protobuf::uint32 begin_time_;
  ::google::protobuf::uint32 end_time_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5factivity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetActivityScheduleRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetActivityScheduleRsp) */ {
 public:
  GetActivityScheduleRsp();
  virtual ~GetActivityScheduleRsp();

  GetActivityScheduleRsp(const GetActivityScheduleRsp& from);

  inline GetActivityScheduleRsp& operator=(const GetActivityScheduleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetActivityScheduleRsp(GetActivityScheduleRsp&& from) noexcept
    : GetActivityScheduleRsp() {
    *this = ::std::move(from);
  }

  inline GetActivityScheduleRsp& operator=(GetActivityScheduleRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetActivityScheduleRsp& default_instance();

  static inline const GetActivityScheduleRsp* internal_default_instance() {
    return reinterpret_cast<const GetActivityScheduleRsp*>(
               &_GetActivityScheduleRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GetActivityScheduleRsp* other);
  friend void swap(GetActivityScheduleRsp& a, GetActivityScheduleRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetActivityScheduleRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetActivityScheduleRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetActivityScheduleRsp& from);
  void MergeFrom(const GetActivityScheduleRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetActivityScheduleRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GetActivityScheduleRsp_CmdId CmdId;
  static const CmdId NONE =
    GetActivityScheduleRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    GetActivityScheduleRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    GetActivityScheduleRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    GetActivityScheduleRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return GetActivityScheduleRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    GetActivityScheduleRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    GetActivityScheduleRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    GetActivityScheduleRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return GetActivityScheduleRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return GetActivityScheduleRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return GetActivityScheduleRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.ActivityScheduleInfo activity_schedule_list = 2;
  int activity_schedule_list_size() const;
  void clear_activity_schedule_list();
  static const int kActivityScheduleListFieldNumber = 2;
  const ::proto::ActivityScheduleInfo& activity_schedule_list(int index) const;
  ::proto::ActivityScheduleInfo* mutable_activity_schedule_list(int index);
  ::proto::ActivityScheduleInfo* add_activity_schedule_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ActivityScheduleInfo >*
      mutable_activity_schedule_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ActivityScheduleInfo >&
      activity_schedule_list() const;

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 remain_fly_sea_lamp_num = 3;
  void clear_remain_fly_sea_lamp_num();
  static const int kRemainFlySeaLampNumFieldNumber = 3;
  ::google::protobuf::uint32 remain_fly_sea_lamp_num() const;
  void set_remain_fly_sea_lamp_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GetActivityScheduleRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ActivityScheduleInfo > activity_schedule_list_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 remain_fly_sea_lamp_num_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5factivity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetActivityInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetActivityInfoReq) */ {
 public:
  GetActivityInfoReq();
  virtual ~GetActivityInfoReq();

  GetActivityInfoReq(const GetActivityInfoReq& from);

  inline GetActivityInfoReq& operator=(const GetActivityInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetActivityInfoReq(GetActivityInfoReq&& from) noexcept
    : GetActivityInfoReq() {
    *this = ::std::move(from);
  }

  inline GetActivityInfoReq& operator=(GetActivityInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetActivityInfoReq& default_instance();

  static inline const GetActivityInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetActivityInfoReq*>(
               &_GetActivityInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(GetActivityInfoReq* other);
  friend void swap(GetActivityInfoReq& a, GetActivityInfoReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetActivityInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetActivityInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetActivityInfoReq& from);
  void MergeFrom(const GetActivityInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetActivityInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GetActivityInfoReq_CmdId CmdId;
  static const CmdId NONE =
    GetActivityInfoReq_CmdId_NONE;
  static const CmdId CMD_ID =
    GetActivityInfoReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    GetActivityInfoReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    GetActivityInfoReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    GetActivityInfoReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return GetActivityInfoReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    GetActivityInfoReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    GetActivityInfoReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    GetActivityInfoReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return GetActivityInfoReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return GetActivityInfoReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return GetActivityInfoReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 activity_id_list = 1;
  int activity_id_list_size() const;
  void clear_activity_id_list();
  static const int kActivityIdListFieldNumber = 1;
  ::google::protobuf::uint32 activity_id_list(int index) const;
  void set_activity_id_list(int index, ::google::protobuf::uint32 value);
  void add_activity_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      activity_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_activity_id_list();

  // @@protoc_insertion_point(class_scope:proto.GetActivityInfoReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > activity_id_list_;
  mutable int _activity_id_list_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5factivity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ActivityInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ActivityInfo) */ {
 public:
  ActivityInfo();
  virtual ~ActivityInfo();

  ActivityInfo(const ActivityInfo& from);

  inline ActivityInfo& operator=(const ActivityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActivityInfo(ActivityInfo&& from) noexcept
    : ActivityInfo() {
    *this = ::std::move(from);
  }

  inline ActivityInfo& operator=(ActivityInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityInfo& default_instance();

  enum DetailCase {
    kSamLampInfo = 11,
    DETAIL_NOT_SET = 0,
  };

  static inline const ActivityInfo* internal_default_instance() {
    return reinterpret_cast<const ActivityInfo*>(
               &_ActivityInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ActivityInfo* other);
  friend void swap(ActivityInfo& a, ActivityInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActivityInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ActivityInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActivityInfo& from);
  void MergeFrom(const ActivityInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActivityInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 activity_id = 1;
  void clear_activity_id();
  static const int kActivityIdFieldNumber = 1;
  ::google::protobuf::uint32 activity_id() const;
  void set_activity_id(::google::protobuf::uint32 value);

  // uint32 schedule_id = 2;
  void clear_schedule_id();
  static const int kScheduleIdFieldNumber = 2;
  ::google::protobuf::uint32 schedule_id() const;
  void set_schedule_id(::google::protobuf::uint32 value);

  // uint32 begin_time = 3;
  void clear_begin_time();
  static const int kBeginTimeFieldNumber = 3;
  ::google::protobuf::uint32 begin_time() const;
  void set_begin_time(::google::protobuf::uint32 value);

  // uint32 end_time = 4;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 4;
  ::google::protobuf::uint32 end_time() const;
  void set_end_time(::google::protobuf::uint32 value);

  // uint32 activity_type = 5;
  void clear_activity_type();
  static const int kActivityTypeFieldNumber = 5;
  ::google::protobuf::uint32 activity_type() const;
  void set_activity_type(::google::protobuf::uint32 value);

  // bool is_play_open_anim = 6;
  void clear_is_play_open_anim();
  static const int kIsPlayOpenAnimFieldNumber = 6;
  bool is_play_open_anim() const;
  void set_is_play_open_anim(bool value);

  // bool is_finished = 7;
  void clear_is_finished();
  static const int kIsFinishedFieldNumber = 7;
  bool is_finished() const;
  void set_is_finished(bool value);

  // bool is_starting = 8;
  void clear_is_starting();
  static const int kIsStartingFieldNumber = 8;
  bool is_starting() const;
  void set_is_starting(bool value);

  // .proto.SeaLampActivityDetailInfo sam_lamp_info = 11;
  bool has_sam_lamp_info() const;
  void clear_sam_lamp_info();
  static const int kSamLampInfoFieldNumber = 11;
  const ::proto::SeaLampActivityDetailInfo& sam_lamp_info() const;
  ::proto::SeaLampActivityDetailInfo* mutable_sam_lamp_info();
  ::proto::SeaLampActivityDetailInfo* release_sam_lamp_info();
  void set_allocated_sam_lamp_info(::proto::SeaLampActivityDetailInfo* sam_lamp_info);

  DetailCase detail_case() const;
  // @@protoc_insertion_point(class_scope:proto.ActivityInfo)
 private:
  void set_has_sam_lamp_info();

  inline bool has_detail() const;
  void clear_detail();
  inline void clear_has_detail();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 activity_id_;
  ::google::protobuf::uint32 schedule_id_;
  ::google::protobuf::uint32 begin_time_;
  ::google::protobuf::uint32 end_time_;
  ::google::protobuf::uint32 activity_type_;
  bool is_play_open_anim_;
  bool is_finished_;
  bool is_starting_;
  union DetailUnion {
    DetailUnion() {}
    ::proto::SeaLampActivityDetailInfo* sam_lamp_info_;
  } detail_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_cmd_2fcmd_5factivity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetActivityInfoRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetActivityInfoRsp) */ {
 public:
  GetActivityInfoRsp();
  virtual ~GetActivityInfoRsp();

  GetActivityInfoRsp(const GetActivityInfoRsp& from);

  inline GetActivityInfoRsp& operator=(const GetActivityInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetActivityInfoRsp(GetActivityInfoRsp&& from) noexcept
    : GetActivityInfoRsp() {
    *this = ::std::move(from);
  }

  inline GetActivityInfoRsp& operator=(GetActivityInfoRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetActivityInfoRsp& default_instance();

  static inline const GetActivityInfoRsp* internal_default_instance() {
    return reinterpret_cast<const GetActivityInfoRsp*>(
               &_GetActivityInfoRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(GetActivityInfoRsp* other);
  friend void swap(GetActivityInfoRsp& a, GetActivityInfoRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetActivityInfoRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetActivityInfoRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetActivityInfoRsp& from);
  void MergeFrom(const GetActivityInfoRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetActivityInfoRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GetActivityInfoRsp_CmdId CmdId;
  static const CmdId NONE =
    GetActivityInfoRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    GetActivityInfoRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    GetActivityInfoRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    GetActivityInfoRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return GetActivityInfoRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    GetActivityInfoRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    GetActivityInfoRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    GetActivityInfoRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return GetActivityInfoRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return GetActivityInfoRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return GetActivityInfoRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.ActivityInfo activity_info_list = 2;
  int activity_info_list_size() const;
  void clear_activity_info_list();
  static const int kActivityInfoListFieldNumber = 2;
  const ::proto::ActivityInfo& activity_info_list(int index) const;
  ::proto::ActivityInfo* mutable_activity_info_list(int index);
  ::proto::ActivityInfo* add_activity_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ActivityInfo >*
      mutable_activity_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ActivityInfo >&
      activity_info_list() const;

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.GetActivityInfoRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ActivityInfo > activity_info_list_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5factivity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ActivityPlayOpenAnimNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ActivityPlayOpenAnimNotify) */ {
 public:
  ActivityPlayOpenAnimNotify();
  virtual ~ActivityPlayOpenAnimNotify();

  ActivityPlayOpenAnimNotify(const ActivityPlayOpenAnimNotify& from);

  inline ActivityPlayOpenAnimNotify& operator=(const ActivityPlayOpenAnimNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActivityPlayOpenAnimNotify(ActivityPlayOpenAnimNotify&& from) noexcept
    : ActivityPlayOpenAnimNotify() {
    *this = ::std::move(from);
  }

  inline ActivityPlayOpenAnimNotify& operator=(ActivityPlayOpenAnimNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityPlayOpenAnimNotify& default_instance();

  static inline const ActivityPlayOpenAnimNotify* internal_default_instance() {
    return reinterpret_cast<const ActivityPlayOpenAnimNotify*>(
               &_ActivityPlayOpenAnimNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ActivityPlayOpenAnimNotify* other);
  friend void swap(ActivityPlayOpenAnimNotify& a, ActivityPlayOpenAnimNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActivityPlayOpenAnimNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ActivityPlayOpenAnimNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActivityPlayOpenAnimNotify& from);
  void MergeFrom(const ActivityPlayOpenAnimNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActivityPlayOpenAnimNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ActivityPlayOpenAnimNotify_CmdId CmdId;
  static const CmdId NONE =
    ActivityPlayOpenAnimNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    ActivityPlayOpenAnimNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    ActivityPlayOpenAnimNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    ActivityPlayOpenAnimNotify_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    ActivityPlayOpenAnimNotify_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return ActivityPlayOpenAnimNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    ActivityPlayOpenAnimNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    ActivityPlayOpenAnimNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    ActivityPlayOpenAnimNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return ActivityPlayOpenAnimNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return ActivityPlayOpenAnimNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return ActivityPlayOpenAnimNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 activity_id = 1;
  void clear_activity_id();
  static const int kActivityIdFieldNumber = 1;
  ::google::protobuf::uint32 activity_id() const;
  void set_activity_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ActivityPlayOpenAnimNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 activity_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5factivity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ActivityInfoNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ActivityInfoNotify) */ {
 public:
  ActivityInfoNotify();
  virtual ~ActivityInfoNotify();

  ActivityInfoNotify(const ActivityInfoNotify& from);

  inline ActivityInfoNotify& operator=(const ActivityInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActivityInfoNotify(ActivityInfoNotify&& from) noexcept
    : ActivityInfoNotify() {
    *this = ::std::move(from);
  }

  inline ActivityInfoNotify& operator=(ActivityInfoNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityInfoNotify& default_instance();

  static inline const ActivityInfoNotify* internal_default_instance() {
    return reinterpret_cast<const ActivityInfoNotify*>(
               &_ActivityInfoNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(ActivityInfoNotify* other);
  friend void swap(ActivityInfoNotify& a, ActivityInfoNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActivityInfoNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ActivityInfoNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActivityInfoNotify& from);
  void MergeFrom(const ActivityInfoNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActivityInfoNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ActivityInfoNotify_CmdId CmdId;
  static const CmdId NONE =
    ActivityInfoNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    ActivityInfoNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    ActivityInfoNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    ActivityInfoNotify_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    ActivityInfoNotify_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return ActivityInfoNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    ActivityInfoNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    ActivityInfoNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    ActivityInfoNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return ActivityInfoNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return ActivityInfoNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return ActivityInfoNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .proto.ActivityInfo activity_info = 1;
  bool has_activity_info() const;
  void clear_activity_info();
  static const int kActivityInfoFieldNumber = 1;
  const ::proto::ActivityInfo& activity_info() const;
  ::proto::ActivityInfo* mutable_activity_info();
  ::proto::ActivityInfo* release_activity_info();
  void set_allocated_activity_info(::proto::ActivityInfo* activity_info);

  // @@protoc_insertion_point(class_scope:proto.ActivityInfoNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::ActivityInfo* activity_info_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5factivity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ActivityScheduleInfoNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ActivityScheduleInfoNotify) */ {
 public:
  ActivityScheduleInfoNotify();
  virtual ~ActivityScheduleInfoNotify();

  ActivityScheduleInfoNotify(const ActivityScheduleInfoNotify& from);

  inline ActivityScheduleInfoNotify& operator=(const ActivityScheduleInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActivityScheduleInfoNotify(ActivityScheduleInfoNotify&& from) noexcept
    : ActivityScheduleInfoNotify() {
    *this = ::std::move(from);
  }

  inline ActivityScheduleInfoNotify& operator=(ActivityScheduleInfoNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityScheduleInfoNotify& default_instance();

  static inline const ActivityScheduleInfoNotify* internal_default_instance() {
    return reinterpret_cast<const ActivityScheduleInfoNotify*>(
               &_ActivityScheduleInfoNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ActivityScheduleInfoNotify* other);
  friend void swap(ActivityScheduleInfoNotify& a, ActivityScheduleInfoNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActivityScheduleInfoNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ActivityScheduleInfoNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActivityScheduleInfoNotify& from);
  void MergeFrom(const ActivityScheduleInfoNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActivityScheduleInfoNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ActivityScheduleInfoNotify_CmdId CmdId;
  static const CmdId NONE =
    ActivityScheduleInfoNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    ActivityScheduleInfoNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    ActivityScheduleInfoNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    ActivityScheduleInfoNotify_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    ActivityScheduleInfoNotify_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return ActivityScheduleInfoNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    ActivityScheduleInfoNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    ActivityScheduleInfoNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    ActivityScheduleInfoNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return ActivityScheduleInfoNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return ActivityScheduleInfoNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return ActivityScheduleInfoNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.ActivityScheduleInfo activity_schedule_list = 1;
  int activity_schedule_list_size() const;
  void clear_activity_schedule_list();
  static const int kActivityScheduleListFieldNumber = 1;
  const ::proto::ActivityScheduleInfo& activity_schedule_list(int index) const;
  ::proto::ActivityScheduleInfo* mutable_activity_schedule_list(int index);
  ::proto::ActivityScheduleInfo* add_activity_schedule_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ActivityScheduleInfo >*
      mutable_activity_schedule_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ActivityScheduleInfo >&
      activity_schedule_list() const;

  // uint32 remain_fly_sea_lamp_num = 2;
  void clear_remain_fly_sea_lamp_num();
  static const int kRemainFlySeaLampNumFieldNumber = 2;
  ::google::protobuf::uint32 remain_fly_sea_lamp_num() const;
  void set_remain_fly_sea_lamp_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ActivityScheduleInfoNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ActivityScheduleInfo > activity_schedule_list_;
  ::google::protobuf::uint32 remain_fly_sea_lamp_num_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5factivity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SeaLampActivityDetailInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SeaLampActivityDetailInfo) */ {
 public:
  SeaLampActivityDetailInfo();
  virtual ~SeaLampActivityDetailInfo();

  SeaLampActivityDetailInfo(const SeaLampActivityDetailInfo& from);

  inline SeaLampActivityDetailInfo& operator=(const SeaLampActivityDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeaLampActivityDetailInfo(SeaLampActivityDetailInfo&& from) noexcept
    : SeaLampActivityDetailInfo() {
    *this = ::std::move(from);
  }

  inline SeaLampActivityDetailInfo& operator=(SeaLampActivityDetailInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeaLampActivityDetailInfo& default_instance();

  static inline const SeaLampActivityDetailInfo* internal_default_instance() {
    return reinterpret_cast<const SeaLampActivityDetailInfo*>(
               &_SeaLampActivityDetailInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(SeaLampActivityDetailInfo* other);
  friend void swap(SeaLampActivityDetailInfo& a, SeaLampActivityDetailInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeaLampActivityDetailInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SeaLampActivityDetailInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SeaLampActivityDetailInfo& from);
  void MergeFrom(const SeaLampActivityDetailInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SeaLampActivityDetailInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 taken_contribution_reward_list = 5;
  int taken_contribution_reward_list_size() const;
  void clear_taken_contribution_reward_list();
  static const int kTakenContributionRewardListFieldNumber = 5;
  ::google::protobuf::uint32 taken_contribution_reward_list(int index) const;
  void set_taken_contribution_reward_list(int index, ::google::protobuf::uint32 value);
  void add_taken_contribution_reward_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      taken_contribution_reward_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_taken_contribution_reward_list();

  // repeated uint32 taken_phase_reward_list = 6;
  int taken_phase_reward_list_size() const;
  void clear_taken_phase_reward_list();
  static const int kTakenPhaseRewardListFieldNumber = 6;
  ::google::protobuf::uint32 taken_phase_reward_list(int index) const;
  void set_taken_phase_reward_list(int index, ::google::protobuf::uint32 value);
  void add_taken_phase_reward_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      taken_phase_reward_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_taken_phase_reward_list();

  // uint32 phase_id = 1;
  void clear_phase_id();
  static const int kPhaseIdFieldNumber = 1;
  ::google::protobuf::uint32 phase_id() const;
  void set_phase_id(::google::protobuf::uint32 value);

  // uint32 progress = 2;
  void clear_progress();
  static const int kProgressFieldNumber = 2;
  ::google::protobuf::uint32 progress() const;
  void set_progress(::google::protobuf::uint32 value);

  // uint32 days = 3;
  void clear_days();
  static const int kDaysFieldNumber = 3;
  ::google::protobuf::uint32 days() const;
  void set_days(::google::protobuf::uint32 value);

  // uint32 contribution = 4;
  void clear_contribution();
  static const int kContributionFieldNumber = 4;
  ::google::protobuf::uint32 contribution() const;
  void set_contribution(::google::protobuf::uint32 value);

  // uint32 factor = 7;
  void clear_factor();
  static const int kFactorFieldNumber = 7;
  ::google::protobuf::uint32 factor() const;
  void set_factor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.SeaLampActivityDetailInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > taken_contribution_reward_list_;
  mutable int _taken_contribution_reward_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > taken_phase_reward_list_;
  mutable int _taken_phase_reward_list_cached_byte_size_;
  ::google::protobuf::uint32 phase_id_;
  ::google::protobuf::uint32 progress_;
  ::google::protobuf::uint32 days_;
  ::google::protobuf::uint32 contribution_;
  ::google::protobuf::uint32 factor_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5factivity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SeaLampFlyLampReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SeaLampFlyLampReq) */ {
 public:
  SeaLampFlyLampReq();
  virtual ~SeaLampFlyLampReq();

  SeaLampFlyLampReq(const SeaLampFlyLampReq& from);

  inline SeaLampFlyLampReq& operator=(const SeaLampFlyLampReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeaLampFlyLampReq(SeaLampFlyLampReq&& from) noexcept
    : SeaLampFlyLampReq() {
    *this = ::std::move(from);
  }

  inline SeaLampFlyLampReq& operator=(SeaLampFlyLampReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeaLampFlyLampReq& default_instance();

  static inline const SeaLampFlyLampReq* internal_default_instance() {
    return reinterpret_cast<const SeaLampFlyLampReq*>(
               &_SeaLampFlyLampReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(SeaLampFlyLampReq* other);
  friend void swap(SeaLampFlyLampReq& a, SeaLampFlyLampReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeaLampFlyLampReq* New() const PROTOBUF_FINAL { return New(NULL); }

  SeaLampFlyLampReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SeaLampFlyLampReq& from);
  void MergeFrom(const SeaLampFlyLampReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SeaLampFlyLampReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SeaLampFlyLampReq_CmdId CmdId;
  static const CmdId NONE =
    SeaLampFlyLampReq_CmdId_NONE;
  static const CmdId CMD_ID =
    SeaLampFlyLampReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    SeaLampFlyLampReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    SeaLampFlyLampReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    SeaLampFlyLampReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return SeaLampFlyLampReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    SeaLampFlyLampReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    SeaLampFlyLampReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    SeaLampFlyLampReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return SeaLampFlyLampReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return SeaLampFlyLampReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return SeaLampFlyLampReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string wish_text = 2;
  void clear_wish_text();
  static const int kWishTextFieldNumber = 2;
  const ::std::string& wish_text() const;
  void set_wish_text(const ::std::string& value);
  #if LANG_CXX11
  void set_wish_text(::std::string&& value);
  #endif
  void set_wish_text(const char* value);
  void set_wish_text(const char* value, size_t size);
  ::std::string* mutable_wish_text();
  ::std::string* release_wish_text();
  void set_allocated_wish_text(::std::string* wish_text);

  // uint32 item_id = 1;
  void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  ::google::protobuf::uint32 item_id() const;
  void set_item_id(::google::protobuf::uint32 value);

  // uint32 item_num = 3;
  void clear_item_num();
  static const int kItemNumFieldNumber = 3;
  ::google::protobuf::uint32 item_num() const;
  void set_item_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.SeaLampFlyLampReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr wish_text_;
  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 item_num_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5factivity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SeaLampFlyLampRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SeaLampFlyLampRsp) */ {
 public:
  SeaLampFlyLampRsp();
  virtual ~SeaLampFlyLampRsp();

  SeaLampFlyLampRsp(const SeaLampFlyLampRsp& from);

  inline SeaLampFlyLampRsp& operator=(const SeaLampFlyLampRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeaLampFlyLampRsp(SeaLampFlyLampRsp&& from) noexcept
    : SeaLampFlyLampRsp() {
    *this = ::std::move(from);
  }

  inline SeaLampFlyLampRsp& operator=(SeaLampFlyLampRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeaLampFlyLampRsp& default_instance();

  static inline const SeaLampFlyLampRsp* internal_default_instance() {
    return reinterpret_cast<const SeaLampFlyLampRsp*>(
               &_SeaLampFlyLampRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(SeaLampFlyLampRsp* other);
  friend void swap(SeaLampFlyLampRsp& a, SeaLampFlyLampRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeaLampFlyLampRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SeaLampFlyLampRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SeaLampFlyLampRsp& from);
  void MergeFrom(const SeaLampFlyLampRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SeaLampFlyLampRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SeaLampFlyLampRsp_CmdId CmdId;
  static const CmdId NONE =
    SeaLampFlyLampRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    SeaLampFlyLampRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    SeaLampFlyLampRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    SeaLampFlyLampRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return SeaLampFlyLampRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    SeaLampFlyLampRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    SeaLampFlyLampRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    SeaLampFlyLampRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return SeaLampFlyLampRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return SeaLampFlyLampRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return SeaLampFlyLampRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 total_contribution = 2;
  void clear_total_contribution();
  static const int kTotalContributionFieldNumber = 2;
  ::google::protobuf::uint32 total_contribution() const;
  void set_total_contribution(::google::protobuf::uint32 value);

  // uint32 remain_fly_num = 3;
  void clear_remain_fly_num();
  static const int kRemainFlyNumFieldNumber = 3;
  ::google::protobuf::uint32 remain_fly_num() const;
  void set_remain_fly_num(::google::protobuf::uint32 value);

  // uint32 add_contribution = 4;
  void clear_add_contribution();
  static const int kAddContributionFieldNumber = 4;
  ::google::protobuf::uint32 add_contribution() const;
  void set_add_contribution(::google::protobuf::uint32 value);

  // uint32 add_progress = 5;
  void clear_add_progress();
  static const int kAddProgressFieldNumber = 5;
  ::google::protobuf::uint32 add_progress() const;
  void set_add_progress(::google::protobuf::uint32 value);

  // uint32 item_num = 6;
  void clear_item_num();
  static const int kItemNumFieldNumber = 6;
  ::google::protobuf::uint32 item_num() const;
  void set_item_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.SeaLampFlyLampRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 total_contribution_;
  ::google::protobuf::uint32 remain_fly_num_;
  ::google::protobuf::uint32 add_contribution_;
  ::google::protobuf::uint32 add_progress_;
  ::google::protobuf::uint32 item_num_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5factivity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SeaLampTakeContributionRewardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SeaLampTakeContributionRewardReq) */ {
 public:
  SeaLampTakeContributionRewardReq();
  virtual ~SeaLampTakeContributionRewardReq();

  SeaLampTakeContributionRewardReq(const SeaLampTakeContributionRewardReq& from);

  inline SeaLampTakeContributionRewardReq& operator=(const SeaLampTakeContributionRewardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeaLampTakeContributionRewardReq(SeaLampTakeContributionRewardReq&& from) noexcept
    : SeaLampTakeContributionRewardReq() {
    *this = ::std::move(from);
  }

  inline SeaLampTakeContributionRewardReq& operator=(SeaLampTakeContributionRewardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeaLampTakeContributionRewardReq& default_instance();

  static inline const SeaLampTakeContributionRewardReq* internal_default_instance() {
    return reinterpret_cast<const SeaLampTakeContributionRewardReq*>(
               &_SeaLampTakeContributionRewardReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(SeaLampTakeContributionRewardReq* other);
  friend void swap(SeaLampTakeContributionRewardReq& a, SeaLampTakeContributionRewardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeaLampTakeContributionRewardReq* New() const PROTOBUF_FINAL { return New(NULL); }

  SeaLampTakeContributionRewardReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SeaLampTakeContributionRewardReq& from);
  void MergeFrom(const SeaLampTakeContributionRewardReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SeaLampTakeContributionRewardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SeaLampTakeContributionRewardReq_CmdId CmdId;
  static const CmdId NONE =
    SeaLampTakeContributionRewardReq_CmdId_NONE;
  static const CmdId CMD_ID =
    SeaLampTakeContributionRewardReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    SeaLampTakeContributionRewardReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    SeaLampTakeContributionRewardReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    SeaLampTakeContributionRewardReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return SeaLampTakeContributionRewardReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    SeaLampTakeContributionRewardReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    SeaLampTakeContributionRewardReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    SeaLampTakeContributionRewardReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return SeaLampTakeContributionRewardReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return SeaLampTakeContributionRewardReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return SeaLampTakeContributionRewardReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 config_id = 1;
  void clear_config_id();
  static const int kConfigIdFieldNumber = 1;
  ::google::protobuf::uint32 config_id() const;
  void set_config_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.SeaLampTakeContributionRewardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 config_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5factivity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SeaLampTakeContributionRewardRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SeaLampTakeContributionRewardRsp) */ {
 public:
  SeaLampTakeContributionRewardRsp();
  virtual ~SeaLampTakeContributionRewardRsp();

  SeaLampTakeContributionRewardRsp(const SeaLampTakeContributionRewardRsp& from);

  inline SeaLampTakeContributionRewardRsp& operator=(const SeaLampTakeContributionRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeaLampTakeContributionRewardRsp(SeaLampTakeContributionRewardRsp&& from) noexcept
    : SeaLampTakeContributionRewardRsp() {
    *this = ::std::move(from);
  }

  inline SeaLampTakeContributionRewardRsp& operator=(SeaLampTakeContributionRewardRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeaLampTakeContributionRewardRsp& default_instance();

  static inline const SeaLampTakeContributionRewardRsp* internal_default_instance() {
    return reinterpret_cast<const SeaLampTakeContributionRewardRsp*>(
               &_SeaLampTakeContributionRewardRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(SeaLampTakeContributionRewardRsp* other);
  friend void swap(SeaLampTakeContributionRewardRsp& a, SeaLampTakeContributionRewardRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeaLampTakeContributionRewardRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SeaLampTakeContributionRewardRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SeaLampTakeContributionRewardRsp& from);
  void MergeFrom(const SeaLampTakeContributionRewardRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SeaLampTakeContributionRewardRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SeaLampTakeContributionRewardRsp_CmdId CmdId;
  static const CmdId NONE =
    SeaLampTakeContributionRewardRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    SeaLampTakeContributionRewardRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    SeaLampTakeContributionRewardRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    SeaLampTakeContributionRewardRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return SeaLampTakeContributionRewardRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    SeaLampTakeContributionRewardRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    SeaLampTakeContributionRewardRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    SeaLampTakeContributionRewardRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return SeaLampTakeContributionRewardRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return SeaLampTakeContributionRewardRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return SeaLampTakeContributionRewardRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 config_id = 2;
  void clear_config_id();
  static const int kConfigIdFieldNumber = 2;
  ::google::protobuf::uint32 config_id() const;
  void set_config_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.SeaLampTakeContributionRewardRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 config_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5factivity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SeaLampTakePhaseRewardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SeaLampTakePhaseRewardReq) */ {
 public:
  SeaLampTakePhaseRewardReq();
  virtual ~SeaLampTakePhaseRewardReq();

  SeaLampTakePhaseRewardReq(const SeaLampTakePhaseRewardReq& from);

  inline SeaLampTakePhaseRewardReq& operator=(const SeaLampTakePhaseRewardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeaLampTakePhaseRewardReq(SeaLampTakePhaseRewardReq&& from) noexcept
    : SeaLampTakePhaseRewardReq() {
    *this = ::std::move(from);
  }

  inline SeaLampTakePhaseRewardReq& operator=(SeaLampTakePhaseRewardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeaLampTakePhaseRewardReq& default_instance();

  static inline const SeaLampTakePhaseRewardReq* internal_default_instance() {
    return reinterpret_cast<const SeaLampTakePhaseRewardReq*>(
               &_SeaLampTakePhaseRewardReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(SeaLampTakePhaseRewardReq* other);
  friend void swap(SeaLampTakePhaseRewardReq& a, SeaLampTakePhaseRewardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeaLampTakePhaseRewardReq* New() const PROTOBUF_FINAL { return New(NULL); }

  SeaLampTakePhaseRewardReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SeaLampTakePhaseRewardReq& from);
  void MergeFrom(const SeaLampTakePhaseRewardReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SeaLampTakePhaseRewardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SeaLampTakePhaseRewardReq_CmdId CmdId;
  static const CmdId NONE =
    SeaLampTakePhaseRewardReq_CmdId_NONE;
  static const CmdId CMD_ID =
    SeaLampTakePhaseRewardReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    SeaLampTakePhaseRewardReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    SeaLampTakePhaseRewardReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    SeaLampTakePhaseRewardReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return SeaLampTakePhaseRewardReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    SeaLampTakePhaseRewardReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    SeaLampTakePhaseRewardReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    SeaLampTakePhaseRewardReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return SeaLampTakePhaseRewardReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return SeaLampTakePhaseRewardReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return SeaLampTakePhaseRewardReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 phase_id = 1;
  void clear_phase_id();
  static const int kPhaseIdFieldNumber = 1;
  ::google::protobuf::uint32 phase_id() const;
  void set_phase_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.SeaLampTakePhaseRewardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 phase_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5factivity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SeaLampTakePhaseRewardRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SeaLampTakePhaseRewardRsp) */ {
 public:
  SeaLampTakePhaseRewardRsp();
  virtual ~SeaLampTakePhaseRewardRsp();

  SeaLampTakePhaseRewardRsp(const SeaLampTakePhaseRewardRsp& from);

  inline SeaLampTakePhaseRewardRsp& operator=(const SeaLampTakePhaseRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeaLampTakePhaseRewardRsp(SeaLampTakePhaseRewardRsp&& from) noexcept
    : SeaLampTakePhaseRewardRsp() {
    *this = ::std::move(from);
  }

  inline SeaLampTakePhaseRewardRsp& operator=(SeaLampTakePhaseRewardRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeaLampTakePhaseRewardRsp& default_instance();

  static inline const SeaLampTakePhaseRewardRsp* internal_default_instance() {
    return reinterpret_cast<const SeaLampTakePhaseRewardRsp*>(
               &_SeaLampTakePhaseRewardRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(SeaLampTakePhaseRewardRsp* other);
  friend void swap(SeaLampTakePhaseRewardRsp& a, SeaLampTakePhaseRewardRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeaLampTakePhaseRewardRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SeaLampTakePhaseRewardRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SeaLampTakePhaseRewardRsp& from);
  void MergeFrom(const SeaLampTakePhaseRewardRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SeaLampTakePhaseRewardRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SeaLampTakePhaseRewardRsp_CmdId CmdId;
  static const CmdId NONE =
    SeaLampTakePhaseRewardRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    SeaLampTakePhaseRewardRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    SeaLampTakePhaseRewardRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    SeaLampTakePhaseRewardRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return SeaLampTakePhaseRewardRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    SeaLampTakePhaseRewardRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    SeaLampTakePhaseRewardRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    SeaLampTakePhaseRewardRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return SeaLampTakePhaseRewardRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return SeaLampTakePhaseRewardRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return SeaLampTakePhaseRewardRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 phase_id = 2;
  void clear_phase_id();
  static const int kPhaseIdFieldNumber = 2;
  ::google::protobuf::uint32 phase_id() const;
  void set_phase_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.SeaLampTakePhaseRewardRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 phase_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5factivity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SeaLampContributeItemReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SeaLampContributeItemReq) */ {
 public:
  SeaLampContributeItemReq();
  virtual ~SeaLampContributeItemReq();

  SeaLampContributeItemReq(const SeaLampContributeItemReq& from);

  inline SeaLampContributeItemReq& operator=(const SeaLampContributeItemReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeaLampContributeItemReq(SeaLampContributeItemReq&& from) noexcept
    : SeaLampContributeItemReq() {
    *this = ::std::move(from);
  }

  inline SeaLampContributeItemReq& operator=(SeaLampContributeItemReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeaLampContributeItemReq& default_instance();

  static inline const SeaLampContributeItemReq* internal_default_instance() {
    return reinterpret_cast<const SeaLampContributeItemReq*>(
               &_SeaLampContributeItemReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(SeaLampContributeItemReq* other);
  friend void swap(SeaLampContributeItemReq& a, SeaLampContributeItemReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeaLampContributeItemReq* New() const PROTOBUF_FINAL { return New(NULL); }

  SeaLampContributeItemReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SeaLampContributeItemReq& from);
  void MergeFrom(const SeaLampContributeItemReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SeaLampContributeItemReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SeaLampContributeItemReq_CmdId CmdId;
  static const CmdId NONE =
    SeaLampContributeItemReq_CmdId_NONE;
  static const CmdId CMD_ID =
    SeaLampContributeItemReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    SeaLampContributeItemReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    SeaLampContributeItemReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    SeaLampContributeItemReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return SeaLampContributeItemReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    SeaLampContributeItemReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    SeaLampContributeItemReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    SeaLampContributeItemReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return SeaLampContributeItemReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return SeaLampContributeItemReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return SeaLampContributeItemReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.ItemParam item_list = 1;
  int item_list_size() const;
  void clear_item_list();
  static const int kItemListFieldNumber = 1;
  const ::proto::ItemParam& item_list(int index) const;
  ::proto::ItemParam* mutable_item_list(int index);
  ::proto::ItemParam* add_item_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
      mutable_item_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
      item_list() const;

  // @@protoc_insertion_point(class_scope:proto.SeaLampContributeItemReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam > item_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5factivity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SeaLampContributeItemRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SeaLampContributeItemRsp) */ {
 public:
  SeaLampContributeItemRsp();
  virtual ~SeaLampContributeItemRsp();

  SeaLampContributeItemRsp(const SeaLampContributeItemRsp& from);

  inline SeaLampContributeItemRsp& operator=(const SeaLampContributeItemRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeaLampContributeItemRsp(SeaLampContributeItemRsp&& from) noexcept
    : SeaLampContributeItemRsp() {
    *this = ::std::move(from);
  }

  inline SeaLampContributeItemRsp& operator=(SeaLampContributeItemRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeaLampContributeItemRsp& default_instance();

  static inline const SeaLampContributeItemRsp* internal_default_instance() {
    return reinterpret_cast<const SeaLampContributeItemRsp*>(
               &_SeaLampContributeItemRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(SeaLampContributeItemRsp* other);
  friend void swap(SeaLampContributeItemRsp& a, SeaLampContributeItemRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeaLampContributeItemRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SeaLampContributeItemRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SeaLampContributeItemRsp& from);
  void MergeFrom(const SeaLampContributeItemRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SeaLampContributeItemRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SeaLampContributeItemRsp_CmdId CmdId;
  static const CmdId NONE =
    SeaLampContributeItemRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    SeaLampContributeItemRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    SeaLampContributeItemRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    SeaLampContributeItemRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return SeaLampContributeItemRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    SeaLampContributeItemRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    SeaLampContributeItemRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    SeaLampContributeItemRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return SeaLampContributeItemRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return SeaLampContributeItemRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return SeaLampContributeItemRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 total_contribution = 2;
  void clear_total_contribution();
  static const int kTotalContributionFieldNumber = 2;
  ::google::protobuf::uint32 total_contribution() const;
  void set_total_contribution(::google::protobuf::uint32 value);

  // uint32 add_contribution = 3;
  void clear_add_contribution();
  static const int kAddContributionFieldNumber = 3;
  ::google::protobuf::uint32 add_contribution() const;
  void set_add_contribution(::google::protobuf::uint32 value);

  // uint32 add_progress = 4;
  void clear_add_progress();
  static const int kAddProgressFieldNumber = 4;
  ::google::protobuf::uint32 add_progress() const;
  void set_add_progress(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.SeaLampContributeItemRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 total_contribution_;
  ::google::protobuf::uint32 add_contribution_;
  ::google::protobuf::uint32 add_progress_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5factivity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnnounceData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.AnnounceData) */ {
 public:
  AnnounceData();
  virtual ~AnnounceData();

  AnnounceData(const AnnounceData& from);

  inline AnnounceData& operator=(const AnnounceData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnnounceData(AnnounceData&& from) noexcept
    : AnnounceData() {
    *this = ::std::move(from);
  }

  inline AnnounceData& operator=(AnnounceData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnounceData& default_instance();

  static inline const AnnounceData* internal_default_instance() {
    return reinterpret_cast<const AnnounceData*>(
               &_AnnounceData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(AnnounceData* other);
  friend void swap(AnnounceData& a, AnnounceData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnnounceData* New() const PROTOBUF_FINAL { return New(NULL); }

  AnnounceData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AnnounceData& from);
  void MergeFrom(const AnnounceData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AnnounceData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string center_system_text = 4;
  void clear_center_system_text();
  static const int kCenterSystemTextFieldNumber = 4;
  const ::std::string& center_system_text() const;
  void set_center_system_text(const ::std::string& value);
  #if LANG_CXX11
  void set_center_system_text(::std::string&& value);
  #endif
  void set_center_system_text(const char* value);
  void set_center_system_text(const char* value, size_t size);
  ::std::string* mutable_center_system_text();
  ::std::string* release_center_system_text();
  void set_allocated_center_system_text(::std::string* center_system_text);

  // string count_down_text = 5;
  void clear_count_down_text();
  static const int kCountDownTextFieldNumber = 5;
  const ::std::string& count_down_text() const;
  void set_count_down_text(const ::std::string& value);
  #if LANG_CXX11
  void set_count_down_text(::std::string&& value);
  #endif
  void set_count_down_text(const char* value);
  void set_count_down_text(const char* value, size_t size);
  ::std::string* mutable_count_down_text();
  ::std::string* release_count_down_text();
  void set_allocated_count_down_text(::std::string* count_down_text);

  // string dungeon_confirm_text = 6;
  void clear_dungeon_confirm_text();
  static const int kDungeonConfirmTextFieldNumber = 6;
  const ::std::string& dungeon_confirm_text() const;
  void set_dungeon_confirm_text(const ::std::string& value);
  #if LANG_CXX11
  void set_dungeon_confirm_text(::std::string&& value);
  #endif
  void set_dungeon_confirm_text(const char* value);
  void set_dungeon_confirm_text(const char* value, size_t size);
  ::std::string* mutable_dungeon_confirm_text();
  ::std::string* release_dungeon_confirm_text();
  void set_allocated_dungeon_confirm_text(::std::string* dungeon_confirm_text);

  // uint32 config_id = 1;
  void clear_config_id();
  static const int kConfigIdFieldNumber = 1;
  ::google::protobuf::uint32 config_id() const;
  void set_config_id(::google::protobuf::uint32 value);

  // uint32 begin_time = 2;
  void clear_begin_time();
  static const int kBeginTimeFieldNumber = 2;
  ::google::protobuf::uint32 begin_time() const;
  void set_begin_time(::google::protobuf::uint32 value);

  // uint32 end_time = 3;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 3;
  ::google::protobuf::uint32 end_time() const;
  void set_end_time(::google::protobuf::uint32 value);

  // uint32 center_system_frequency = 7;
  void clear_center_system_frequency();
  static const int kCenterSystemFrequencyFieldNumber = 7;
  ::google::protobuf::uint32 center_system_frequency() const;
  void set_center_system_frequency(::google::protobuf::uint32 value);

  // uint32 count_down_frequency = 8;
  void clear_count_down_frequency();
  static const int kCountDownFrequencyFieldNumber = 8;
  ::google::protobuf::uint32 count_down_frequency() const;
  void set_count_down_frequency(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.AnnounceData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr center_system_text_;
  ::google::protobuf::internal::ArenaStringPtr count_down_text_;
  ::google::protobuf::internal::ArenaStringPtr dungeon_confirm_text_;
  ::google::protobuf::uint32 config_id_;
  ::google::protobuf::uint32 begin_time_;
  ::google::protobuf::uint32 end_time_;
  ::google::protobuf::uint32 center_system_frequency_;
  ::google::protobuf::uint32 count_down_frequency_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5factivity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoadActivityTerrainNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.LoadActivityTerrainNotify) */ {
 public:
  LoadActivityTerrainNotify();
  virtual ~LoadActivityTerrainNotify();

  LoadActivityTerrainNotify(const LoadActivityTerrainNotify& from);

  inline LoadActivityTerrainNotify& operator=(const LoadActivityTerrainNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadActivityTerrainNotify(LoadActivityTerrainNotify&& from) noexcept
    : LoadActivityTerrainNotify() {
    *this = ::std::move(from);
  }

  inline LoadActivityTerrainNotify& operator=(LoadActivityTerrainNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadActivityTerrainNotify& default_instance();

  static inline const LoadActivityTerrainNotify* internal_default_instance() {
    return reinterpret_cast<const LoadActivityTerrainNotify*>(
               &_LoadActivityTerrainNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(LoadActivityTerrainNotify* other);
  friend void swap(LoadActivityTerrainNotify& a, LoadActivityTerrainNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadActivityTerrainNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  LoadActivityTerrainNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoadActivityTerrainNotify& from);
  void MergeFrom(const LoadActivityTerrainNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoadActivityTerrainNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef LoadActivityTerrainNotify_CmdId CmdId;
  static const CmdId NONE =
    LoadActivityTerrainNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    LoadActivityTerrainNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    LoadActivityTerrainNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    LoadActivityTerrainNotify_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    LoadActivityTerrainNotify_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return LoadActivityTerrainNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    LoadActivityTerrainNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    LoadActivityTerrainNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    LoadActivityTerrainNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return LoadActivityTerrainNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return LoadActivityTerrainNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return LoadActivityTerrainNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 activity_id = 1;
  void clear_activity_id();
  static const int kActivityIdFieldNumber = 1;
  ::google::protobuf::uint32 activity_id() const;
  void set_activity_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.LoadActivityTerrainNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 activity_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5factivity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerAnnounceNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ServerAnnounceNotify) */ {
 public:
  ServerAnnounceNotify();
  virtual ~ServerAnnounceNotify();

  ServerAnnounceNotify(const ServerAnnounceNotify& from);

  inline ServerAnnounceNotify& operator=(const ServerAnnounceNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerAnnounceNotify(ServerAnnounceNotify&& from) noexcept
    : ServerAnnounceNotify() {
    *this = ::std::move(from);
  }

  inline ServerAnnounceNotify& operator=(ServerAnnounceNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerAnnounceNotify& default_instance();

  static inline const ServerAnnounceNotify* internal_default_instance() {
    return reinterpret_cast<const ServerAnnounceNotify*>(
               &_ServerAnnounceNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(ServerAnnounceNotify* other);
  friend void swap(ServerAnnounceNotify& a, ServerAnnounceNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerAnnounceNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerAnnounceNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerAnnounceNotify& from);
  void MergeFrom(const ServerAnnounceNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerAnnounceNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ServerAnnounceNotify_CmdId CmdId;
  static const CmdId NONE =
    ServerAnnounceNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    ServerAnnounceNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    ServerAnnounceNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    ServerAnnounceNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return ServerAnnounceNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    ServerAnnounceNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    ServerAnnounceNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    ServerAnnounceNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return ServerAnnounceNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return ServerAnnounceNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return ServerAnnounceNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.AnnounceData announce_data_list = 1;
  int announce_data_list_size() const;
  void clear_announce_data_list();
  static const int kAnnounceDataListFieldNumber = 1;
  const ::proto::AnnounceData& announce_data_list(int index) const;
  ::proto::AnnounceData* mutable_announce_data_list(int index);
  ::proto::AnnounceData* add_announce_data_list();
  ::google::protobuf::RepeatedPtrField< ::proto::AnnounceData >*
      mutable_announce_data_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::AnnounceData >&
      announce_data_list() const;

  // @@protoc_insertion_point(class_scope:proto.ServerAnnounceNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::AnnounceData > announce_data_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5factivity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerAnnounceRevokeNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ServerAnnounceRevokeNotify) */ {
 public:
  ServerAnnounceRevokeNotify();
  virtual ~ServerAnnounceRevokeNotify();

  ServerAnnounceRevokeNotify(const ServerAnnounceRevokeNotify& from);

  inline ServerAnnounceRevokeNotify& operator=(const ServerAnnounceRevokeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerAnnounceRevokeNotify(ServerAnnounceRevokeNotify&& from) noexcept
    : ServerAnnounceRevokeNotify() {
    *this = ::std::move(from);
  }

  inline ServerAnnounceRevokeNotify& operator=(ServerAnnounceRevokeNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerAnnounceRevokeNotify& default_instance();

  static inline const ServerAnnounceRevokeNotify* internal_default_instance() {
    return reinterpret_cast<const ServerAnnounceRevokeNotify*>(
               &_ServerAnnounceRevokeNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(ServerAnnounceRevokeNotify* other);
  friend void swap(ServerAnnounceRevokeNotify& a, ServerAnnounceRevokeNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerAnnounceRevokeNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerAnnounceRevokeNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerAnnounceRevokeNotify& from);
  void MergeFrom(const ServerAnnounceRevokeNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerAnnounceRevokeNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ServerAnnounceRevokeNotify_CmdId CmdId;
  static const CmdId NONE =
    ServerAnnounceRevokeNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    ServerAnnounceRevokeNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    ServerAnnounceRevokeNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    ServerAnnounceRevokeNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return ServerAnnounceRevokeNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    ServerAnnounceRevokeNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    ServerAnnounceRevokeNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    ServerAnnounceRevokeNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return ServerAnnounceRevokeNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return ServerAnnounceRevokeNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return ServerAnnounceRevokeNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 config_id_list = 1;
  int config_id_list_size() const;
  void clear_config_id_list();
  static const int kConfigIdListFieldNumber = 1;
  ::google::protobuf::uint32 config_id_list(int index) const;
  void set_config_id_list(int index, ::google::protobuf::uint32 value);
  void add_config_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      config_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_config_id_list();

  // @@protoc_insertion_point(class_scope:proto.ServerAnnounceRevokeNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > config_id_list_;
  mutable int _config_id_list_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5factivity_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetActivityScheduleReq

// -------------------------------------------------------------------

// ActivityScheduleInfo

// uint32 activity_id = 1;
inline void ActivityScheduleInfo::clear_activity_id() {
  activity_id_ = 0u;
}
inline ::google::protobuf::uint32 ActivityScheduleInfo::activity_id() const {
  // @@protoc_insertion_point(field_get:proto.ActivityScheduleInfo.activity_id)
  return activity_id_;
}
inline void ActivityScheduleInfo::set_activity_id(::google::protobuf::uint32 value) {
  
  activity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityScheduleInfo.activity_id)
}

// bool is_open = 2;
inline void ActivityScheduleInfo::clear_is_open() {
  is_open_ = false;
}
inline bool ActivityScheduleInfo::is_open() const {
  // @@protoc_insertion_point(field_get:proto.ActivityScheduleInfo.is_open)
  return is_open_;
}
inline void ActivityScheduleInfo::set_is_open(bool value) {
  
  is_open_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityScheduleInfo.is_open)
}

// uint32 schedule_id = 3;
inline void ActivityScheduleInfo::clear_schedule_id() {
  schedule_id_ = 0u;
}
inline ::google::protobuf::uint32 ActivityScheduleInfo::schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.ActivityScheduleInfo.schedule_id)
  return schedule_id_;
}
inline void ActivityScheduleInfo::set_schedule_id(::google::protobuf::uint32 value) {
  
  schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityScheduleInfo.schedule_id)
}

// uint32 begin_time = 4;
inline void ActivityScheduleInfo::clear_begin_time() {
  begin_time_ = 0u;
}
inline ::google::protobuf::uint32 ActivityScheduleInfo::begin_time() const {
  // @@protoc_insertion_point(field_get:proto.ActivityScheduleInfo.begin_time)
  return begin_time_;
}
inline void ActivityScheduleInfo::set_begin_time(::google::protobuf::uint32 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityScheduleInfo.begin_time)
}

// uint32 end_time = 5;
inline void ActivityScheduleInfo::clear_end_time() {
  end_time_ = 0u;
}
inline ::google::protobuf::uint32 ActivityScheduleInfo::end_time() const {
  // @@protoc_insertion_point(field_get:proto.ActivityScheduleInfo.end_time)
  return end_time_;
}
inline void ActivityScheduleInfo::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityScheduleInfo.end_time)
}

// -------------------------------------------------------------------

// GetActivityScheduleRsp

// int32 retcode = 1;
inline void GetActivityScheduleRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GetActivityScheduleRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetActivityScheduleRsp.retcode)
  return retcode_;
}
inline void GetActivityScheduleRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetActivityScheduleRsp.retcode)
}

// repeated .proto.ActivityScheduleInfo activity_schedule_list = 2;
inline int GetActivityScheduleRsp::activity_schedule_list_size() const {
  return activity_schedule_list_.size();
}
inline void GetActivityScheduleRsp::clear_activity_schedule_list() {
  activity_schedule_list_.Clear();
}
inline const ::proto::ActivityScheduleInfo& GetActivityScheduleRsp::activity_schedule_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetActivityScheduleRsp.activity_schedule_list)
  return activity_schedule_list_.Get(index);
}
inline ::proto::ActivityScheduleInfo* GetActivityScheduleRsp::mutable_activity_schedule_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetActivityScheduleRsp.activity_schedule_list)
  return activity_schedule_list_.Mutable(index);
}
inline ::proto::ActivityScheduleInfo* GetActivityScheduleRsp::add_activity_schedule_list() {
  // @@protoc_insertion_point(field_add:proto.GetActivityScheduleRsp.activity_schedule_list)
  return activity_schedule_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ActivityScheduleInfo >*
GetActivityScheduleRsp::mutable_activity_schedule_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetActivityScheduleRsp.activity_schedule_list)
  return &activity_schedule_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ActivityScheduleInfo >&
GetActivityScheduleRsp::activity_schedule_list() const {
  // @@protoc_insertion_point(field_list:proto.GetActivityScheduleRsp.activity_schedule_list)
  return activity_schedule_list_;
}

// uint32 remain_fly_sea_lamp_num = 3;
inline void GetActivityScheduleRsp::clear_remain_fly_sea_lamp_num() {
  remain_fly_sea_lamp_num_ = 0u;
}
inline ::google::protobuf::uint32 GetActivityScheduleRsp::remain_fly_sea_lamp_num() const {
  // @@protoc_insertion_point(field_get:proto.GetActivityScheduleRsp.remain_fly_sea_lamp_num)
  return remain_fly_sea_lamp_num_;
}
inline void GetActivityScheduleRsp::set_remain_fly_sea_lamp_num(::google::protobuf::uint32 value) {
  
  remain_fly_sea_lamp_num_ = value;
  // @@protoc_insertion_point(field_set:proto.GetActivityScheduleRsp.remain_fly_sea_lamp_num)
}

// -------------------------------------------------------------------

// GetActivityInfoReq

// repeated uint32 activity_id_list = 1;
inline int GetActivityInfoReq::activity_id_list_size() const {
  return activity_id_list_.size();
}
inline void GetActivityInfoReq::clear_activity_id_list() {
  activity_id_list_.Clear();
}
inline ::google::protobuf::uint32 GetActivityInfoReq::activity_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetActivityInfoReq.activity_id_list)
  return activity_id_list_.Get(index);
}
inline void GetActivityInfoReq::set_activity_id_list(int index, ::google::protobuf::uint32 value) {
  activity_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GetActivityInfoReq.activity_id_list)
}
inline void GetActivityInfoReq::add_activity_id_list(::google::protobuf::uint32 value) {
  activity_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GetActivityInfoReq.activity_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GetActivityInfoReq::activity_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GetActivityInfoReq.activity_id_list)
  return activity_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GetActivityInfoReq::mutable_activity_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetActivityInfoReq.activity_id_list)
  return &activity_id_list_;
}

// -------------------------------------------------------------------

// ActivityInfo

// uint32 activity_id = 1;
inline void ActivityInfo::clear_activity_id() {
  activity_id_ = 0u;
}
inline ::google::protobuf::uint32 ActivityInfo::activity_id() const {
  // @@protoc_insertion_point(field_get:proto.ActivityInfo.activity_id)
  return activity_id_;
}
inline void ActivityInfo::set_activity_id(::google::protobuf::uint32 value) {
  
  activity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityInfo.activity_id)
}

// uint32 schedule_id = 2;
inline void ActivityInfo::clear_schedule_id() {
  schedule_id_ = 0u;
}
inline ::google::protobuf::uint32 ActivityInfo::schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.ActivityInfo.schedule_id)
  return schedule_id_;
}
inline void ActivityInfo::set_schedule_id(::google::protobuf::uint32 value) {
  
  schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityInfo.schedule_id)
}

// uint32 begin_time = 3;
inline void ActivityInfo::clear_begin_time() {
  begin_time_ = 0u;
}
inline ::google::protobuf::uint32 ActivityInfo::begin_time() const {
  // @@protoc_insertion_point(field_get:proto.ActivityInfo.begin_time)
  return begin_time_;
}
inline void ActivityInfo::set_begin_time(::google::protobuf::uint32 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityInfo.begin_time)
}

// uint32 end_time = 4;
inline void ActivityInfo::clear_end_time() {
  end_time_ = 0u;
}
inline ::google::protobuf::uint32 ActivityInfo::end_time() const {
  // @@protoc_insertion_point(field_get:proto.ActivityInfo.end_time)
  return end_time_;
}
inline void ActivityInfo::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityInfo.end_time)
}

// uint32 activity_type = 5;
inline void ActivityInfo::clear_activity_type() {
  activity_type_ = 0u;
}
inline ::google::protobuf::uint32 ActivityInfo::activity_type() const {
  // @@protoc_insertion_point(field_get:proto.ActivityInfo.activity_type)
  return activity_type_;
}
inline void ActivityInfo::set_activity_type(::google::protobuf::uint32 value) {
  
  activity_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityInfo.activity_type)
}

// bool is_play_open_anim = 6;
inline void ActivityInfo::clear_is_play_open_anim() {
  is_play_open_anim_ = false;
}
inline bool ActivityInfo::is_play_open_anim() const {
  // @@protoc_insertion_point(field_get:proto.ActivityInfo.is_play_open_anim)
  return is_play_open_anim_;
}
inline void ActivityInfo::set_is_play_open_anim(bool value) {
  
  is_play_open_anim_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityInfo.is_play_open_anim)
}

// bool is_finished = 7;
inline void ActivityInfo::clear_is_finished() {
  is_finished_ = false;
}
inline bool ActivityInfo::is_finished() const {
  // @@protoc_insertion_point(field_get:proto.ActivityInfo.is_finished)
  return is_finished_;
}
inline void ActivityInfo::set_is_finished(bool value) {
  
  is_finished_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityInfo.is_finished)
}

// bool is_starting = 8;
inline void ActivityInfo::clear_is_starting() {
  is_starting_ = false;
}
inline bool ActivityInfo::is_starting() const {
  // @@protoc_insertion_point(field_get:proto.ActivityInfo.is_starting)
  return is_starting_;
}
inline void ActivityInfo::set_is_starting(bool value) {
  
  is_starting_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityInfo.is_starting)
}

// .proto.SeaLampActivityDetailInfo sam_lamp_info = 11;
inline bool ActivityInfo::has_sam_lamp_info() const {
  return detail_case() == kSamLampInfo;
}
inline void ActivityInfo::set_has_sam_lamp_info() {
  _oneof_case_[0] = kSamLampInfo;
}
inline void ActivityInfo::clear_sam_lamp_info() {
  if (has_sam_lamp_info()) {
    delete detail_.sam_lamp_info_;
    clear_has_detail();
  }
}
inline  const ::proto::SeaLampActivityDetailInfo& ActivityInfo::sam_lamp_info() const {
  // @@protoc_insertion_point(field_get:proto.ActivityInfo.sam_lamp_info)
  return has_sam_lamp_info()
      ? *detail_.sam_lamp_info_
      : ::proto::SeaLampActivityDetailInfo::default_instance();
}
inline ::proto::SeaLampActivityDetailInfo* ActivityInfo::mutable_sam_lamp_info() {
  if (!has_sam_lamp_info()) {
    clear_detail();
    set_has_sam_lamp_info();
    detail_.sam_lamp_info_ = new ::proto::SeaLampActivityDetailInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.ActivityInfo.sam_lamp_info)
  return detail_.sam_lamp_info_;
}
inline ::proto::SeaLampActivityDetailInfo* ActivityInfo::release_sam_lamp_info() {
  // @@protoc_insertion_point(field_release:proto.ActivityInfo.sam_lamp_info)
  if (has_sam_lamp_info()) {
    clear_has_detail();
    ::proto::SeaLampActivityDetailInfo* temp = detail_.sam_lamp_info_;
    detail_.sam_lamp_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ActivityInfo::set_allocated_sam_lamp_info(::proto::SeaLampActivityDetailInfo* sam_lamp_info) {
  clear_detail();
  if (sam_lamp_info) {
    set_has_sam_lamp_info();
    detail_.sam_lamp_info_ = sam_lamp_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ActivityInfo.sam_lamp_info)
}

inline bool ActivityInfo::has_detail() const {
  return detail_case() != DETAIL_NOT_SET;
}
inline void ActivityInfo::clear_has_detail() {
  _oneof_case_[0] = DETAIL_NOT_SET;
}
inline ActivityInfo::DetailCase ActivityInfo::detail_case() const {
  return ActivityInfo::DetailCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetActivityInfoRsp

// int32 retcode = 1;
inline void GetActivityInfoRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GetActivityInfoRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetActivityInfoRsp.retcode)
  return retcode_;
}
inline void GetActivityInfoRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetActivityInfoRsp.retcode)
}

// repeated .proto.ActivityInfo activity_info_list = 2;
inline int GetActivityInfoRsp::activity_info_list_size() const {
  return activity_info_list_.size();
}
inline void GetActivityInfoRsp::clear_activity_info_list() {
  activity_info_list_.Clear();
}
inline const ::proto::ActivityInfo& GetActivityInfoRsp::activity_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetActivityInfoRsp.activity_info_list)
  return activity_info_list_.Get(index);
}
inline ::proto::ActivityInfo* GetActivityInfoRsp::mutable_activity_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetActivityInfoRsp.activity_info_list)
  return activity_info_list_.Mutable(index);
}
inline ::proto::ActivityInfo* GetActivityInfoRsp::add_activity_info_list() {
  // @@protoc_insertion_point(field_add:proto.GetActivityInfoRsp.activity_info_list)
  return activity_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ActivityInfo >*
GetActivityInfoRsp::mutable_activity_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetActivityInfoRsp.activity_info_list)
  return &activity_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ActivityInfo >&
GetActivityInfoRsp::activity_info_list() const {
  // @@protoc_insertion_point(field_list:proto.GetActivityInfoRsp.activity_info_list)
  return activity_info_list_;
}

// -------------------------------------------------------------------

// ActivityPlayOpenAnimNotify

// uint32 activity_id = 1;
inline void ActivityPlayOpenAnimNotify::clear_activity_id() {
  activity_id_ = 0u;
}
inline ::google::protobuf::uint32 ActivityPlayOpenAnimNotify::activity_id() const {
  // @@protoc_insertion_point(field_get:proto.ActivityPlayOpenAnimNotify.activity_id)
  return activity_id_;
}
inline void ActivityPlayOpenAnimNotify::set_activity_id(::google::protobuf::uint32 value) {
  
  activity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityPlayOpenAnimNotify.activity_id)
}

// -------------------------------------------------------------------

// ActivityInfoNotify

// .proto.ActivityInfo activity_info = 1;
inline bool ActivityInfoNotify::has_activity_info() const {
  return this != internal_default_instance() && activity_info_ != NULL;
}
inline void ActivityInfoNotify::clear_activity_info() {
  if (GetArenaNoVirtual() == NULL && activity_info_ != NULL) delete activity_info_;
  activity_info_ = NULL;
}
inline const ::proto::ActivityInfo& ActivityInfoNotify::activity_info() const {
  const ::proto::ActivityInfo* p = activity_info_;
  // @@protoc_insertion_point(field_get:proto.ActivityInfoNotify.activity_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ActivityInfo*>(
      &::proto::_ActivityInfo_default_instance_);
}
inline ::proto::ActivityInfo* ActivityInfoNotify::mutable_activity_info() {
  
  if (activity_info_ == NULL) {
    activity_info_ = new ::proto::ActivityInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.ActivityInfoNotify.activity_info)
  return activity_info_;
}
inline ::proto::ActivityInfo* ActivityInfoNotify::release_activity_info() {
  // @@protoc_insertion_point(field_release:proto.ActivityInfoNotify.activity_info)
  
  ::proto::ActivityInfo* temp = activity_info_;
  activity_info_ = NULL;
  return temp;
}
inline void ActivityInfoNotify::set_allocated_activity_info(::proto::ActivityInfo* activity_info) {
  delete activity_info_;
  activity_info_ = activity_info;
  if (activity_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ActivityInfoNotify.activity_info)
}

// -------------------------------------------------------------------

// ActivityScheduleInfoNotify

// repeated .proto.ActivityScheduleInfo activity_schedule_list = 1;
inline int ActivityScheduleInfoNotify::activity_schedule_list_size() const {
  return activity_schedule_list_.size();
}
inline void ActivityScheduleInfoNotify::clear_activity_schedule_list() {
  activity_schedule_list_.Clear();
}
inline const ::proto::ActivityScheduleInfo& ActivityScheduleInfoNotify::activity_schedule_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ActivityScheduleInfoNotify.activity_schedule_list)
  return activity_schedule_list_.Get(index);
}
inline ::proto::ActivityScheduleInfo* ActivityScheduleInfoNotify::mutable_activity_schedule_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ActivityScheduleInfoNotify.activity_schedule_list)
  return activity_schedule_list_.Mutable(index);
}
inline ::proto::ActivityScheduleInfo* ActivityScheduleInfoNotify::add_activity_schedule_list() {
  // @@protoc_insertion_point(field_add:proto.ActivityScheduleInfoNotify.activity_schedule_list)
  return activity_schedule_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ActivityScheduleInfo >*
ActivityScheduleInfoNotify::mutable_activity_schedule_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ActivityScheduleInfoNotify.activity_schedule_list)
  return &activity_schedule_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ActivityScheduleInfo >&
ActivityScheduleInfoNotify::activity_schedule_list() const {
  // @@protoc_insertion_point(field_list:proto.ActivityScheduleInfoNotify.activity_schedule_list)
  return activity_schedule_list_;
}

// uint32 remain_fly_sea_lamp_num = 2;
inline void ActivityScheduleInfoNotify::clear_remain_fly_sea_lamp_num() {
  remain_fly_sea_lamp_num_ = 0u;
}
inline ::google::protobuf::uint32 ActivityScheduleInfoNotify::remain_fly_sea_lamp_num() const {
  // @@protoc_insertion_point(field_get:proto.ActivityScheduleInfoNotify.remain_fly_sea_lamp_num)
  return remain_fly_sea_lamp_num_;
}
inline void ActivityScheduleInfoNotify::set_remain_fly_sea_lamp_num(::google::protobuf::uint32 value) {
  
  remain_fly_sea_lamp_num_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityScheduleInfoNotify.remain_fly_sea_lamp_num)
}

// -------------------------------------------------------------------

// SeaLampActivityDetailInfo

// uint32 phase_id = 1;
inline void SeaLampActivityDetailInfo::clear_phase_id() {
  phase_id_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampActivityDetailInfo::phase_id() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampActivityDetailInfo.phase_id)
  return phase_id_;
}
inline void SeaLampActivityDetailInfo::set_phase_id(::google::protobuf::uint32 value) {
  
  phase_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampActivityDetailInfo.phase_id)
}

// uint32 progress = 2;
inline void SeaLampActivityDetailInfo::clear_progress() {
  progress_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampActivityDetailInfo::progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampActivityDetailInfo.progress)
  return progress_;
}
inline void SeaLampActivityDetailInfo::set_progress(::google::protobuf::uint32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampActivityDetailInfo.progress)
}

// uint32 days = 3;
inline void SeaLampActivityDetailInfo::clear_days() {
  days_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampActivityDetailInfo::days() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampActivityDetailInfo.days)
  return days_;
}
inline void SeaLampActivityDetailInfo::set_days(::google::protobuf::uint32 value) {
  
  days_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampActivityDetailInfo.days)
}

// uint32 contribution = 4;
inline void SeaLampActivityDetailInfo::clear_contribution() {
  contribution_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampActivityDetailInfo::contribution() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampActivityDetailInfo.contribution)
  return contribution_;
}
inline void SeaLampActivityDetailInfo::set_contribution(::google::protobuf::uint32 value) {
  
  contribution_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampActivityDetailInfo.contribution)
}

// repeated uint32 taken_contribution_reward_list = 5;
inline int SeaLampActivityDetailInfo::taken_contribution_reward_list_size() const {
  return taken_contribution_reward_list_.size();
}
inline void SeaLampActivityDetailInfo::clear_taken_contribution_reward_list() {
  taken_contribution_reward_list_.Clear();
}
inline ::google::protobuf::uint32 SeaLampActivityDetailInfo::taken_contribution_reward_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SeaLampActivityDetailInfo.taken_contribution_reward_list)
  return taken_contribution_reward_list_.Get(index);
}
inline void SeaLampActivityDetailInfo::set_taken_contribution_reward_list(int index, ::google::protobuf::uint32 value) {
  taken_contribution_reward_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.SeaLampActivityDetailInfo.taken_contribution_reward_list)
}
inline void SeaLampActivityDetailInfo::add_taken_contribution_reward_list(::google::protobuf::uint32 value) {
  taken_contribution_reward_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.SeaLampActivityDetailInfo.taken_contribution_reward_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SeaLampActivityDetailInfo::taken_contribution_reward_list() const {
  // @@protoc_insertion_point(field_list:proto.SeaLampActivityDetailInfo.taken_contribution_reward_list)
  return taken_contribution_reward_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SeaLampActivityDetailInfo::mutable_taken_contribution_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SeaLampActivityDetailInfo.taken_contribution_reward_list)
  return &taken_contribution_reward_list_;
}

// repeated uint32 taken_phase_reward_list = 6;
inline int SeaLampActivityDetailInfo::taken_phase_reward_list_size() const {
  return taken_phase_reward_list_.size();
}
inline void SeaLampActivityDetailInfo::clear_taken_phase_reward_list() {
  taken_phase_reward_list_.Clear();
}
inline ::google::protobuf::uint32 SeaLampActivityDetailInfo::taken_phase_reward_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SeaLampActivityDetailInfo.taken_phase_reward_list)
  return taken_phase_reward_list_.Get(index);
}
inline void SeaLampActivityDetailInfo::set_taken_phase_reward_list(int index, ::google::protobuf::uint32 value) {
  taken_phase_reward_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.SeaLampActivityDetailInfo.taken_phase_reward_list)
}
inline void SeaLampActivityDetailInfo::add_taken_phase_reward_list(::google::protobuf::uint32 value) {
  taken_phase_reward_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.SeaLampActivityDetailInfo.taken_phase_reward_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SeaLampActivityDetailInfo::taken_phase_reward_list() const {
  // @@protoc_insertion_point(field_list:proto.SeaLampActivityDetailInfo.taken_phase_reward_list)
  return taken_phase_reward_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SeaLampActivityDetailInfo::mutable_taken_phase_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SeaLampActivityDetailInfo.taken_phase_reward_list)
  return &taken_phase_reward_list_;
}

// uint32 factor = 7;
inline void SeaLampActivityDetailInfo::clear_factor() {
  factor_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampActivityDetailInfo::factor() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampActivityDetailInfo.factor)
  return factor_;
}
inline void SeaLampActivityDetailInfo::set_factor(::google::protobuf::uint32 value) {
  
  factor_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampActivityDetailInfo.factor)
}

// -------------------------------------------------------------------

// SeaLampFlyLampReq

// uint32 item_id = 1;
inline void SeaLampFlyLampReq::clear_item_id() {
  item_id_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampFlyLampReq::item_id() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampFlyLampReq.item_id)
  return item_id_;
}
inline void SeaLampFlyLampReq::set_item_id(::google::protobuf::uint32 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampFlyLampReq.item_id)
}

// string wish_text = 2;
inline void SeaLampFlyLampReq::clear_wish_text() {
  wish_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SeaLampFlyLampReq::wish_text() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampFlyLampReq.wish_text)
  return wish_text_.GetNoArena();
}
inline void SeaLampFlyLampReq::set_wish_text(const ::std::string& value) {
  
  wish_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SeaLampFlyLampReq.wish_text)
}
#if LANG_CXX11
inline void SeaLampFlyLampReq::set_wish_text(::std::string&& value) {
  
  wish_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SeaLampFlyLampReq.wish_text)
}
#endif
inline void SeaLampFlyLampReq::set_wish_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wish_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SeaLampFlyLampReq.wish_text)
}
inline void SeaLampFlyLampReq::set_wish_text(const char* value, size_t size) {
  
  wish_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SeaLampFlyLampReq.wish_text)
}
inline ::std::string* SeaLampFlyLampReq::mutable_wish_text() {
  
  // @@protoc_insertion_point(field_mutable:proto.SeaLampFlyLampReq.wish_text)
  return wish_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeaLampFlyLampReq::release_wish_text() {
  // @@protoc_insertion_point(field_release:proto.SeaLampFlyLampReq.wish_text)
  
  return wish_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeaLampFlyLampReq::set_allocated_wish_text(::std::string* wish_text) {
  if (wish_text != NULL) {
    
  } else {
    
  }
  wish_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wish_text);
  // @@protoc_insertion_point(field_set_allocated:proto.SeaLampFlyLampReq.wish_text)
}

// uint32 item_num = 3;
inline void SeaLampFlyLampReq::clear_item_num() {
  item_num_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampFlyLampReq::item_num() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampFlyLampReq.item_num)
  return item_num_;
}
inline void SeaLampFlyLampReq::set_item_num(::google::protobuf::uint32 value) {
  
  item_num_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampFlyLampReq.item_num)
}

// -------------------------------------------------------------------

// SeaLampFlyLampRsp

// int32 retcode = 1;
inline void SeaLampFlyLampRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 SeaLampFlyLampRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampFlyLampRsp.retcode)
  return retcode_;
}
inline void SeaLampFlyLampRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampFlyLampRsp.retcode)
}

// uint32 total_contribution = 2;
inline void SeaLampFlyLampRsp::clear_total_contribution() {
  total_contribution_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampFlyLampRsp::total_contribution() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampFlyLampRsp.total_contribution)
  return total_contribution_;
}
inline void SeaLampFlyLampRsp::set_total_contribution(::google::protobuf::uint32 value) {
  
  total_contribution_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampFlyLampRsp.total_contribution)
}

// uint32 remain_fly_num = 3;
inline void SeaLampFlyLampRsp::clear_remain_fly_num() {
  remain_fly_num_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampFlyLampRsp::remain_fly_num() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampFlyLampRsp.remain_fly_num)
  return remain_fly_num_;
}
inline void SeaLampFlyLampRsp::set_remain_fly_num(::google::protobuf::uint32 value) {
  
  remain_fly_num_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampFlyLampRsp.remain_fly_num)
}

// uint32 add_contribution = 4;
inline void SeaLampFlyLampRsp::clear_add_contribution() {
  add_contribution_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampFlyLampRsp::add_contribution() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampFlyLampRsp.add_contribution)
  return add_contribution_;
}
inline void SeaLampFlyLampRsp::set_add_contribution(::google::protobuf::uint32 value) {
  
  add_contribution_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampFlyLampRsp.add_contribution)
}

// uint32 add_progress = 5;
inline void SeaLampFlyLampRsp::clear_add_progress() {
  add_progress_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampFlyLampRsp::add_progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampFlyLampRsp.add_progress)
  return add_progress_;
}
inline void SeaLampFlyLampRsp::set_add_progress(::google::protobuf::uint32 value) {
  
  add_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampFlyLampRsp.add_progress)
}

// uint32 item_num = 6;
inline void SeaLampFlyLampRsp::clear_item_num() {
  item_num_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampFlyLampRsp::item_num() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampFlyLampRsp.item_num)
  return item_num_;
}
inline void SeaLampFlyLampRsp::set_item_num(::google::protobuf::uint32 value) {
  
  item_num_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampFlyLampRsp.item_num)
}

// -------------------------------------------------------------------

// SeaLampTakeContributionRewardReq

// uint32 config_id = 1;
inline void SeaLampTakeContributionRewardReq::clear_config_id() {
  config_id_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampTakeContributionRewardReq::config_id() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampTakeContributionRewardReq.config_id)
  return config_id_;
}
inline void SeaLampTakeContributionRewardReq::set_config_id(::google::protobuf::uint32 value) {
  
  config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampTakeContributionRewardReq.config_id)
}

// -------------------------------------------------------------------

// SeaLampTakeContributionRewardRsp

// int32 retcode = 1;
inline void SeaLampTakeContributionRewardRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 SeaLampTakeContributionRewardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampTakeContributionRewardRsp.retcode)
  return retcode_;
}
inline void SeaLampTakeContributionRewardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampTakeContributionRewardRsp.retcode)
}

// uint32 config_id = 2;
inline void SeaLampTakeContributionRewardRsp::clear_config_id() {
  config_id_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampTakeContributionRewardRsp::config_id() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampTakeContributionRewardRsp.config_id)
  return config_id_;
}
inline void SeaLampTakeContributionRewardRsp::set_config_id(::google::protobuf::uint32 value) {
  
  config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampTakeContributionRewardRsp.config_id)
}

// -------------------------------------------------------------------

// SeaLampTakePhaseRewardReq

// uint32 phase_id = 1;
inline void SeaLampTakePhaseRewardReq::clear_phase_id() {
  phase_id_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampTakePhaseRewardReq::phase_id() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampTakePhaseRewardReq.phase_id)
  return phase_id_;
}
inline void SeaLampTakePhaseRewardReq::set_phase_id(::google::protobuf::uint32 value) {
  
  phase_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampTakePhaseRewardReq.phase_id)
}

// -------------------------------------------------------------------

// SeaLampTakePhaseRewardRsp

// int32 retcode = 1;
inline void SeaLampTakePhaseRewardRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 SeaLampTakePhaseRewardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampTakePhaseRewardRsp.retcode)
  return retcode_;
}
inline void SeaLampTakePhaseRewardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampTakePhaseRewardRsp.retcode)
}

// uint32 phase_id = 2;
inline void SeaLampTakePhaseRewardRsp::clear_phase_id() {
  phase_id_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampTakePhaseRewardRsp::phase_id() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampTakePhaseRewardRsp.phase_id)
  return phase_id_;
}
inline void SeaLampTakePhaseRewardRsp::set_phase_id(::google::protobuf::uint32 value) {
  
  phase_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampTakePhaseRewardRsp.phase_id)
}

// -------------------------------------------------------------------

// SeaLampContributeItemReq

// repeated .proto.ItemParam item_list = 1;
inline int SeaLampContributeItemReq::item_list_size() const {
  return item_list_.size();
}
inline void SeaLampContributeItemReq::clear_item_list() {
  item_list_.Clear();
}
inline const ::proto::ItemParam& SeaLampContributeItemReq::item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SeaLampContributeItemReq.item_list)
  return item_list_.Get(index);
}
inline ::proto::ItemParam* SeaLampContributeItemReq::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.SeaLampContributeItemReq.item_list)
  return item_list_.Mutable(index);
}
inline ::proto::ItemParam* SeaLampContributeItemReq::add_item_list() {
  // @@protoc_insertion_point(field_add:proto.SeaLampContributeItemReq.item_list)
  return item_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
SeaLampContributeItemReq::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SeaLampContributeItemReq.item_list)
  return &item_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
SeaLampContributeItemReq::item_list() const {
  // @@protoc_insertion_point(field_list:proto.SeaLampContributeItemReq.item_list)
  return item_list_;
}

// -------------------------------------------------------------------

// SeaLampContributeItemRsp

// int32 retcode = 1;
inline void SeaLampContributeItemRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 SeaLampContributeItemRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampContributeItemRsp.retcode)
  return retcode_;
}
inline void SeaLampContributeItemRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampContributeItemRsp.retcode)
}

// uint32 total_contribution = 2;
inline void SeaLampContributeItemRsp::clear_total_contribution() {
  total_contribution_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampContributeItemRsp::total_contribution() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampContributeItemRsp.total_contribution)
  return total_contribution_;
}
inline void SeaLampContributeItemRsp::set_total_contribution(::google::protobuf::uint32 value) {
  
  total_contribution_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampContributeItemRsp.total_contribution)
}

// uint32 add_contribution = 3;
inline void SeaLampContributeItemRsp::clear_add_contribution() {
  add_contribution_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampContributeItemRsp::add_contribution() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampContributeItemRsp.add_contribution)
  return add_contribution_;
}
inline void SeaLampContributeItemRsp::set_add_contribution(::google::protobuf::uint32 value) {
  
  add_contribution_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampContributeItemRsp.add_contribution)
}

// uint32 add_progress = 4;
inline void SeaLampContributeItemRsp::clear_add_progress() {
  add_progress_ = 0u;
}
inline ::google::protobuf::uint32 SeaLampContributeItemRsp::add_progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampContributeItemRsp.add_progress)
  return add_progress_;
}
inline void SeaLampContributeItemRsp::set_add_progress(::google::protobuf::uint32 value) {
  
  add_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampContributeItemRsp.add_progress)
}

// -------------------------------------------------------------------

// AnnounceData

// uint32 config_id = 1;
inline void AnnounceData::clear_config_id() {
  config_id_ = 0u;
}
inline ::google::protobuf::uint32 AnnounceData::config_id() const {
  // @@protoc_insertion_point(field_get:proto.AnnounceData.config_id)
  return config_id_;
}
inline void AnnounceData::set_config_id(::google::protobuf::uint32 value) {
  
  config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AnnounceData.config_id)
}

// uint32 begin_time = 2;
inline void AnnounceData::clear_begin_time() {
  begin_time_ = 0u;
}
inline ::google::protobuf::uint32 AnnounceData::begin_time() const {
  // @@protoc_insertion_point(field_get:proto.AnnounceData.begin_time)
  return begin_time_;
}
inline void AnnounceData::set_begin_time(::google::protobuf::uint32 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:proto.AnnounceData.begin_time)
}

// uint32 end_time = 3;
inline void AnnounceData::clear_end_time() {
  end_time_ = 0u;
}
inline ::google::protobuf::uint32 AnnounceData::end_time() const {
  // @@protoc_insertion_point(field_get:proto.AnnounceData.end_time)
  return end_time_;
}
inline void AnnounceData::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.AnnounceData.end_time)
}

// string center_system_text = 4;
inline void AnnounceData::clear_center_system_text() {
  center_system_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AnnounceData::center_system_text() const {
  // @@protoc_insertion_point(field_get:proto.AnnounceData.center_system_text)
  return center_system_text_.GetNoArena();
}
inline void AnnounceData::set_center_system_text(const ::std::string& value) {
  
  center_system_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AnnounceData.center_system_text)
}
#if LANG_CXX11
inline void AnnounceData::set_center_system_text(::std::string&& value) {
  
  center_system_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AnnounceData.center_system_text)
}
#endif
inline void AnnounceData::set_center_system_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  center_system_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AnnounceData.center_system_text)
}
inline void AnnounceData::set_center_system_text(const char* value, size_t size) {
  
  center_system_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AnnounceData.center_system_text)
}
inline ::std::string* AnnounceData::mutable_center_system_text() {
  
  // @@protoc_insertion_point(field_mutable:proto.AnnounceData.center_system_text)
  return center_system_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnnounceData::release_center_system_text() {
  // @@protoc_insertion_point(field_release:proto.AnnounceData.center_system_text)
  
  return center_system_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnnounceData::set_allocated_center_system_text(::std::string* center_system_text) {
  if (center_system_text != NULL) {
    
  } else {
    
  }
  center_system_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), center_system_text);
  // @@protoc_insertion_point(field_set_allocated:proto.AnnounceData.center_system_text)
}

// string count_down_text = 5;
inline void AnnounceData::clear_count_down_text() {
  count_down_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AnnounceData::count_down_text() const {
  // @@protoc_insertion_point(field_get:proto.AnnounceData.count_down_text)
  return count_down_text_.GetNoArena();
}
inline void AnnounceData::set_count_down_text(const ::std::string& value) {
  
  count_down_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AnnounceData.count_down_text)
}
#if LANG_CXX11
inline void AnnounceData::set_count_down_text(::std::string&& value) {
  
  count_down_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AnnounceData.count_down_text)
}
#endif
inline void AnnounceData::set_count_down_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  count_down_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AnnounceData.count_down_text)
}
inline void AnnounceData::set_count_down_text(const char* value, size_t size) {
  
  count_down_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AnnounceData.count_down_text)
}
inline ::std::string* AnnounceData::mutable_count_down_text() {
  
  // @@protoc_insertion_point(field_mutable:proto.AnnounceData.count_down_text)
  return count_down_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnnounceData::release_count_down_text() {
  // @@protoc_insertion_point(field_release:proto.AnnounceData.count_down_text)
  
  return count_down_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnnounceData::set_allocated_count_down_text(::std::string* count_down_text) {
  if (count_down_text != NULL) {
    
  } else {
    
  }
  count_down_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), count_down_text);
  // @@protoc_insertion_point(field_set_allocated:proto.AnnounceData.count_down_text)
}

// string dungeon_confirm_text = 6;
inline void AnnounceData::clear_dungeon_confirm_text() {
  dungeon_confirm_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AnnounceData::dungeon_confirm_text() const {
  // @@protoc_insertion_point(field_get:proto.AnnounceData.dungeon_confirm_text)
  return dungeon_confirm_text_.GetNoArena();
}
inline void AnnounceData::set_dungeon_confirm_text(const ::std::string& value) {
  
  dungeon_confirm_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AnnounceData.dungeon_confirm_text)
}
#if LANG_CXX11
inline void AnnounceData::set_dungeon_confirm_text(::std::string&& value) {
  
  dungeon_confirm_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AnnounceData.dungeon_confirm_text)
}
#endif
inline void AnnounceData::set_dungeon_confirm_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dungeon_confirm_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AnnounceData.dungeon_confirm_text)
}
inline void AnnounceData::set_dungeon_confirm_text(const char* value, size_t size) {
  
  dungeon_confirm_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AnnounceData.dungeon_confirm_text)
}
inline ::std::string* AnnounceData::mutable_dungeon_confirm_text() {
  
  // @@protoc_insertion_point(field_mutable:proto.AnnounceData.dungeon_confirm_text)
  return dungeon_confirm_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnnounceData::release_dungeon_confirm_text() {
  // @@protoc_insertion_point(field_release:proto.AnnounceData.dungeon_confirm_text)
  
  return dungeon_confirm_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnnounceData::set_allocated_dungeon_confirm_text(::std::string* dungeon_confirm_text) {
  if (dungeon_confirm_text != NULL) {
    
  } else {
    
  }
  dungeon_confirm_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dungeon_confirm_text);
  // @@protoc_insertion_point(field_set_allocated:proto.AnnounceData.dungeon_confirm_text)
}

// uint32 center_system_frequency = 7;
inline void AnnounceData::clear_center_system_frequency() {
  center_system_frequency_ = 0u;
}
inline ::google::protobuf::uint32 AnnounceData::center_system_frequency() const {
  // @@protoc_insertion_point(field_get:proto.AnnounceData.center_system_frequency)
  return center_system_frequency_;
}
inline void AnnounceData::set_center_system_frequency(::google::protobuf::uint32 value) {
  
  center_system_frequency_ = value;
  // @@protoc_insertion_point(field_set:proto.AnnounceData.center_system_frequency)
}

// uint32 count_down_frequency = 8;
inline void AnnounceData::clear_count_down_frequency() {
  count_down_frequency_ = 0u;
}
inline ::google::protobuf::uint32 AnnounceData::count_down_frequency() const {
  // @@protoc_insertion_point(field_get:proto.AnnounceData.count_down_frequency)
  return count_down_frequency_;
}
inline void AnnounceData::set_count_down_frequency(::google::protobuf::uint32 value) {
  
  count_down_frequency_ = value;
  // @@protoc_insertion_point(field_set:proto.AnnounceData.count_down_frequency)
}

// -------------------------------------------------------------------

// LoadActivityTerrainNotify

// uint32 activity_id = 1;
inline void LoadActivityTerrainNotify::clear_activity_id() {
  activity_id_ = 0u;
}
inline ::google::protobuf::uint32 LoadActivityTerrainNotify::activity_id() const {
  // @@protoc_insertion_point(field_get:proto.LoadActivityTerrainNotify.activity_id)
  return activity_id_;
}
inline void LoadActivityTerrainNotify::set_activity_id(::google::protobuf::uint32 value) {
  
  activity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.LoadActivityTerrainNotify.activity_id)
}

// -------------------------------------------------------------------

// ServerAnnounceNotify

// repeated .proto.AnnounceData announce_data_list = 1;
inline int ServerAnnounceNotify::announce_data_list_size() const {
  return announce_data_list_.size();
}
inline void ServerAnnounceNotify::clear_announce_data_list() {
  announce_data_list_.Clear();
}
inline const ::proto::AnnounceData& ServerAnnounceNotify::announce_data_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ServerAnnounceNotify.announce_data_list)
  return announce_data_list_.Get(index);
}
inline ::proto::AnnounceData* ServerAnnounceNotify::mutable_announce_data_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ServerAnnounceNotify.announce_data_list)
  return announce_data_list_.Mutable(index);
}
inline ::proto::AnnounceData* ServerAnnounceNotify::add_announce_data_list() {
  // @@protoc_insertion_point(field_add:proto.ServerAnnounceNotify.announce_data_list)
  return announce_data_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::AnnounceData >*
ServerAnnounceNotify::mutable_announce_data_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ServerAnnounceNotify.announce_data_list)
  return &announce_data_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::AnnounceData >&
ServerAnnounceNotify::announce_data_list() const {
  // @@protoc_insertion_point(field_list:proto.ServerAnnounceNotify.announce_data_list)
  return announce_data_list_;
}

// -------------------------------------------------------------------

// ServerAnnounceRevokeNotify

// repeated uint32 config_id_list = 1;
inline int ServerAnnounceRevokeNotify::config_id_list_size() const {
  return config_id_list_.size();
}
inline void ServerAnnounceRevokeNotify::clear_config_id_list() {
  config_id_list_.Clear();
}
inline ::google::protobuf::uint32 ServerAnnounceRevokeNotify::config_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ServerAnnounceRevokeNotify.config_id_list)
  return config_id_list_.Get(index);
}
inline void ServerAnnounceRevokeNotify::set_config_id_list(int index, ::google::protobuf::uint32 value) {
  config_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ServerAnnounceRevokeNotify.config_id_list)
}
inline void ServerAnnounceRevokeNotify::add_config_id_list(::google::protobuf::uint32 value) {
  config_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.ServerAnnounceRevokeNotify.config_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ServerAnnounceRevokeNotify::config_id_list() const {
  // @@protoc_insertion_point(field_list:proto.ServerAnnounceRevokeNotify.config_id_list)
  return config_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ServerAnnounceRevokeNotify::mutable_config_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ServerAnnounceRevokeNotify.config_id_list)
  return &config_id_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::GetActivityScheduleReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GetActivityScheduleReq_CmdId>() {
  return ::proto::GetActivityScheduleReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::GetActivityScheduleRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GetActivityScheduleRsp_CmdId>() {
  return ::proto::GetActivityScheduleRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::GetActivityInfoReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GetActivityInfoReq_CmdId>() {
  return ::proto::GetActivityInfoReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::GetActivityInfoRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GetActivityInfoRsp_CmdId>() {
  return ::proto::GetActivityInfoRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::ActivityPlayOpenAnimNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ActivityPlayOpenAnimNotify_CmdId>() {
  return ::proto::ActivityPlayOpenAnimNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::ActivityInfoNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ActivityInfoNotify_CmdId>() {
  return ::proto::ActivityInfoNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::ActivityScheduleInfoNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ActivityScheduleInfoNotify_CmdId>() {
  return ::proto::ActivityScheduleInfoNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::SeaLampFlyLampReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::SeaLampFlyLampReq_CmdId>() {
  return ::proto::SeaLampFlyLampReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::SeaLampFlyLampRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::SeaLampFlyLampRsp_CmdId>() {
  return ::proto::SeaLampFlyLampRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::SeaLampTakeContributionRewardReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::SeaLampTakeContributionRewardReq_CmdId>() {
  return ::proto::SeaLampTakeContributionRewardReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::SeaLampTakeContributionRewardRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::SeaLampTakeContributionRewardRsp_CmdId>() {
  return ::proto::SeaLampTakeContributionRewardRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::SeaLampTakePhaseRewardReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::SeaLampTakePhaseRewardReq_CmdId>() {
  return ::proto::SeaLampTakePhaseRewardReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::SeaLampTakePhaseRewardRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::SeaLampTakePhaseRewardRsp_CmdId>() {
  return ::proto::SeaLampTakePhaseRewardRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::SeaLampContributeItemReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::SeaLampContributeItemReq_CmdId>() {
  return ::proto::SeaLampContributeItemReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::SeaLampContributeItemRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::SeaLampContributeItemRsp_CmdId>() {
  return ::proto::SeaLampContributeItemRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::LoadActivityTerrainNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::LoadActivityTerrainNotify_CmdId>() {
  return ::proto::LoadActivityTerrainNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::ServerAnnounceNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ServerAnnounceNotify_CmdId>() {
  return ::proto::ServerAnnounceNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::ServerAnnounceRevokeNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ServerAnnounceRevokeNotify_CmdId>() {
  return ::proto::ServerAnnounceRevokeNotify_CmdId_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cmd_2fcmd_5factivity_2eproto__INCLUDED
