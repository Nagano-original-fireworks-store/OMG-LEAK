// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_gacha.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cmd/cmd_gacha.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
class GetGachaInfoReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetGachaInfoReq>
     _instance;
} _GetGachaInfoReq_default_instance_;
class GachaInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GachaInfo>
     _instance;
} _GachaInfo_default_instance_;
class GetGachaInfoRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetGachaInfoRsp>
     _instance;
} _GetGachaInfoRsp_default_instance_;
class DoGachaReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DoGachaReq>
     _instance;
} _DoGachaReq_default_instance_;
class GachaTransferItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GachaTransferItem>
     _instance;
} _GachaTransferItem_default_instance_;
class GachaItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GachaItem>
     _instance;
} _GachaItem_default_instance_;
class DoGachaRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DoGachaRsp>
     _instance;
} _DoGachaRsp_default_instance_;

namespace protobuf_cmd_2fcmd_5fgacha_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGachaInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaInfo, gacha_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaInfo, schedule_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaInfo, begin_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaInfo, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaInfo, cost_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaInfo, cost_item_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaInfo, gacha_prefab_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaInfo, gacha_prob_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaInfo, gacha_record_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaInfo, gacha_preview_prefab_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaInfo, ten_cost_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaInfo, ten_cost_item_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaInfo, left_gacha_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaInfo, gacha_times_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaInfo, gacha_sort_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGachaInfoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGachaInfoRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGachaInfoRsp, gacha_info_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGachaInfoRsp, gacha_random_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoGachaReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoGachaReq, gacha_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoGachaReq, gacha_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoGachaReq, gacha_random_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoGachaReq, gacha_schedule_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoGachaReq, gacha_tag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaTransferItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaTransferItem, item_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaTransferItem, is_transfer_item_new_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaItem, gacha_item_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaItem, transfer_items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaItem, is_flash_card_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaItem, is_gacha_item_new_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GachaItem, token_item_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoGachaRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoGachaRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoGachaRsp, gacha_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoGachaRsp, gacha_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoGachaRsp, gacha_schedule_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoGachaRsp, gacha_item_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoGachaRsp, new_gacha_random_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoGachaRsp, cost_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoGachaRsp, cost_item_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoGachaRsp, ten_cost_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoGachaRsp, ten_cost_item_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoGachaRsp, left_gacha_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoGachaRsp, gacha_times_limit_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(GetGachaInfoReq)},
  { 5, -1, sizeof(GachaInfo)},
  { 25, -1, sizeof(GetGachaInfoRsp)},
  { 33, -1, sizeof(DoGachaReq)},
  { 43, -1, sizeof(GachaTransferItem)},
  { 50, -1, sizeof(GachaItem)},
  { 60, -1, sizeof(DoGachaRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetGachaInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GachaInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetGachaInfoRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DoGachaReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GachaTransferItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GachaItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DoGachaRsp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cmd/cmd_gacha.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::protobuf_define_2eproto::InitDefaults();
  _GetGachaInfoReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetGachaInfoReq_default_instance_);_GachaInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GachaInfo_default_instance_);_GetGachaInfoRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetGachaInfoRsp_default_instance_);_DoGachaReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DoGachaReq_default_instance_);_GachaTransferItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GachaTransferItem_default_instance_);_GachaItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GachaItem_default_instance_);_DoGachaRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DoGachaRsp_default_instance_);_GachaTransferItem_default_instance_._instance.get_mutable()->item_ = const_cast< ::proto::ItemParam*>(
      ::proto::ItemParam::internal_default_instance());
  _GachaItem_default_instance_._instance.get_mutable()->gacha_item_ = const_cast< ::proto::ItemParam*>(
      ::proto::ItemParam::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023cmd/cmd_gacha.proto\022\005proto\032\014define.pro"
      "to\"u\n\017GetGachaInfoReq\"b\n\005CmdId\022\010\n\004NONE\020\000"
      "\022\013\n\006CMD_ID\020\335\013\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020EN"
      "ET_IS_RELIABLE\020\001\022\023\n\017IS_ALLOW_CLIENT\020\001\032\002\020"
      "\001\"\370\002\n\tGachaInfo\022\022\n\ngacha_type\030\001 \001(\r\022\023\n\013s"
      "chedule_id\030\002 \001(\r\022\022\n\nbegin_time\030\003 \001(\r\022\020\n\010"
      "end_time\030\004 \001(\r\022\024\n\014cost_item_id\030\005 \001(\r\022\025\n\r"
      "cost_item_num\030\006 \001(\r\022\031\n\021gacha_prefab_path"
      "\030\007 \001(\t\022\026\n\016gacha_prob_url\030\010 \001(\t\022\030\n\020gacha_"
      "record_url\030\t \001(\t\022!\n\031gacha_preview_prefab"
      "_path\030\n \001(\t\022\030\n\020ten_cost_item_id\030\013 \001(\r\022\031\n"
      "\021ten_cost_item_num\030\014 \001(\r\022\030\n\020left_gacha_t"
      "imes\030\r \001(\r\022\031\n\021gacha_times_limit\030\016 \001(\r\022\025\n"
      "\rgacha_sort_id\030\017 \001(\r\"\262\001\n\017GetGachaInfoRsp"
      "\022\017\n\007retcode\030\001 \001(\005\022)\n\017gacha_info_list\030\002 \003"
      "(\0132\020.proto.GachaInfo\022\024\n\014gacha_random\030\003 \001"
      "(\r\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\336\013\022\023\n\017EN"
      "ET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020"
      "\001\"\335\001\n\nDoGachaReq\022\022\n\ngacha_type\030\001 \001(\r\022\023\n\013"
      "gacha_times\030\002 \001(\r\022\024\n\014gacha_random\030\003 \001(\r\022"
      "\031\n\021gacha_schedule_id\030\004 \001(\r\022\021\n\tgacha_tag\030"
      "\005 \001(\t\"b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\337\013\022\023\n"
      "\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001"
      "\022\023\n\017IS_ALLOW_CLIENT\020\001\032\002\020\001\"Q\n\021GachaTransf"
      "erItem\022\036\n\004item\030\001 \001(\0132\020.proto.ItemParam\022\034"
      "\n\024is_transfer_item_new\030\002 \001(\010\"\300\001\n\tGachaIt"
      "em\022$\n\ngacha_item\030\001 \001(\0132\020.proto.ItemParam"
      "\0220\n\016transfer_items\030\002 \003(\0132\030.proto.GachaTr"
      "ansferItem\022\025\n\ris_flash_card\030\003 \001(\010\022\031\n\021is_"
      "gacha_item_new\030\004 \001(\010\022)\n\017token_item_list\030"
      "\005 \003(\0132\020.proto.ItemParam\"\214\003\n\nDoGachaRsp\022\017"
      "\n\007retcode\030\001 \001(\005\022\022\n\ngacha_type\030\002 \001(\r\022\023\n\013g"
      "acha_times\030\003 \001(\r\022\031\n\021gacha_schedule_id\030\004 "
      "\001(\r\022)\n\017gacha_item_list\030\005 \003(\0132\020.proto.Gac"
      "haItem\022\030\n\020new_gacha_random\030\006 \001(\r\022\024\n\014cost"
      "_item_id\030\007 \001(\r\022\025\n\rcost_item_num\030\010 \001(\r\022\030\n"
      "\020ten_cost_item_id\030\t \001(\r\022\031\n\021ten_cost_item"
      "_num\030\n \001(\r\022\030\n\020left_gacha_times\030\013 \001(\r\022\031\n\021"
      "gacha_times_limit\030\014 \001(\r\"M\n\005CmdId\022\010\n\004NONE"
      "\020\000\022\013\n\006CMD_ID\020\340\013\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020"
      "ENET_IS_RELIABLE\020\001\032\002\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1630);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cmd/cmd_gacha.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_define_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cmd_2fcmd_5fgacha_2eproto

const ::google::protobuf::EnumDescriptor* GetGachaInfoReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fgacha_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgacha_2eproto::file_level_enum_descriptors[0];
}
bool GetGachaInfoReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1501:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GetGachaInfoReq_CmdId GetGachaInfoReq::NONE;
const GetGachaInfoReq_CmdId GetGachaInfoReq::CMD_ID;
const GetGachaInfoReq_CmdId GetGachaInfoReq::ENET_CHANNEL_ID;
const GetGachaInfoReq_CmdId GetGachaInfoReq::ENET_IS_RELIABLE;
const GetGachaInfoReq_CmdId GetGachaInfoReq::IS_ALLOW_CLIENT;
const GetGachaInfoReq_CmdId GetGachaInfoReq::CmdId_MIN;
const GetGachaInfoReq_CmdId GetGachaInfoReq::CmdId_MAX;
const int GetGachaInfoReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GetGachaInfoRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fgacha_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgacha_2eproto::file_level_enum_descriptors[1];
}
bool GetGachaInfoRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1502:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GetGachaInfoRsp_CmdId GetGachaInfoRsp::NONE;
const GetGachaInfoRsp_CmdId GetGachaInfoRsp::CMD_ID;
const GetGachaInfoRsp_CmdId GetGachaInfoRsp::ENET_CHANNEL_ID;
const GetGachaInfoRsp_CmdId GetGachaInfoRsp::ENET_IS_RELIABLE;
const GetGachaInfoRsp_CmdId GetGachaInfoRsp::CmdId_MIN;
const GetGachaInfoRsp_CmdId GetGachaInfoRsp::CmdId_MAX;
const int GetGachaInfoRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DoGachaReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fgacha_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgacha_2eproto::file_level_enum_descriptors[2];
}
bool DoGachaReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1503:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DoGachaReq_CmdId DoGachaReq::NONE;
const DoGachaReq_CmdId DoGachaReq::CMD_ID;
const DoGachaReq_CmdId DoGachaReq::ENET_CHANNEL_ID;
const DoGachaReq_CmdId DoGachaReq::ENET_IS_RELIABLE;
const DoGachaReq_CmdId DoGachaReq::IS_ALLOW_CLIENT;
const DoGachaReq_CmdId DoGachaReq::CmdId_MIN;
const DoGachaReq_CmdId DoGachaReq::CmdId_MAX;
const int DoGachaReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DoGachaRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fgacha_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgacha_2eproto::file_level_enum_descriptors[3];
}
bool DoGachaRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1504:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DoGachaRsp_CmdId DoGachaRsp::NONE;
const DoGachaRsp_CmdId DoGachaRsp::CMD_ID;
const DoGachaRsp_CmdId DoGachaRsp::ENET_CHANNEL_ID;
const DoGachaRsp_CmdId DoGachaRsp::ENET_IS_RELIABLE;
const DoGachaRsp_CmdId DoGachaRsp::CmdId_MIN;
const DoGachaRsp_CmdId DoGachaRsp::CmdId_MAX;
const int DoGachaRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetGachaInfoReq::GetGachaInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgacha_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetGachaInfoReq)
}
GetGachaInfoReq::GetGachaInfoReq(const GetGachaInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GetGachaInfoReq)
}

void GetGachaInfoReq::SharedCtor() {
  _cached_size_ = 0;
}

GetGachaInfoReq::~GetGachaInfoReq() {
  // @@protoc_insertion_point(destructor:proto.GetGachaInfoReq)
  SharedDtor();
}

void GetGachaInfoReq::SharedDtor() {
}

void GetGachaInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGachaInfoReq::descriptor() {
  protobuf_cmd_2fcmd_5fgacha_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgacha_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetGachaInfoReq& GetGachaInfoReq::default_instance() {
  protobuf_cmd_2fcmd_5fgacha_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetGachaInfoReq* GetGachaInfoReq::New(::google::protobuf::Arena* arena) const {
  GetGachaInfoReq* n = new GetGachaInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetGachaInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetGachaInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GetGachaInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetGachaInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetGachaInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetGachaInfoReq)
  return false;
#undef DO_
}

void GetGachaInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetGachaInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetGachaInfoReq)
}

::google::protobuf::uint8* GetGachaInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetGachaInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetGachaInfoReq)
  return target;
}

size_t GetGachaInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetGachaInfoReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGachaInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetGachaInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGachaInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetGachaInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetGachaInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetGachaInfoReq)
    MergeFrom(*source);
  }
}

void GetGachaInfoReq::MergeFrom(const GetGachaInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetGachaInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetGachaInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetGachaInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGachaInfoReq::CopyFrom(const GetGachaInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetGachaInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGachaInfoReq::IsInitialized() const {
  return true;
}

void GetGachaInfoReq::Swap(GetGachaInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetGachaInfoReq::InternalSwap(GetGachaInfoReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetGachaInfoReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgacha_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgacha_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetGachaInfoReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GachaInfo::kGachaTypeFieldNumber;
const int GachaInfo::kScheduleIdFieldNumber;
const int GachaInfo::kBeginTimeFieldNumber;
const int GachaInfo::kEndTimeFieldNumber;
const int GachaInfo::kCostItemIdFieldNumber;
const int GachaInfo::kCostItemNumFieldNumber;
const int GachaInfo::kGachaPrefabPathFieldNumber;
const int GachaInfo::kGachaProbUrlFieldNumber;
const int GachaInfo::kGachaRecordUrlFieldNumber;
const int GachaInfo::kGachaPreviewPrefabPathFieldNumber;
const int GachaInfo::kTenCostItemIdFieldNumber;
const int GachaInfo::kTenCostItemNumFieldNumber;
const int GachaInfo::kLeftGachaTimesFieldNumber;
const int GachaInfo::kGachaTimesLimitFieldNumber;
const int GachaInfo::kGachaSortIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GachaInfo::GachaInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgacha_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GachaInfo)
}
GachaInfo::GachaInfo(const GachaInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gacha_prefab_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gacha_prefab_path().size() > 0) {
    gacha_prefab_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gacha_prefab_path_);
  }
  gacha_prob_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gacha_prob_url().size() > 0) {
    gacha_prob_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gacha_prob_url_);
  }
  gacha_record_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gacha_record_url().size() > 0) {
    gacha_record_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gacha_record_url_);
  }
  gacha_preview_prefab_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gacha_preview_prefab_path().size() > 0) {
    gacha_preview_prefab_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gacha_preview_prefab_path_);
  }
  ::memcpy(&gacha_type_, &from.gacha_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&gacha_sort_id_) -
    reinterpret_cast<char*>(&gacha_type_)) + sizeof(gacha_sort_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GachaInfo)
}

void GachaInfo::SharedCtor() {
  gacha_prefab_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gacha_prob_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gacha_record_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gacha_preview_prefab_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gacha_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gacha_sort_id_) -
      reinterpret_cast<char*>(&gacha_type_)) + sizeof(gacha_sort_id_));
  _cached_size_ = 0;
}

GachaInfo::~GachaInfo() {
  // @@protoc_insertion_point(destructor:proto.GachaInfo)
  SharedDtor();
}

void GachaInfo::SharedDtor() {
  gacha_prefab_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gacha_prob_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gacha_record_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gacha_preview_prefab_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GachaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GachaInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgacha_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgacha_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GachaInfo& GachaInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgacha_2eproto::InitDefaults();
  return *internal_default_instance();
}

GachaInfo* GachaInfo::New(::google::protobuf::Arena* arena) const {
  GachaInfo* n = new GachaInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GachaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GachaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gacha_prefab_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gacha_prob_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gacha_record_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gacha_preview_prefab_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gacha_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gacha_sort_id_) -
      reinterpret_cast<char*>(&gacha_type_)) + sizeof(gacha_sort_id_));
  _internal_metadata_.Clear();
}

bool GachaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GachaInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 gacha_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gacha_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 schedule_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schedule_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 begin_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cost_item_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cost_item_num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_item_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gacha_prefab_path = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gacha_prefab_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gacha_prefab_path().data(), static_cast<int>(this->gacha_prefab_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.GachaInfo.gacha_prefab_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gacha_prob_url = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gacha_prob_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gacha_prob_url().data(), static_cast<int>(this->gacha_prob_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.GachaInfo.gacha_prob_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gacha_record_url = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gacha_record_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gacha_record_url().data(), static_cast<int>(this->gacha_record_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.GachaInfo.gacha_record_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gacha_preview_prefab_path = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gacha_preview_prefab_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gacha_preview_prefab_path().data(), static_cast<int>(this->gacha_preview_prefab_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.GachaInfo.gacha_preview_prefab_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ten_cost_item_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ten_cost_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ten_cost_item_num = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ten_cost_item_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 left_gacha_times = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_gacha_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gacha_times_limit = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gacha_times_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gacha_sort_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gacha_sort_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GachaInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GachaInfo)
  return false;
#undef DO_
}

void GachaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GachaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gacha_type = 1;
  if (this->gacha_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gacha_type(), output);
  }

  // uint32 schedule_id = 2;
  if (this->schedule_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->schedule_id(), output);
  }

  // uint32 begin_time = 3;
  if (this->begin_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->begin_time(), output);
  }

  // uint32 end_time = 4;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end_time(), output);
  }

  // uint32 cost_item_id = 5;
  if (this->cost_item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cost_item_id(), output);
  }

  // uint32 cost_item_num = 6;
  if (this->cost_item_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cost_item_num(), output);
  }

  // string gacha_prefab_path = 7;
  if (this->gacha_prefab_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gacha_prefab_path().data(), static_cast<int>(this->gacha_prefab_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GachaInfo.gacha_prefab_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->gacha_prefab_path(), output);
  }

  // string gacha_prob_url = 8;
  if (this->gacha_prob_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gacha_prob_url().data(), static_cast<int>(this->gacha_prob_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GachaInfo.gacha_prob_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->gacha_prob_url(), output);
  }

  // string gacha_record_url = 9;
  if (this->gacha_record_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gacha_record_url().data(), static_cast<int>(this->gacha_record_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GachaInfo.gacha_record_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->gacha_record_url(), output);
  }

  // string gacha_preview_prefab_path = 10;
  if (this->gacha_preview_prefab_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gacha_preview_prefab_path().data(), static_cast<int>(this->gacha_preview_prefab_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GachaInfo.gacha_preview_prefab_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->gacha_preview_prefab_path(), output);
  }

  // uint32 ten_cost_item_id = 11;
  if (this->ten_cost_item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->ten_cost_item_id(), output);
  }

  // uint32 ten_cost_item_num = 12;
  if (this->ten_cost_item_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->ten_cost_item_num(), output);
  }

  // uint32 left_gacha_times = 13;
  if (this->left_gacha_times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->left_gacha_times(), output);
  }

  // uint32 gacha_times_limit = 14;
  if (this->gacha_times_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->gacha_times_limit(), output);
  }

  // uint32 gacha_sort_id = 15;
  if (this->gacha_sort_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->gacha_sort_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GachaInfo)
}

::google::protobuf::uint8* GachaInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GachaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gacha_type = 1;
  if (this->gacha_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gacha_type(), target);
  }

  // uint32 schedule_id = 2;
  if (this->schedule_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->schedule_id(), target);
  }

  // uint32 begin_time = 3;
  if (this->begin_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->begin_time(), target);
  }

  // uint32 end_time = 4;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end_time(), target);
  }

  // uint32 cost_item_id = 5;
  if (this->cost_item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cost_item_id(), target);
  }

  // uint32 cost_item_num = 6;
  if (this->cost_item_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cost_item_num(), target);
  }

  // string gacha_prefab_path = 7;
  if (this->gacha_prefab_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gacha_prefab_path().data(), static_cast<int>(this->gacha_prefab_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GachaInfo.gacha_prefab_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->gacha_prefab_path(), target);
  }

  // string gacha_prob_url = 8;
  if (this->gacha_prob_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gacha_prob_url().data(), static_cast<int>(this->gacha_prob_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GachaInfo.gacha_prob_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->gacha_prob_url(), target);
  }

  // string gacha_record_url = 9;
  if (this->gacha_record_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gacha_record_url().data(), static_cast<int>(this->gacha_record_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GachaInfo.gacha_record_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->gacha_record_url(), target);
  }

  // string gacha_preview_prefab_path = 10;
  if (this->gacha_preview_prefab_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gacha_preview_prefab_path().data(), static_cast<int>(this->gacha_preview_prefab_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GachaInfo.gacha_preview_prefab_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->gacha_preview_prefab_path(), target);
  }

  // uint32 ten_cost_item_id = 11;
  if (this->ten_cost_item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->ten_cost_item_id(), target);
  }

  // uint32 ten_cost_item_num = 12;
  if (this->ten_cost_item_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->ten_cost_item_num(), target);
  }

  // uint32 left_gacha_times = 13;
  if (this->left_gacha_times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->left_gacha_times(), target);
  }

  // uint32 gacha_times_limit = 14;
  if (this->gacha_times_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->gacha_times_limit(), target);
  }

  // uint32 gacha_sort_id = 15;
  if (this->gacha_sort_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->gacha_sort_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GachaInfo)
  return target;
}

size_t GachaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GachaInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string gacha_prefab_path = 7;
  if (this->gacha_prefab_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gacha_prefab_path());
  }

  // string gacha_prob_url = 8;
  if (this->gacha_prob_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gacha_prob_url());
  }

  // string gacha_record_url = 9;
  if (this->gacha_record_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gacha_record_url());
  }

  // string gacha_preview_prefab_path = 10;
  if (this->gacha_preview_prefab_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gacha_preview_prefab_path());
  }

  // uint32 gacha_type = 1;
  if (this->gacha_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gacha_type());
  }

  // uint32 schedule_id = 2;
  if (this->schedule_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->schedule_id());
  }

  // uint32 begin_time = 3;
  if (this->begin_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->begin_time());
  }

  // uint32 end_time = 4;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  // uint32 cost_item_id = 5;
  if (this->cost_item_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cost_item_id());
  }

  // uint32 cost_item_num = 6;
  if (this->cost_item_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cost_item_num());
  }

  // uint32 ten_cost_item_id = 11;
  if (this->ten_cost_item_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ten_cost_item_id());
  }

  // uint32 ten_cost_item_num = 12;
  if (this->ten_cost_item_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ten_cost_item_num());
  }

  // uint32 left_gacha_times = 13;
  if (this->left_gacha_times() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->left_gacha_times());
  }

  // uint32 gacha_times_limit = 14;
  if (this->gacha_times_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gacha_times_limit());
  }

  // uint32 gacha_sort_id = 15;
  if (this->gacha_sort_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gacha_sort_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GachaInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GachaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GachaInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GachaInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GachaInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GachaInfo)
    MergeFrom(*source);
  }
}

void GachaInfo::MergeFrom(const GachaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GachaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gacha_prefab_path().size() > 0) {

    gacha_prefab_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gacha_prefab_path_);
  }
  if (from.gacha_prob_url().size() > 0) {

    gacha_prob_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gacha_prob_url_);
  }
  if (from.gacha_record_url().size() > 0) {

    gacha_record_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gacha_record_url_);
  }
  if (from.gacha_preview_prefab_path().size() > 0) {

    gacha_preview_prefab_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gacha_preview_prefab_path_);
  }
  if (from.gacha_type() != 0) {
    set_gacha_type(from.gacha_type());
  }
  if (from.schedule_id() != 0) {
    set_schedule_id(from.schedule_id());
  }
  if (from.begin_time() != 0) {
    set_begin_time(from.begin_time());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
  if (from.cost_item_id() != 0) {
    set_cost_item_id(from.cost_item_id());
  }
  if (from.cost_item_num() != 0) {
    set_cost_item_num(from.cost_item_num());
  }
  if (from.ten_cost_item_id() != 0) {
    set_ten_cost_item_id(from.ten_cost_item_id());
  }
  if (from.ten_cost_item_num() != 0) {
    set_ten_cost_item_num(from.ten_cost_item_num());
  }
  if (from.left_gacha_times() != 0) {
    set_left_gacha_times(from.left_gacha_times());
  }
  if (from.gacha_times_limit() != 0) {
    set_gacha_times_limit(from.gacha_times_limit());
  }
  if (from.gacha_sort_id() != 0) {
    set_gacha_sort_id(from.gacha_sort_id());
  }
}

void GachaInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GachaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GachaInfo::CopyFrom(const GachaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GachaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GachaInfo::IsInitialized() const {
  return true;
}

void GachaInfo::Swap(GachaInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GachaInfo::InternalSwap(GachaInfo* other) {
  using std::swap;
  gacha_prefab_path_.Swap(&other->gacha_prefab_path_);
  gacha_prob_url_.Swap(&other->gacha_prob_url_);
  gacha_record_url_.Swap(&other->gacha_record_url_);
  gacha_preview_prefab_path_.Swap(&other->gacha_preview_prefab_path_);
  swap(gacha_type_, other->gacha_type_);
  swap(schedule_id_, other->schedule_id_);
  swap(begin_time_, other->begin_time_);
  swap(end_time_, other->end_time_);
  swap(cost_item_id_, other->cost_item_id_);
  swap(cost_item_num_, other->cost_item_num_);
  swap(ten_cost_item_id_, other->ten_cost_item_id_);
  swap(ten_cost_item_num_, other->ten_cost_item_num_);
  swap(left_gacha_times_, other->left_gacha_times_);
  swap(gacha_times_limit_, other->gacha_times_limit_);
  swap(gacha_sort_id_, other->gacha_sort_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GachaInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgacha_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgacha_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GachaInfo

// uint32 gacha_type = 1;
void GachaInfo::clear_gacha_type() {
  gacha_type_ = 0u;
}
::google::protobuf::uint32 GachaInfo::gacha_type() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.gacha_type)
  return gacha_type_;
}
void GachaInfo::set_gacha_type(::google::protobuf::uint32 value) {
  
  gacha_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaInfo.gacha_type)
}

// uint32 schedule_id = 2;
void GachaInfo::clear_schedule_id() {
  schedule_id_ = 0u;
}
::google::protobuf::uint32 GachaInfo::schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.schedule_id)
  return schedule_id_;
}
void GachaInfo::set_schedule_id(::google::protobuf::uint32 value) {
  
  schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaInfo.schedule_id)
}

// uint32 begin_time = 3;
void GachaInfo::clear_begin_time() {
  begin_time_ = 0u;
}
::google::protobuf::uint32 GachaInfo::begin_time() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.begin_time)
  return begin_time_;
}
void GachaInfo::set_begin_time(::google::protobuf::uint32 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaInfo.begin_time)
}

// uint32 end_time = 4;
void GachaInfo::clear_end_time() {
  end_time_ = 0u;
}
::google::protobuf::uint32 GachaInfo::end_time() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.end_time)
  return end_time_;
}
void GachaInfo::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaInfo.end_time)
}

// uint32 cost_item_id = 5;
void GachaInfo::clear_cost_item_id() {
  cost_item_id_ = 0u;
}
::google::protobuf::uint32 GachaInfo::cost_item_id() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.cost_item_id)
  return cost_item_id_;
}
void GachaInfo::set_cost_item_id(::google::protobuf::uint32 value) {
  
  cost_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaInfo.cost_item_id)
}

// uint32 cost_item_num = 6;
void GachaInfo::clear_cost_item_num() {
  cost_item_num_ = 0u;
}
::google::protobuf::uint32 GachaInfo::cost_item_num() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.cost_item_num)
  return cost_item_num_;
}
void GachaInfo::set_cost_item_num(::google::protobuf::uint32 value) {
  
  cost_item_num_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaInfo.cost_item_num)
}

// string gacha_prefab_path = 7;
void GachaInfo::clear_gacha_prefab_path() {
  gacha_prefab_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GachaInfo::gacha_prefab_path() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.gacha_prefab_path)
  return gacha_prefab_path_.GetNoArena();
}
void GachaInfo::set_gacha_prefab_path(const ::std::string& value) {
  
  gacha_prefab_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GachaInfo.gacha_prefab_path)
}
#if LANG_CXX11
void GachaInfo::set_gacha_prefab_path(::std::string&& value) {
  
  gacha_prefab_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GachaInfo.gacha_prefab_path)
}
#endif
void GachaInfo::set_gacha_prefab_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gacha_prefab_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GachaInfo.gacha_prefab_path)
}
void GachaInfo::set_gacha_prefab_path(const char* value, size_t size) {
  
  gacha_prefab_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GachaInfo.gacha_prefab_path)
}
::std::string* GachaInfo::mutable_gacha_prefab_path() {
  
  // @@protoc_insertion_point(field_mutable:proto.GachaInfo.gacha_prefab_path)
  return gacha_prefab_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GachaInfo::release_gacha_prefab_path() {
  // @@protoc_insertion_point(field_release:proto.GachaInfo.gacha_prefab_path)
  
  return gacha_prefab_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GachaInfo::set_allocated_gacha_prefab_path(::std::string* gacha_prefab_path) {
  if (gacha_prefab_path != NULL) {
    
  } else {
    
  }
  gacha_prefab_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gacha_prefab_path);
  // @@protoc_insertion_point(field_set_allocated:proto.GachaInfo.gacha_prefab_path)
}

// string gacha_prob_url = 8;
void GachaInfo::clear_gacha_prob_url() {
  gacha_prob_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GachaInfo::gacha_prob_url() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.gacha_prob_url)
  return gacha_prob_url_.GetNoArena();
}
void GachaInfo::set_gacha_prob_url(const ::std::string& value) {
  
  gacha_prob_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GachaInfo.gacha_prob_url)
}
#if LANG_CXX11
void GachaInfo::set_gacha_prob_url(::std::string&& value) {
  
  gacha_prob_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GachaInfo.gacha_prob_url)
}
#endif
void GachaInfo::set_gacha_prob_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gacha_prob_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GachaInfo.gacha_prob_url)
}
void GachaInfo::set_gacha_prob_url(const char* value, size_t size) {
  
  gacha_prob_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GachaInfo.gacha_prob_url)
}
::std::string* GachaInfo::mutable_gacha_prob_url() {
  
  // @@protoc_insertion_point(field_mutable:proto.GachaInfo.gacha_prob_url)
  return gacha_prob_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GachaInfo::release_gacha_prob_url() {
  // @@protoc_insertion_point(field_release:proto.GachaInfo.gacha_prob_url)
  
  return gacha_prob_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GachaInfo::set_allocated_gacha_prob_url(::std::string* gacha_prob_url) {
  if (gacha_prob_url != NULL) {
    
  } else {
    
  }
  gacha_prob_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gacha_prob_url);
  // @@protoc_insertion_point(field_set_allocated:proto.GachaInfo.gacha_prob_url)
}

// string gacha_record_url = 9;
void GachaInfo::clear_gacha_record_url() {
  gacha_record_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GachaInfo::gacha_record_url() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.gacha_record_url)
  return gacha_record_url_.GetNoArena();
}
void GachaInfo::set_gacha_record_url(const ::std::string& value) {
  
  gacha_record_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GachaInfo.gacha_record_url)
}
#if LANG_CXX11
void GachaInfo::set_gacha_record_url(::std::string&& value) {
  
  gacha_record_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GachaInfo.gacha_record_url)
}
#endif
void GachaInfo::set_gacha_record_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gacha_record_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GachaInfo.gacha_record_url)
}
void GachaInfo::set_gacha_record_url(const char* value, size_t size) {
  
  gacha_record_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GachaInfo.gacha_record_url)
}
::std::string* GachaInfo::mutable_gacha_record_url() {
  
  // @@protoc_insertion_point(field_mutable:proto.GachaInfo.gacha_record_url)
  return gacha_record_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GachaInfo::release_gacha_record_url() {
  // @@protoc_insertion_point(field_release:proto.GachaInfo.gacha_record_url)
  
  return gacha_record_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GachaInfo::set_allocated_gacha_record_url(::std::string* gacha_record_url) {
  if (gacha_record_url != NULL) {
    
  } else {
    
  }
  gacha_record_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gacha_record_url);
  // @@protoc_insertion_point(field_set_allocated:proto.GachaInfo.gacha_record_url)
}

// string gacha_preview_prefab_path = 10;
void GachaInfo::clear_gacha_preview_prefab_path() {
  gacha_preview_prefab_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GachaInfo::gacha_preview_prefab_path() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.gacha_preview_prefab_path)
  return gacha_preview_prefab_path_.GetNoArena();
}
void GachaInfo::set_gacha_preview_prefab_path(const ::std::string& value) {
  
  gacha_preview_prefab_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GachaInfo.gacha_preview_prefab_path)
}
#if LANG_CXX11
void GachaInfo::set_gacha_preview_prefab_path(::std::string&& value) {
  
  gacha_preview_prefab_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GachaInfo.gacha_preview_prefab_path)
}
#endif
void GachaInfo::set_gacha_preview_prefab_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gacha_preview_prefab_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GachaInfo.gacha_preview_prefab_path)
}
void GachaInfo::set_gacha_preview_prefab_path(const char* value, size_t size) {
  
  gacha_preview_prefab_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GachaInfo.gacha_preview_prefab_path)
}
::std::string* GachaInfo::mutable_gacha_preview_prefab_path() {
  
  // @@protoc_insertion_point(field_mutable:proto.GachaInfo.gacha_preview_prefab_path)
  return gacha_preview_prefab_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GachaInfo::release_gacha_preview_prefab_path() {
  // @@protoc_insertion_point(field_release:proto.GachaInfo.gacha_preview_prefab_path)
  
  return gacha_preview_prefab_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GachaInfo::set_allocated_gacha_preview_prefab_path(::std::string* gacha_preview_prefab_path) {
  if (gacha_preview_prefab_path != NULL) {
    
  } else {
    
  }
  gacha_preview_prefab_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gacha_preview_prefab_path);
  // @@protoc_insertion_point(field_set_allocated:proto.GachaInfo.gacha_preview_prefab_path)
}

// uint32 ten_cost_item_id = 11;
void GachaInfo::clear_ten_cost_item_id() {
  ten_cost_item_id_ = 0u;
}
::google::protobuf::uint32 GachaInfo::ten_cost_item_id() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.ten_cost_item_id)
  return ten_cost_item_id_;
}
void GachaInfo::set_ten_cost_item_id(::google::protobuf::uint32 value) {
  
  ten_cost_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaInfo.ten_cost_item_id)
}

// uint32 ten_cost_item_num = 12;
void GachaInfo::clear_ten_cost_item_num() {
  ten_cost_item_num_ = 0u;
}
::google::protobuf::uint32 GachaInfo::ten_cost_item_num() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.ten_cost_item_num)
  return ten_cost_item_num_;
}
void GachaInfo::set_ten_cost_item_num(::google::protobuf::uint32 value) {
  
  ten_cost_item_num_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaInfo.ten_cost_item_num)
}

// uint32 left_gacha_times = 13;
void GachaInfo::clear_left_gacha_times() {
  left_gacha_times_ = 0u;
}
::google::protobuf::uint32 GachaInfo::left_gacha_times() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.left_gacha_times)
  return left_gacha_times_;
}
void GachaInfo::set_left_gacha_times(::google::protobuf::uint32 value) {
  
  left_gacha_times_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaInfo.left_gacha_times)
}

// uint32 gacha_times_limit = 14;
void GachaInfo::clear_gacha_times_limit() {
  gacha_times_limit_ = 0u;
}
::google::protobuf::uint32 GachaInfo::gacha_times_limit() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.gacha_times_limit)
  return gacha_times_limit_;
}
void GachaInfo::set_gacha_times_limit(::google::protobuf::uint32 value) {
  
  gacha_times_limit_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaInfo.gacha_times_limit)
}

// uint32 gacha_sort_id = 15;
void GachaInfo::clear_gacha_sort_id() {
  gacha_sort_id_ = 0u;
}
::google::protobuf::uint32 GachaInfo::gacha_sort_id() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.gacha_sort_id)
  return gacha_sort_id_;
}
void GachaInfo::set_gacha_sort_id(::google::protobuf::uint32 value) {
  
  gacha_sort_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaInfo.gacha_sort_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetGachaInfoRsp::kRetcodeFieldNumber;
const int GetGachaInfoRsp::kGachaInfoListFieldNumber;
const int GetGachaInfoRsp::kGachaRandomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetGachaInfoRsp::GetGachaInfoRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgacha_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetGachaInfoRsp)
}
GetGachaInfoRsp::GetGachaInfoRsp(const GetGachaInfoRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      gacha_info_list_(from.gacha_info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&gacha_random_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(gacha_random_));
  // @@protoc_insertion_point(copy_constructor:proto.GetGachaInfoRsp)
}

void GetGachaInfoRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gacha_random_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(gacha_random_));
  _cached_size_ = 0;
}

GetGachaInfoRsp::~GetGachaInfoRsp() {
  // @@protoc_insertion_point(destructor:proto.GetGachaInfoRsp)
  SharedDtor();
}

void GetGachaInfoRsp::SharedDtor() {
}

void GetGachaInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGachaInfoRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgacha_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgacha_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetGachaInfoRsp& GetGachaInfoRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgacha_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetGachaInfoRsp* GetGachaInfoRsp::New(::google::protobuf::Arena* arena) const {
  GetGachaInfoRsp* n = new GetGachaInfoRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetGachaInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetGachaInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gacha_info_list_.Clear();
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gacha_random_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(gacha_random_));
  _internal_metadata_.Clear();
}

bool GetGachaInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetGachaInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GachaInfo gacha_info_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gacha_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gacha_random = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gacha_random_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetGachaInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetGachaInfoRsp)
  return false;
#undef DO_
}

void GetGachaInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetGachaInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // repeated .proto.GachaInfo gacha_info_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gacha_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gacha_info_list(static_cast<int>(i)), output);
  }

  // uint32 gacha_random = 3;
  if (this->gacha_random() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gacha_random(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetGachaInfoRsp)
}

::google::protobuf::uint8* GetGachaInfoRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetGachaInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // repeated .proto.GachaInfo gacha_info_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gacha_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->gacha_info_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 gacha_random = 3;
  if (this->gacha_random() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gacha_random(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetGachaInfoRsp)
  return target;
}

size_t GetGachaInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetGachaInfoRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GachaInfo gacha_info_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->gacha_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gacha_info_list(static_cast<int>(i)));
    }
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 gacha_random = 3;
  if (this->gacha_random() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gacha_random());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGachaInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetGachaInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGachaInfoRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetGachaInfoRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetGachaInfoRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetGachaInfoRsp)
    MergeFrom(*source);
  }
}

void GetGachaInfoRsp::MergeFrom(const GetGachaInfoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetGachaInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gacha_info_list_.MergeFrom(from.gacha_info_list_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.gacha_random() != 0) {
    set_gacha_random(from.gacha_random());
  }
}

void GetGachaInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetGachaInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGachaInfoRsp::CopyFrom(const GetGachaInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetGachaInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGachaInfoRsp::IsInitialized() const {
  return true;
}

void GetGachaInfoRsp::Swap(GetGachaInfoRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetGachaInfoRsp::InternalSwap(GetGachaInfoRsp* other) {
  using std::swap;
  gacha_info_list_.InternalSwap(&other->gacha_info_list_);
  swap(retcode_, other->retcode_);
  swap(gacha_random_, other->gacha_random_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetGachaInfoRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgacha_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgacha_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetGachaInfoRsp

// int32 retcode = 1;
void GetGachaInfoRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GetGachaInfoRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetGachaInfoRsp.retcode)
  return retcode_;
}
void GetGachaInfoRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetGachaInfoRsp.retcode)
}

// repeated .proto.GachaInfo gacha_info_list = 2;
int GetGachaInfoRsp::gacha_info_list_size() const {
  return gacha_info_list_.size();
}
void GetGachaInfoRsp::clear_gacha_info_list() {
  gacha_info_list_.Clear();
}
const ::proto::GachaInfo& GetGachaInfoRsp::gacha_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetGachaInfoRsp.gacha_info_list)
  return gacha_info_list_.Get(index);
}
::proto::GachaInfo* GetGachaInfoRsp::mutable_gacha_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetGachaInfoRsp.gacha_info_list)
  return gacha_info_list_.Mutable(index);
}
::proto::GachaInfo* GetGachaInfoRsp::add_gacha_info_list() {
  // @@protoc_insertion_point(field_add:proto.GetGachaInfoRsp.gacha_info_list)
  return gacha_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GachaInfo >*
GetGachaInfoRsp::mutable_gacha_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetGachaInfoRsp.gacha_info_list)
  return &gacha_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GachaInfo >&
GetGachaInfoRsp::gacha_info_list() const {
  // @@protoc_insertion_point(field_list:proto.GetGachaInfoRsp.gacha_info_list)
  return gacha_info_list_;
}

// uint32 gacha_random = 3;
void GetGachaInfoRsp::clear_gacha_random() {
  gacha_random_ = 0u;
}
::google::protobuf::uint32 GetGachaInfoRsp::gacha_random() const {
  // @@protoc_insertion_point(field_get:proto.GetGachaInfoRsp.gacha_random)
  return gacha_random_;
}
void GetGachaInfoRsp::set_gacha_random(::google::protobuf::uint32 value) {
  
  gacha_random_ = value;
  // @@protoc_insertion_point(field_set:proto.GetGachaInfoRsp.gacha_random)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoGachaReq::kGachaTypeFieldNumber;
const int DoGachaReq::kGachaTimesFieldNumber;
const int DoGachaReq::kGachaRandomFieldNumber;
const int DoGachaReq::kGachaScheduleIdFieldNumber;
const int DoGachaReq::kGachaTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoGachaReq::DoGachaReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgacha_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DoGachaReq)
}
DoGachaReq::DoGachaReq(const DoGachaReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gacha_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gacha_tag().size() > 0) {
    gacha_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gacha_tag_);
  }
  ::memcpy(&gacha_type_, &from.gacha_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&gacha_schedule_id_) -
    reinterpret_cast<char*>(&gacha_type_)) + sizeof(gacha_schedule_id_));
  // @@protoc_insertion_point(copy_constructor:proto.DoGachaReq)
}

void DoGachaReq::SharedCtor() {
  gacha_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gacha_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gacha_schedule_id_) -
      reinterpret_cast<char*>(&gacha_type_)) + sizeof(gacha_schedule_id_));
  _cached_size_ = 0;
}

DoGachaReq::~DoGachaReq() {
  // @@protoc_insertion_point(destructor:proto.DoGachaReq)
  SharedDtor();
}

void DoGachaReq::SharedDtor() {
  gacha_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DoGachaReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoGachaReq::descriptor() {
  protobuf_cmd_2fcmd_5fgacha_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgacha_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DoGachaReq& DoGachaReq::default_instance() {
  protobuf_cmd_2fcmd_5fgacha_2eproto::InitDefaults();
  return *internal_default_instance();
}

DoGachaReq* DoGachaReq::New(::google::protobuf::Arena* arena) const {
  DoGachaReq* n = new DoGachaReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DoGachaReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DoGachaReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gacha_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gacha_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gacha_schedule_id_) -
      reinterpret_cast<char*>(&gacha_type_)) + sizeof(gacha_schedule_id_));
  _internal_metadata_.Clear();
}

bool DoGachaReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DoGachaReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 gacha_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gacha_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gacha_times = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gacha_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gacha_random = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gacha_random_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gacha_schedule_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gacha_schedule_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gacha_tag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gacha_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gacha_tag().data(), static_cast<int>(this->gacha_tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.DoGachaReq.gacha_tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DoGachaReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DoGachaReq)
  return false;
#undef DO_
}

void DoGachaReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DoGachaReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gacha_type = 1;
  if (this->gacha_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gacha_type(), output);
  }

  // uint32 gacha_times = 2;
  if (this->gacha_times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gacha_times(), output);
  }

  // uint32 gacha_random = 3;
  if (this->gacha_random() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gacha_random(), output);
  }

  // uint32 gacha_schedule_id = 4;
  if (this->gacha_schedule_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gacha_schedule_id(), output);
  }

  // string gacha_tag = 5;
  if (this->gacha_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gacha_tag().data(), static_cast<int>(this->gacha_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.DoGachaReq.gacha_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->gacha_tag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DoGachaReq)
}

::google::protobuf::uint8* DoGachaReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DoGachaReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gacha_type = 1;
  if (this->gacha_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gacha_type(), target);
  }

  // uint32 gacha_times = 2;
  if (this->gacha_times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gacha_times(), target);
  }

  // uint32 gacha_random = 3;
  if (this->gacha_random() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gacha_random(), target);
  }

  // uint32 gacha_schedule_id = 4;
  if (this->gacha_schedule_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gacha_schedule_id(), target);
  }

  // string gacha_tag = 5;
  if (this->gacha_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gacha_tag().data(), static_cast<int>(this->gacha_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.DoGachaReq.gacha_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->gacha_tag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DoGachaReq)
  return target;
}

size_t DoGachaReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DoGachaReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string gacha_tag = 5;
  if (this->gacha_tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gacha_tag());
  }

  // uint32 gacha_type = 1;
  if (this->gacha_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gacha_type());
  }

  // uint32 gacha_times = 2;
  if (this->gacha_times() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gacha_times());
  }

  // uint32 gacha_random = 3;
  if (this->gacha_random() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gacha_random());
  }

  // uint32 gacha_schedule_id = 4;
  if (this->gacha_schedule_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gacha_schedule_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoGachaReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DoGachaReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DoGachaReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DoGachaReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DoGachaReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DoGachaReq)
    MergeFrom(*source);
  }
}

void DoGachaReq::MergeFrom(const DoGachaReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DoGachaReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gacha_tag().size() > 0) {

    gacha_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gacha_tag_);
  }
  if (from.gacha_type() != 0) {
    set_gacha_type(from.gacha_type());
  }
  if (from.gacha_times() != 0) {
    set_gacha_times(from.gacha_times());
  }
  if (from.gacha_random() != 0) {
    set_gacha_random(from.gacha_random());
  }
  if (from.gacha_schedule_id() != 0) {
    set_gacha_schedule_id(from.gacha_schedule_id());
  }
}

void DoGachaReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DoGachaReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoGachaReq::CopyFrom(const DoGachaReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DoGachaReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoGachaReq::IsInitialized() const {
  return true;
}

void DoGachaReq::Swap(DoGachaReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoGachaReq::InternalSwap(DoGachaReq* other) {
  using std::swap;
  gacha_tag_.Swap(&other->gacha_tag_);
  swap(gacha_type_, other->gacha_type_);
  swap(gacha_times_, other->gacha_times_);
  swap(gacha_random_, other->gacha_random_);
  swap(gacha_schedule_id_, other->gacha_schedule_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DoGachaReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgacha_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgacha_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DoGachaReq

// uint32 gacha_type = 1;
void DoGachaReq::clear_gacha_type() {
  gacha_type_ = 0u;
}
::google::protobuf::uint32 DoGachaReq::gacha_type() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaReq.gacha_type)
  return gacha_type_;
}
void DoGachaReq::set_gacha_type(::google::protobuf::uint32 value) {
  
  gacha_type_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaReq.gacha_type)
}

// uint32 gacha_times = 2;
void DoGachaReq::clear_gacha_times() {
  gacha_times_ = 0u;
}
::google::protobuf::uint32 DoGachaReq::gacha_times() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaReq.gacha_times)
  return gacha_times_;
}
void DoGachaReq::set_gacha_times(::google::protobuf::uint32 value) {
  
  gacha_times_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaReq.gacha_times)
}

// uint32 gacha_random = 3;
void DoGachaReq::clear_gacha_random() {
  gacha_random_ = 0u;
}
::google::protobuf::uint32 DoGachaReq::gacha_random() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaReq.gacha_random)
  return gacha_random_;
}
void DoGachaReq::set_gacha_random(::google::protobuf::uint32 value) {
  
  gacha_random_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaReq.gacha_random)
}

// uint32 gacha_schedule_id = 4;
void DoGachaReq::clear_gacha_schedule_id() {
  gacha_schedule_id_ = 0u;
}
::google::protobuf::uint32 DoGachaReq::gacha_schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaReq.gacha_schedule_id)
  return gacha_schedule_id_;
}
void DoGachaReq::set_gacha_schedule_id(::google::protobuf::uint32 value) {
  
  gacha_schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaReq.gacha_schedule_id)
}

// string gacha_tag = 5;
void DoGachaReq::clear_gacha_tag() {
  gacha_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DoGachaReq::gacha_tag() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaReq.gacha_tag)
  return gacha_tag_.GetNoArena();
}
void DoGachaReq::set_gacha_tag(const ::std::string& value) {
  
  gacha_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.DoGachaReq.gacha_tag)
}
#if LANG_CXX11
void DoGachaReq::set_gacha_tag(::std::string&& value) {
  
  gacha_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.DoGachaReq.gacha_tag)
}
#endif
void DoGachaReq::set_gacha_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gacha_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.DoGachaReq.gacha_tag)
}
void DoGachaReq::set_gacha_tag(const char* value, size_t size) {
  
  gacha_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.DoGachaReq.gacha_tag)
}
::std::string* DoGachaReq::mutable_gacha_tag() {
  
  // @@protoc_insertion_point(field_mutable:proto.DoGachaReq.gacha_tag)
  return gacha_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DoGachaReq::release_gacha_tag() {
  // @@protoc_insertion_point(field_release:proto.DoGachaReq.gacha_tag)
  
  return gacha_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DoGachaReq::set_allocated_gacha_tag(::std::string* gacha_tag) {
  if (gacha_tag != NULL) {
    
  } else {
    
  }
  gacha_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gacha_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.DoGachaReq.gacha_tag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GachaTransferItem::kItemFieldNumber;
const int GachaTransferItem::kIsTransferItemNewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GachaTransferItem::GachaTransferItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgacha_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GachaTransferItem)
}
GachaTransferItem::GachaTransferItem(const GachaTransferItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_item()) {
    item_ = new ::proto::ItemParam(*from.item_);
  } else {
    item_ = NULL;
  }
  is_transfer_item_new_ = from.is_transfer_item_new_;
  // @@protoc_insertion_point(copy_constructor:proto.GachaTransferItem)
}

void GachaTransferItem::SharedCtor() {
  ::memset(&item_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_transfer_item_new_) -
      reinterpret_cast<char*>(&item_)) + sizeof(is_transfer_item_new_));
  _cached_size_ = 0;
}

GachaTransferItem::~GachaTransferItem() {
  // @@protoc_insertion_point(destructor:proto.GachaTransferItem)
  SharedDtor();
}

void GachaTransferItem::SharedDtor() {
  if (this != internal_default_instance()) delete item_;
}

void GachaTransferItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GachaTransferItem::descriptor() {
  protobuf_cmd_2fcmd_5fgacha_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgacha_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GachaTransferItem& GachaTransferItem::default_instance() {
  protobuf_cmd_2fcmd_5fgacha_2eproto::InitDefaults();
  return *internal_default_instance();
}

GachaTransferItem* GachaTransferItem::New(::google::protobuf::Arena* arena) const {
  GachaTransferItem* n = new GachaTransferItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GachaTransferItem::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GachaTransferItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && item_ != NULL) {
    delete item_;
  }
  item_ = NULL;
  is_transfer_item_new_ = false;
  _internal_metadata_.Clear();
}

bool GachaTransferItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GachaTransferItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.ItemParam item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_transfer_item_new = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_transfer_item_new_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GachaTransferItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GachaTransferItem)
  return false;
#undef DO_
}

void GachaTransferItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GachaTransferItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ItemParam item = 1;
  if (this->has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->item_, output);
  }

  // bool is_transfer_item_new = 2;
  if (this->is_transfer_item_new() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_transfer_item_new(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GachaTransferItem)
}

::google::protobuf::uint8* GachaTransferItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GachaTransferItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ItemParam item = 1;
  if (this->has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->item_, deterministic, target);
  }

  // bool is_transfer_item_new = 2;
  if (this->is_transfer_item_new() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_transfer_item_new(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GachaTransferItem)
  return target;
}

size_t GachaTransferItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GachaTransferItem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.ItemParam item = 1;
  if (this->has_item()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->item_);
  }

  // bool is_transfer_item_new = 2;
  if (this->is_transfer_item_new() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GachaTransferItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GachaTransferItem)
  GOOGLE_DCHECK_NE(&from, this);
  const GachaTransferItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GachaTransferItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GachaTransferItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GachaTransferItem)
    MergeFrom(*source);
  }
}

void GachaTransferItem::MergeFrom(const GachaTransferItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GachaTransferItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_item()) {
    mutable_item()->::proto::ItemParam::MergeFrom(from.item());
  }
  if (from.is_transfer_item_new() != 0) {
    set_is_transfer_item_new(from.is_transfer_item_new());
  }
}

void GachaTransferItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GachaTransferItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GachaTransferItem::CopyFrom(const GachaTransferItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GachaTransferItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GachaTransferItem::IsInitialized() const {
  return true;
}

void GachaTransferItem::Swap(GachaTransferItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GachaTransferItem::InternalSwap(GachaTransferItem* other) {
  using std::swap;
  swap(item_, other->item_);
  swap(is_transfer_item_new_, other->is_transfer_item_new_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GachaTransferItem::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgacha_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgacha_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GachaTransferItem

// .proto.ItemParam item = 1;
bool GachaTransferItem::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
void GachaTransferItem::clear_item() {
  if (GetArenaNoVirtual() == NULL && item_ != NULL) delete item_;
  item_ = NULL;
}
const ::proto::ItemParam& GachaTransferItem::item() const {
  const ::proto::ItemParam* p = item_;
  // @@protoc_insertion_point(field_get:proto.GachaTransferItem.item)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ItemParam*>(
      &::proto::_ItemParam_default_instance_);
}
::proto::ItemParam* GachaTransferItem::mutable_item() {
  
  if (item_ == NULL) {
    item_ = new ::proto::ItemParam;
  }
  // @@protoc_insertion_point(field_mutable:proto.GachaTransferItem.item)
  return item_;
}
::proto::ItemParam* GachaTransferItem::release_item() {
  // @@protoc_insertion_point(field_release:proto.GachaTransferItem.item)
  
  ::proto::ItemParam* temp = item_;
  item_ = NULL;
  return temp;
}
void GachaTransferItem::set_allocated_item(::proto::ItemParam* item) {
  delete item_;
  item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GachaTransferItem.item)
}

// bool is_transfer_item_new = 2;
void GachaTransferItem::clear_is_transfer_item_new() {
  is_transfer_item_new_ = false;
}
bool GachaTransferItem::is_transfer_item_new() const {
  // @@protoc_insertion_point(field_get:proto.GachaTransferItem.is_transfer_item_new)
  return is_transfer_item_new_;
}
void GachaTransferItem::set_is_transfer_item_new(bool value) {
  
  is_transfer_item_new_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaTransferItem.is_transfer_item_new)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GachaItem::kGachaItemFieldNumber;
const int GachaItem::kTransferItemsFieldNumber;
const int GachaItem::kIsFlashCardFieldNumber;
const int GachaItem::kIsGachaItemNewFieldNumber;
const int GachaItem::kTokenItemListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GachaItem::GachaItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgacha_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GachaItem)
}
GachaItem::GachaItem(const GachaItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      transfer_items_(from.transfer_items_),
      token_item_list_(from.token_item_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gacha_item()) {
    gacha_item_ = new ::proto::ItemParam(*from.gacha_item_);
  } else {
    gacha_item_ = NULL;
  }
  ::memcpy(&is_flash_card_, &from.is_flash_card_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_gacha_item_new_) -
    reinterpret_cast<char*>(&is_flash_card_)) + sizeof(is_gacha_item_new_));
  // @@protoc_insertion_point(copy_constructor:proto.GachaItem)
}

void GachaItem::SharedCtor() {
  ::memset(&gacha_item_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_gacha_item_new_) -
      reinterpret_cast<char*>(&gacha_item_)) + sizeof(is_gacha_item_new_));
  _cached_size_ = 0;
}

GachaItem::~GachaItem() {
  // @@protoc_insertion_point(destructor:proto.GachaItem)
  SharedDtor();
}

void GachaItem::SharedDtor() {
  if (this != internal_default_instance()) delete gacha_item_;
}

void GachaItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GachaItem::descriptor() {
  protobuf_cmd_2fcmd_5fgacha_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgacha_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GachaItem& GachaItem::default_instance() {
  protobuf_cmd_2fcmd_5fgacha_2eproto::InitDefaults();
  return *internal_default_instance();
}

GachaItem* GachaItem::New(::google::protobuf::Arena* arena) const {
  GachaItem* n = new GachaItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GachaItem::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GachaItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transfer_items_.Clear();
  token_item_list_.Clear();
  if (GetArenaNoVirtual() == NULL && gacha_item_ != NULL) {
    delete gacha_item_;
  }
  gacha_item_ = NULL;
  ::memset(&is_flash_card_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_gacha_item_new_) -
      reinterpret_cast<char*>(&is_flash_card_)) + sizeof(is_gacha_item_new_));
  _internal_metadata_.Clear();
}

bool GachaItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GachaItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.ItemParam gacha_item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gacha_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GachaTransferItem transfer_items = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transfer_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_flash_card = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_flash_card_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_gacha_item_new = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gacha_item_new_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ItemParam token_item_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_token_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GachaItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GachaItem)
  return false;
#undef DO_
}

void GachaItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GachaItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ItemParam gacha_item = 1;
  if (this->has_gacha_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->gacha_item_, output);
  }

  // repeated .proto.GachaTransferItem transfer_items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transfer_items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transfer_items(static_cast<int>(i)), output);
  }

  // bool is_flash_card = 3;
  if (this->is_flash_card() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_flash_card(), output);
  }

  // bool is_gacha_item_new = 4;
  if (this->is_gacha_item_new() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_gacha_item_new(), output);
  }

  // repeated .proto.ItemParam token_item_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->token_item_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->token_item_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GachaItem)
}

::google::protobuf::uint8* GachaItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GachaItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ItemParam gacha_item = 1;
  if (this->has_gacha_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->gacha_item_, deterministic, target);
  }

  // repeated .proto.GachaTransferItem transfer_items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transfer_items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->transfer_items(static_cast<int>(i)), deterministic, target);
  }

  // bool is_flash_card = 3;
  if (this->is_flash_card() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_flash_card(), target);
  }

  // bool is_gacha_item_new = 4;
  if (this->is_gacha_item_new() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_gacha_item_new(), target);
  }

  // repeated .proto.ItemParam token_item_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->token_item_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->token_item_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GachaItem)
  return target;
}

size_t GachaItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GachaItem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GachaTransferItem transfer_items = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->transfer_items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transfer_items(static_cast<int>(i)));
    }
  }

  // repeated .proto.ItemParam token_item_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->token_item_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->token_item_list(static_cast<int>(i)));
    }
  }

  // .proto.ItemParam gacha_item = 1;
  if (this->has_gacha_item()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gacha_item_);
  }

  // bool is_flash_card = 3;
  if (this->is_flash_card() != 0) {
    total_size += 1 + 1;
  }

  // bool is_gacha_item_new = 4;
  if (this->is_gacha_item_new() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GachaItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GachaItem)
  GOOGLE_DCHECK_NE(&from, this);
  const GachaItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GachaItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GachaItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GachaItem)
    MergeFrom(*source);
  }
}

void GachaItem::MergeFrom(const GachaItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GachaItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transfer_items_.MergeFrom(from.transfer_items_);
  token_item_list_.MergeFrom(from.token_item_list_);
  if (from.has_gacha_item()) {
    mutable_gacha_item()->::proto::ItemParam::MergeFrom(from.gacha_item());
  }
  if (from.is_flash_card() != 0) {
    set_is_flash_card(from.is_flash_card());
  }
  if (from.is_gacha_item_new() != 0) {
    set_is_gacha_item_new(from.is_gacha_item_new());
  }
}

void GachaItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GachaItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GachaItem::CopyFrom(const GachaItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GachaItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GachaItem::IsInitialized() const {
  return true;
}

void GachaItem::Swap(GachaItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GachaItem::InternalSwap(GachaItem* other) {
  using std::swap;
  transfer_items_.InternalSwap(&other->transfer_items_);
  token_item_list_.InternalSwap(&other->token_item_list_);
  swap(gacha_item_, other->gacha_item_);
  swap(is_flash_card_, other->is_flash_card_);
  swap(is_gacha_item_new_, other->is_gacha_item_new_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GachaItem::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgacha_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgacha_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GachaItem

// .proto.ItemParam gacha_item = 1;
bool GachaItem::has_gacha_item() const {
  return this != internal_default_instance() && gacha_item_ != NULL;
}
void GachaItem::clear_gacha_item() {
  if (GetArenaNoVirtual() == NULL && gacha_item_ != NULL) delete gacha_item_;
  gacha_item_ = NULL;
}
const ::proto::ItemParam& GachaItem::gacha_item() const {
  const ::proto::ItemParam* p = gacha_item_;
  // @@protoc_insertion_point(field_get:proto.GachaItem.gacha_item)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ItemParam*>(
      &::proto::_ItemParam_default_instance_);
}
::proto::ItemParam* GachaItem::mutable_gacha_item() {
  
  if (gacha_item_ == NULL) {
    gacha_item_ = new ::proto::ItemParam;
  }
  // @@protoc_insertion_point(field_mutable:proto.GachaItem.gacha_item)
  return gacha_item_;
}
::proto::ItemParam* GachaItem::release_gacha_item() {
  // @@protoc_insertion_point(field_release:proto.GachaItem.gacha_item)
  
  ::proto::ItemParam* temp = gacha_item_;
  gacha_item_ = NULL;
  return temp;
}
void GachaItem::set_allocated_gacha_item(::proto::ItemParam* gacha_item) {
  delete gacha_item_;
  gacha_item_ = gacha_item;
  if (gacha_item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GachaItem.gacha_item)
}

// repeated .proto.GachaTransferItem transfer_items = 2;
int GachaItem::transfer_items_size() const {
  return transfer_items_.size();
}
void GachaItem::clear_transfer_items() {
  transfer_items_.Clear();
}
const ::proto::GachaTransferItem& GachaItem::transfer_items(int index) const {
  // @@protoc_insertion_point(field_get:proto.GachaItem.transfer_items)
  return transfer_items_.Get(index);
}
::proto::GachaTransferItem* GachaItem::mutable_transfer_items(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GachaItem.transfer_items)
  return transfer_items_.Mutable(index);
}
::proto::GachaTransferItem* GachaItem::add_transfer_items() {
  // @@protoc_insertion_point(field_add:proto.GachaItem.transfer_items)
  return transfer_items_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GachaTransferItem >*
GachaItem::mutable_transfer_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.GachaItem.transfer_items)
  return &transfer_items_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GachaTransferItem >&
GachaItem::transfer_items() const {
  // @@protoc_insertion_point(field_list:proto.GachaItem.transfer_items)
  return transfer_items_;
}

// bool is_flash_card = 3;
void GachaItem::clear_is_flash_card() {
  is_flash_card_ = false;
}
bool GachaItem::is_flash_card() const {
  // @@protoc_insertion_point(field_get:proto.GachaItem.is_flash_card)
  return is_flash_card_;
}
void GachaItem::set_is_flash_card(bool value) {
  
  is_flash_card_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaItem.is_flash_card)
}

// bool is_gacha_item_new = 4;
void GachaItem::clear_is_gacha_item_new() {
  is_gacha_item_new_ = false;
}
bool GachaItem::is_gacha_item_new() const {
  // @@protoc_insertion_point(field_get:proto.GachaItem.is_gacha_item_new)
  return is_gacha_item_new_;
}
void GachaItem::set_is_gacha_item_new(bool value) {
  
  is_gacha_item_new_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaItem.is_gacha_item_new)
}

// repeated .proto.ItemParam token_item_list = 5;
int GachaItem::token_item_list_size() const {
  return token_item_list_.size();
}
void GachaItem::clear_token_item_list() {
  token_item_list_.Clear();
}
const ::proto::ItemParam& GachaItem::token_item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GachaItem.token_item_list)
  return token_item_list_.Get(index);
}
::proto::ItemParam* GachaItem::mutable_token_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GachaItem.token_item_list)
  return token_item_list_.Mutable(index);
}
::proto::ItemParam* GachaItem::add_token_item_list() {
  // @@protoc_insertion_point(field_add:proto.GachaItem.token_item_list)
  return token_item_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
GachaItem::mutable_token_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GachaItem.token_item_list)
  return &token_item_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
GachaItem::token_item_list() const {
  // @@protoc_insertion_point(field_list:proto.GachaItem.token_item_list)
  return token_item_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoGachaRsp::kRetcodeFieldNumber;
const int DoGachaRsp::kGachaTypeFieldNumber;
const int DoGachaRsp::kGachaTimesFieldNumber;
const int DoGachaRsp::kGachaScheduleIdFieldNumber;
const int DoGachaRsp::kGachaItemListFieldNumber;
const int DoGachaRsp::kNewGachaRandomFieldNumber;
const int DoGachaRsp::kCostItemIdFieldNumber;
const int DoGachaRsp::kCostItemNumFieldNumber;
const int DoGachaRsp::kTenCostItemIdFieldNumber;
const int DoGachaRsp::kTenCostItemNumFieldNumber;
const int DoGachaRsp::kLeftGachaTimesFieldNumber;
const int DoGachaRsp::kGachaTimesLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoGachaRsp::DoGachaRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgacha_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DoGachaRsp)
}
DoGachaRsp::DoGachaRsp(const DoGachaRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      gacha_item_list_(from.gacha_item_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&gacha_times_limit_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(gacha_times_limit_));
  // @@protoc_insertion_point(copy_constructor:proto.DoGachaRsp)
}

void DoGachaRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gacha_times_limit_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(gacha_times_limit_));
  _cached_size_ = 0;
}

DoGachaRsp::~DoGachaRsp() {
  // @@protoc_insertion_point(destructor:proto.DoGachaRsp)
  SharedDtor();
}

void DoGachaRsp::SharedDtor() {
}

void DoGachaRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoGachaRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgacha_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgacha_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DoGachaRsp& DoGachaRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgacha_2eproto::InitDefaults();
  return *internal_default_instance();
}

DoGachaRsp* DoGachaRsp::New(::google::protobuf::Arena* arena) const {
  DoGachaRsp* n = new DoGachaRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DoGachaRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DoGachaRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gacha_item_list_.Clear();
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gacha_times_limit_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(gacha_times_limit_));
  _internal_metadata_.Clear();
}

bool DoGachaRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DoGachaRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gacha_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gacha_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gacha_times = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gacha_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gacha_schedule_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gacha_schedule_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GachaItem gacha_item_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gacha_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 new_gacha_random = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_gacha_random_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cost_item_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cost_item_num = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_item_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ten_cost_item_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ten_cost_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ten_cost_item_num = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ten_cost_item_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 left_gacha_times = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_gacha_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gacha_times_limit = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gacha_times_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DoGachaRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DoGachaRsp)
  return false;
#undef DO_
}

void DoGachaRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DoGachaRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 gacha_type = 2;
  if (this->gacha_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gacha_type(), output);
  }

  // uint32 gacha_times = 3;
  if (this->gacha_times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gacha_times(), output);
  }

  // uint32 gacha_schedule_id = 4;
  if (this->gacha_schedule_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gacha_schedule_id(), output);
  }

  // repeated .proto.GachaItem gacha_item_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gacha_item_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->gacha_item_list(static_cast<int>(i)), output);
  }

  // uint32 new_gacha_random = 6;
  if (this->new_gacha_random() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->new_gacha_random(), output);
  }

  // uint32 cost_item_id = 7;
  if (this->cost_item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cost_item_id(), output);
  }

  // uint32 cost_item_num = 8;
  if (this->cost_item_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cost_item_num(), output);
  }

  // uint32 ten_cost_item_id = 9;
  if (this->ten_cost_item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ten_cost_item_id(), output);
  }

  // uint32 ten_cost_item_num = 10;
  if (this->ten_cost_item_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->ten_cost_item_num(), output);
  }

  // uint32 left_gacha_times = 11;
  if (this->left_gacha_times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->left_gacha_times(), output);
  }

  // uint32 gacha_times_limit = 12;
  if (this->gacha_times_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->gacha_times_limit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DoGachaRsp)
}

::google::protobuf::uint8* DoGachaRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DoGachaRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 gacha_type = 2;
  if (this->gacha_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gacha_type(), target);
  }

  // uint32 gacha_times = 3;
  if (this->gacha_times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gacha_times(), target);
  }

  // uint32 gacha_schedule_id = 4;
  if (this->gacha_schedule_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gacha_schedule_id(), target);
  }

  // repeated .proto.GachaItem gacha_item_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gacha_item_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->gacha_item_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 new_gacha_random = 6;
  if (this->new_gacha_random() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->new_gacha_random(), target);
  }

  // uint32 cost_item_id = 7;
  if (this->cost_item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cost_item_id(), target);
  }

  // uint32 cost_item_num = 8;
  if (this->cost_item_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cost_item_num(), target);
  }

  // uint32 ten_cost_item_id = 9;
  if (this->ten_cost_item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ten_cost_item_id(), target);
  }

  // uint32 ten_cost_item_num = 10;
  if (this->ten_cost_item_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->ten_cost_item_num(), target);
  }

  // uint32 left_gacha_times = 11;
  if (this->left_gacha_times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->left_gacha_times(), target);
  }

  // uint32 gacha_times_limit = 12;
  if (this->gacha_times_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->gacha_times_limit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DoGachaRsp)
  return target;
}

size_t DoGachaRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DoGachaRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GachaItem gacha_item_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->gacha_item_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gacha_item_list(static_cast<int>(i)));
    }
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 gacha_type = 2;
  if (this->gacha_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gacha_type());
  }

  // uint32 gacha_times = 3;
  if (this->gacha_times() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gacha_times());
  }

  // uint32 gacha_schedule_id = 4;
  if (this->gacha_schedule_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gacha_schedule_id());
  }

  // uint32 new_gacha_random = 6;
  if (this->new_gacha_random() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->new_gacha_random());
  }

  // uint32 cost_item_id = 7;
  if (this->cost_item_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cost_item_id());
  }

  // uint32 cost_item_num = 8;
  if (this->cost_item_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cost_item_num());
  }

  // uint32 ten_cost_item_id = 9;
  if (this->ten_cost_item_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ten_cost_item_id());
  }

  // uint32 ten_cost_item_num = 10;
  if (this->ten_cost_item_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ten_cost_item_num());
  }

  // uint32 left_gacha_times = 11;
  if (this->left_gacha_times() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->left_gacha_times());
  }

  // uint32 gacha_times_limit = 12;
  if (this->gacha_times_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gacha_times_limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoGachaRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DoGachaRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DoGachaRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DoGachaRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DoGachaRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DoGachaRsp)
    MergeFrom(*source);
  }
}

void DoGachaRsp::MergeFrom(const DoGachaRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DoGachaRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gacha_item_list_.MergeFrom(from.gacha_item_list_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.gacha_type() != 0) {
    set_gacha_type(from.gacha_type());
  }
  if (from.gacha_times() != 0) {
    set_gacha_times(from.gacha_times());
  }
  if (from.gacha_schedule_id() != 0) {
    set_gacha_schedule_id(from.gacha_schedule_id());
  }
  if (from.new_gacha_random() != 0) {
    set_new_gacha_random(from.new_gacha_random());
  }
  if (from.cost_item_id() != 0) {
    set_cost_item_id(from.cost_item_id());
  }
  if (from.cost_item_num() != 0) {
    set_cost_item_num(from.cost_item_num());
  }
  if (from.ten_cost_item_id() != 0) {
    set_ten_cost_item_id(from.ten_cost_item_id());
  }
  if (from.ten_cost_item_num() != 0) {
    set_ten_cost_item_num(from.ten_cost_item_num());
  }
  if (from.left_gacha_times() != 0) {
    set_left_gacha_times(from.left_gacha_times());
  }
  if (from.gacha_times_limit() != 0) {
    set_gacha_times_limit(from.gacha_times_limit());
  }
}

void DoGachaRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DoGachaRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoGachaRsp::CopyFrom(const DoGachaRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DoGachaRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoGachaRsp::IsInitialized() const {
  return true;
}

void DoGachaRsp::Swap(DoGachaRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoGachaRsp::InternalSwap(DoGachaRsp* other) {
  using std::swap;
  gacha_item_list_.InternalSwap(&other->gacha_item_list_);
  swap(retcode_, other->retcode_);
  swap(gacha_type_, other->gacha_type_);
  swap(gacha_times_, other->gacha_times_);
  swap(gacha_schedule_id_, other->gacha_schedule_id_);
  swap(new_gacha_random_, other->new_gacha_random_);
  swap(cost_item_id_, other->cost_item_id_);
  swap(cost_item_num_, other->cost_item_num_);
  swap(ten_cost_item_id_, other->ten_cost_item_id_);
  swap(ten_cost_item_num_, other->ten_cost_item_num_);
  swap(left_gacha_times_, other->left_gacha_times_);
  swap(gacha_times_limit_, other->gacha_times_limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DoGachaRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgacha_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgacha_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DoGachaRsp

// int32 retcode = 1;
void DoGachaRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DoGachaRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaRsp.retcode)
  return retcode_;
}
void DoGachaRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaRsp.retcode)
}

// uint32 gacha_type = 2;
void DoGachaRsp::clear_gacha_type() {
  gacha_type_ = 0u;
}
::google::protobuf::uint32 DoGachaRsp::gacha_type() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaRsp.gacha_type)
  return gacha_type_;
}
void DoGachaRsp::set_gacha_type(::google::protobuf::uint32 value) {
  
  gacha_type_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaRsp.gacha_type)
}

// uint32 gacha_times = 3;
void DoGachaRsp::clear_gacha_times() {
  gacha_times_ = 0u;
}
::google::protobuf::uint32 DoGachaRsp::gacha_times() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaRsp.gacha_times)
  return gacha_times_;
}
void DoGachaRsp::set_gacha_times(::google::protobuf::uint32 value) {
  
  gacha_times_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaRsp.gacha_times)
}

// uint32 gacha_schedule_id = 4;
void DoGachaRsp::clear_gacha_schedule_id() {
  gacha_schedule_id_ = 0u;
}
::google::protobuf::uint32 DoGachaRsp::gacha_schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaRsp.gacha_schedule_id)
  return gacha_schedule_id_;
}
void DoGachaRsp::set_gacha_schedule_id(::google::protobuf::uint32 value) {
  
  gacha_schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaRsp.gacha_schedule_id)
}

// repeated .proto.GachaItem gacha_item_list = 5;
int DoGachaRsp::gacha_item_list_size() const {
  return gacha_item_list_.size();
}
void DoGachaRsp::clear_gacha_item_list() {
  gacha_item_list_.Clear();
}
const ::proto::GachaItem& DoGachaRsp::gacha_item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DoGachaRsp.gacha_item_list)
  return gacha_item_list_.Get(index);
}
::proto::GachaItem* DoGachaRsp::mutable_gacha_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.DoGachaRsp.gacha_item_list)
  return gacha_item_list_.Mutable(index);
}
::proto::GachaItem* DoGachaRsp::add_gacha_item_list() {
  // @@protoc_insertion_point(field_add:proto.DoGachaRsp.gacha_item_list)
  return gacha_item_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GachaItem >*
DoGachaRsp::mutable_gacha_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DoGachaRsp.gacha_item_list)
  return &gacha_item_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GachaItem >&
DoGachaRsp::gacha_item_list() const {
  // @@protoc_insertion_point(field_list:proto.DoGachaRsp.gacha_item_list)
  return gacha_item_list_;
}

// uint32 new_gacha_random = 6;
void DoGachaRsp::clear_new_gacha_random() {
  new_gacha_random_ = 0u;
}
::google::protobuf::uint32 DoGachaRsp::new_gacha_random() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaRsp.new_gacha_random)
  return new_gacha_random_;
}
void DoGachaRsp::set_new_gacha_random(::google::protobuf::uint32 value) {
  
  new_gacha_random_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaRsp.new_gacha_random)
}

// uint32 cost_item_id = 7;
void DoGachaRsp::clear_cost_item_id() {
  cost_item_id_ = 0u;
}
::google::protobuf::uint32 DoGachaRsp::cost_item_id() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaRsp.cost_item_id)
  return cost_item_id_;
}
void DoGachaRsp::set_cost_item_id(::google::protobuf::uint32 value) {
  
  cost_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaRsp.cost_item_id)
}

// uint32 cost_item_num = 8;
void DoGachaRsp::clear_cost_item_num() {
  cost_item_num_ = 0u;
}
::google::protobuf::uint32 DoGachaRsp::cost_item_num() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaRsp.cost_item_num)
  return cost_item_num_;
}
void DoGachaRsp::set_cost_item_num(::google::protobuf::uint32 value) {
  
  cost_item_num_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaRsp.cost_item_num)
}

// uint32 ten_cost_item_id = 9;
void DoGachaRsp::clear_ten_cost_item_id() {
  ten_cost_item_id_ = 0u;
}
::google::protobuf::uint32 DoGachaRsp::ten_cost_item_id() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaRsp.ten_cost_item_id)
  return ten_cost_item_id_;
}
void DoGachaRsp::set_ten_cost_item_id(::google::protobuf::uint32 value) {
  
  ten_cost_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaRsp.ten_cost_item_id)
}

// uint32 ten_cost_item_num = 10;
void DoGachaRsp::clear_ten_cost_item_num() {
  ten_cost_item_num_ = 0u;
}
::google::protobuf::uint32 DoGachaRsp::ten_cost_item_num() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaRsp.ten_cost_item_num)
  return ten_cost_item_num_;
}
void DoGachaRsp::set_ten_cost_item_num(::google::protobuf::uint32 value) {
  
  ten_cost_item_num_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaRsp.ten_cost_item_num)
}

// uint32 left_gacha_times = 11;
void DoGachaRsp::clear_left_gacha_times() {
  left_gacha_times_ = 0u;
}
::google::protobuf::uint32 DoGachaRsp::left_gacha_times() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaRsp.left_gacha_times)
  return left_gacha_times_;
}
void DoGachaRsp::set_left_gacha_times(::google::protobuf::uint32 value) {
  
  left_gacha_times_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaRsp.left_gacha_times)
}

// uint32 gacha_times_limit = 12;
void DoGachaRsp::clear_gacha_times_limit() {
  gacha_times_limit_ = 0u;
}
::google::protobuf::uint32 DoGachaRsp::gacha_times_limit() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaRsp.gacha_times_limit)
  return gacha_times_limit_;
}
void DoGachaRsp::set_gacha_times_limit(::google::protobuf::uint32 value) {
  
  gacha_times_limit_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaRsp.gacha_times_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
