// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_battle_pass.proto

#ifndef PROTOBUF_cmd_2fcmd_5fbattle_5fpass_2eproto__INCLUDED
#define PROTOBUF_cmd_2fcmd_5fbattle_5fpass_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "define.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
class BattlePassAllDataNotify;
class BattlePassAllDataNotifyDefaultTypeInternal;
extern BattlePassAllDataNotifyDefaultTypeInternal _BattlePassAllDataNotify_default_instance_;
class BattlePassCurScheduleUpdateNotify;
class BattlePassCurScheduleUpdateNotifyDefaultTypeInternal;
extern BattlePassCurScheduleUpdateNotifyDefaultTypeInternal _BattlePassCurScheduleUpdateNotify_default_instance_;
class BattlePassCycle;
class BattlePassCycleDefaultTypeInternal;
extern BattlePassCycleDefaultTypeInternal _BattlePassCycle_default_instance_;
class BattlePassMission;
class BattlePassMissionDefaultTypeInternal;
extern BattlePassMissionDefaultTypeInternal _BattlePassMission_default_instance_;
class BattlePassMissionDelNotify;
class BattlePassMissionDelNotifyDefaultTypeInternal;
extern BattlePassMissionDelNotifyDefaultTypeInternal _BattlePassMissionDelNotify_default_instance_;
class BattlePassMissionUpdateNotify;
class BattlePassMissionUpdateNotifyDefaultTypeInternal;
extern BattlePassMissionUpdateNotifyDefaultTypeInternal _BattlePassMissionUpdateNotify_default_instance_;
class BattlePassRewardTag;
class BattlePassRewardTagDefaultTypeInternal;
extern BattlePassRewardTagDefaultTypeInternal _BattlePassRewardTag_default_instance_;
class BattlePassRewardTakeOption;
class BattlePassRewardTakeOptionDefaultTypeInternal;
extern BattlePassRewardTakeOptionDefaultTypeInternal _BattlePassRewardTakeOption_default_instance_;
class BattlePassSchedule;
class BattlePassScheduleDefaultTypeInternal;
extern BattlePassScheduleDefaultTypeInternal _BattlePassSchedule_default_instance_;
class TakeBattlePassMissionPointReq;
class TakeBattlePassMissionPointReqDefaultTypeInternal;
extern TakeBattlePassMissionPointReqDefaultTypeInternal _TakeBattlePassMissionPointReq_default_instance_;
class TakeBattlePassMissionPointRsp;
class TakeBattlePassMissionPointRspDefaultTypeInternal;
extern TakeBattlePassMissionPointRspDefaultTypeInternal _TakeBattlePassMissionPointRsp_default_instance_;
class TakeBattlePassRewardReq;
class TakeBattlePassRewardReqDefaultTypeInternal;
extern TakeBattlePassRewardReqDefaultTypeInternal _TakeBattlePassRewardReq_default_instance_;
class TakeBattlePassRewardRsp;
class TakeBattlePassRewardRspDefaultTypeInternal;
extern TakeBattlePassRewardRspDefaultTypeInternal _TakeBattlePassRewardRsp_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto

enum BattlePassMission_MissionStatus {
  BattlePassMission_MissionStatus_MISSION_INVALID = 0,
  BattlePassMission_MissionStatus_MISSION_UNFINISHED = 1,
  BattlePassMission_MissionStatus_MISSION_FINISHED = 2,
  BattlePassMission_MissionStatus_MISSION_POINT_TAKEN = 3,
  BattlePassMission_MissionStatus_BattlePassMission_MissionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BattlePassMission_MissionStatus_BattlePassMission_MissionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BattlePassMission_MissionStatus_IsValid(int value);
const BattlePassMission_MissionStatus BattlePassMission_MissionStatus_MissionStatus_MIN = BattlePassMission_MissionStatus_MISSION_INVALID;
const BattlePassMission_MissionStatus BattlePassMission_MissionStatus_MissionStatus_MAX = BattlePassMission_MissionStatus_MISSION_POINT_TAKEN;
const int BattlePassMission_MissionStatus_MissionStatus_ARRAYSIZE = BattlePassMission_MissionStatus_MissionStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* BattlePassMission_MissionStatus_descriptor();
inline const ::std::string& BattlePassMission_MissionStatus_Name(BattlePassMission_MissionStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    BattlePassMission_MissionStatus_descriptor(), value);
}
inline bool BattlePassMission_MissionStatus_Parse(
    const ::std::string& name, BattlePassMission_MissionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BattlePassMission_MissionStatus>(
    BattlePassMission_MissionStatus_descriptor(), name, value);
}
enum BattlePassAllDataNotify_CmdId {
  BattlePassAllDataNotify_CmdId_NONE = 0,
  BattlePassAllDataNotify_CmdId_CMD_ID = 2601,
  BattlePassAllDataNotify_CmdId_ENET_CHANNEL_ID = 0,
  BattlePassAllDataNotify_CmdId_ENET_IS_RELIABLE = 1,
  BattlePassAllDataNotify_CmdId_BattlePassAllDataNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BattlePassAllDataNotify_CmdId_BattlePassAllDataNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BattlePassAllDataNotify_CmdId_IsValid(int value);
const BattlePassAllDataNotify_CmdId BattlePassAllDataNotify_CmdId_CmdId_MIN = BattlePassAllDataNotify_CmdId_NONE;
const BattlePassAllDataNotify_CmdId BattlePassAllDataNotify_CmdId_CmdId_MAX = BattlePassAllDataNotify_CmdId_CMD_ID;
const int BattlePassAllDataNotify_CmdId_CmdId_ARRAYSIZE = BattlePassAllDataNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* BattlePassAllDataNotify_CmdId_descriptor();
inline const ::std::string& BattlePassAllDataNotify_CmdId_Name(BattlePassAllDataNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    BattlePassAllDataNotify_CmdId_descriptor(), value);
}
inline bool BattlePassAllDataNotify_CmdId_Parse(
    const ::std::string& name, BattlePassAllDataNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BattlePassAllDataNotify_CmdId>(
    BattlePassAllDataNotify_CmdId_descriptor(), name, value);
}
enum BattlePassMissionUpdateNotify_CmdId {
  BattlePassMissionUpdateNotify_CmdId_NONE = 0,
  BattlePassMissionUpdateNotify_CmdId_CMD_ID = 2602,
  BattlePassMissionUpdateNotify_CmdId_ENET_CHANNEL_ID = 0,
  BattlePassMissionUpdateNotify_CmdId_ENET_IS_RELIABLE = 1,
  BattlePassMissionUpdateNotify_CmdId_BattlePassMissionUpdateNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BattlePassMissionUpdateNotify_CmdId_BattlePassMissionUpdateNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BattlePassMissionUpdateNotify_CmdId_IsValid(int value);
const BattlePassMissionUpdateNotify_CmdId BattlePassMissionUpdateNotify_CmdId_CmdId_MIN = BattlePassMissionUpdateNotify_CmdId_NONE;
const BattlePassMissionUpdateNotify_CmdId BattlePassMissionUpdateNotify_CmdId_CmdId_MAX = BattlePassMissionUpdateNotify_CmdId_CMD_ID;
const int BattlePassMissionUpdateNotify_CmdId_CmdId_ARRAYSIZE = BattlePassMissionUpdateNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* BattlePassMissionUpdateNotify_CmdId_descriptor();
inline const ::std::string& BattlePassMissionUpdateNotify_CmdId_Name(BattlePassMissionUpdateNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    BattlePassMissionUpdateNotify_CmdId_descriptor(), value);
}
inline bool BattlePassMissionUpdateNotify_CmdId_Parse(
    const ::std::string& name, BattlePassMissionUpdateNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BattlePassMissionUpdateNotify_CmdId>(
    BattlePassMissionUpdateNotify_CmdId_descriptor(), name, value);
}
enum BattlePassMissionDelNotify_CmdId {
  BattlePassMissionDelNotify_CmdId_NONE = 0,
  BattlePassMissionDelNotify_CmdId_CMD_ID = 2603,
  BattlePassMissionDelNotify_CmdId_ENET_CHANNEL_ID = 0,
  BattlePassMissionDelNotify_CmdId_ENET_IS_RELIABLE = 1,
  BattlePassMissionDelNotify_CmdId_BattlePassMissionDelNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BattlePassMissionDelNotify_CmdId_BattlePassMissionDelNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BattlePassMissionDelNotify_CmdId_IsValid(int value);
const BattlePassMissionDelNotify_CmdId BattlePassMissionDelNotify_CmdId_CmdId_MIN = BattlePassMissionDelNotify_CmdId_NONE;
const BattlePassMissionDelNotify_CmdId BattlePassMissionDelNotify_CmdId_CmdId_MAX = BattlePassMissionDelNotify_CmdId_CMD_ID;
const int BattlePassMissionDelNotify_CmdId_CmdId_ARRAYSIZE = BattlePassMissionDelNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* BattlePassMissionDelNotify_CmdId_descriptor();
inline const ::std::string& BattlePassMissionDelNotify_CmdId_Name(BattlePassMissionDelNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    BattlePassMissionDelNotify_CmdId_descriptor(), value);
}
inline bool BattlePassMissionDelNotify_CmdId_Parse(
    const ::std::string& name, BattlePassMissionDelNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BattlePassMissionDelNotify_CmdId>(
    BattlePassMissionDelNotify_CmdId_descriptor(), name, value);
}
enum BattlePassCurScheduleUpdateNotify_CmdId {
  BattlePassCurScheduleUpdateNotify_CmdId_NONE = 0,
  BattlePassCurScheduleUpdateNotify_CmdId_CMD_ID = 2604,
  BattlePassCurScheduleUpdateNotify_CmdId_ENET_CHANNEL_ID = 0,
  BattlePassCurScheduleUpdateNotify_CmdId_ENET_IS_RELIABLE = 1,
  BattlePassCurScheduleUpdateNotify_CmdId_BattlePassCurScheduleUpdateNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BattlePassCurScheduleUpdateNotify_CmdId_BattlePassCurScheduleUpdateNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BattlePassCurScheduleUpdateNotify_CmdId_IsValid(int value);
const BattlePassCurScheduleUpdateNotify_CmdId BattlePassCurScheduleUpdateNotify_CmdId_CmdId_MIN = BattlePassCurScheduleUpdateNotify_CmdId_NONE;
const BattlePassCurScheduleUpdateNotify_CmdId BattlePassCurScheduleUpdateNotify_CmdId_CmdId_MAX = BattlePassCurScheduleUpdateNotify_CmdId_CMD_ID;
const int BattlePassCurScheduleUpdateNotify_CmdId_CmdId_ARRAYSIZE = BattlePassCurScheduleUpdateNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* BattlePassCurScheduleUpdateNotify_CmdId_descriptor();
inline const ::std::string& BattlePassCurScheduleUpdateNotify_CmdId_Name(BattlePassCurScheduleUpdateNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    BattlePassCurScheduleUpdateNotify_CmdId_descriptor(), value);
}
inline bool BattlePassCurScheduleUpdateNotify_CmdId_Parse(
    const ::std::string& name, BattlePassCurScheduleUpdateNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BattlePassCurScheduleUpdateNotify_CmdId>(
    BattlePassCurScheduleUpdateNotify_CmdId_descriptor(), name, value);
}
enum TakeBattlePassRewardReq_CmdId {
  TakeBattlePassRewardReq_CmdId_NONE = 0,
  TakeBattlePassRewardReq_CmdId_CMD_ID = 2605,
  TakeBattlePassRewardReq_CmdId_ENET_CHANNEL_ID = 0,
  TakeBattlePassRewardReq_CmdId_ENET_IS_RELIABLE = 1,
  TakeBattlePassRewardReq_CmdId_IS_ALLOW_CLIENT = 1,
  TakeBattlePassRewardReq_CmdId_TakeBattlePassRewardReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TakeBattlePassRewardReq_CmdId_TakeBattlePassRewardReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TakeBattlePassRewardReq_CmdId_IsValid(int value);
const TakeBattlePassRewardReq_CmdId TakeBattlePassRewardReq_CmdId_CmdId_MIN = TakeBattlePassRewardReq_CmdId_NONE;
const TakeBattlePassRewardReq_CmdId TakeBattlePassRewardReq_CmdId_CmdId_MAX = TakeBattlePassRewardReq_CmdId_CMD_ID;
const int TakeBattlePassRewardReq_CmdId_CmdId_ARRAYSIZE = TakeBattlePassRewardReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* TakeBattlePassRewardReq_CmdId_descriptor();
inline const ::std::string& TakeBattlePassRewardReq_CmdId_Name(TakeBattlePassRewardReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    TakeBattlePassRewardReq_CmdId_descriptor(), value);
}
inline bool TakeBattlePassRewardReq_CmdId_Parse(
    const ::std::string& name, TakeBattlePassRewardReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TakeBattlePassRewardReq_CmdId>(
    TakeBattlePassRewardReq_CmdId_descriptor(), name, value);
}
enum TakeBattlePassRewardRsp_CmdId {
  TakeBattlePassRewardRsp_CmdId_NONE = 0,
  TakeBattlePassRewardRsp_CmdId_CMD_ID = 2606,
  TakeBattlePassRewardRsp_CmdId_ENET_CHANNEL_ID = 0,
  TakeBattlePassRewardRsp_CmdId_ENET_IS_RELIABLE = 1,
  TakeBattlePassRewardRsp_CmdId_TakeBattlePassRewardRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TakeBattlePassRewardRsp_CmdId_TakeBattlePassRewardRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TakeBattlePassRewardRsp_CmdId_IsValid(int value);
const TakeBattlePassRewardRsp_CmdId TakeBattlePassRewardRsp_CmdId_CmdId_MIN = TakeBattlePassRewardRsp_CmdId_NONE;
const TakeBattlePassRewardRsp_CmdId TakeBattlePassRewardRsp_CmdId_CmdId_MAX = TakeBattlePassRewardRsp_CmdId_CMD_ID;
const int TakeBattlePassRewardRsp_CmdId_CmdId_ARRAYSIZE = TakeBattlePassRewardRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* TakeBattlePassRewardRsp_CmdId_descriptor();
inline const ::std::string& TakeBattlePassRewardRsp_CmdId_Name(TakeBattlePassRewardRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    TakeBattlePassRewardRsp_CmdId_descriptor(), value);
}
inline bool TakeBattlePassRewardRsp_CmdId_Parse(
    const ::std::string& name, TakeBattlePassRewardRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TakeBattlePassRewardRsp_CmdId>(
    TakeBattlePassRewardRsp_CmdId_descriptor(), name, value);
}
enum TakeBattlePassMissionPointReq_CmdId {
  TakeBattlePassMissionPointReq_CmdId_NONE = 0,
  TakeBattlePassMissionPointReq_CmdId_CMD_ID = 2607,
  TakeBattlePassMissionPointReq_CmdId_ENET_CHANNEL_ID = 0,
  TakeBattlePassMissionPointReq_CmdId_ENET_IS_RELIABLE = 1,
  TakeBattlePassMissionPointReq_CmdId_IS_ALLOW_CLIENT = 1,
  TakeBattlePassMissionPointReq_CmdId_TakeBattlePassMissionPointReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TakeBattlePassMissionPointReq_CmdId_TakeBattlePassMissionPointReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TakeBattlePassMissionPointReq_CmdId_IsValid(int value);
const TakeBattlePassMissionPointReq_CmdId TakeBattlePassMissionPointReq_CmdId_CmdId_MIN = TakeBattlePassMissionPointReq_CmdId_NONE;
const TakeBattlePassMissionPointReq_CmdId TakeBattlePassMissionPointReq_CmdId_CmdId_MAX = TakeBattlePassMissionPointReq_CmdId_CMD_ID;
const int TakeBattlePassMissionPointReq_CmdId_CmdId_ARRAYSIZE = TakeBattlePassMissionPointReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* TakeBattlePassMissionPointReq_CmdId_descriptor();
inline const ::std::string& TakeBattlePassMissionPointReq_CmdId_Name(TakeBattlePassMissionPointReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    TakeBattlePassMissionPointReq_CmdId_descriptor(), value);
}
inline bool TakeBattlePassMissionPointReq_CmdId_Parse(
    const ::std::string& name, TakeBattlePassMissionPointReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TakeBattlePassMissionPointReq_CmdId>(
    TakeBattlePassMissionPointReq_CmdId_descriptor(), name, value);
}
enum TakeBattlePassMissionPointRsp_CmdId {
  TakeBattlePassMissionPointRsp_CmdId_NONE = 0,
  TakeBattlePassMissionPointRsp_CmdId_CMD_ID = 2608,
  TakeBattlePassMissionPointRsp_CmdId_ENET_CHANNEL_ID = 0,
  TakeBattlePassMissionPointRsp_CmdId_ENET_IS_RELIABLE = 1,
  TakeBattlePassMissionPointRsp_CmdId_TakeBattlePassMissionPointRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TakeBattlePassMissionPointRsp_CmdId_TakeBattlePassMissionPointRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TakeBattlePassMissionPointRsp_CmdId_IsValid(int value);
const TakeBattlePassMissionPointRsp_CmdId TakeBattlePassMissionPointRsp_CmdId_CmdId_MIN = TakeBattlePassMissionPointRsp_CmdId_NONE;
const TakeBattlePassMissionPointRsp_CmdId TakeBattlePassMissionPointRsp_CmdId_CmdId_MAX = TakeBattlePassMissionPointRsp_CmdId_CMD_ID;
const int TakeBattlePassMissionPointRsp_CmdId_CmdId_ARRAYSIZE = TakeBattlePassMissionPointRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* TakeBattlePassMissionPointRsp_CmdId_descriptor();
inline const ::std::string& TakeBattlePassMissionPointRsp_CmdId_Name(TakeBattlePassMissionPointRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    TakeBattlePassMissionPointRsp_CmdId_descriptor(), value);
}
inline bool TakeBattlePassMissionPointRsp_CmdId_Parse(
    const ::std::string& name, TakeBattlePassMissionPointRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TakeBattlePassMissionPointRsp_CmdId>(
    TakeBattlePassMissionPointRsp_CmdId_descriptor(), name, value);
}
enum BattlePassUnlockStatus {
  BATTLE_PASS_UNLOCK_INVALID = 0,
  BATTLE_PASS_UNLOCK_FREE = 1,
  BATTLE_PASS_UNLOCK_PAID = 2,
  BattlePassUnlockStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BattlePassUnlockStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BattlePassUnlockStatus_IsValid(int value);
const BattlePassUnlockStatus BattlePassUnlockStatus_MIN = BATTLE_PASS_UNLOCK_INVALID;
const BattlePassUnlockStatus BattlePassUnlockStatus_MAX = BATTLE_PASS_UNLOCK_PAID;
const int BattlePassUnlockStatus_ARRAYSIZE = BattlePassUnlockStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* BattlePassUnlockStatus_descriptor();
inline const ::std::string& BattlePassUnlockStatus_Name(BattlePassUnlockStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    BattlePassUnlockStatus_descriptor(), value);
}
inline bool BattlePassUnlockStatus_Parse(
    const ::std::string& name, BattlePassUnlockStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BattlePassUnlockStatus>(
    BattlePassUnlockStatus_descriptor(), name, value);
}
// ===================================================================

class BattlePassCycle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BattlePassCycle) */ {
 public:
  BattlePassCycle();
  virtual ~BattlePassCycle();

  BattlePassCycle(const BattlePassCycle& from);

  inline BattlePassCycle& operator=(const BattlePassCycle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BattlePassCycle(BattlePassCycle&& from) noexcept
    : BattlePassCycle() {
    *this = ::std::move(from);
  }

  inline BattlePassCycle& operator=(BattlePassCycle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattlePassCycle& default_instance();

  static inline const BattlePassCycle* internal_default_instance() {
    return reinterpret_cast<const BattlePassCycle*>(
               &_BattlePassCycle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BattlePassCycle* other);
  friend void swap(BattlePassCycle& a, BattlePassCycle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BattlePassCycle* New() const PROTOBUF_FINAL { return New(NULL); }

  BattlePassCycle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BattlePassCycle& from);
  void MergeFrom(const BattlePassCycle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BattlePassCycle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 cycle_idx = 1;
  void clear_cycle_idx();
  static const int kCycleIdxFieldNumber = 1;
  ::google::protobuf::uint32 cycle_idx() const;
  void set_cycle_idx(::google::protobuf::uint32 value);

  // uint32 begin_time = 2;
  void clear_begin_time();
  static const int kBeginTimeFieldNumber = 2;
  ::google::protobuf::uint32 begin_time() const;
  void set_begin_time(::google::protobuf::uint32 value);

  // uint32 end_time = 3;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 3;
  ::google::protobuf::uint32 end_time() const;
  void set_end_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.BattlePassCycle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 cycle_idx_;
  ::google::protobuf::uint32 begin_time_;
  ::google::protobuf::uint32 end_time_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BattlePassMission : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BattlePassMission) */ {
 public:
  BattlePassMission();
  virtual ~BattlePassMission();

  BattlePassMission(const BattlePassMission& from);

  inline BattlePassMission& operator=(const BattlePassMission& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BattlePassMission(BattlePassMission&& from) noexcept
    : BattlePassMission() {
    *this = ::std::move(from);
  }

  inline BattlePassMission& operator=(BattlePassMission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattlePassMission& default_instance();

  static inline const BattlePassMission* internal_default_instance() {
    return reinterpret_cast<const BattlePassMission*>(
               &_BattlePassMission_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(BattlePassMission* other);
  friend void swap(BattlePassMission& a, BattlePassMission& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BattlePassMission* New() const PROTOBUF_FINAL { return New(NULL); }

  BattlePassMission* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BattlePassMission& from);
  void MergeFrom(const BattlePassMission& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BattlePassMission* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BattlePassMission_MissionStatus MissionStatus;
  static const MissionStatus MISSION_INVALID =
    BattlePassMission_MissionStatus_MISSION_INVALID;
  static const MissionStatus MISSION_UNFINISHED =
    BattlePassMission_MissionStatus_MISSION_UNFINISHED;
  static const MissionStatus MISSION_FINISHED =
    BattlePassMission_MissionStatus_MISSION_FINISHED;
  static const MissionStatus MISSION_POINT_TAKEN =
    BattlePassMission_MissionStatus_MISSION_POINT_TAKEN;
  static inline bool MissionStatus_IsValid(int value) {
    return BattlePassMission_MissionStatus_IsValid(value);
  }
  static const MissionStatus MissionStatus_MIN =
    BattlePassMission_MissionStatus_MissionStatus_MIN;
  static const MissionStatus MissionStatus_MAX =
    BattlePassMission_MissionStatus_MissionStatus_MAX;
  static const int MissionStatus_ARRAYSIZE =
    BattlePassMission_MissionStatus_MissionStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MissionStatus_descriptor() {
    return BattlePassMission_MissionStatus_descriptor();
  }
  static inline const ::std::string& MissionStatus_Name(MissionStatus value) {
    return BattlePassMission_MissionStatus_Name(value);
  }
  static inline bool MissionStatus_Parse(const ::std::string& name,
      MissionStatus* value) {
    return BattlePassMission_MissionStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 mission_id = 1;
  void clear_mission_id();
  static const int kMissionIdFieldNumber = 1;
  ::google::protobuf::uint32 mission_id() const;
  void set_mission_id(::google::protobuf::uint32 value);

  // uint32 cur_progress = 2;
  void clear_cur_progress();
  static const int kCurProgressFieldNumber = 2;
  ::google::protobuf::uint32 cur_progress() const;
  void set_cur_progress(::google::protobuf::uint32 value);

  // uint32 total_progress = 3;
  void clear_total_progress();
  static const int kTotalProgressFieldNumber = 3;
  ::google::protobuf::uint32 total_progress() const;
  void set_total_progress(::google::protobuf::uint32 value);

  // uint32 reward_battle_pass_point = 4;
  void clear_reward_battle_pass_point();
  static const int kRewardBattlePassPointFieldNumber = 4;
  ::google::protobuf::uint32 reward_battle_pass_point() const;
  void set_reward_battle_pass_point(::google::protobuf::uint32 value);

  // uint32 mission_type = 5;
  void clear_mission_type();
  static const int kMissionTypeFieldNumber = 5;
  ::google::protobuf::uint32 mission_type() const;
  void set_mission_type(::google::protobuf::uint32 value);

  // .proto.BattlePassMission.MissionStatus mission_status = 6;
  void clear_mission_status();
  static const int kMissionStatusFieldNumber = 6;
  ::proto::BattlePassMission_MissionStatus mission_status() const;
  void set_mission_status(::proto::BattlePassMission_MissionStatus value);

  // @@protoc_insertion_point(class_scope:proto.BattlePassMission)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 mission_id_;
  ::google::protobuf::uint32 cur_progress_;
  ::google::protobuf::uint32 total_progress_;
  ::google::protobuf::uint32 reward_battle_pass_point_;
  ::google::protobuf::uint32 mission_type_;
  int mission_status_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BattlePassRewardTag : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BattlePassRewardTag) */ {
 public:
  BattlePassRewardTag();
  virtual ~BattlePassRewardTag();

  BattlePassRewardTag(const BattlePassRewardTag& from);

  inline BattlePassRewardTag& operator=(const BattlePassRewardTag& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BattlePassRewardTag(BattlePassRewardTag&& from) noexcept
    : BattlePassRewardTag() {
    *this = ::std::move(from);
  }

  inline BattlePassRewardTag& operator=(BattlePassRewardTag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattlePassRewardTag& default_instance();

  static inline const BattlePassRewardTag* internal_default_instance() {
    return reinterpret_cast<const BattlePassRewardTag*>(
               &_BattlePassRewardTag_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(BattlePassRewardTag* other);
  friend void swap(BattlePassRewardTag& a, BattlePassRewardTag& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BattlePassRewardTag* New() const PROTOBUF_FINAL { return New(NULL); }

  BattlePassRewardTag* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BattlePassRewardTag& from);
  void MergeFrom(const BattlePassRewardTag& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BattlePassRewardTag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.BattlePassUnlockStatus unlock_status = 1;
  void clear_unlock_status();
  static const int kUnlockStatusFieldNumber = 1;
  ::proto::BattlePassUnlockStatus unlock_status() const;
  void set_unlock_status(::proto::BattlePassUnlockStatus value);

  // uint32 level = 2;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // uint32 reward_id = 3;
  void clear_reward_id();
  static const int kRewardIdFieldNumber = 3;
  ::google::protobuf::uint32 reward_id() const;
  void set_reward_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.BattlePassRewardTag)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int unlock_status_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 reward_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BattlePassSchedule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BattlePassSchedule) */ {
 public:
  BattlePassSchedule();
  virtual ~BattlePassSchedule();

  BattlePassSchedule(const BattlePassSchedule& from);

  inline BattlePassSchedule& operator=(const BattlePassSchedule& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BattlePassSchedule(BattlePassSchedule&& from) noexcept
    : BattlePassSchedule() {
    *this = ::std::move(from);
  }

  inline BattlePassSchedule& operator=(BattlePassSchedule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattlePassSchedule& default_instance();

  static inline const BattlePassSchedule* internal_default_instance() {
    return reinterpret_cast<const BattlePassSchedule*>(
               &_BattlePassSchedule_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(BattlePassSchedule* other);
  friend void swap(BattlePassSchedule& a, BattlePassSchedule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BattlePassSchedule* New() const PROTOBUF_FINAL { return New(NULL); }

  BattlePassSchedule* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BattlePassSchedule& from);
  void MergeFrom(const BattlePassSchedule& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BattlePassSchedule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.BattlePassRewardTag reward_taken_list = 5;
  int reward_taken_list_size() const;
  void clear_reward_taken_list();
  static const int kRewardTakenListFieldNumber = 5;
  const ::proto::BattlePassRewardTag& reward_taken_list(int index) const;
  ::proto::BattlePassRewardTag* mutable_reward_taken_list(int index);
  ::proto::BattlePassRewardTag* add_reward_taken_list();
  ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTag >*
      mutable_reward_taken_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTag >&
      reward_taken_list() const;

  // .proto.BattlePassCycle cur_cycle = 8;
  bool has_cur_cycle() const;
  void clear_cur_cycle();
  static const int kCurCycleFieldNumber = 8;
  const ::proto::BattlePassCycle& cur_cycle() const;
  ::proto::BattlePassCycle* mutable_cur_cycle();
  ::proto::BattlePassCycle* release_cur_cycle();
  void set_allocated_cur_cycle(::proto::BattlePassCycle* cur_cycle);

  // uint32 schedule_id = 1;
  void clear_schedule_id();
  static const int kScheduleIdFieldNumber = 1;
  ::google::protobuf::uint32 schedule_id() const;
  void set_schedule_id(::google::protobuf::uint32 value);

  // uint32 level = 2;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // uint32 point = 3;
  void clear_point();
  static const int kPointFieldNumber = 3;
  ::google::protobuf::uint32 point() const;
  void set_point(::google::protobuf::uint32 value);

  // .proto.BattlePassUnlockStatus unlock_status = 4;
  void clear_unlock_status();
  static const int kUnlockStatusFieldNumber = 4;
  ::proto::BattlePassUnlockStatus unlock_status() const;
  void set_unlock_status(::proto::BattlePassUnlockStatus value);

  // uint32 begin_time = 6;
  void clear_begin_time();
  static const int kBeginTimeFieldNumber = 6;
  ::google::protobuf::uint32 begin_time() const;
  void set_begin_time(::google::protobuf::uint32 value);

  // uint32 end_time = 7;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 7;
  ::google::protobuf::uint32 end_time() const;
  void set_end_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.BattlePassSchedule)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTag > reward_taken_list_;
  ::proto::BattlePassCycle* cur_cycle_;
  ::google::protobuf::uint32 schedule_id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 point_;
  int unlock_status_;
  ::google::protobuf::uint32 begin_time_;
  ::google::protobuf::uint32 end_time_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BattlePassAllDataNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BattlePassAllDataNotify) */ {
 public:
  BattlePassAllDataNotify();
  virtual ~BattlePassAllDataNotify();

  BattlePassAllDataNotify(const BattlePassAllDataNotify& from);

  inline BattlePassAllDataNotify& operator=(const BattlePassAllDataNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BattlePassAllDataNotify(BattlePassAllDataNotify&& from) noexcept
    : BattlePassAllDataNotify() {
    *this = ::std::move(from);
  }

  inline BattlePassAllDataNotify& operator=(BattlePassAllDataNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattlePassAllDataNotify& default_instance();

  static inline const BattlePassAllDataNotify* internal_default_instance() {
    return reinterpret_cast<const BattlePassAllDataNotify*>(
               &_BattlePassAllDataNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(BattlePassAllDataNotify* other);
  friend void swap(BattlePassAllDataNotify& a, BattlePassAllDataNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BattlePassAllDataNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  BattlePassAllDataNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BattlePassAllDataNotify& from);
  void MergeFrom(const BattlePassAllDataNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BattlePassAllDataNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BattlePassAllDataNotify_CmdId CmdId;
  static const CmdId NONE =
    BattlePassAllDataNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    BattlePassAllDataNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    BattlePassAllDataNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    BattlePassAllDataNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return BattlePassAllDataNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    BattlePassAllDataNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    BattlePassAllDataNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    BattlePassAllDataNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return BattlePassAllDataNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return BattlePassAllDataNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return BattlePassAllDataNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.BattlePassMission mission_list = 3;
  int mission_list_size() const;
  void clear_mission_list();
  static const int kMissionListFieldNumber = 3;
  const ::proto::BattlePassMission& mission_list(int index) const;
  ::proto::BattlePassMission* mutable_mission_list(int index);
  ::proto::BattlePassMission* add_mission_list();
  ::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission >*
      mutable_mission_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission >&
      mission_list() const;

  // .proto.BattlePassSchedule cur_schedule = 2;
  bool has_cur_schedule() const;
  void clear_cur_schedule();
  static const int kCurScheduleFieldNumber = 2;
  const ::proto::BattlePassSchedule& cur_schedule() const;
  ::proto::BattlePassSchedule* mutable_cur_schedule();
  ::proto::BattlePassSchedule* release_cur_schedule();
  void set_allocated_cur_schedule(::proto::BattlePassSchedule* cur_schedule);

  // bool have_cur_schedule = 1;
  void clear_have_cur_schedule();
  static const int kHaveCurScheduleFieldNumber = 1;
  bool have_cur_schedule() const;
  void set_have_cur_schedule(bool value);

  // @@protoc_insertion_point(class_scope:proto.BattlePassAllDataNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission > mission_list_;
  ::proto::BattlePassSchedule* cur_schedule_;
  bool have_cur_schedule_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BattlePassMissionUpdateNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BattlePassMissionUpdateNotify) */ {
 public:
  BattlePassMissionUpdateNotify();
  virtual ~BattlePassMissionUpdateNotify();

  BattlePassMissionUpdateNotify(const BattlePassMissionUpdateNotify& from);

  inline BattlePassMissionUpdateNotify& operator=(const BattlePassMissionUpdateNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BattlePassMissionUpdateNotify(BattlePassMissionUpdateNotify&& from) noexcept
    : BattlePassMissionUpdateNotify() {
    *this = ::std::move(from);
  }

  inline BattlePassMissionUpdateNotify& operator=(BattlePassMissionUpdateNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattlePassMissionUpdateNotify& default_instance();

  static inline const BattlePassMissionUpdateNotify* internal_default_instance() {
    return reinterpret_cast<const BattlePassMissionUpdateNotify*>(
               &_BattlePassMissionUpdateNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(BattlePassMissionUpdateNotify* other);
  friend void swap(BattlePassMissionUpdateNotify& a, BattlePassMissionUpdateNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BattlePassMissionUpdateNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  BattlePassMissionUpdateNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BattlePassMissionUpdateNotify& from);
  void MergeFrom(const BattlePassMissionUpdateNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BattlePassMissionUpdateNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BattlePassMissionUpdateNotify_CmdId CmdId;
  static const CmdId NONE =
    BattlePassMissionUpdateNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    BattlePassMissionUpdateNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    BattlePassMissionUpdateNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    BattlePassMissionUpdateNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return BattlePassMissionUpdateNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    BattlePassMissionUpdateNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    BattlePassMissionUpdateNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    BattlePassMissionUpdateNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return BattlePassMissionUpdateNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return BattlePassMissionUpdateNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return BattlePassMissionUpdateNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.BattlePassMission mission_list = 1;
  int mission_list_size() const;
  void clear_mission_list();
  static const int kMissionListFieldNumber = 1;
  const ::proto::BattlePassMission& mission_list(int index) const;
  ::proto::BattlePassMission* mutable_mission_list(int index);
  ::proto::BattlePassMission* add_mission_list();
  ::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission >*
      mutable_mission_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission >&
      mission_list() const;

  // @@protoc_insertion_point(class_scope:proto.BattlePassMissionUpdateNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission > mission_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BattlePassMissionDelNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BattlePassMissionDelNotify) */ {
 public:
  BattlePassMissionDelNotify();
  virtual ~BattlePassMissionDelNotify();

  BattlePassMissionDelNotify(const BattlePassMissionDelNotify& from);

  inline BattlePassMissionDelNotify& operator=(const BattlePassMissionDelNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BattlePassMissionDelNotify(BattlePassMissionDelNotify&& from) noexcept
    : BattlePassMissionDelNotify() {
    *this = ::std::move(from);
  }

  inline BattlePassMissionDelNotify& operator=(BattlePassMissionDelNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattlePassMissionDelNotify& default_instance();

  static inline const BattlePassMissionDelNotify* internal_default_instance() {
    return reinterpret_cast<const BattlePassMissionDelNotify*>(
               &_BattlePassMissionDelNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(BattlePassMissionDelNotify* other);
  friend void swap(BattlePassMissionDelNotify& a, BattlePassMissionDelNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BattlePassMissionDelNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  BattlePassMissionDelNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BattlePassMissionDelNotify& from);
  void MergeFrom(const BattlePassMissionDelNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BattlePassMissionDelNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BattlePassMissionDelNotify_CmdId CmdId;
  static const CmdId NONE =
    BattlePassMissionDelNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    BattlePassMissionDelNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    BattlePassMissionDelNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    BattlePassMissionDelNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return BattlePassMissionDelNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    BattlePassMissionDelNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    BattlePassMissionDelNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    BattlePassMissionDelNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return BattlePassMissionDelNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return BattlePassMissionDelNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return BattlePassMissionDelNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 del_mission_id_list = 1;
  int del_mission_id_list_size() const;
  void clear_del_mission_id_list();
  static const int kDelMissionIdListFieldNumber = 1;
  ::google::protobuf::uint32 del_mission_id_list(int index) const;
  void set_del_mission_id_list(int index, ::google::protobuf::uint32 value);
  void add_del_mission_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      del_mission_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_del_mission_id_list();

  // @@protoc_insertion_point(class_scope:proto.BattlePassMissionDelNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > del_mission_id_list_;
  mutable int _del_mission_id_list_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BattlePassCurScheduleUpdateNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BattlePassCurScheduleUpdateNotify) */ {
 public:
  BattlePassCurScheduleUpdateNotify();
  virtual ~BattlePassCurScheduleUpdateNotify();

  BattlePassCurScheduleUpdateNotify(const BattlePassCurScheduleUpdateNotify& from);

  inline BattlePassCurScheduleUpdateNotify& operator=(const BattlePassCurScheduleUpdateNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BattlePassCurScheduleUpdateNotify(BattlePassCurScheduleUpdateNotify&& from) noexcept
    : BattlePassCurScheduleUpdateNotify() {
    *this = ::std::move(from);
  }

  inline BattlePassCurScheduleUpdateNotify& operator=(BattlePassCurScheduleUpdateNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattlePassCurScheduleUpdateNotify& default_instance();

  static inline const BattlePassCurScheduleUpdateNotify* internal_default_instance() {
    return reinterpret_cast<const BattlePassCurScheduleUpdateNotify*>(
               &_BattlePassCurScheduleUpdateNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(BattlePassCurScheduleUpdateNotify* other);
  friend void swap(BattlePassCurScheduleUpdateNotify& a, BattlePassCurScheduleUpdateNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BattlePassCurScheduleUpdateNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  BattlePassCurScheduleUpdateNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BattlePassCurScheduleUpdateNotify& from);
  void MergeFrom(const BattlePassCurScheduleUpdateNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BattlePassCurScheduleUpdateNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BattlePassCurScheduleUpdateNotify_CmdId CmdId;
  static const CmdId NONE =
    BattlePassCurScheduleUpdateNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    BattlePassCurScheduleUpdateNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    BattlePassCurScheduleUpdateNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    BattlePassCurScheduleUpdateNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return BattlePassCurScheduleUpdateNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    BattlePassCurScheduleUpdateNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    BattlePassCurScheduleUpdateNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    BattlePassCurScheduleUpdateNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return BattlePassCurScheduleUpdateNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return BattlePassCurScheduleUpdateNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return BattlePassCurScheduleUpdateNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .proto.BattlePassSchedule cur_schedule = 2;
  bool has_cur_schedule() const;
  void clear_cur_schedule();
  static const int kCurScheduleFieldNumber = 2;
  const ::proto::BattlePassSchedule& cur_schedule() const;
  ::proto::BattlePassSchedule* mutable_cur_schedule();
  ::proto::BattlePassSchedule* release_cur_schedule();
  void set_allocated_cur_schedule(::proto::BattlePassSchedule* cur_schedule);

  // bool have_cur_schedule = 1;
  void clear_have_cur_schedule();
  static const int kHaveCurScheduleFieldNumber = 1;
  bool have_cur_schedule() const;
  void set_have_cur_schedule(bool value);

  // @@protoc_insertion_point(class_scope:proto.BattlePassCurScheduleUpdateNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::BattlePassSchedule* cur_schedule_;
  bool have_cur_schedule_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BattlePassRewardTakeOption : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BattlePassRewardTakeOption) */ {
 public:
  BattlePassRewardTakeOption();
  virtual ~BattlePassRewardTakeOption();

  BattlePassRewardTakeOption(const BattlePassRewardTakeOption& from);

  inline BattlePassRewardTakeOption& operator=(const BattlePassRewardTakeOption& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BattlePassRewardTakeOption(BattlePassRewardTakeOption&& from) noexcept
    : BattlePassRewardTakeOption() {
    *this = ::std::move(from);
  }

  inline BattlePassRewardTakeOption& operator=(BattlePassRewardTakeOption&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattlePassRewardTakeOption& default_instance();

  static inline const BattlePassRewardTakeOption* internal_default_instance() {
    return reinterpret_cast<const BattlePassRewardTakeOption*>(
               &_BattlePassRewardTakeOption_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(BattlePassRewardTakeOption* other);
  friend void swap(BattlePassRewardTakeOption& a, BattlePassRewardTakeOption& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BattlePassRewardTakeOption* New() const PROTOBUF_FINAL { return New(NULL); }

  BattlePassRewardTakeOption* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BattlePassRewardTakeOption& from);
  void MergeFrom(const BattlePassRewardTakeOption& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BattlePassRewardTakeOption* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.BattlePassRewardTag tag = 1;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 1;
  const ::proto::BattlePassRewardTag& tag() const;
  ::proto::BattlePassRewardTag* mutable_tag();
  ::proto::BattlePassRewardTag* release_tag();
  void set_allocated_tag(::proto::BattlePassRewardTag* tag);

  // bool has_option_idx = 2;
  void clear_has_option_idx();
  static const int kHasOptionIdxFieldNumber = 2;
  bool has_option_idx() const;
  void set_has_option_idx(bool value);

  // uint32 option_idx = 3;
  void clear_option_idx();
  static const int kOptionIdxFieldNumber = 3;
  ::google::protobuf::uint32 option_idx() const;
  void set_option_idx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.BattlePassRewardTakeOption)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::BattlePassRewardTag* tag_;
  bool has_option_idx_;
  ::google::protobuf::uint32 option_idx_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TakeBattlePassRewardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.TakeBattlePassRewardReq) */ {
 public:
  TakeBattlePassRewardReq();
  virtual ~TakeBattlePassRewardReq();

  TakeBattlePassRewardReq(const TakeBattlePassRewardReq& from);

  inline TakeBattlePassRewardReq& operator=(const TakeBattlePassRewardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TakeBattlePassRewardReq(TakeBattlePassRewardReq&& from) noexcept
    : TakeBattlePassRewardReq() {
    *this = ::std::move(from);
  }

  inline TakeBattlePassRewardReq& operator=(TakeBattlePassRewardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeBattlePassRewardReq& default_instance();

  static inline const TakeBattlePassRewardReq* internal_default_instance() {
    return reinterpret_cast<const TakeBattlePassRewardReq*>(
               &_TakeBattlePassRewardReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(TakeBattlePassRewardReq* other);
  friend void swap(TakeBattlePassRewardReq& a, TakeBattlePassRewardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TakeBattlePassRewardReq* New() const PROTOBUF_FINAL { return New(NULL); }

  TakeBattlePassRewardReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TakeBattlePassRewardReq& from);
  void MergeFrom(const TakeBattlePassRewardReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TakeBattlePassRewardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TakeBattlePassRewardReq_CmdId CmdId;
  static const CmdId NONE =
    TakeBattlePassRewardReq_CmdId_NONE;
  static const CmdId CMD_ID =
    TakeBattlePassRewardReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    TakeBattlePassRewardReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    TakeBattlePassRewardReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    TakeBattlePassRewardReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return TakeBattlePassRewardReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    TakeBattlePassRewardReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    TakeBattlePassRewardReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    TakeBattlePassRewardReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return TakeBattlePassRewardReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return TakeBattlePassRewardReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return TakeBattlePassRewardReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.BattlePassRewardTakeOption take_option_list = 1;
  int take_option_list_size() const;
  void clear_take_option_list();
  static const int kTakeOptionListFieldNumber = 1;
  const ::proto::BattlePassRewardTakeOption& take_option_list(int index) const;
  ::proto::BattlePassRewardTakeOption* mutable_take_option_list(int index);
  ::proto::BattlePassRewardTakeOption* add_take_option_list();
  ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption >*
      mutable_take_option_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption >&
      take_option_list() const;

  // @@protoc_insertion_point(class_scope:proto.TakeBattlePassRewardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption > take_option_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TakeBattlePassRewardRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.TakeBattlePassRewardRsp) */ {
 public:
  TakeBattlePassRewardRsp();
  virtual ~TakeBattlePassRewardRsp();

  TakeBattlePassRewardRsp(const TakeBattlePassRewardRsp& from);

  inline TakeBattlePassRewardRsp& operator=(const TakeBattlePassRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TakeBattlePassRewardRsp(TakeBattlePassRewardRsp&& from) noexcept
    : TakeBattlePassRewardRsp() {
    *this = ::std::move(from);
  }

  inline TakeBattlePassRewardRsp& operator=(TakeBattlePassRewardRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeBattlePassRewardRsp& default_instance();

  static inline const TakeBattlePassRewardRsp* internal_default_instance() {
    return reinterpret_cast<const TakeBattlePassRewardRsp*>(
               &_TakeBattlePassRewardRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(TakeBattlePassRewardRsp* other);
  friend void swap(TakeBattlePassRewardRsp& a, TakeBattlePassRewardRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TakeBattlePassRewardRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  TakeBattlePassRewardRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TakeBattlePassRewardRsp& from);
  void MergeFrom(const TakeBattlePassRewardRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TakeBattlePassRewardRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TakeBattlePassRewardRsp_CmdId CmdId;
  static const CmdId NONE =
    TakeBattlePassRewardRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    TakeBattlePassRewardRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    TakeBattlePassRewardRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    TakeBattlePassRewardRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return TakeBattlePassRewardRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    TakeBattlePassRewardRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    TakeBattlePassRewardRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    TakeBattlePassRewardRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return TakeBattlePassRewardRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return TakeBattlePassRewardRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return TakeBattlePassRewardRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.BattlePassRewardTakeOption take_option_list = 2;
  int take_option_list_size() const;
  void clear_take_option_list();
  static const int kTakeOptionListFieldNumber = 2;
  const ::proto::BattlePassRewardTakeOption& take_option_list(int index) const;
  ::proto::BattlePassRewardTakeOption* mutable_take_option_list(int index);
  ::proto::BattlePassRewardTakeOption* add_take_option_list();
  ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption >*
      mutable_take_option_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption >&
      take_option_list() const;

  // repeated .proto.ItemParam reward_item_list = 3;
  int reward_item_list_size() const;
  void clear_reward_item_list();
  static const int kRewardItemListFieldNumber = 3;
  const ::proto::ItemParam& reward_item_list(int index) const;
  ::proto::ItemParam* mutable_reward_item_list(int index);
  ::proto::ItemParam* add_reward_item_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
      mutable_reward_item_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
      reward_item_list() const;

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.TakeBattlePassRewardRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption > take_option_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam > reward_item_list_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TakeBattlePassMissionPointReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.TakeBattlePassMissionPointReq) */ {
 public:
  TakeBattlePassMissionPointReq();
  virtual ~TakeBattlePassMissionPointReq();

  TakeBattlePassMissionPointReq(const TakeBattlePassMissionPointReq& from);

  inline TakeBattlePassMissionPointReq& operator=(const TakeBattlePassMissionPointReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TakeBattlePassMissionPointReq(TakeBattlePassMissionPointReq&& from) noexcept
    : TakeBattlePassMissionPointReq() {
    *this = ::std::move(from);
  }

  inline TakeBattlePassMissionPointReq& operator=(TakeBattlePassMissionPointReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeBattlePassMissionPointReq& default_instance();

  static inline const TakeBattlePassMissionPointReq* internal_default_instance() {
    return reinterpret_cast<const TakeBattlePassMissionPointReq*>(
               &_TakeBattlePassMissionPointReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(TakeBattlePassMissionPointReq* other);
  friend void swap(TakeBattlePassMissionPointReq& a, TakeBattlePassMissionPointReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TakeBattlePassMissionPointReq* New() const PROTOBUF_FINAL { return New(NULL); }

  TakeBattlePassMissionPointReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TakeBattlePassMissionPointReq& from);
  void MergeFrom(const TakeBattlePassMissionPointReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TakeBattlePassMissionPointReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TakeBattlePassMissionPointReq_CmdId CmdId;
  static const CmdId NONE =
    TakeBattlePassMissionPointReq_CmdId_NONE;
  static const CmdId CMD_ID =
    TakeBattlePassMissionPointReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    TakeBattlePassMissionPointReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    TakeBattlePassMissionPointReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    TakeBattlePassMissionPointReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return TakeBattlePassMissionPointReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    TakeBattlePassMissionPointReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    TakeBattlePassMissionPointReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    TakeBattlePassMissionPointReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return TakeBattlePassMissionPointReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return TakeBattlePassMissionPointReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return TakeBattlePassMissionPointReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 mission_id = 1;
  void clear_mission_id();
  static const int kMissionIdFieldNumber = 1;
  ::google::protobuf::uint32 mission_id() const;
  void set_mission_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.TakeBattlePassMissionPointReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 mission_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TakeBattlePassMissionPointRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.TakeBattlePassMissionPointRsp) */ {
 public:
  TakeBattlePassMissionPointRsp();
  virtual ~TakeBattlePassMissionPointRsp();

  TakeBattlePassMissionPointRsp(const TakeBattlePassMissionPointRsp& from);

  inline TakeBattlePassMissionPointRsp& operator=(const TakeBattlePassMissionPointRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TakeBattlePassMissionPointRsp(TakeBattlePassMissionPointRsp&& from) noexcept
    : TakeBattlePassMissionPointRsp() {
    *this = ::std::move(from);
  }

  inline TakeBattlePassMissionPointRsp& operator=(TakeBattlePassMissionPointRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeBattlePassMissionPointRsp& default_instance();

  static inline const TakeBattlePassMissionPointRsp* internal_default_instance() {
    return reinterpret_cast<const TakeBattlePassMissionPointRsp*>(
               &_TakeBattlePassMissionPointRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(TakeBattlePassMissionPointRsp* other);
  friend void swap(TakeBattlePassMissionPointRsp& a, TakeBattlePassMissionPointRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TakeBattlePassMissionPointRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  TakeBattlePassMissionPointRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TakeBattlePassMissionPointRsp& from);
  void MergeFrom(const TakeBattlePassMissionPointRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TakeBattlePassMissionPointRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TakeBattlePassMissionPointRsp_CmdId CmdId;
  static const CmdId NONE =
    TakeBattlePassMissionPointRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    TakeBattlePassMissionPointRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    TakeBattlePassMissionPointRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    TakeBattlePassMissionPointRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return TakeBattlePassMissionPointRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    TakeBattlePassMissionPointRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    TakeBattlePassMissionPointRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    TakeBattlePassMissionPointRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return TakeBattlePassMissionPointRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return TakeBattlePassMissionPointRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return TakeBattlePassMissionPointRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 mission_id = 2;
  void clear_mission_id();
  static const int kMissionIdFieldNumber = 2;
  ::google::protobuf::uint32 mission_id() const;
  void set_mission_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.TakeBattlePassMissionPointRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 mission_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BattlePassCycle

// uint32 cycle_idx = 1;
inline void BattlePassCycle::clear_cycle_idx() {
  cycle_idx_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassCycle::cycle_idx() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassCycle.cycle_idx)
  return cycle_idx_;
}
inline void BattlePassCycle::set_cycle_idx(::google::protobuf::uint32 value) {
  
  cycle_idx_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassCycle.cycle_idx)
}

// uint32 begin_time = 2;
inline void BattlePassCycle::clear_begin_time() {
  begin_time_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassCycle::begin_time() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassCycle.begin_time)
  return begin_time_;
}
inline void BattlePassCycle::set_begin_time(::google::protobuf::uint32 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassCycle.begin_time)
}

// uint32 end_time = 3;
inline void BattlePassCycle::clear_end_time() {
  end_time_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassCycle::end_time() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassCycle.end_time)
  return end_time_;
}
inline void BattlePassCycle::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassCycle.end_time)
}

// -------------------------------------------------------------------

// BattlePassMission

// uint32 mission_id = 1;
inline void BattlePassMission::clear_mission_id() {
  mission_id_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassMission::mission_id() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMission.mission_id)
  return mission_id_;
}
inline void BattlePassMission::set_mission_id(::google::protobuf::uint32 value) {
  
  mission_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassMission.mission_id)
}

// uint32 cur_progress = 2;
inline void BattlePassMission::clear_cur_progress() {
  cur_progress_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassMission::cur_progress() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMission.cur_progress)
  return cur_progress_;
}
inline void BattlePassMission::set_cur_progress(::google::protobuf::uint32 value) {
  
  cur_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassMission.cur_progress)
}

// uint32 total_progress = 3;
inline void BattlePassMission::clear_total_progress() {
  total_progress_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassMission::total_progress() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMission.total_progress)
  return total_progress_;
}
inline void BattlePassMission::set_total_progress(::google::protobuf::uint32 value) {
  
  total_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassMission.total_progress)
}

// uint32 reward_battle_pass_point = 4;
inline void BattlePassMission::clear_reward_battle_pass_point() {
  reward_battle_pass_point_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassMission::reward_battle_pass_point() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMission.reward_battle_pass_point)
  return reward_battle_pass_point_;
}
inline void BattlePassMission::set_reward_battle_pass_point(::google::protobuf::uint32 value) {
  
  reward_battle_pass_point_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassMission.reward_battle_pass_point)
}

// uint32 mission_type = 5;
inline void BattlePassMission::clear_mission_type() {
  mission_type_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassMission::mission_type() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMission.mission_type)
  return mission_type_;
}
inline void BattlePassMission::set_mission_type(::google::protobuf::uint32 value) {
  
  mission_type_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassMission.mission_type)
}

// .proto.BattlePassMission.MissionStatus mission_status = 6;
inline void BattlePassMission::clear_mission_status() {
  mission_status_ = 0;
}
inline ::proto::BattlePassMission_MissionStatus BattlePassMission::mission_status() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMission.mission_status)
  return static_cast< ::proto::BattlePassMission_MissionStatus >(mission_status_);
}
inline void BattlePassMission::set_mission_status(::proto::BattlePassMission_MissionStatus value) {
  
  mission_status_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassMission.mission_status)
}

// -------------------------------------------------------------------

// BattlePassRewardTag

// .proto.BattlePassUnlockStatus unlock_status = 1;
inline void BattlePassRewardTag::clear_unlock_status() {
  unlock_status_ = 0;
}
inline ::proto::BattlePassUnlockStatus BattlePassRewardTag::unlock_status() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassRewardTag.unlock_status)
  return static_cast< ::proto::BattlePassUnlockStatus >(unlock_status_);
}
inline void BattlePassRewardTag::set_unlock_status(::proto::BattlePassUnlockStatus value) {
  
  unlock_status_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassRewardTag.unlock_status)
}

// uint32 level = 2;
inline void BattlePassRewardTag::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassRewardTag::level() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassRewardTag.level)
  return level_;
}
inline void BattlePassRewardTag::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassRewardTag.level)
}

// uint32 reward_id = 3;
inline void BattlePassRewardTag::clear_reward_id() {
  reward_id_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassRewardTag::reward_id() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassRewardTag.reward_id)
  return reward_id_;
}
inline void BattlePassRewardTag::set_reward_id(::google::protobuf::uint32 value) {
  
  reward_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassRewardTag.reward_id)
}

// -------------------------------------------------------------------

// BattlePassSchedule

// uint32 schedule_id = 1;
inline void BattlePassSchedule::clear_schedule_id() {
  schedule_id_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassSchedule::schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.schedule_id)
  return schedule_id_;
}
inline void BattlePassSchedule::set_schedule_id(::google::protobuf::uint32 value) {
  
  schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.schedule_id)
}

// uint32 level = 2;
inline void BattlePassSchedule::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassSchedule::level() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.level)
  return level_;
}
inline void BattlePassSchedule::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.level)
}

// uint32 point = 3;
inline void BattlePassSchedule::clear_point() {
  point_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassSchedule::point() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.point)
  return point_;
}
inline void BattlePassSchedule::set_point(::google::protobuf::uint32 value) {
  
  point_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.point)
}

// .proto.BattlePassUnlockStatus unlock_status = 4;
inline void BattlePassSchedule::clear_unlock_status() {
  unlock_status_ = 0;
}
inline ::proto::BattlePassUnlockStatus BattlePassSchedule::unlock_status() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.unlock_status)
  return static_cast< ::proto::BattlePassUnlockStatus >(unlock_status_);
}
inline void BattlePassSchedule::set_unlock_status(::proto::BattlePassUnlockStatus value) {
  
  unlock_status_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.unlock_status)
}

// repeated .proto.BattlePassRewardTag reward_taken_list = 5;
inline int BattlePassSchedule::reward_taken_list_size() const {
  return reward_taken_list_.size();
}
inline void BattlePassSchedule::clear_reward_taken_list() {
  reward_taken_list_.Clear();
}
inline const ::proto::BattlePassRewardTag& BattlePassSchedule::reward_taken_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.reward_taken_list)
  return reward_taken_list_.Get(index);
}
inline ::proto::BattlePassRewardTag* BattlePassSchedule::mutable_reward_taken_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BattlePassSchedule.reward_taken_list)
  return reward_taken_list_.Mutable(index);
}
inline ::proto::BattlePassRewardTag* BattlePassSchedule::add_reward_taken_list() {
  // @@protoc_insertion_point(field_add:proto.BattlePassSchedule.reward_taken_list)
  return reward_taken_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTag >*
BattlePassSchedule::mutable_reward_taken_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattlePassSchedule.reward_taken_list)
  return &reward_taken_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTag >&
BattlePassSchedule::reward_taken_list() const {
  // @@protoc_insertion_point(field_list:proto.BattlePassSchedule.reward_taken_list)
  return reward_taken_list_;
}

// uint32 begin_time = 6;
inline void BattlePassSchedule::clear_begin_time() {
  begin_time_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassSchedule::begin_time() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.begin_time)
  return begin_time_;
}
inline void BattlePassSchedule::set_begin_time(::google::protobuf::uint32 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.begin_time)
}

// uint32 end_time = 7;
inline void BattlePassSchedule::clear_end_time() {
  end_time_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassSchedule::end_time() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.end_time)
  return end_time_;
}
inline void BattlePassSchedule::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.end_time)
}

// .proto.BattlePassCycle cur_cycle = 8;
inline bool BattlePassSchedule::has_cur_cycle() const {
  return this != internal_default_instance() && cur_cycle_ != NULL;
}
inline void BattlePassSchedule::clear_cur_cycle() {
  if (GetArenaNoVirtual() == NULL && cur_cycle_ != NULL) delete cur_cycle_;
  cur_cycle_ = NULL;
}
inline const ::proto::BattlePassCycle& BattlePassSchedule::cur_cycle() const {
  const ::proto::BattlePassCycle* p = cur_cycle_;
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.cur_cycle)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BattlePassCycle*>(
      &::proto::_BattlePassCycle_default_instance_);
}
inline ::proto::BattlePassCycle* BattlePassSchedule::mutable_cur_cycle() {
  
  if (cur_cycle_ == NULL) {
    cur_cycle_ = new ::proto::BattlePassCycle;
  }
  // @@protoc_insertion_point(field_mutable:proto.BattlePassSchedule.cur_cycle)
  return cur_cycle_;
}
inline ::proto::BattlePassCycle* BattlePassSchedule::release_cur_cycle() {
  // @@protoc_insertion_point(field_release:proto.BattlePassSchedule.cur_cycle)
  
  ::proto::BattlePassCycle* temp = cur_cycle_;
  cur_cycle_ = NULL;
  return temp;
}
inline void BattlePassSchedule::set_allocated_cur_cycle(::proto::BattlePassCycle* cur_cycle) {
  delete cur_cycle_;
  cur_cycle_ = cur_cycle;
  if (cur_cycle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BattlePassSchedule.cur_cycle)
}

// -------------------------------------------------------------------

// BattlePassAllDataNotify

// bool have_cur_schedule = 1;
inline void BattlePassAllDataNotify::clear_have_cur_schedule() {
  have_cur_schedule_ = false;
}
inline bool BattlePassAllDataNotify::have_cur_schedule() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassAllDataNotify.have_cur_schedule)
  return have_cur_schedule_;
}
inline void BattlePassAllDataNotify::set_have_cur_schedule(bool value) {
  
  have_cur_schedule_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassAllDataNotify.have_cur_schedule)
}

// .proto.BattlePassSchedule cur_schedule = 2;
inline bool BattlePassAllDataNotify::has_cur_schedule() const {
  return this != internal_default_instance() && cur_schedule_ != NULL;
}
inline void BattlePassAllDataNotify::clear_cur_schedule() {
  if (GetArenaNoVirtual() == NULL && cur_schedule_ != NULL) delete cur_schedule_;
  cur_schedule_ = NULL;
}
inline const ::proto::BattlePassSchedule& BattlePassAllDataNotify::cur_schedule() const {
  const ::proto::BattlePassSchedule* p = cur_schedule_;
  // @@protoc_insertion_point(field_get:proto.BattlePassAllDataNotify.cur_schedule)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BattlePassSchedule*>(
      &::proto::_BattlePassSchedule_default_instance_);
}
inline ::proto::BattlePassSchedule* BattlePassAllDataNotify::mutable_cur_schedule() {
  
  if (cur_schedule_ == NULL) {
    cur_schedule_ = new ::proto::BattlePassSchedule;
  }
  // @@protoc_insertion_point(field_mutable:proto.BattlePassAllDataNotify.cur_schedule)
  return cur_schedule_;
}
inline ::proto::BattlePassSchedule* BattlePassAllDataNotify::release_cur_schedule() {
  // @@protoc_insertion_point(field_release:proto.BattlePassAllDataNotify.cur_schedule)
  
  ::proto::BattlePassSchedule* temp = cur_schedule_;
  cur_schedule_ = NULL;
  return temp;
}
inline void BattlePassAllDataNotify::set_allocated_cur_schedule(::proto::BattlePassSchedule* cur_schedule) {
  delete cur_schedule_;
  cur_schedule_ = cur_schedule;
  if (cur_schedule) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BattlePassAllDataNotify.cur_schedule)
}

// repeated .proto.BattlePassMission mission_list = 3;
inline int BattlePassAllDataNotify::mission_list_size() const {
  return mission_list_.size();
}
inline void BattlePassAllDataNotify::clear_mission_list() {
  mission_list_.Clear();
}
inline const ::proto::BattlePassMission& BattlePassAllDataNotify::mission_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattlePassAllDataNotify.mission_list)
  return mission_list_.Get(index);
}
inline ::proto::BattlePassMission* BattlePassAllDataNotify::mutable_mission_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BattlePassAllDataNotify.mission_list)
  return mission_list_.Mutable(index);
}
inline ::proto::BattlePassMission* BattlePassAllDataNotify::add_mission_list() {
  // @@protoc_insertion_point(field_add:proto.BattlePassAllDataNotify.mission_list)
  return mission_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission >*
BattlePassAllDataNotify::mutable_mission_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattlePassAllDataNotify.mission_list)
  return &mission_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission >&
BattlePassAllDataNotify::mission_list() const {
  // @@protoc_insertion_point(field_list:proto.BattlePassAllDataNotify.mission_list)
  return mission_list_;
}

// -------------------------------------------------------------------

// BattlePassMissionUpdateNotify

// repeated .proto.BattlePassMission mission_list = 1;
inline int BattlePassMissionUpdateNotify::mission_list_size() const {
  return mission_list_.size();
}
inline void BattlePassMissionUpdateNotify::clear_mission_list() {
  mission_list_.Clear();
}
inline const ::proto::BattlePassMission& BattlePassMissionUpdateNotify::mission_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMissionUpdateNotify.mission_list)
  return mission_list_.Get(index);
}
inline ::proto::BattlePassMission* BattlePassMissionUpdateNotify::mutable_mission_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BattlePassMissionUpdateNotify.mission_list)
  return mission_list_.Mutable(index);
}
inline ::proto::BattlePassMission* BattlePassMissionUpdateNotify::add_mission_list() {
  // @@protoc_insertion_point(field_add:proto.BattlePassMissionUpdateNotify.mission_list)
  return mission_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission >*
BattlePassMissionUpdateNotify::mutable_mission_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattlePassMissionUpdateNotify.mission_list)
  return &mission_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission >&
BattlePassMissionUpdateNotify::mission_list() const {
  // @@protoc_insertion_point(field_list:proto.BattlePassMissionUpdateNotify.mission_list)
  return mission_list_;
}

// -------------------------------------------------------------------

// BattlePassMissionDelNotify

// repeated uint32 del_mission_id_list = 1;
inline int BattlePassMissionDelNotify::del_mission_id_list_size() const {
  return del_mission_id_list_.size();
}
inline void BattlePassMissionDelNotify::clear_del_mission_id_list() {
  del_mission_id_list_.Clear();
}
inline ::google::protobuf::uint32 BattlePassMissionDelNotify::del_mission_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMissionDelNotify.del_mission_id_list)
  return del_mission_id_list_.Get(index);
}
inline void BattlePassMissionDelNotify::set_del_mission_id_list(int index, ::google::protobuf::uint32 value) {
  del_mission_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BattlePassMissionDelNotify.del_mission_id_list)
}
inline void BattlePassMissionDelNotify::add_del_mission_id_list(::google::protobuf::uint32 value) {
  del_mission_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BattlePassMissionDelNotify.del_mission_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BattlePassMissionDelNotify::del_mission_id_list() const {
  // @@protoc_insertion_point(field_list:proto.BattlePassMissionDelNotify.del_mission_id_list)
  return del_mission_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BattlePassMissionDelNotify::mutable_del_mission_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattlePassMissionDelNotify.del_mission_id_list)
  return &del_mission_id_list_;
}

// -------------------------------------------------------------------

// BattlePassCurScheduleUpdateNotify

// bool have_cur_schedule = 1;
inline void BattlePassCurScheduleUpdateNotify::clear_have_cur_schedule() {
  have_cur_schedule_ = false;
}
inline bool BattlePassCurScheduleUpdateNotify::have_cur_schedule() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassCurScheduleUpdateNotify.have_cur_schedule)
  return have_cur_schedule_;
}
inline void BattlePassCurScheduleUpdateNotify::set_have_cur_schedule(bool value) {
  
  have_cur_schedule_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassCurScheduleUpdateNotify.have_cur_schedule)
}

// .proto.BattlePassSchedule cur_schedule = 2;
inline bool BattlePassCurScheduleUpdateNotify::has_cur_schedule() const {
  return this != internal_default_instance() && cur_schedule_ != NULL;
}
inline void BattlePassCurScheduleUpdateNotify::clear_cur_schedule() {
  if (GetArenaNoVirtual() == NULL && cur_schedule_ != NULL) delete cur_schedule_;
  cur_schedule_ = NULL;
}
inline const ::proto::BattlePassSchedule& BattlePassCurScheduleUpdateNotify::cur_schedule() const {
  const ::proto::BattlePassSchedule* p = cur_schedule_;
  // @@protoc_insertion_point(field_get:proto.BattlePassCurScheduleUpdateNotify.cur_schedule)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BattlePassSchedule*>(
      &::proto::_BattlePassSchedule_default_instance_);
}
inline ::proto::BattlePassSchedule* BattlePassCurScheduleUpdateNotify::mutable_cur_schedule() {
  
  if (cur_schedule_ == NULL) {
    cur_schedule_ = new ::proto::BattlePassSchedule;
  }
  // @@protoc_insertion_point(field_mutable:proto.BattlePassCurScheduleUpdateNotify.cur_schedule)
  return cur_schedule_;
}
inline ::proto::BattlePassSchedule* BattlePassCurScheduleUpdateNotify::release_cur_schedule() {
  // @@protoc_insertion_point(field_release:proto.BattlePassCurScheduleUpdateNotify.cur_schedule)
  
  ::proto::BattlePassSchedule* temp = cur_schedule_;
  cur_schedule_ = NULL;
  return temp;
}
inline void BattlePassCurScheduleUpdateNotify::set_allocated_cur_schedule(::proto::BattlePassSchedule* cur_schedule) {
  delete cur_schedule_;
  cur_schedule_ = cur_schedule;
  if (cur_schedule) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BattlePassCurScheduleUpdateNotify.cur_schedule)
}

// -------------------------------------------------------------------

// BattlePassRewardTakeOption

// .proto.BattlePassRewardTag tag = 1;
inline bool BattlePassRewardTakeOption::has_tag() const {
  return this != internal_default_instance() && tag_ != NULL;
}
inline void BattlePassRewardTakeOption::clear_tag() {
  if (GetArenaNoVirtual() == NULL && tag_ != NULL) delete tag_;
  tag_ = NULL;
}
inline const ::proto::BattlePassRewardTag& BattlePassRewardTakeOption::tag() const {
  const ::proto::BattlePassRewardTag* p = tag_;
  // @@protoc_insertion_point(field_get:proto.BattlePassRewardTakeOption.tag)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BattlePassRewardTag*>(
      &::proto::_BattlePassRewardTag_default_instance_);
}
inline ::proto::BattlePassRewardTag* BattlePassRewardTakeOption::mutable_tag() {
  
  if (tag_ == NULL) {
    tag_ = new ::proto::BattlePassRewardTag;
  }
  // @@protoc_insertion_point(field_mutable:proto.BattlePassRewardTakeOption.tag)
  return tag_;
}
inline ::proto::BattlePassRewardTag* BattlePassRewardTakeOption::release_tag() {
  // @@protoc_insertion_point(field_release:proto.BattlePassRewardTakeOption.tag)
  
  ::proto::BattlePassRewardTag* temp = tag_;
  tag_ = NULL;
  return temp;
}
inline void BattlePassRewardTakeOption::set_allocated_tag(::proto::BattlePassRewardTag* tag) {
  delete tag_;
  tag_ = tag;
  if (tag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BattlePassRewardTakeOption.tag)
}

// bool has_option_idx = 2;
inline void BattlePassRewardTakeOption::clear_has_option_idx() {
  has_option_idx_ = false;
}
inline bool BattlePassRewardTakeOption::has_option_idx() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassRewardTakeOption.has_option_idx)
  return has_option_idx_;
}
inline void BattlePassRewardTakeOption::set_has_option_idx(bool value) {
  
  has_option_idx_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassRewardTakeOption.has_option_idx)
}

// uint32 option_idx = 3;
inline void BattlePassRewardTakeOption::clear_option_idx() {
  option_idx_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassRewardTakeOption::option_idx() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassRewardTakeOption.option_idx)
  return option_idx_;
}
inline void BattlePassRewardTakeOption::set_option_idx(::google::protobuf::uint32 value) {
  
  option_idx_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassRewardTakeOption.option_idx)
}

// -------------------------------------------------------------------

// TakeBattlePassRewardReq

// repeated .proto.BattlePassRewardTakeOption take_option_list = 1;
inline int TakeBattlePassRewardReq::take_option_list_size() const {
  return take_option_list_.size();
}
inline void TakeBattlePassRewardReq::clear_take_option_list() {
  take_option_list_.Clear();
}
inline const ::proto::BattlePassRewardTakeOption& TakeBattlePassRewardReq::take_option_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassRewardReq.take_option_list)
  return take_option_list_.Get(index);
}
inline ::proto::BattlePassRewardTakeOption* TakeBattlePassRewardReq::mutable_take_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TakeBattlePassRewardReq.take_option_list)
  return take_option_list_.Mutable(index);
}
inline ::proto::BattlePassRewardTakeOption* TakeBattlePassRewardReq::add_take_option_list() {
  // @@protoc_insertion_point(field_add:proto.TakeBattlePassRewardReq.take_option_list)
  return take_option_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption >*
TakeBattlePassRewardReq::mutable_take_option_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeBattlePassRewardReq.take_option_list)
  return &take_option_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption >&
TakeBattlePassRewardReq::take_option_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeBattlePassRewardReq.take_option_list)
  return take_option_list_;
}

// -------------------------------------------------------------------

// TakeBattlePassRewardRsp

// int32 retcode = 1;
inline void TakeBattlePassRewardRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 TakeBattlePassRewardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassRewardRsp.retcode)
  return retcode_;
}
inline void TakeBattlePassRewardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeBattlePassRewardRsp.retcode)
}

// repeated .proto.BattlePassRewardTakeOption take_option_list = 2;
inline int TakeBattlePassRewardRsp::take_option_list_size() const {
  return take_option_list_.size();
}
inline void TakeBattlePassRewardRsp::clear_take_option_list() {
  take_option_list_.Clear();
}
inline const ::proto::BattlePassRewardTakeOption& TakeBattlePassRewardRsp::take_option_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassRewardRsp.take_option_list)
  return take_option_list_.Get(index);
}
inline ::proto::BattlePassRewardTakeOption* TakeBattlePassRewardRsp::mutable_take_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TakeBattlePassRewardRsp.take_option_list)
  return take_option_list_.Mutable(index);
}
inline ::proto::BattlePassRewardTakeOption* TakeBattlePassRewardRsp::add_take_option_list() {
  // @@protoc_insertion_point(field_add:proto.TakeBattlePassRewardRsp.take_option_list)
  return take_option_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption >*
TakeBattlePassRewardRsp::mutable_take_option_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeBattlePassRewardRsp.take_option_list)
  return &take_option_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption >&
TakeBattlePassRewardRsp::take_option_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeBattlePassRewardRsp.take_option_list)
  return take_option_list_;
}

// repeated .proto.ItemParam reward_item_list = 3;
inline int TakeBattlePassRewardRsp::reward_item_list_size() const {
  return reward_item_list_.size();
}
inline void TakeBattlePassRewardRsp::clear_reward_item_list() {
  reward_item_list_.Clear();
}
inline const ::proto::ItemParam& TakeBattlePassRewardRsp::reward_item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassRewardRsp.reward_item_list)
  return reward_item_list_.Get(index);
}
inline ::proto::ItemParam* TakeBattlePassRewardRsp::mutable_reward_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TakeBattlePassRewardRsp.reward_item_list)
  return reward_item_list_.Mutable(index);
}
inline ::proto::ItemParam* TakeBattlePassRewardRsp::add_reward_item_list() {
  // @@protoc_insertion_point(field_add:proto.TakeBattlePassRewardRsp.reward_item_list)
  return reward_item_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
TakeBattlePassRewardRsp::mutable_reward_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeBattlePassRewardRsp.reward_item_list)
  return &reward_item_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
TakeBattlePassRewardRsp::reward_item_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeBattlePassRewardRsp.reward_item_list)
  return reward_item_list_;
}

// -------------------------------------------------------------------

// TakeBattlePassMissionPointReq

// uint32 mission_id = 1;
inline void TakeBattlePassMissionPointReq::clear_mission_id() {
  mission_id_ = 0u;
}
inline ::google::protobuf::uint32 TakeBattlePassMissionPointReq::mission_id() const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassMissionPointReq.mission_id)
  return mission_id_;
}
inline void TakeBattlePassMissionPointReq::set_mission_id(::google::protobuf::uint32 value) {
  
  mission_id_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeBattlePassMissionPointReq.mission_id)
}

// -------------------------------------------------------------------

// TakeBattlePassMissionPointRsp

// int32 retcode = 1;
inline void TakeBattlePassMissionPointRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 TakeBattlePassMissionPointRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassMissionPointRsp.retcode)
  return retcode_;
}
inline void TakeBattlePassMissionPointRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeBattlePassMissionPointRsp.retcode)
}

// uint32 mission_id = 2;
inline void TakeBattlePassMissionPointRsp::clear_mission_id() {
  mission_id_ = 0u;
}
inline ::google::protobuf::uint32 TakeBattlePassMissionPointRsp::mission_id() const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassMissionPointRsp.mission_id)
  return mission_id_;
}
inline void TakeBattlePassMissionPointRsp::set_mission_id(::google::protobuf::uint32 value) {
  
  mission_id_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeBattlePassMissionPointRsp.mission_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::BattlePassMission_MissionStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::BattlePassMission_MissionStatus>() {
  return ::proto::BattlePassMission_MissionStatus_descriptor();
}
template <> struct is_proto_enum< ::proto::BattlePassAllDataNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::BattlePassAllDataNotify_CmdId>() {
  return ::proto::BattlePassAllDataNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::BattlePassMissionUpdateNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::BattlePassMissionUpdateNotify_CmdId>() {
  return ::proto::BattlePassMissionUpdateNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::BattlePassMissionDelNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::BattlePassMissionDelNotify_CmdId>() {
  return ::proto::BattlePassMissionDelNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::BattlePassCurScheduleUpdateNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::BattlePassCurScheduleUpdateNotify_CmdId>() {
  return ::proto::BattlePassCurScheduleUpdateNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::TakeBattlePassRewardReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::TakeBattlePassRewardReq_CmdId>() {
  return ::proto::TakeBattlePassRewardReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::TakeBattlePassRewardRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::TakeBattlePassRewardRsp_CmdId>() {
  return ::proto::TakeBattlePassRewardRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::TakeBattlePassMissionPointReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::TakeBattlePassMissionPointReq_CmdId>() {
  return ::proto::TakeBattlePassMissionPointReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::TakeBattlePassMissionPointRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::TakeBattlePassMissionPointRsp_CmdId>() {
  return ::proto::TakeBattlePassMissionPointRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::BattlePassUnlockStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::BattlePassUnlockStatus>() {
  return ::proto::BattlePassUnlockStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cmd_2fcmd_5fbattle_5fpass_2eproto__INCLUDED
