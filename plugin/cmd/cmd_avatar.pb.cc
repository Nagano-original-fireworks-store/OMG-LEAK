// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_avatar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cmd/cmd_avatar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
class AvatarAddNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarAddNotify>
     _instance;
} _AvatarAddNotify_default_instance_;
class AvatarDelNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarDelNotify>
     _instance;
} _AvatarDelNotify_default_instance_;
class AvatarTeamDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarTeam>
     _instance;
} _AvatarTeam_default_instance_;
class SetUpAvatarTeamReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SetUpAvatarTeamReq>
     _instance;
} _SetUpAvatarTeamReq_default_instance_;
class SetUpAvatarTeamRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SetUpAvatarTeamRsp>
     _instance;
} _SetUpAvatarTeamRsp_default_instance_;
class ChooseCurAvatarTeamReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChooseCurAvatarTeamReq>
     _instance;
} _ChooseCurAvatarTeamReq_default_instance_;
class ChooseCurAvatarTeamRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChooseCurAvatarTeamRsp>
     _instance;
} _ChooseCurAvatarTeamRsp_default_instance_;
class ChangeAvatarReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChangeAvatarReq>
     _instance;
} _ChangeAvatarReq_default_instance_;
class ChangeAvatarRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChangeAvatarRsp>
     _instance;
} _ChangeAvatarRsp_default_instance_;
class AvatarPromoteReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarPromoteReq>
     _instance;
} _AvatarPromoteReq_default_instance_;
class AvatarPromoteRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarPromoteRsp>
     _instance;
} _AvatarPromoteRsp_default_instance_;
class SpringUseReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SpringUseReq>
     _instance;
} _SpringUseReq_default_instance_;
class SpringUseRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SpringUseRsp>
     _instance;
} _SpringUseRsp_default_instance_;
class RefreshBackgroundAvatarReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RefreshBackgroundAvatarReq>
     _instance;
} _RefreshBackgroundAvatarReq_default_instance_;
class RefreshBackgroundAvatarRsp_HpFullTimeMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RefreshBackgroundAvatarRsp::RefreshBackgroundAvatarRsp_HpFullTimeMapEntry>
     _instance;
} _RefreshBackgroundAvatarRsp_HpFullTimeMapEntry_default_instance_;
class RefreshBackgroundAvatarRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RefreshBackgroundAvatarRsp>
     _instance;
} _RefreshBackgroundAvatarRsp_default_instance_;
class AvatarTeamUpdateNotify_AvatarTeamMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarTeamUpdateNotify::AvatarTeamUpdateNotify_AvatarTeamMapEntry>
     _instance;
} _AvatarTeamUpdateNotify_AvatarTeamMapEntry_default_instance_;
class AvatarTeamUpdateNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarTeamUpdateNotify>
     _instance;
} _AvatarTeamUpdateNotify_default_instance_;
class AvatarDataNotify_AvatarTeamMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarDataNotify::AvatarDataNotify_AvatarTeamMapEntry>
     _instance;
} _AvatarDataNotify_AvatarTeamMapEntry_default_instance_;
class AvatarDataNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarDataNotify>
     _instance;
} _AvatarDataNotify_default_instance_;
class AvatarUpgradeReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarUpgradeReq>
     _instance;
} _AvatarUpgradeReq_default_instance_;
class AvatarUpgradeRsp_OldFightPropMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarUpgradeRsp::AvatarUpgradeRsp_OldFightPropMapEntry>
     _instance;
} _AvatarUpgradeRsp_OldFightPropMapEntry_default_instance_;
class AvatarUpgradeRsp_CurFightPropMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarUpgradeRsp::AvatarUpgradeRsp_CurFightPropMapEntry>
     _instance;
} _AvatarUpgradeRsp_CurFightPropMapEntry_default_instance_;
class AvatarUpgradeRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarUpgradeRsp>
     _instance;
} _AvatarUpgradeRsp_default_instance_;
class AvatarDieAnimationEndReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarDieAnimationEndReq>
     _instance;
} _AvatarDieAnimationEndReq_default_instance_;
class AvatarDieAnimationEndRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarDieAnimationEndRsp>
     _instance;
} _AvatarDieAnimationEndRsp_default_instance_;
class AvatarChangeElementTypeReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarChangeElementTypeReq>
     _instance;
} _AvatarChangeElementTypeReq_default_instance_;
class AvatarChangeElementTypeRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarChangeElementTypeRsp>
     _instance;
} _AvatarChangeElementTypeRsp_default_instance_;
class AvatarFetterDataNotify_FetterInfoMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarFetterDataNotify::AvatarFetterDataNotify_FetterInfoMapEntry>
     _instance;
} _AvatarFetterDataNotify_FetterInfoMapEntry_default_instance_;
class AvatarFetterDataNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarFetterDataNotify>
     _instance;
} _AvatarFetterDataNotify_default_instance_;
class AvatarExpeditionDataNotify_ExpeditionInfoMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarExpeditionDataNotify::AvatarExpeditionDataNotify_ExpeditionInfoMapEntry>
     _instance;
} _AvatarExpeditionDataNotify_ExpeditionInfoMapEntry_default_instance_;
class AvatarExpeditionDataNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarExpeditionDataNotify>
     _instance;
} _AvatarExpeditionDataNotify_default_instance_;
class AvatarExpeditionAllDataReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarExpeditionAllDataReq>
     _instance;
} _AvatarExpeditionAllDataReq_default_instance_;
class AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarExpeditionAllDataRsp::AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry>
     _instance;
} _AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry_default_instance_;
class AvatarExpeditionAllDataRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarExpeditionAllDataRsp>
     _instance;
} _AvatarExpeditionAllDataRsp_default_instance_;
class AvatarExpeditionStartReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarExpeditionStartReq>
     _instance;
} _AvatarExpeditionStartReq_default_instance_;
class AvatarExpeditionStartRsp_ExpeditionInfoMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarExpeditionStartRsp::AvatarExpeditionStartRsp_ExpeditionInfoMapEntry>
     _instance;
} _AvatarExpeditionStartRsp_ExpeditionInfoMapEntry_default_instance_;
class AvatarExpeditionStartRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarExpeditionStartRsp>
     _instance;
} _AvatarExpeditionStartRsp_default_instance_;
class AvatarExpeditionCallBackReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarExpeditionCallBackReq>
     _instance;
} _AvatarExpeditionCallBackReq_default_instance_;
class AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarExpeditionCallBackRsp::AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry>
     _instance;
} _AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry_default_instance_;
class AvatarExpeditionCallBackRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarExpeditionCallBackRsp>
     _instance;
} _AvatarExpeditionCallBackRsp_default_instance_;
class AvatarExpeditionGetRewardReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarExpeditionGetRewardReq>
     _instance;
} _AvatarExpeditionGetRewardReq_default_instance_;
class AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarExpeditionGetRewardRsp::AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry>
     _instance;
} _AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry_default_instance_;
class AvatarExpeditionGetRewardRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AvatarExpeditionGetRewardRsp>
     _instance;
} _AvatarExpeditionGetRewardRsp_default_instance_;
class ChangeMpTeamAvatarReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChangeMpTeamAvatarReq>
     _instance;
} _ChangeMpTeamAvatarReq_default_instance_;
class ChangeMpTeamAvatarRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChangeMpTeamAvatarRsp>
     _instance;
} _ChangeMpTeamAvatarRsp_default_instance_;
class ChangeTeamNameReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChangeTeamNameReq>
     _instance;
} _ChangeTeamNameReq_default_instance_;
class ChangeTeamNameRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChangeTeamNameRsp>
     _instance;
} _ChangeTeamNameRsp_default_instance_;
class SceneTeamAvatarDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneTeamAvatar>
     _instance;
} _SceneTeamAvatar_default_instance_;
class SceneTeamUpdateNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneTeamUpdateNotify>
     _instance;
} _SceneTeamUpdateNotify_default_instance_;
class MPDisplayCurAvatar_FightPropMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MPDisplayCurAvatar::MPDisplayCurAvatar_FightPropMapEntry>
     _instance;
} _MPDisplayCurAvatar_FightPropMapEntry_default_instance_;
class MPDisplayCurAvatarDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MPDisplayCurAvatar>
     _instance;
} _MPDisplayCurAvatar_default_instance_;
class SceneTeamMPDisplayCurAvatarNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneTeamMPDisplayCurAvatarNotify>
     _instance;
} _SceneTeamMPDisplayCurAvatarNotify_default_instance_;
class FocusAvatarReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FocusAvatarReq>
     _instance;
} _FocusAvatarReq_default_instance_;
class FocusAvatarRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FocusAvatarRsp>
     _instance;
} _FocusAvatarRsp_default_instance_;

namespace protobuf_cmd_2fcmd_5favatar_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[55];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[40];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarAddNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarAddNotify, avatar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarAddNotify, is_in_team_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarDelNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarDelNotify, avatar_guid_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarTeam, avatar_guid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarTeam, team_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUpAvatarTeamReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUpAvatarTeamReq, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUpAvatarTeamReq, avatar_team_guid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUpAvatarTeamReq, cur_avatar_guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUpAvatarTeamRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUpAvatarTeamRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUpAvatarTeamRsp, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUpAvatarTeamRsp, avatar_team_guid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUpAvatarTeamRsp, cur_avatar_guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChooseCurAvatarTeamReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChooseCurAvatarTeamReq, team_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChooseCurAvatarTeamRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChooseCurAvatarTeamRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChooseCurAvatarTeamRsp, cur_team_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeAvatarReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeAvatarReq, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeAvatarReq, skill_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeAvatarRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeAvatarRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeAvatarRsp, cur_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeAvatarRsp, skill_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarPromoteReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarPromoteReq, guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarPromoteRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarPromoteRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarPromoteRsp, guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpringUseReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpringUseReq, guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpringUseRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpringUseRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpringUseRsp, guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshBackgroundAvatarReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshBackgroundAvatarRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshBackgroundAvatarRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshBackgroundAvatarRsp, hp_full_time_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarTeamUpdateNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarTeamUpdateNotify, avatar_team_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarTeamUpdateNotify, temp_avatar_guid_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarDataNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarDataNotify, avatar_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarDataNotify, avatar_team_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarDataNotify, cur_avatar_team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarDataNotify, choose_avatar_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarDataNotify, temp_avatar_guid_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarUpgradeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarUpgradeReq, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarUpgradeReq, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarUpgradeReq, avatar_guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarUpgradeRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarUpgradeRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarUpgradeRsp, avatar_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarUpgradeRsp, old_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarUpgradeRsp, cur_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarUpgradeRsp, old_fight_prop_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarUpgradeRsp, cur_fight_prop_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarDieAnimationEndReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarDieAnimationEndReq, die_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarDieAnimationEndReq, skill_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarDieAnimationEndReq, reborn_pos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarDieAnimationEndRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarDieAnimationEndRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarDieAnimationEndRsp, die_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarDieAnimationEndRsp, skill_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarChangeElementTypeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarChangeElementTypeReq, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarChangeElementTypeReq, area_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarChangeElementTypeRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarChangeElementTypeRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarFetterDataNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarFetterDataNotify, fetter_info_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionDataNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionDataNotify, expedition_info_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionAllDataReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionAllDataRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionAllDataRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionAllDataRsp, expedition_info_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionAllDataRsp, open_expedition_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionAllDataRsp, expedition_count_limit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionStartReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionStartReq, avatar_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionStartReq, exp_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionStartReq, hour_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionStartRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionStartRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionStartRsp, expedition_info_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionCallBackReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionCallBackReq, avatar_guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionCallBackRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionCallBackRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionCallBackRsp, expedition_info_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionGetRewardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionGetRewardReq, avatar_guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionGetRewardRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionGetRewardRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarExpeditionGetRewardRsp, expedition_info_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMpTeamAvatarReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMpTeamAvatarReq, avatar_guid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMpTeamAvatarReq, cur_avatar_guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMpTeamAvatarRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMpTeamAvatarRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMpTeamAvatarRsp, avatar_guid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMpTeamAvatarRsp, cur_avatar_guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTeamNameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTeamNameReq, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTeamNameReq, team_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTeamNameRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTeamNameRsp, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTeamNameRsp, team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTeamNameRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTeamAvatar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTeamAvatar, player_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTeamAvatar, avatar_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTeamAvatar, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTeamAvatar, entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTeamAvatar, avatar_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTeamAvatar, scene_avatar_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTeamUpdateNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTeamUpdateNotify, scene_team_avatar_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTeamUpdateNotify, display_cur_avatar_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTeamUpdateNotify, is_in_mp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPDisplayCurAvatar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPDisplayCurAvatar, player_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPDisplayCurAvatar, avatar_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPDisplayCurAvatar, life_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPDisplayCurAvatar, fight_prop_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTeamMPDisplayCurAvatarNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTeamMPDisplayCurAvatarNotify, display_cur_avatar_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FocusAvatarReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FocusAvatarReq, avatar_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FocusAvatarReq, is_focus_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FocusAvatarRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FocusAvatarRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FocusAvatarRsp, is_focus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FocusAvatarRsp, avatar_guid_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(AvatarAddNotify)},
  { 7, -1, sizeof(AvatarDelNotify)},
  { 13, -1, sizeof(AvatarTeam)},
  { 20, -1, sizeof(SetUpAvatarTeamReq)},
  { 28, -1, sizeof(SetUpAvatarTeamRsp)},
  { 37, -1, sizeof(ChooseCurAvatarTeamReq)},
  { 43, -1, sizeof(ChooseCurAvatarTeamRsp)},
  { 50, -1, sizeof(ChangeAvatarReq)},
  { 57, -1, sizeof(ChangeAvatarRsp)},
  { 65, -1, sizeof(AvatarPromoteReq)},
  { 71, -1, sizeof(AvatarPromoteRsp)},
  { 78, -1, sizeof(SpringUseReq)},
  { 84, -1, sizeof(SpringUseRsp)},
  { 91, -1, sizeof(RefreshBackgroundAvatarReq)},
  { 96, -1, sizeof(RefreshBackgroundAvatarRsp)},
  { 103, -1, sizeof(AvatarTeamUpdateNotify)},
  { 110, -1, sizeof(AvatarDataNotify)},
  { 120, -1, sizeof(AvatarUpgradeReq)},
  { 128, -1, sizeof(AvatarUpgradeRsp)},
  { 139, -1, sizeof(AvatarDieAnimationEndReq)},
  { 147, -1, sizeof(AvatarDieAnimationEndRsp)},
  { 155, -1, sizeof(AvatarChangeElementTypeReq)},
  { 162, -1, sizeof(AvatarChangeElementTypeRsp)},
  { 168, -1, sizeof(AvatarFetterDataNotify)},
  { 174, -1, sizeof(AvatarExpeditionDataNotify)},
  { 180, -1, sizeof(AvatarExpeditionAllDataReq)},
  { 185, -1, sizeof(AvatarExpeditionAllDataRsp)},
  { 194, -1, sizeof(AvatarExpeditionStartReq)},
  { 202, -1, sizeof(AvatarExpeditionStartRsp)},
  { 209, -1, sizeof(AvatarExpeditionCallBackReq)},
  { 215, -1, sizeof(AvatarExpeditionCallBackRsp)},
  { 222, -1, sizeof(AvatarExpeditionGetRewardReq)},
  { 228, -1, sizeof(AvatarExpeditionGetRewardRsp)},
  { 235, -1, sizeof(ChangeMpTeamAvatarReq)},
  { 242, -1, sizeof(ChangeMpTeamAvatarRsp)},
  { 250, -1, sizeof(ChangeTeamNameReq)},
  { 257, -1, sizeof(ChangeTeamNameRsp)},
  { 265, -1, sizeof(SceneTeamAvatar)},
  { 276, -1, sizeof(SceneTeamUpdateNotify)},
  { 284, -1, sizeof(MPDisplayCurAvatar)},
  { 293, -1, sizeof(SceneTeamMPDisplayCurAvatarNotify)},
  { 299, -1, sizeof(FocusAvatarReq)},
  { 306, -1, sizeof(FocusAvatarRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarAddNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarDelNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetUpAvatarTeamReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetUpAvatarTeamRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChooseCurAvatarTeamReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChooseCurAvatarTeamRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChangeAvatarReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChangeAvatarRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarPromoteReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarPromoteRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpringUseReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpringUseRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RefreshBackgroundAvatarReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RefreshBackgroundAvatarRsp_HpFullTimeMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RefreshBackgroundAvatarRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarTeamUpdateNotify_AvatarTeamMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarTeamUpdateNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarDataNotify_AvatarTeamMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarDataNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarUpgradeReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarUpgradeRsp_OldFightPropMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarUpgradeRsp_CurFightPropMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarUpgradeRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarDieAnimationEndReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarDieAnimationEndRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarChangeElementTypeReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarChangeElementTypeRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarFetterDataNotify_FetterInfoMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarFetterDataNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarExpeditionDataNotify_ExpeditionInfoMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarExpeditionDataNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarExpeditionAllDataReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarExpeditionAllDataRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarExpeditionStartReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarExpeditionStartRsp_ExpeditionInfoMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarExpeditionStartRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarExpeditionCallBackReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarExpeditionCallBackRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarExpeditionGetRewardReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AvatarExpeditionGetRewardRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChangeMpTeamAvatarReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChangeMpTeamAvatarRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChangeTeamNameReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChangeTeamNameRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneTeamAvatar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneTeamUpdateNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MPDisplayCurAvatar_FightPropMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MPDisplayCurAvatar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneTeamMPDisplayCurAvatarNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FocusAvatarReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FocusAvatarRsp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cmd/cmd_avatar.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[14].reflection = RefreshBackgroundAvatarRsp::RefreshBackgroundAvatarRsp_HpFullTimeMapEntry::CreateReflection(file_level_metadata[14].descriptor, _RefreshBackgroundAvatarRsp_HpFullTimeMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[16].reflection = AvatarTeamUpdateNotify::AvatarTeamUpdateNotify_AvatarTeamMapEntry::CreateReflection(file_level_metadata[16].descriptor, _AvatarTeamUpdateNotify_AvatarTeamMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[18].reflection = AvatarDataNotify::AvatarDataNotify_AvatarTeamMapEntry::CreateReflection(file_level_metadata[18].descriptor, _AvatarDataNotify_AvatarTeamMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[21].reflection = AvatarUpgradeRsp::AvatarUpgradeRsp_OldFightPropMapEntry::CreateReflection(file_level_metadata[21].descriptor, _AvatarUpgradeRsp_OldFightPropMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[22].reflection = AvatarUpgradeRsp::AvatarUpgradeRsp_CurFightPropMapEntry::CreateReflection(file_level_metadata[22].descriptor, _AvatarUpgradeRsp_CurFightPropMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[28].reflection = AvatarFetterDataNotify::AvatarFetterDataNotify_FetterInfoMapEntry::CreateReflection(file_level_metadata[28].descriptor, _AvatarFetterDataNotify_FetterInfoMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[30].reflection = AvatarExpeditionDataNotify::AvatarExpeditionDataNotify_ExpeditionInfoMapEntry::CreateReflection(file_level_metadata[30].descriptor, _AvatarExpeditionDataNotify_ExpeditionInfoMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[33].reflection = AvatarExpeditionAllDataRsp::AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry::CreateReflection(file_level_metadata[33].descriptor, _AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[36].reflection = AvatarExpeditionStartRsp::AvatarExpeditionStartRsp_ExpeditionInfoMapEntry::CreateReflection(file_level_metadata[36].descriptor, _AvatarExpeditionStartRsp_ExpeditionInfoMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[39].reflection = AvatarExpeditionCallBackRsp::AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry::CreateReflection(file_level_metadata[39].descriptor, _AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[42].reflection = AvatarExpeditionGetRewardRsp::AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry::CreateReflection(file_level_metadata[42].descriptor, _AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[50].reflection = MPDisplayCurAvatar::MPDisplayCurAvatar_FightPropMapEntry::CreateReflection(file_level_metadata[50].descriptor, _MPDisplayCurAvatar_FightPropMapEntry_default_instance_._instance.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 55);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::protobuf_define_2eproto::InitDefaults();
  _AvatarAddNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarAddNotify_default_instance_);_AvatarDelNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarDelNotify_default_instance_);_AvatarTeam_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarTeam_default_instance_);_SetUpAvatarTeamReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SetUpAvatarTeamReq_default_instance_);_SetUpAvatarTeamRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SetUpAvatarTeamRsp_default_instance_);_ChooseCurAvatarTeamReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChooseCurAvatarTeamReq_default_instance_);_ChooseCurAvatarTeamRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChooseCurAvatarTeamRsp_default_instance_);_ChangeAvatarReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChangeAvatarReq_default_instance_);_ChangeAvatarRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChangeAvatarRsp_default_instance_);_AvatarPromoteReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarPromoteReq_default_instance_);_AvatarPromoteRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarPromoteRsp_default_instance_);_SpringUseReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SpringUseReq_default_instance_);_SpringUseRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SpringUseRsp_default_instance_);_RefreshBackgroundAvatarReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RefreshBackgroundAvatarReq_default_instance_);_RefreshBackgroundAvatarRsp_HpFullTimeMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RefreshBackgroundAvatarRsp_HpFullTimeMapEntry_default_instance_);_RefreshBackgroundAvatarRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RefreshBackgroundAvatarRsp_default_instance_);_AvatarTeamUpdateNotify_AvatarTeamMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarTeamUpdateNotify_AvatarTeamMapEntry_default_instance_);_AvatarTeamUpdateNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarTeamUpdateNotify_default_instance_);_AvatarDataNotify_AvatarTeamMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarDataNotify_AvatarTeamMapEntry_default_instance_);_AvatarDataNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarDataNotify_default_instance_);_AvatarUpgradeReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarUpgradeReq_default_instance_);_AvatarUpgradeRsp_OldFightPropMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarUpgradeRsp_OldFightPropMapEntry_default_instance_);_AvatarUpgradeRsp_CurFightPropMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarUpgradeRsp_CurFightPropMapEntry_default_instance_);_AvatarUpgradeRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarUpgradeRsp_default_instance_);_AvatarDieAnimationEndReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarDieAnimationEndReq_default_instance_);_AvatarDieAnimationEndRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarDieAnimationEndRsp_default_instance_);_AvatarChangeElementTypeReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarChangeElementTypeReq_default_instance_);_AvatarChangeElementTypeRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarChangeElementTypeRsp_default_instance_);_AvatarFetterDataNotify_FetterInfoMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarFetterDataNotify_FetterInfoMapEntry_default_instance_);_AvatarFetterDataNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarFetterDataNotify_default_instance_);_AvatarExpeditionDataNotify_ExpeditionInfoMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarExpeditionDataNotify_ExpeditionInfoMapEntry_default_instance_);_AvatarExpeditionDataNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarExpeditionDataNotify_default_instance_);_AvatarExpeditionAllDataReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarExpeditionAllDataReq_default_instance_);_AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry_default_instance_);_AvatarExpeditionAllDataRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarExpeditionAllDataRsp_default_instance_);_AvatarExpeditionStartReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarExpeditionStartReq_default_instance_);_AvatarExpeditionStartRsp_ExpeditionInfoMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarExpeditionStartRsp_ExpeditionInfoMapEntry_default_instance_);_AvatarExpeditionStartRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarExpeditionStartRsp_default_instance_);_AvatarExpeditionCallBackReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarExpeditionCallBackReq_default_instance_);_AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry_default_instance_);_AvatarExpeditionCallBackRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarExpeditionCallBackRsp_default_instance_);_AvatarExpeditionGetRewardReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarExpeditionGetRewardReq_default_instance_);_AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry_default_instance_);_AvatarExpeditionGetRewardRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AvatarExpeditionGetRewardRsp_default_instance_);_ChangeMpTeamAvatarReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChangeMpTeamAvatarReq_default_instance_);_ChangeMpTeamAvatarRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChangeMpTeamAvatarRsp_default_instance_);_ChangeTeamNameReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChangeTeamNameReq_default_instance_);_ChangeTeamNameRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChangeTeamNameRsp_default_instance_);_SceneTeamAvatar_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneTeamAvatar_default_instance_);_SceneTeamUpdateNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneTeamUpdateNotify_default_instance_);_MPDisplayCurAvatar_FightPropMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MPDisplayCurAvatar_FightPropMapEntry_default_instance_);_MPDisplayCurAvatar_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MPDisplayCurAvatar_default_instance_);_SceneTeamMPDisplayCurAvatarNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneTeamMPDisplayCurAvatarNotify_default_instance_);_FocusAvatarReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FocusAvatarReq_default_instance_);_FocusAvatarRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FocusAvatarRsp_default_instance_);_AvatarAddNotify_default_instance_._instance.get_mutable()->avatar_ = const_cast< ::proto::AvatarInfo*>(
      ::proto::AvatarInfo::internal_default_instance());
  _RefreshBackgroundAvatarRsp_HpFullTimeMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_RefreshBackgroundAvatarRsp_HpFullTimeMapEntry_default_instance_._instance.get_mutable());
  _RefreshBackgroundAvatarRsp_HpFullTimeMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _AvatarTeamUpdateNotify_AvatarTeamMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_AvatarTeamUpdateNotify_AvatarTeamMapEntry_default_instance_._instance.get_mutable());
  _AvatarTeamUpdateNotify_AvatarTeamMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _AvatarDataNotify_AvatarTeamMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_AvatarDataNotify_AvatarTeamMapEntry_default_instance_._instance.get_mutable());
  _AvatarDataNotify_AvatarTeamMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _AvatarUpgradeRsp_OldFightPropMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_AvatarUpgradeRsp_OldFightPropMapEntry_default_instance_._instance.get_mutable());
  _AvatarUpgradeRsp_OldFightPropMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _AvatarUpgradeRsp_CurFightPropMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_AvatarUpgradeRsp_CurFightPropMapEntry_default_instance_._instance.get_mutable());
  _AvatarUpgradeRsp_CurFightPropMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _AvatarDieAnimationEndReq_default_instance_._instance.get_mutable()->reborn_pos_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _AvatarFetterDataNotify_FetterInfoMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_AvatarFetterDataNotify_FetterInfoMapEntry_default_instance_._instance.get_mutable());
  _AvatarFetterDataNotify_FetterInfoMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _AvatarExpeditionDataNotify_ExpeditionInfoMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_AvatarExpeditionDataNotify_ExpeditionInfoMapEntry_default_instance_._instance.get_mutable());
  _AvatarExpeditionDataNotify_ExpeditionInfoMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry_default_instance_._instance.get_mutable());
  _AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _AvatarExpeditionStartRsp_ExpeditionInfoMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_AvatarExpeditionStartRsp_ExpeditionInfoMapEntry_default_instance_._instance.get_mutable());
  _AvatarExpeditionStartRsp_ExpeditionInfoMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry_default_instance_._instance.get_mutable());
  _AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry_default_instance_._instance.get_mutable());
  _AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _SceneTeamAvatar_default_instance_._instance.get_mutable()->avatar_info_ = const_cast< ::proto::AvatarInfo*>(
      ::proto::AvatarInfo::internal_default_instance());
  _SceneTeamAvatar_default_instance_._instance.get_mutable()->scene_avatar_info_ = const_cast< ::proto::SceneAvatarInfo*>(
      ::proto::SceneAvatarInfo::internal_default_instance());
  _MPDisplayCurAvatar_FightPropMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_MPDisplayCurAvatar_FightPropMapEntry_default_instance_._instance.get_mutable());
  _MPDisplayCurAvatar_FightPropMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _SceneTeamMPDisplayCurAvatarNotify_default_instance_._instance.get_mutable()->display_cur_avatar_ = const_cast< ::proto::MPDisplayCurAvatar*>(
      ::proto::MPDisplayCurAvatar::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024cmd/cmd_avatar.proto\022\005proto\032\014define.pr"
      "oto\"\227\001\n\017AvatarAddNotify\022!\n\006avatar\030\001 \001(\0132"
      "\021.proto.AvatarInfo\022\022\n\nis_in_team\030\002 \001(\010\"M"
      "\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\245\r\022\023\n\017ENET_C"
      "HANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"z\n"
      "\017AvatarDelNotify\022\030\n\020avatar_guid_list\030\001 \003"
      "(\004\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\246\r\022\023\n\017EN"
      "ET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020"
      "\001\"9\n\nAvatarTeam\022\030\n\020avatar_guid_list\030\001 \003("
      "\004\022\021\n\tteam_name\030\002 \001(\t\"\301\001\n\022SetUpAvatarTeam"
      "Req\022\017\n\007team_id\030\001 \001(\r\022\035\n\025avatar_team_guid"
      "_list\030\002 \003(\004\022\027\n\017cur_avatar_guid\030\003 \001(\004\"b\n\005"
      "CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\247\r\022\023\n\017ENET_CHA"
      "NNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\022\023\n\017IS_AL"
      "LOW_CLIENT\020\001\032\002\020\001\"\275\001\n\022SetUpAvatarTeamRsp\022"
      "\017\n\007retcode\030\001 \001(\005\022\017\n\007team_id\030\002 \001(\r\022\035\n\025ava"
      "tar_team_guid_list\030\003 \003(\004\022\027\n\017cur_avatar_g"
      "uid\030\004 \001(\004\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\250"
      "\r\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIAB"
      "LE\020\001\032\002\020\001\"\215\001\n\026ChooseCurAvatarTeamReq\022\017\n\007t"
      "eam_id\030\001 \001(\r\"b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_I"
      "D\020\251\r\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_REL"
      "IABLE\020\001\022\023\n\017IS_ALLOW_CLIENT\020\001\032\002\020\001\"\215\001\n\026Cho"
      "oseCurAvatarTeamRsp\022\017\n\007retcode\030\001 \001(\005\022\023\n\013"
      "cur_team_id\030\002 \001(\r\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006"
      "CMD_ID\020\252\r\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_I"
      "S_RELIABLE\020\001\032\002\020\001\"\225\001\n\017ChangeAvatarReq\022\014\n\004"
      "guid\030\001 \001(\004\022\020\n\010skill_id\030\002 \001(\r\"b\n\005CmdId\022\010\n"
      "\004NONE\020\000\022\013\n\006CMD_ID\020\253\r\022\023\n\017ENET_CHANNEL_ID\020"
      "\000\022\024\n\020ENET_IS_RELIABLE\020\001\022\023\n\017IS_ALLOW_CLIE"
      "NT\020\001\032\002\020\001\"\225\001\n\017ChangeAvatarRsp\022\017\n\007retcode\030"
      "\001 \001(\005\022\020\n\010cur_guid\030\002 \001(\004\022\020\n\010skill_id\030\003 \001("
      "\r\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\254\r\022\023\n\017ENE"
      "T_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001"
      "\"\204\001\n\020AvatarPromoteReq\022\014\n\004guid\030\001 \001(\004\"b\n\005C"
      "mdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\255\r\022\023\n\017ENET_CHAN"
      "NEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\022\023\n\017IS_ALL"
      "OW_CLIENT\020\001\032\002\020\001\"\200\001\n\020AvatarPromoteRsp\022\017\n\007"
      "retcode\030\001 \001(\005\022\014\n\004guid\030\002 \001(\004\"M\n\005CmdId\022\010\n\004"
      "NONE\020\000\022\013\n\006CMD_ID\020\256\r\022\023\n\017ENET_CHANNEL_ID\020\000"
      "\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"\200\001\n\014SpringUse"
      "Req\022\014\n\004guid\030\001 \001(\004\"b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006"
      "CMD_ID\020\257\r\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_I"
      "S_RELIABLE\020\001\022\023\n\017IS_ALLOW_CLIENT\020\001\032\002\020\001\"|\n"
      "\014SpringUseRsp\022\017\n\007retcode\030\001 \001(\005\022\014\n\004guid\030\002"
      " \001(\004\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\260\r\022\023\n\017"
      "ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032"
      "\002\020\001\"\200\001\n\032RefreshBackgroundAvatarReq\"b\n\005Cm"
      "dId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\261\r\022\023\n\017ENET_CHANN"
      "EL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\022\023\n\017IS_ALLO"
      "W_CLIENT\020\001\032\002\020\001\"\202\002\n\032RefreshBackgroundAvat"
      "arRsp\022\017\n\007retcode\030\001 \001(\005\022N\n\020hp_full_time_m"
      "ap\030\002 \003(\01324.proto.RefreshBackgroundAvatar"
      "Rsp.HpFullTimeMapEntry\0324\n\022HpFullTimeMapE"
      "ntry\022\013\n\003key\030\001 \001(\004\022\r\n\005value\030\002 \001(\r:\0028\001\"M\n\005"
      "CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\262\r\022\023\n\017ENET_CHA"
      "NNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"\232\002\n\026"
      "AvatarTeamUpdateNotify\022I\n\017avatar_team_ma"
      "p\030\001 \003(\01320.proto.AvatarTeamUpdateNotify.A"
      "vatarTeamMapEntry\022\035\n\025temp_avatar_guid_li"
      "st\030\002 \003(\004\032G\n\022AvatarTeamMapEntry\022\013\n\003key\030\001 "
      "\001(\r\022 \n\005value\030\002 \001(\0132\021.proto.AvatarTeam:\0028"
      "\001\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\263\r\022\023\n\017ENE"
      "T_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001"
      "\"\356\002\n\020AvatarDataNotify\022&\n\013avatar_list\030\001 \003"
      "(\0132\021.proto.AvatarInfo\022C\n\017avatar_team_map"
      "\030\002 \003(\0132*.proto.AvatarDataNotify.AvatarTe"
      "amMapEntry\022\032\n\022cur_avatar_team_id\030\003 \001(\r\022\032"
      "\n\022choose_avatar_guid\030\004 \001(\004\022\035\n\025temp_avata"
      "r_guid_list\030\005 \003(\004\032G\n\022AvatarTeamMapEntry\022"
      "\013\n\003key\030\001 \001(\r\022 \n\005value\030\002 \001(\0132\021.proto.Avat"
      "arTeam:\0028\001\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020"
      "\264\r\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIA"
      "BLE\020\001\032\002\020\001\"\253\001\n\020AvatarUpgradeReq\022\017\n\007item_i"
      "d\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\022\023\n\013avatar_guid\030\003 "
      "\001(\004\"b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\265\r\022\023\n\017E"
      "NET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\022\023"
      "\n\017IS_ALLOW_CLIENT\020\001\032\002\020\001\"\261\003\n\020AvatarUpgrad"
      "eRsp\022\017\n\007retcode\030\001 \001(\005\022\023\n\013avatar_guid\030\002 \001"
      "(\004\022\021\n\told_level\030\003 \001(\r\022\021\n\tcur_level\030\004 \001(\r"
      "\022H\n\022old_fight_prop_map\030\005 \003(\0132,.proto.Ava"
      "tarUpgradeRsp.OldFightPropMapEntry\022H\n\022cu"
      "r_fight_prop_map\030\006 \003(\0132,.proto.AvatarUpg"
      "radeRsp.CurFightPropMapEntry\0326\n\024OldFight"
      "PropMapEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\002"
      ":\0028\001\0326\n\024CurFightPropMapEntry\022\013\n\003key\030\001 \001("
      "\r\022\r\n\005value\030\002 \001(\002:\0028\001\"M\n\005CmdId\022\010\n\004NONE\020\000\022"
      "\013\n\006CMD_ID\020\266\r\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENE"
      "T_IS_RELIABLE\020\001\032\002\020\001\"\305\001\n\030AvatarDieAnimati"
      "onEndReq\022\020\n\010die_guid\030\001 \001(\004\022\020\n\010skill_id\030\002"
      " \001(\r\022!\n\nreborn_pos\030\003 \001(\0132\r.proto.Vector\""
      "b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\267\r\022\023\n\017ENET_"
      "CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\022\023\n\017IS"
      "_ALLOW_CLIENT\020\001\032\002\020\001\"\236\001\n\030AvatarDieAnimati"
      "onEndRsp\022\017\n\007retcode\030\001 \001(\005\022\020\n\010die_guid\030\002 "
      "\001(\004\022\020\n\010skill_id\030\003 \001(\r\"M\n\005CmdId\022\010\n\004NONE\020\000"
      "\022\013\n\006CMD_ID\020\270\r\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020EN"
      "ET_IS_RELIABLE\020\001\032\002\020\001\"\243\001\n\032AvatarChangeEle"
      "mentTypeReq\022\020\n\010scene_id\030\001 \001(\r\022\017\n\007area_id"
      "\030\002 \001(\r\"b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\271\r\022\023"
      "\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020"
      "\001\022\023\n\017IS_ALLOW_CLIENT\020\001\032\002\020\001\"|\n\032AvatarChan"
      "geElementTypeRsp\022\017\n\007retcode\030\001 \001(\005\"M\n\005Cmd"
      "Id\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\272\r\022\023\n\017ENET_CHANNE"
      "L_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"\201\002\n\026Ava"
      "tarFetterDataNotify\022I\n\017fetter_info_map\030\001"
      " \003(\01320.proto.AvatarFetterDataNotify.Fett"
      "erInfoMapEntry\032M\n\022FetterInfoMapEntry\022\013\n\003"
      "key\030\001 \001(\004\022&\n\005value\030\002 \001(\0132\027.proto.AvatarF"
      "etterInfo:\0028\001\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_"
      "ID\020\273\r\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RE"
      "LIABLE\020\001\032\002\020\001\"\231\002\n\032AvatarExpeditionDataNot"
      "ify\022U\n\023expedition_info_map\030\001 \003(\01328.proto"
      ".AvatarExpeditionDataNotify.ExpeditionIn"
      "foMapEntry\032U\n\026ExpeditionInfoMapEntry\022\013\n\003"
      "key\030\001 \001(\004\022*\n\005value\030\002 \001(\0132\033.proto.AvatarE"
      "xpeditionInfo:\0028\001\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006"
      "CMD_ID\020\274\r\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_I"
      "S_RELIABLE\020\001\032\002\020\001\"\200\001\n\032AvatarExpeditionAll"
      "DataReq\"b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\275\r\022"
      "\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE"
      "\020\001\022\023\n\017IS_ALLOW_CLIENT\020\001\032\002\020\001\"\350\002\n\032AvatarEx"
      "peditionAllDataRsp\022\017\n\007retcode\030\001 \001(\005\022U\n\023e"
      "xpedition_info_map\030\002 \003(\01328.proto.AvatarE"
      "xpeditionAllDataRsp.ExpeditionInfoMapEnt"
      "ry\022\034\n\024open_expedition_list\030\003 \003(\r\022\036\n\026expe"
      "dition_count_limit\030\004 \001(\r\032U\n\026ExpeditionIn"
      "foMapEntry\022\013\n\003key\030\001 \001(\004\022*\n\005value\030\002 \001(\0132\033"
      ".proto.AvatarExpeditionInfo:\0028\001\"M\n\005CmdId"
      "\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\276\r\022\023\n\017ENET_CHANNEL_"
      "ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"\266\001\n\030Avata"
      "rExpeditionStartReq\022\023\n\013avatar_guid\030\001 \001(\004"
      "\022\016\n\006exp_id\030\002 \001(\r\022\021\n\thour_time\030\003 \001(\r\"b\n\005C"
      "mdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\277\r\022\023\n\017ENET_CHAN"
      "NEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\022\023\n\017IS_ALL"
      "OW_CLIENT\020\001\032\002\020\001\"\246\002\n\030AvatarExpeditionStar"
      "tRsp\022\017\n\007retcode\030\001 \001(\005\022S\n\023expedition_info"
      "_map\030\002 \003(\01326.proto.AvatarExpeditionStart"
      "Rsp.ExpeditionInfoMapEntry\032U\n\026Expedition"
      "InfoMapEntry\022\013\n\003key\030\001 \001(\004\022*\n\005value\030\002 \001(\013"
      "2\033.proto.AvatarExpeditionInfo:\0028\001\"M\n\005Cmd"
      "Id\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\300\r\022\023\n\017ENET_CHANNE"
      "L_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"\226\001\n\033Ava"
      "tarExpeditionCallBackReq\022\023\n\013avatar_guid\030"
      "\001 \003(\004\"b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\301\r\022\023\n"
      "\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001"
      "\022\023\n\017IS_ALLOW_CLIENT\020\001\032\002\020\001\"\254\002\n\033AvatarExpe"
      "ditionCallBackRsp\022\017\n\007retcode\030\001 \001(\005\022V\n\023ex"
      "pedition_info_map\030\002 \003(\01329.proto.AvatarEx"
      "peditionCallBackRsp.ExpeditionInfoMapEnt"
      "ry\032U\n\026ExpeditionInfoMapEntry\022\013\n\003key\030\001 \001("
      "\004\022*\n\005value\030\002 \001(\0132\033.proto.AvatarExpeditio"
      "nInfo:\0028\001\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\302"
      "\r\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIAB"
      "LE\020\001\032\002\020\001\"\227\001\n\034AvatarExpeditionGetRewardRe"
      "q\022\023\n\013avatar_guid\030\001 \001(\004\"b\n\005CmdId\022\010\n\004NONE\020"
      "\000\022\013\n\006CMD_ID\020\303\r\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020E"
      "NET_IS_RELIABLE\020\001\022\023\n\017IS_ALLOW_CLIENT\020\001\032\002"
      "\020\001\"\256\002\n\034AvatarExpeditionGetRewardRsp\022\017\n\007r"
      "etcode\030\001 \001(\005\022W\n\023expedition_info_map\030\002 \003("
      "\0132:.proto.AvatarExpeditionGetRewardRsp.E"
      "xpeditionInfoMapEntry\032U\n\026ExpeditionInfoM"
      "apEntry\022\013\n\003key\030\001 \001(\004\022*\n\005value\030\002 \001(\0132\033.pr"
      "oto.AvatarExpeditionInfo:\0028\001\"M\n\005CmdId\022\010\n"
      "\004NONE\020\000\022\013\n\006CMD_ID\020\304\r\022\023\n\017ENET_CHANNEL_ID\020"
      "\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"\256\001\n\025ChangeMp"
      "TeamAvatarReq\022\030\n\020avatar_guid_list\030\001 \003(\004\022"
      "\027\n\017cur_avatar_guid\030\002 \001(\004\"b\n\005CmdId\022\010\n\004NON"
      "E\020\000\022\013\n\006CMD_ID\020\306\r\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n"
      "\020ENET_IS_RELIABLE\020\001\022\023\n\017IS_ALLOW_CLIENT\020\001"
      "\032\002\020\001\"\252\001\n\025ChangeMpTeamAvatarRsp\022\017\n\007retcod"
      "e\030\001 \001(\005\022\030\n\020avatar_guid_list\030\002 \003(\004\022\027\n\017cur"
      "_avatar_guid\030\003 \001(\004\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n"
      "\006CMD_ID\020\307\r\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_"
      "IS_RELIABLE\020\001\032\002\020\001\"\233\001\n\021ChangeTeamNameReq\022"
      "\017\n\007team_id\030\001 \001(\005\022\021\n\tteam_name\030\002 \001(\t\"b\n\005C"
      "mdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\310\r\022\023\n\017ENET_CHAN"
      "NEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\022\023\n\017IS_ALL"
      "OW_CLIENT\020\001\032\002\020\001\"\227\001\n\021ChangeTeamNameRsp\022\017\n"
      "\007team_id\030\001 \001(\005\022\021\n\tteam_name\030\002 \001(\t\022\017\n\007ret"
      "code\030\003 \001(\005\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020"
      "\311\r\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIA"
      "BLE\020\001\032\002\020\001\"\272\001\n\017SceneTeamAvatar\022\022\n\nplayer_"
      "uid\030\001 \001(\r\022\023\n\013avatar_guid\030\002 \001(\004\022\020\n\010scene_"
      "id\030\003 \001(\r\022\021\n\tentity_id\030\004 \001(\r\022&\n\013avatar_in"
      "fo\030\005 \001(\0132\021.proto.AvatarInfo\0221\n\021scene_ava"
      "tar_info\030\006 \001(\0132\026.proto.SceneAvatarInfo\"\354"
      "\001\n\025SceneTeamUpdateNotify\0226\n\026scene_team_a"
      "vatar_list\030\001 \003(\0132\026.proto.SceneTeamAvatar"
      "\022:\n\027display_cur_avatar_list\030\002 \003(\0132\031.prot"
      "o.MPDisplayCurAvatar\022\020\n\010is_in_mp\030\003 \001(\010\"M"
      "\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\312\r\022\023\n\017ENET_C"
      "HANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"\313\001"
      "\n\022MPDisplayCurAvatar\022\022\n\nplayer_uid\030\001 \001(\r"
      "\022\023\n\013avatar_guid\030\002 \001(\004\022\022\n\nlife_state\030\003 \001("
      "\r\022C\n\016fight_prop_map\030\004 \003(\0132+.proto.MPDisp"
      "layCurAvatar.FightPropMapEntry\0323\n\021FightP"
      "ropMapEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\002:"
      "\0028\001\"\251\001\n!SceneTeamMPDisplayCurAvatarNotif"
      "y\0225\n\022display_cur_avatar\030\001 \001(\0132\031.proto.MP"
      "DisplayCurAvatar\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006C"
      "MD_ID\020\313\r\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS"
      "_RELIABLE\020\001\032\002\020\001\"\233\001\n\016FocusAvatarReq\022\023\n\013av"
      "atar_guid\030\001 \001(\004\022\020\n\010is_focus\030\002 \001(\010\"b\n\005Cmd"
      "Id\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\314\r\022\023\n\017ENET_CHANNE"
      "L_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\022\023\n\017IS_ALLOW"
      "_CLIENT\020\001\032\002\020\001\"\227\001\n\016FocusAvatarRsp\022\017\n\007retc"
      "ode\030\001 \001(\005\022\020\n\010is_focus\030\002 \001(\010\022\023\n\013avatar_gu"
      "id\030\003 \001(\004\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\315\r"
      "\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABL"
      "E\020\001\032\002\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 8415);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cmd/cmd_avatar.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_define_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cmd_2fcmd_5favatar_2eproto

const ::google::protobuf::EnumDescriptor* AvatarAddNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[0];
}
bool AvatarAddNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1701:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AvatarAddNotify_CmdId AvatarAddNotify::NONE;
const AvatarAddNotify_CmdId AvatarAddNotify::CMD_ID;
const AvatarAddNotify_CmdId AvatarAddNotify::ENET_CHANNEL_ID;
const AvatarAddNotify_CmdId AvatarAddNotify::ENET_IS_RELIABLE;
const AvatarAddNotify_CmdId AvatarAddNotify::CmdId_MIN;
const AvatarAddNotify_CmdId AvatarAddNotify::CmdId_MAX;
const int AvatarAddNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AvatarDelNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[1];
}
bool AvatarDelNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1702:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AvatarDelNotify_CmdId AvatarDelNotify::NONE;
const AvatarDelNotify_CmdId AvatarDelNotify::CMD_ID;
const AvatarDelNotify_CmdId AvatarDelNotify::ENET_CHANNEL_ID;
const AvatarDelNotify_CmdId AvatarDelNotify::ENET_IS_RELIABLE;
const AvatarDelNotify_CmdId AvatarDelNotify::CmdId_MIN;
const AvatarDelNotify_CmdId AvatarDelNotify::CmdId_MAX;
const int AvatarDelNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SetUpAvatarTeamReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[2];
}
bool SetUpAvatarTeamReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1703:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SetUpAvatarTeamReq_CmdId SetUpAvatarTeamReq::NONE;
const SetUpAvatarTeamReq_CmdId SetUpAvatarTeamReq::CMD_ID;
const SetUpAvatarTeamReq_CmdId SetUpAvatarTeamReq::ENET_CHANNEL_ID;
const SetUpAvatarTeamReq_CmdId SetUpAvatarTeamReq::ENET_IS_RELIABLE;
const SetUpAvatarTeamReq_CmdId SetUpAvatarTeamReq::IS_ALLOW_CLIENT;
const SetUpAvatarTeamReq_CmdId SetUpAvatarTeamReq::CmdId_MIN;
const SetUpAvatarTeamReq_CmdId SetUpAvatarTeamReq::CmdId_MAX;
const int SetUpAvatarTeamReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SetUpAvatarTeamRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[3];
}
bool SetUpAvatarTeamRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1704:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SetUpAvatarTeamRsp_CmdId SetUpAvatarTeamRsp::NONE;
const SetUpAvatarTeamRsp_CmdId SetUpAvatarTeamRsp::CMD_ID;
const SetUpAvatarTeamRsp_CmdId SetUpAvatarTeamRsp::ENET_CHANNEL_ID;
const SetUpAvatarTeamRsp_CmdId SetUpAvatarTeamRsp::ENET_IS_RELIABLE;
const SetUpAvatarTeamRsp_CmdId SetUpAvatarTeamRsp::CmdId_MIN;
const SetUpAvatarTeamRsp_CmdId SetUpAvatarTeamRsp::CmdId_MAX;
const int SetUpAvatarTeamRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChooseCurAvatarTeamReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[4];
}
bool ChooseCurAvatarTeamReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1705:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChooseCurAvatarTeamReq_CmdId ChooseCurAvatarTeamReq::NONE;
const ChooseCurAvatarTeamReq_CmdId ChooseCurAvatarTeamReq::CMD_ID;
const ChooseCurAvatarTeamReq_CmdId ChooseCurAvatarTeamReq::ENET_CHANNEL_ID;
const ChooseCurAvatarTeamReq_CmdId ChooseCurAvatarTeamReq::ENET_IS_RELIABLE;
const ChooseCurAvatarTeamReq_CmdId ChooseCurAvatarTeamReq::IS_ALLOW_CLIENT;
const ChooseCurAvatarTeamReq_CmdId ChooseCurAvatarTeamReq::CmdId_MIN;
const ChooseCurAvatarTeamReq_CmdId ChooseCurAvatarTeamReq::CmdId_MAX;
const int ChooseCurAvatarTeamReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChooseCurAvatarTeamRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[5];
}
bool ChooseCurAvatarTeamRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1706:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChooseCurAvatarTeamRsp_CmdId ChooseCurAvatarTeamRsp::NONE;
const ChooseCurAvatarTeamRsp_CmdId ChooseCurAvatarTeamRsp::CMD_ID;
const ChooseCurAvatarTeamRsp_CmdId ChooseCurAvatarTeamRsp::ENET_CHANNEL_ID;
const ChooseCurAvatarTeamRsp_CmdId ChooseCurAvatarTeamRsp::ENET_IS_RELIABLE;
const ChooseCurAvatarTeamRsp_CmdId ChooseCurAvatarTeamRsp::CmdId_MIN;
const ChooseCurAvatarTeamRsp_CmdId ChooseCurAvatarTeamRsp::CmdId_MAX;
const int ChooseCurAvatarTeamRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChangeAvatarReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[6];
}
bool ChangeAvatarReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1707:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChangeAvatarReq_CmdId ChangeAvatarReq::NONE;
const ChangeAvatarReq_CmdId ChangeAvatarReq::CMD_ID;
const ChangeAvatarReq_CmdId ChangeAvatarReq::ENET_CHANNEL_ID;
const ChangeAvatarReq_CmdId ChangeAvatarReq::ENET_IS_RELIABLE;
const ChangeAvatarReq_CmdId ChangeAvatarReq::IS_ALLOW_CLIENT;
const ChangeAvatarReq_CmdId ChangeAvatarReq::CmdId_MIN;
const ChangeAvatarReq_CmdId ChangeAvatarReq::CmdId_MAX;
const int ChangeAvatarReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChangeAvatarRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[7];
}
bool ChangeAvatarRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1708:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChangeAvatarRsp_CmdId ChangeAvatarRsp::NONE;
const ChangeAvatarRsp_CmdId ChangeAvatarRsp::CMD_ID;
const ChangeAvatarRsp_CmdId ChangeAvatarRsp::ENET_CHANNEL_ID;
const ChangeAvatarRsp_CmdId ChangeAvatarRsp::ENET_IS_RELIABLE;
const ChangeAvatarRsp_CmdId ChangeAvatarRsp::CmdId_MIN;
const ChangeAvatarRsp_CmdId ChangeAvatarRsp::CmdId_MAX;
const int ChangeAvatarRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AvatarPromoteReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[8];
}
bool AvatarPromoteReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1709:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AvatarPromoteReq_CmdId AvatarPromoteReq::NONE;
const AvatarPromoteReq_CmdId AvatarPromoteReq::CMD_ID;
const AvatarPromoteReq_CmdId AvatarPromoteReq::ENET_CHANNEL_ID;
const AvatarPromoteReq_CmdId AvatarPromoteReq::ENET_IS_RELIABLE;
const AvatarPromoteReq_CmdId AvatarPromoteReq::IS_ALLOW_CLIENT;
const AvatarPromoteReq_CmdId AvatarPromoteReq::CmdId_MIN;
const AvatarPromoteReq_CmdId AvatarPromoteReq::CmdId_MAX;
const int AvatarPromoteReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AvatarPromoteRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[9];
}
bool AvatarPromoteRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1710:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AvatarPromoteRsp_CmdId AvatarPromoteRsp::NONE;
const AvatarPromoteRsp_CmdId AvatarPromoteRsp::CMD_ID;
const AvatarPromoteRsp_CmdId AvatarPromoteRsp::ENET_CHANNEL_ID;
const AvatarPromoteRsp_CmdId AvatarPromoteRsp::ENET_IS_RELIABLE;
const AvatarPromoteRsp_CmdId AvatarPromoteRsp::CmdId_MIN;
const AvatarPromoteRsp_CmdId AvatarPromoteRsp::CmdId_MAX;
const int AvatarPromoteRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SpringUseReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[10];
}
bool SpringUseReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1711:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SpringUseReq_CmdId SpringUseReq::NONE;
const SpringUseReq_CmdId SpringUseReq::CMD_ID;
const SpringUseReq_CmdId SpringUseReq::ENET_CHANNEL_ID;
const SpringUseReq_CmdId SpringUseReq::ENET_IS_RELIABLE;
const SpringUseReq_CmdId SpringUseReq::IS_ALLOW_CLIENT;
const SpringUseReq_CmdId SpringUseReq::CmdId_MIN;
const SpringUseReq_CmdId SpringUseReq::CmdId_MAX;
const int SpringUseReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SpringUseRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[11];
}
bool SpringUseRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1712:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SpringUseRsp_CmdId SpringUseRsp::NONE;
const SpringUseRsp_CmdId SpringUseRsp::CMD_ID;
const SpringUseRsp_CmdId SpringUseRsp::ENET_CHANNEL_ID;
const SpringUseRsp_CmdId SpringUseRsp::ENET_IS_RELIABLE;
const SpringUseRsp_CmdId SpringUseRsp::CmdId_MIN;
const SpringUseRsp_CmdId SpringUseRsp::CmdId_MAX;
const int SpringUseRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RefreshBackgroundAvatarReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[12];
}
bool RefreshBackgroundAvatarReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1713:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RefreshBackgroundAvatarReq_CmdId RefreshBackgroundAvatarReq::NONE;
const RefreshBackgroundAvatarReq_CmdId RefreshBackgroundAvatarReq::CMD_ID;
const RefreshBackgroundAvatarReq_CmdId RefreshBackgroundAvatarReq::ENET_CHANNEL_ID;
const RefreshBackgroundAvatarReq_CmdId RefreshBackgroundAvatarReq::ENET_IS_RELIABLE;
const RefreshBackgroundAvatarReq_CmdId RefreshBackgroundAvatarReq::IS_ALLOW_CLIENT;
const RefreshBackgroundAvatarReq_CmdId RefreshBackgroundAvatarReq::CmdId_MIN;
const RefreshBackgroundAvatarReq_CmdId RefreshBackgroundAvatarReq::CmdId_MAX;
const int RefreshBackgroundAvatarReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RefreshBackgroundAvatarRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[13];
}
bool RefreshBackgroundAvatarRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1714:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RefreshBackgroundAvatarRsp_CmdId RefreshBackgroundAvatarRsp::NONE;
const RefreshBackgroundAvatarRsp_CmdId RefreshBackgroundAvatarRsp::CMD_ID;
const RefreshBackgroundAvatarRsp_CmdId RefreshBackgroundAvatarRsp::ENET_CHANNEL_ID;
const RefreshBackgroundAvatarRsp_CmdId RefreshBackgroundAvatarRsp::ENET_IS_RELIABLE;
const RefreshBackgroundAvatarRsp_CmdId RefreshBackgroundAvatarRsp::CmdId_MIN;
const RefreshBackgroundAvatarRsp_CmdId RefreshBackgroundAvatarRsp::CmdId_MAX;
const int RefreshBackgroundAvatarRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AvatarTeamUpdateNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[14];
}
bool AvatarTeamUpdateNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1715:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AvatarTeamUpdateNotify_CmdId AvatarTeamUpdateNotify::NONE;
const AvatarTeamUpdateNotify_CmdId AvatarTeamUpdateNotify::CMD_ID;
const AvatarTeamUpdateNotify_CmdId AvatarTeamUpdateNotify::ENET_CHANNEL_ID;
const AvatarTeamUpdateNotify_CmdId AvatarTeamUpdateNotify::ENET_IS_RELIABLE;
const AvatarTeamUpdateNotify_CmdId AvatarTeamUpdateNotify::CmdId_MIN;
const AvatarTeamUpdateNotify_CmdId AvatarTeamUpdateNotify::CmdId_MAX;
const int AvatarTeamUpdateNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AvatarDataNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[15];
}
bool AvatarDataNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1716:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AvatarDataNotify_CmdId AvatarDataNotify::NONE;
const AvatarDataNotify_CmdId AvatarDataNotify::CMD_ID;
const AvatarDataNotify_CmdId AvatarDataNotify::ENET_CHANNEL_ID;
const AvatarDataNotify_CmdId AvatarDataNotify::ENET_IS_RELIABLE;
const AvatarDataNotify_CmdId AvatarDataNotify::CmdId_MIN;
const AvatarDataNotify_CmdId AvatarDataNotify::CmdId_MAX;
const int AvatarDataNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AvatarUpgradeReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[16];
}
bool AvatarUpgradeReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1717:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AvatarUpgradeReq_CmdId AvatarUpgradeReq::NONE;
const AvatarUpgradeReq_CmdId AvatarUpgradeReq::CMD_ID;
const AvatarUpgradeReq_CmdId AvatarUpgradeReq::ENET_CHANNEL_ID;
const AvatarUpgradeReq_CmdId AvatarUpgradeReq::ENET_IS_RELIABLE;
const AvatarUpgradeReq_CmdId AvatarUpgradeReq::IS_ALLOW_CLIENT;
const AvatarUpgradeReq_CmdId AvatarUpgradeReq::CmdId_MIN;
const AvatarUpgradeReq_CmdId AvatarUpgradeReq::CmdId_MAX;
const int AvatarUpgradeReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AvatarUpgradeRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[17];
}
bool AvatarUpgradeRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1718:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AvatarUpgradeRsp_CmdId AvatarUpgradeRsp::NONE;
const AvatarUpgradeRsp_CmdId AvatarUpgradeRsp::CMD_ID;
const AvatarUpgradeRsp_CmdId AvatarUpgradeRsp::ENET_CHANNEL_ID;
const AvatarUpgradeRsp_CmdId AvatarUpgradeRsp::ENET_IS_RELIABLE;
const AvatarUpgradeRsp_CmdId AvatarUpgradeRsp::CmdId_MIN;
const AvatarUpgradeRsp_CmdId AvatarUpgradeRsp::CmdId_MAX;
const int AvatarUpgradeRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AvatarDieAnimationEndReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[18];
}
bool AvatarDieAnimationEndReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1719:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AvatarDieAnimationEndReq_CmdId AvatarDieAnimationEndReq::NONE;
const AvatarDieAnimationEndReq_CmdId AvatarDieAnimationEndReq::CMD_ID;
const AvatarDieAnimationEndReq_CmdId AvatarDieAnimationEndReq::ENET_CHANNEL_ID;
const AvatarDieAnimationEndReq_CmdId AvatarDieAnimationEndReq::ENET_IS_RELIABLE;
const AvatarDieAnimationEndReq_CmdId AvatarDieAnimationEndReq::IS_ALLOW_CLIENT;
const AvatarDieAnimationEndReq_CmdId AvatarDieAnimationEndReq::CmdId_MIN;
const AvatarDieAnimationEndReq_CmdId AvatarDieAnimationEndReq::CmdId_MAX;
const int AvatarDieAnimationEndReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AvatarDieAnimationEndRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[19];
}
bool AvatarDieAnimationEndRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1720:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AvatarDieAnimationEndRsp_CmdId AvatarDieAnimationEndRsp::NONE;
const AvatarDieAnimationEndRsp_CmdId AvatarDieAnimationEndRsp::CMD_ID;
const AvatarDieAnimationEndRsp_CmdId AvatarDieAnimationEndRsp::ENET_CHANNEL_ID;
const AvatarDieAnimationEndRsp_CmdId AvatarDieAnimationEndRsp::ENET_IS_RELIABLE;
const AvatarDieAnimationEndRsp_CmdId AvatarDieAnimationEndRsp::CmdId_MIN;
const AvatarDieAnimationEndRsp_CmdId AvatarDieAnimationEndRsp::CmdId_MAX;
const int AvatarDieAnimationEndRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AvatarChangeElementTypeReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[20];
}
bool AvatarChangeElementTypeReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1721:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AvatarChangeElementTypeReq_CmdId AvatarChangeElementTypeReq::NONE;
const AvatarChangeElementTypeReq_CmdId AvatarChangeElementTypeReq::CMD_ID;
const AvatarChangeElementTypeReq_CmdId AvatarChangeElementTypeReq::ENET_CHANNEL_ID;
const AvatarChangeElementTypeReq_CmdId AvatarChangeElementTypeReq::ENET_IS_RELIABLE;
const AvatarChangeElementTypeReq_CmdId AvatarChangeElementTypeReq::IS_ALLOW_CLIENT;
const AvatarChangeElementTypeReq_CmdId AvatarChangeElementTypeReq::CmdId_MIN;
const AvatarChangeElementTypeReq_CmdId AvatarChangeElementTypeReq::CmdId_MAX;
const int AvatarChangeElementTypeReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AvatarChangeElementTypeRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[21];
}
bool AvatarChangeElementTypeRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1722:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AvatarChangeElementTypeRsp_CmdId AvatarChangeElementTypeRsp::NONE;
const AvatarChangeElementTypeRsp_CmdId AvatarChangeElementTypeRsp::CMD_ID;
const AvatarChangeElementTypeRsp_CmdId AvatarChangeElementTypeRsp::ENET_CHANNEL_ID;
const AvatarChangeElementTypeRsp_CmdId AvatarChangeElementTypeRsp::ENET_IS_RELIABLE;
const AvatarChangeElementTypeRsp_CmdId AvatarChangeElementTypeRsp::CmdId_MIN;
const AvatarChangeElementTypeRsp_CmdId AvatarChangeElementTypeRsp::CmdId_MAX;
const int AvatarChangeElementTypeRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AvatarFetterDataNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[22];
}
bool AvatarFetterDataNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1723:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AvatarFetterDataNotify_CmdId AvatarFetterDataNotify::NONE;
const AvatarFetterDataNotify_CmdId AvatarFetterDataNotify::CMD_ID;
const AvatarFetterDataNotify_CmdId AvatarFetterDataNotify::ENET_CHANNEL_ID;
const AvatarFetterDataNotify_CmdId AvatarFetterDataNotify::ENET_IS_RELIABLE;
const AvatarFetterDataNotify_CmdId AvatarFetterDataNotify::CmdId_MIN;
const AvatarFetterDataNotify_CmdId AvatarFetterDataNotify::CmdId_MAX;
const int AvatarFetterDataNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AvatarExpeditionDataNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[23];
}
bool AvatarExpeditionDataNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1724:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AvatarExpeditionDataNotify_CmdId AvatarExpeditionDataNotify::NONE;
const AvatarExpeditionDataNotify_CmdId AvatarExpeditionDataNotify::CMD_ID;
const AvatarExpeditionDataNotify_CmdId AvatarExpeditionDataNotify::ENET_CHANNEL_ID;
const AvatarExpeditionDataNotify_CmdId AvatarExpeditionDataNotify::ENET_IS_RELIABLE;
const AvatarExpeditionDataNotify_CmdId AvatarExpeditionDataNotify::CmdId_MIN;
const AvatarExpeditionDataNotify_CmdId AvatarExpeditionDataNotify::CmdId_MAX;
const int AvatarExpeditionDataNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AvatarExpeditionAllDataReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[24];
}
bool AvatarExpeditionAllDataReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1725:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AvatarExpeditionAllDataReq_CmdId AvatarExpeditionAllDataReq::NONE;
const AvatarExpeditionAllDataReq_CmdId AvatarExpeditionAllDataReq::CMD_ID;
const AvatarExpeditionAllDataReq_CmdId AvatarExpeditionAllDataReq::ENET_CHANNEL_ID;
const AvatarExpeditionAllDataReq_CmdId AvatarExpeditionAllDataReq::ENET_IS_RELIABLE;
const AvatarExpeditionAllDataReq_CmdId AvatarExpeditionAllDataReq::IS_ALLOW_CLIENT;
const AvatarExpeditionAllDataReq_CmdId AvatarExpeditionAllDataReq::CmdId_MIN;
const AvatarExpeditionAllDataReq_CmdId AvatarExpeditionAllDataReq::CmdId_MAX;
const int AvatarExpeditionAllDataReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AvatarExpeditionAllDataRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[25];
}
bool AvatarExpeditionAllDataRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1726:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AvatarExpeditionAllDataRsp_CmdId AvatarExpeditionAllDataRsp::NONE;
const AvatarExpeditionAllDataRsp_CmdId AvatarExpeditionAllDataRsp::CMD_ID;
const AvatarExpeditionAllDataRsp_CmdId AvatarExpeditionAllDataRsp::ENET_CHANNEL_ID;
const AvatarExpeditionAllDataRsp_CmdId AvatarExpeditionAllDataRsp::ENET_IS_RELIABLE;
const AvatarExpeditionAllDataRsp_CmdId AvatarExpeditionAllDataRsp::CmdId_MIN;
const AvatarExpeditionAllDataRsp_CmdId AvatarExpeditionAllDataRsp::CmdId_MAX;
const int AvatarExpeditionAllDataRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AvatarExpeditionStartReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[26];
}
bool AvatarExpeditionStartReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1727:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AvatarExpeditionStartReq_CmdId AvatarExpeditionStartReq::NONE;
const AvatarExpeditionStartReq_CmdId AvatarExpeditionStartReq::CMD_ID;
const AvatarExpeditionStartReq_CmdId AvatarExpeditionStartReq::ENET_CHANNEL_ID;
const AvatarExpeditionStartReq_CmdId AvatarExpeditionStartReq::ENET_IS_RELIABLE;
const AvatarExpeditionStartReq_CmdId AvatarExpeditionStartReq::IS_ALLOW_CLIENT;
const AvatarExpeditionStartReq_CmdId AvatarExpeditionStartReq::CmdId_MIN;
const AvatarExpeditionStartReq_CmdId AvatarExpeditionStartReq::CmdId_MAX;
const int AvatarExpeditionStartReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AvatarExpeditionStartRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[27];
}
bool AvatarExpeditionStartRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1728:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AvatarExpeditionStartRsp_CmdId AvatarExpeditionStartRsp::NONE;
const AvatarExpeditionStartRsp_CmdId AvatarExpeditionStartRsp::CMD_ID;
const AvatarExpeditionStartRsp_CmdId AvatarExpeditionStartRsp::ENET_CHANNEL_ID;
const AvatarExpeditionStartRsp_CmdId AvatarExpeditionStartRsp::ENET_IS_RELIABLE;
const AvatarExpeditionStartRsp_CmdId AvatarExpeditionStartRsp::CmdId_MIN;
const AvatarExpeditionStartRsp_CmdId AvatarExpeditionStartRsp::CmdId_MAX;
const int AvatarExpeditionStartRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AvatarExpeditionCallBackReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[28];
}
bool AvatarExpeditionCallBackReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1729:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AvatarExpeditionCallBackReq_CmdId AvatarExpeditionCallBackReq::NONE;
const AvatarExpeditionCallBackReq_CmdId AvatarExpeditionCallBackReq::CMD_ID;
const AvatarExpeditionCallBackReq_CmdId AvatarExpeditionCallBackReq::ENET_CHANNEL_ID;
const AvatarExpeditionCallBackReq_CmdId AvatarExpeditionCallBackReq::ENET_IS_RELIABLE;
const AvatarExpeditionCallBackReq_CmdId AvatarExpeditionCallBackReq::IS_ALLOW_CLIENT;
const AvatarExpeditionCallBackReq_CmdId AvatarExpeditionCallBackReq::CmdId_MIN;
const AvatarExpeditionCallBackReq_CmdId AvatarExpeditionCallBackReq::CmdId_MAX;
const int AvatarExpeditionCallBackReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AvatarExpeditionCallBackRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[29];
}
bool AvatarExpeditionCallBackRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1730:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AvatarExpeditionCallBackRsp_CmdId AvatarExpeditionCallBackRsp::NONE;
const AvatarExpeditionCallBackRsp_CmdId AvatarExpeditionCallBackRsp::CMD_ID;
const AvatarExpeditionCallBackRsp_CmdId AvatarExpeditionCallBackRsp::ENET_CHANNEL_ID;
const AvatarExpeditionCallBackRsp_CmdId AvatarExpeditionCallBackRsp::ENET_IS_RELIABLE;
const AvatarExpeditionCallBackRsp_CmdId AvatarExpeditionCallBackRsp::CmdId_MIN;
const AvatarExpeditionCallBackRsp_CmdId AvatarExpeditionCallBackRsp::CmdId_MAX;
const int AvatarExpeditionCallBackRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AvatarExpeditionGetRewardReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[30];
}
bool AvatarExpeditionGetRewardReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1731:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AvatarExpeditionGetRewardReq_CmdId AvatarExpeditionGetRewardReq::NONE;
const AvatarExpeditionGetRewardReq_CmdId AvatarExpeditionGetRewardReq::CMD_ID;
const AvatarExpeditionGetRewardReq_CmdId AvatarExpeditionGetRewardReq::ENET_CHANNEL_ID;
const AvatarExpeditionGetRewardReq_CmdId AvatarExpeditionGetRewardReq::ENET_IS_RELIABLE;
const AvatarExpeditionGetRewardReq_CmdId AvatarExpeditionGetRewardReq::IS_ALLOW_CLIENT;
const AvatarExpeditionGetRewardReq_CmdId AvatarExpeditionGetRewardReq::CmdId_MIN;
const AvatarExpeditionGetRewardReq_CmdId AvatarExpeditionGetRewardReq::CmdId_MAX;
const int AvatarExpeditionGetRewardReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AvatarExpeditionGetRewardRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[31];
}
bool AvatarExpeditionGetRewardRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1732:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AvatarExpeditionGetRewardRsp_CmdId AvatarExpeditionGetRewardRsp::NONE;
const AvatarExpeditionGetRewardRsp_CmdId AvatarExpeditionGetRewardRsp::CMD_ID;
const AvatarExpeditionGetRewardRsp_CmdId AvatarExpeditionGetRewardRsp::ENET_CHANNEL_ID;
const AvatarExpeditionGetRewardRsp_CmdId AvatarExpeditionGetRewardRsp::ENET_IS_RELIABLE;
const AvatarExpeditionGetRewardRsp_CmdId AvatarExpeditionGetRewardRsp::CmdId_MIN;
const AvatarExpeditionGetRewardRsp_CmdId AvatarExpeditionGetRewardRsp::CmdId_MAX;
const int AvatarExpeditionGetRewardRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChangeMpTeamAvatarReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[32];
}
bool ChangeMpTeamAvatarReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1734:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChangeMpTeamAvatarReq_CmdId ChangeMpTeamAvatarReq::NONE;
const ChangeMpTeamAvatarReq_CmdId ChangeMpTeamAvatarReq::CMD_ID;
const ChangeMpTeamAvatarReq_CmdId ChangeMpTeamAvatarReq::ENET_CHANNEL_ID;
const ChangeMpTeamAvatarReq_CmdId ChangeMpTeamAvatarReq::ENET_IS_RELIABLE;
const ChangeMpTeamAvatarReq_CmdId ChangeMpTeamAvatarReq::IS_ALLOW_CLIENT;
const ChangeMpTeamAvatarReq_CmdId ChangeMpTeamAvatarReq::CmdId_MIN;
const ChangeMpTeamAvatarReq_CmdId ChangeMpTeamAvatarReq::CmdId_MAX;
const int ChangeMpTeamAvatarReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChangeMpTeamAvatarRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[33];
}
bool ChangeMpTeamAvatarRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1735:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChangeMpTeamAvatarRsp_CmdId ChangeMpTeamAvatarRsp::NONE;
const ChangeMpTeamAvatarRsp_CmdId ChangeMpTeamAvatarRsp::CMD_ID;
const ChangeMpTeamAvatarRsp_CmdId ChangeMpTeamAvatarRsp::ENET_CHANNEL_ID;
const ChangeMpTeamAvatarRsp_CmdId ChangeMpTeamAvatarRsp::ENET_IS_RELIABLE;
const ChangeMpTeamAvatarRsp_CmdId ChangeMpTeamAvatarRsp::CmdId_MIN;
const ChangeMpTeamAvatarRsp_CmdId ChangeMpTeamAvatarRsp::CmdId_MAX;
const int ChangeMpTeamAvatarRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChangeTeamNameReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[34];
}
bool ChangeTeamNameReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1736:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChangeTeamNameReq_CmdId ChangeTeamNameReq::NONE;
const ChangeTeamNameReq_CmdId ChangeTeamNameReq::CMD_ID;
const ChangeTeamNameReq_CmdId ChangeTeamNameReq::ENET_CHANNEL_ID;
const ChangeTeamNameReq_CmdId ChangeTeamNameReq::ENET_IS_RELIABLE;
const ChangeTeamNameReq_CmdId ChangeTeamNameReq::IS_ALLOW_CLIENT;
const ChangeTeamNameReq_CmdId ChangeTeamNameReq::CmdId_MIN;
const ChangeTeamNameReq_CmdId ChangeTeamNameReq::CmdId_MAX;
const int ChangeTeamNameReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChangeTeamNameRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[35];
}
bool ChangeTeamNameRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1737:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChangeTeamNameRsp_CmdId ChangeTeamNameRsp::NONE;
const ChangeTeamNameRsp_CmdId ChangeTeamNameRsp::CMD_ID;
const ChangeTeamNameRsp_CmdId ChangeTeamNameRsp::ENET_CHANNEL_ID;
const ChangeTeamNameRsp_CmdId ChangeTeamNameRsp::ENET_IS_RELIABLE;
const ChangeTeamNameRsp_CmdId ChangeTeamNameRsp::CmdId_MIN;
const ChangeTeamNameRsp_CmdId ChangeTeamNameRsp::CmdId_MAX;
const int ChangeTeamNameRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SceneTeamUpdateNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[36];
}
bool SceneTeamUpdateNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1738:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SceneTeamUpdateNotify_CmdId SceneTeamUpdateNotify::NONE;
const SceneTeamUpdateNotify_CmdId SceneTeamUpdateNotify::CMD_ID;
const SceneTeamUpdateNotify_CmdId SceneTeamUpdateNotify::ENET_CHANNEL_ID;
const SceneTeamUpdateNotify_CmdId SceneTeamUpdateNotify::ENET_IS_RELIABLE;
const SceneTeamUpdateNotify_CmdId SceneTeamUpdateNotify::CmdId_MIN;
const SceneTeamUpdateNotify_CmdId SceneTeamUpdateNotify::CmdId_MAX;
const int SceneTeamUpdateNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SceneTeamMPDisplayCurAvatarNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[37];
}
bool SceneTeamMPDisplayCurAvatarNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1739:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SceneTeamMPDisplayCurAvatarNotify_CmdId SceneTeamMPDisplayCurAvatarNotify::NONE;
const SceneTeamMPDisplayCurAvatarNotify_CmdId SceneTeamMPDisplayCurAvatarNotify::CMD_ID;
const SceneTeamMPDisplayCurAvatarNotify_CmdId SceneTeamMPDisplayCurAvatarNotify::ENET_CHANNEL_ID;
const SceneTeamMPDisplayCurAvatarNotify_CmdId SceneTeamMPDisplayCurAvatarNotify::ENET_IS_RELIABLE;
const SceneTeamMPDisplayCurAvatarNotify_CmdId SceneTeamMPDisplayCurAvatarNotify::CmdId_MIN;
const SceneTeamMPDisplayCurAvatarNotify_CmdId SceneTeamMPDisplayCurAvatarNotify::CmdId_MAX;
const int SceneTeamMPDisplayCurAvatarNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FocusAvatarReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[38];
}
bool FocusAvatarReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1740:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FocusAvatarReq_CmdId FocusAvatarReq::NONE;
const FocusAvatarReq_CmdId FocusAvatarReq::CMD_ID;
const FocusAvatarReq_CmdId FocusAvatarReq::ENET_CHANNEL_ID;
const FocusAvatarReq_CmdId FocusAvatarReq::ENET_IS_RELIABLE;
const FocusAvatarReq_CmdId FocusAvatarReq::IS_ALLOW_CLIENT;
const FocusAvatarReq_CmdId FocusAvatarReq::CmdId_MIN;
const FocusAvatarReq_CmdId FocusAvatarReq::CmdId_MAX;
const int FocusAvatarReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FocusAvatarRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_enum_descriptors[39];
}
bool FocusAvatarRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1741:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FocusAvatarRsp_CmdId FocusAvatarRsp::NONE;
const FocusAvatarRsp_CmdId FocusAvatarRsp::CMD_ID;
const FocusAvatarRsp_CmdId FocusAvatarRsp::ENET_CHANNEL_ID;
const FocusAvatarRsp_CmdId FocusAvatarRsp::ENET_IS_RELIABLE;
const FocusAvatarRsp_CmdId FocusAvatarRsp::CmdId_MIN;
const FocusAvatarRsp_CmdId FocusAvatarRsp::CmdId_MAX;
const int FocusAvatarRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarAddNotify::kAvatarFieldNumber;
const int AvatarAddNotify::kIsInTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarAddNotify::AvatarAddNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarAddNotify)
}
AvatarAddNotify::AvatarAddNotify(const AvatarAddNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_avatar()) {
    avatar_ = new ::proto::AvatarInfo(*from.avatar_);
  } else {
    avatar_ = NULL;
  }
  is_in_team_ = from.is_in_team_;
  // @@protoc_insertion_point(copy_constructor:proto.AvatarAddNotify)
}

void AvatarAddNotify::SharedCtor() {
  ::memset(&avatar_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_in_team_) -
      reinterpret_cast<char*>(&avatar_)) + sizeof(is_in_team_));
  _cached_size_ = 0;
}

AvatarAddNotify::~AvatarAddNotify() {
  // @@protoc_insertion_point(destructor:proto.AvatarAddNotify)
  SharedDtor();
}

void AvatarAddNotify::SharedDtor() {
  if (this != internal_default_instance()) delete avatar_;
}

void AvatarAddNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarAddNotify::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarAddNotify& AvatarAddNotify::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarAddNotify* AvatarAddNotify::New(::google::protobuf::Arena* arena) const {
  AvatarAddNotify* n = new AvatarAddNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarAddNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarAddNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && avatar_ != NULL) {
    delete avatar_;
  }
  avatar_ = NULL;
  is_in_team_ = false;
  _internal_metadata_.Clear();
}

bool AvatarAddNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarAddNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.AvatarInfo avatar = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_in_team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_in_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarAddNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarAddNotify)
  return false;
#undef DO_
}

void AvatarAddNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarAddNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.AvatarInfo avatar = 1;
  if (this->has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->avatar_, output);
  }

  // bool is_in_team = 2;
  if (this->is_in_team() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_in_team(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarAddNotify)
}

::google::protobuf::uint8* AvatarAddNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarAddNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.AvatarInfo avatar = 1;
  if (this->has_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->avatar_, deterministic, target);
  }

  // bool is_in_team = 2;
  if (this->is_in_team() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_in_team(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarAddNotify)
  return target;
}

size_t AvatarAddNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarAddNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.AvatarInfo avatar = 1;
  if (this->has_avatar()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->avatar_);
  }

  // bool is_in_team = 2;
  if (this->is_in_team() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarAddNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarAddNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarAddNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarAddNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarAddNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarAddNotify)
    MergeFrom(*source);
  }
}

void AvatarAddNotify::MergeFrom(const AvatarAddNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarAddNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_avatar()) {
    mutable_avatar()->::proto::AvatarInfo::MergeFrom(from.avatar());
  }
  if (from.is_in_team() != 0) {
    set_is_in_team(from.is_in_team());
  }
}

void AvatarAddNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarAddNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarAddNotify::CopyFrom(const AvatarAddNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarAddNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarAddNotify::IsInitialized() const {
  return true;
}

void AvatarAddNotify::Swap(AvatarAddNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarAddNotify::InternalSwap(AvatarAddNotify* other) {
  using std::swap;
  swap(avatar_, other->avatar_);
  swap(is_in_team_, other->is_in_team_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarAddNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarAddNotify

// .proto.AvatarInfo avatar = 1;
bool AvatarAddNotify::has_avatar() const {
  return this != internal_default_instance() && avatar_ != NULL;
}
void AvatarAddNotify::clear_avatar() {
  if (GetArenaNoVirtual() == NULL && avatar_ != NULL) delete avatar_;
  avatar_ = NULL;
}
const ::proto::AvatarInfo& AvatarAddNotify::avatar() const {
  const ::proto::AvatarInfo* p = avatar_;
  // @@protoc_insertion_point(field_get:proto.AvatarAddNotify.avatar)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::AvatarInfo*>(
      &::proto::_AvatarInfo_default_instance_);
}
::proto::AvatarInfo* AvatarAddNotify::mutable_avatar() {
  
  if (avatar_ == NULL) {
    avatar_ = new ::proto::AvatarInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.AvatarAddNotify.avatar)
  return avatar_;
}
::proto::AvatarInfo* AvatarAddNotify::release_avatar() {
  // @@protoc_insertion_point(field_release:proto.AvatarAddNotify.avatar)
  
  ::proto::AvatarInfo* temp = avatar_;
  avatar_ = NULL;
  return temp;
}
void AvatarAddNotify::set_allocated_avatar(::proto::AvatarInfo* avatar) {
  delete avatar_;
  avatar_ = avatar;
  if (avatar) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AvatarAddNotify.avatar)
}

// bool is_in_team = 2;
void AvatarAddNotify::clear_is_in_team() {
  is_in_team_ = false;
}
bool AvatarAddNotify::is_in_team() const {
  // @@protoc_insertion_point(field_get:proto.AvatarAddNotify.is_in_team)
  return is_in_team_;
}
void AvatarAddNotify::set_is_in_team(bool value) {
  
  is_in_team_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarAddNotify.is_in_team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarDelNotify::kAvatarGuidListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarDelNotify::AvatarDelNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarDelNotify)
}
AvatarDelNotify::AvatarDelNotify(const AvatarDelNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      avatar_guid_list_(from.avatar_guid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.AvatarDelNotify)
}

void AvatarDelNotify::SharedCtor() {
  _cached_size_ = 0;
}

AvatarDelNotify::~AvatarDelNotify() {
  // @@protoc_insertion_point(destructor:proto.AvatarDelNotify)
  SharedDtor();
}

void AvatarDelNotify::SharedDtor() {
}

void AvatarDelNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarDelNotify::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarDelNotify& AvatarDelNotify::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarDelNotify* AvatarDelNotify::New(::google::protobuf::Arena* arena) const {
  AvatarDelNotify* n = new AvatarDelNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarDelNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarDelNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_guid_list_.Clear();
  _internal_metadata_.Clear();
}

bool AvatarDelNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarDelNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 avatar_guid_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_avatar_guid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10u, input, this->mutable_avatar_guid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarDelNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarDelNotify)
  return false;
#undef DO_
}

void AvatarDelNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarDelNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 avatar_guid_list = 1;
  if (this->avatar_guid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _avatar_guid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->avatar_guid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->avatar_guid_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarDelNotify)
}

::google::protobuf::uint8* AvatarDelNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarDelNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 avatar_guid_list = 1;
  if (this->avatar_guid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _avatar_guid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->avatar_guid_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarDelNotify)
  return target;
}

size_t AvatarDelNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarDelNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 avatar_guid_list = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->avatar_guid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _avatar_guid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarDelNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarDelNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarDelNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarDelNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarDelNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarDelNotify)
    MergeFrom(*source);
  }
}

void AvatarDelNotify::MergeFrom(const AvatarDelNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarDelNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatar_guid_list_.MergeFrom(from.avatar_guid_list_);
}

void AvatarDelNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarDelNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarDelNotify::CopyFrom(const AvatarDelNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarDelNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarDelNotify::IsInitialized() const {
  return true;
}

void AvatarDelNotify::Swap(AvatarDelNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarDelNotify::InternalSwap(AvatarDelNotify* other) {
  using std::swap;
  avatar_guid_list_.InternalSwap(&other->avatar_guid_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarDelNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarDelNotify

// repeated uint64 avatar_guid_list = 1;
int AvatarDelNotify::avatar_guid_list_size() const {
  return avatar_guid_list_.size();
}
void AvatarDelNotify::clear_avatar_guid_list() {
  avatar_guid_list_.Clear();
}
::google::protobuf::uint64 AvatarDelNotify::avatar_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AvatarDelNotify.avatar_guid_list)
  return avatar_guid_list_.Get(index);
}
void AvatarDelNotify::set_avatar_guid_list(int index, ::google::protobuf::uint64 value) {
  avatar_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.AvatarDelNotify.avatar_guid_list)
}
void AvatarDelNotify::add_avatar_guid_list(::google::protobuf::uint64 value) {
  avatar_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.AvatarDelNotify.avatar_guid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AvatarDelNotify::avatar_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.AvatarDelNotify.avatar_guid_list)
  return avatar_guid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AvatarDelNotify::mutable_avatar_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AvatarDelNotify.avatar_guid_list)
  return &avatar_guid_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarTeam::kAvatarGuidListFieldNumber;
const int AvatarTeam::kTeamNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarTeam::AvatarTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarTeam)
}
AvatarTeam::AvatarTeam(const AvatarTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      avatar_guid_list_(from.avatar_guid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.team_name().size() > 0) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.AvatarTeam)
}

void AvatarTeam::SharedCtor() {
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AvatarTeam::~AvatarTeam() {
  // @@protoc_insertion_point(destructor:proto.AvatarTeam)
  SharedDtor();
}

void AvatarTeam::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AvatarTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarTeam::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarTeam& AvatarTeam::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarTeam* AvatarTeam::New(::google::protobuf::Arena* arena) const {
  AvatarTeam* n = new AvatarTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_guid_list_.Clear();
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool AvatarTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 avatar_guid_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_avatar_guid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10u, input, this->mutable_avatar_guid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string team_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.AvatarTeam.team_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarTeam)
  return false;
#undef DO_
}

void AvatarTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 avatar_guid_list = 1;
  if (this->avatar_guid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _avatar_guid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->avatar_guid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->avatar_guid_list(i), output);
  }

  // string team_name = 2;
  if (this->team_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AvatarTeam.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->team_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarTeam)
}

::google::protobuf::uint8* AvatarTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 avatar_guid_list = 1;
  if (this->avatar_guid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _avatar_guid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->avatar_guid_list_, target);
  }

  // string team_name = 2;
  if (this->team_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AvatarTeam.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarTeam)
  return target;
}

size_t AvatarTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarTeam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 avatar_guid_list = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->avatar_guid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _avatar_guid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string team_name = 2;
  if (this->team_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->team_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarTeam)
    MergeFrom(*source);
  }
}

void AvatarTeam::MergeFrom(const AvatarTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatar_guid_list_.MergeFrom(from.avatar_guid_list_);
  if (from.team_name().size() > 0) {

    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
}

void AvatarTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarTeam::CopyFrom(const AvatarTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarTeam::IsInitialized() const {
  return true;
}

void AvatarTeam::Swap(AvatarTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarTeam::InternalSwap(AvatarTeam* other) {
  using std::swap;
  avatar_guid_list_.InternalSwap(&other->avatar_guid_list_);
  team_name_.Swap(&other->team_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarTeam::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarTeam

// repeated uint64 avatar_guid_list = 1;
int AvatarTeam::avatar_guid_list_size() const {
  return avatar_guid_list_.size();
}
void AvatarTeam::clear_avatar_guid_list() {
  avatar_guid_list_.Clear();
}
::google::protobuf::uint64 AvatarTeam::avatar_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AvatarTeam.avatar_guid_list)
  return avatar_guid_list_.Get(index);
}
void AvatarTeam::set_avatar_guid_list(int index, ::google::protobuf::uint64 value) {
  avatar_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.AvatarTeam.avatar_guid_list)
}
void AvatarTeam::add_avatar_guid_list(::google::protobuf::uint64 value) {
  avatar_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.AvatarTeam.avatar_guid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AvatarTeam::avatar_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.AvatarTeam.avatar_guid_list)
  return avatar_guid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AvatarTeam::mutable_avatar_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AvatarTeam.avatar_guid_list)
  return &avatar_guid_list_;
}

// string team_name = 2;
void AvatarTeam::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AvatarTeam::team_name() const {
  // @@protoc_insertion_point(field_get:proto.AvatarTeam.team_name)
  return team_name_.GetNoArena();
}
void AvatarTeam::set_team_name(const ::std::string& value) {
  
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AvatarTeam.team_name)
}
#if LANG_CXX11
void AvatarTeam::set_team_name(::std::string&& value) {
  
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AvatarTeam.team_name)
}
#endif
void AvatarTeam::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AvatarTeam.team_name)
}
void AvatarTeam::set_team_name(const char* value, size_t size) {
  
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AvatarTeam.team_name)
}
::std::string* AvatarTeam::mutable_team_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.AvatarTeam.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AvatarTeam::release_team_name() {
  // @@protoc_insertion_point(field_release:proto.AvatarTeam.team_name)
  
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AvatarTeam::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    
  } else {
    
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.AvatarTeam.team_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetUpAvatarTeamReq::kTeamIdFieldNumber;
const int SetUpAvatarTeamReq::kAvatarTeamGuidListFieldNumber;
const int SetUpAvatarTeamReq::kCurAvatarGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetUpAvatarTeamReq::SetUpAvatarTeamReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SetUpAvatarTeamReq)
}
SetUpAvatarTeamReq::SetUpAvatarTeamReq(const SetUpAvatarTeamReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      avatar_team_guid_list_(from.avatar_team_guid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cur_avatar_guid_, &from.cur_avatar_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&cur_avatar_guid_)) + sizeof(team_id_));
  // @@protoc_insertion_point(copy_constructor:proto.SetUpAvatarTeamReq)
}

void SetUpAvatarTeamReq::SharedCtor() {
  ::memset(&cur_avatar_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_id_) -
      reinterpret_cast<char*>(&cur_avatar_guid_)) + sizeof(team_id_));
  _cached_size_ = 0;
}

SetUpAvatarTeamReq::~SetUpAvatarTeamReq() {
  // @@protoc_insertion_point(destructor:proto.SetUpAvatarTeamReq)
  SharedDtor();
}

void SetUpAvatarTeamReq::SharedDtor() {
}

void SetUpAvatarTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetUpAvatarTeamReq::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetUpAvatarTeamReq& SetUpAvatarTeamReq::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetUpAvatarTeamReq* SetUpAvatarTeamReq::New(::google::protobuf::Arena* arena) const {
  SetUpAvatarTeamReq* n = new SetUpAvatarTeamReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetUpAvatarTeamReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SetUpAvatarTeamReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_team_guid_list_.Clear();
  ::memset(&cur_avatar_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_id_) -
      reinterpret_cast<char*>(&cur_avatar_guid_)) + sizeof(team_id_));
  _internal_metadata_.Clear();
}

bool SetUpAvatarTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SetUpAvatarTeamReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 avatar_team_guid_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_avatar_team_guid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_avatar_team_guid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 cur_avatar_guid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_avatar_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SetUpAvatarTeamReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SetUpAvatarTeamReq)
  return false;
#undef DO_
}

void SetUpAvatarTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SetUpAvatarTeamReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 team_id = 1;
  if (this->team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  // repeated uint64 avatar_team_guid_list = 2;
  if (this->avatar_team_guid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _avatar_team_guid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->avatar_team_guid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->avatar_team_guid_list(i), output);
  }

  // uint64 cur_avatar_guid = 3;
  if (this->cur_avatar_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cur_avatar_guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SetUpAvatarTeamReq)
}

::google::protobuf::uint8* SetUpAvatarTeamReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SetUpAvatarTeamReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 team_id = 1;
  if (this->team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  // repeated uint64 avatar_team_guid_list = 2;
  if (this->avatar_team_guid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _avatar_team_guid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->avatar_team_guid_list_, target);
  }

  // uint64 cur_avatar_guid = 3;
  if (this->cur_avatar_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cur_avatar_guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SetUpAvatarTeamReq)
  return target;
}

size_t SetUpAvatarTeamReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SetUpAvatarTeamReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 avatar_team_guid_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->avatar_team_guid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _avatar_team_guid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint64 cur_avatar_guid = 3;
  if (this->cur_avatar_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cur_avatar_guid());
  }

  // uint32 team_id = 1;
  if (this->team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->team_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetUpAvatarTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SetUpAvatarTeamReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetUpAvatarTeamReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetUpAvatarTeamReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SetUpAvatarTeamReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SetUpAvatarTeamReq)
    MergeFrom(*source);
  }
}

void SetUpAvatarTeamReq::MergeFrom(const SetUpAvatarTeamReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SetUpAvatarTeamReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatar_team_guid_list_.MergeFrom(from.avatar_team_guid_list_);
  if (from.cur_avatar_guid() != 0) {
    set_cur_avatar_guid(from.cur_avatar_guid());
  }
  if (from.team_id() != 0) {
    set_team_id(from.team_id());
  }
}

void SetUpAvatarTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SetUpAvatarTeamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetUpAvatarTeamReq::CopyFrom(const SetUpAvatarTeamReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SetUpAvatarTeamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUpAvatarTeamReq::IsInitialized() const {
  return true;
}

void SetUpAvatarTeamReq::Swap(SetUpAvatarTeamReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetUpAvatarTeamReq::InternalSwap(SetUpAvatarTeamReq* other) {
  using std::swap;
  avatar_team_guid_list_.InternalSwap(&other->avatar_team_guid_list_);
  swap(cur_avatar_guid_, other->cur_avatar_guid_);
  swap(team_id_, other->team_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetUpAvatarTeamReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetUpAvatarTeamReq

// uint32 team_id = 1;
void SetUpAvatarTeamReq::clear_team_id() {
  team_id_ = 0u;
}
::google::protobuf::uint32 SetUpAvatarTeamReq::team_id() const {
  // @@protoc_insertion_point(field_get:proto.SetUpAvatarTeamReq.team_id)
  return team_id_;
}
void SetUpAvatarTeamReq::set_team_id(::google::protobuf::uint32 value) {
  
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SetUpAvatarTeamReq.team_id)
}

// repeated uint64 avatar_team_guid_list = 2;
int SetUpAvatarTeamReq::avatar_team_guid_list_size() const {
  return avatar_team_guid_list_.size();
}
void SetUpAvatarTeamReq::clear_avatar_team_guid_list() {
  avatar_team_guid_list_.Clear();
}
::google::protobuf::uint64 SetUpAvatarTeamReq::avatar_team_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SetUpAvatarTeamReq.avatar_team_guid_list)
  return avatar_team_guid_list_.Get(index);
}
void SetUpAvatarTeamReq::set_avatar_team_guid_list(int index, ::google::protobuf::uint64 value) {
  avatar_team_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.SetUpAvatarTeamReq.avatar_team_guid_list)
}
void SetUpAvatarTeamReq::add_avatar_team_guid_list(::google::protobuf::uint64 value) {
  avatar_team_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.SetUpAvatarTeamReq.avatar_team_guid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SetUpAvatarTeamReq::avatar_team_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.SetUpAvatarTeamReq.avatar_team_guid_list)
  return avatar_team_guid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SetUpAvatarTeamReq::mutable_avatar_team_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SetUpAvatarTeamReq.avatar_team_guid_list)
  return &avatar_team_guid_list_;
}

// uint64 cur_avatar_guid = 3;
void SetUpAvatarTeamReq::clear_cur_avatar_guid() {
  cur_avatar_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SetUpAvatarTeamReq::cur_avatar_guid() const {
  // @@protoc_insertion_point(field_get:proto.SetUpAvatarTeamReq.cur_avatar_guid)
  return cur_avatar_guid_;
}
void SetUpAvatarTeamReq::set_cur_avatar_guid(::google::protobuf::uint64 value) {
  
  cur_avatar_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.SetUpAvatarTeamReq.cur_avatar_guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetUpAvatarTeamRsp::kRetcodeFieldNumber;
const int SetUpAvatarTeamRsp::kTeamIdFieldNumber;
const int SetUpAvatarTeamRsp::kAvatarTeamGuidListFieldNumber;
const int SetUpAvatarTeamRsp::kCurAvatarGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetUpAvatarTeamRsp::SetUpAvatarTeamRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SetUpAvatarTeamRsp)
}
SetUpAvatarTeamRsp::SetUpAvatarTeamRsp(const SetUpAvatarTeamRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      avatar_team_guid_list_(from.avatar_team_guid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_avatar_guid_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(cur_avatar_guid_));
  // @@protoc_insertion_point(copy_constructor:proto.SetUpAvatarTeamRsp)
}

void SetUpAvatarTeamRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_avatar_guid_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(cur_avatar_guid_));
  _cached_size_ = 0;
}

SetUpAvatarTeamRsp::~SetUpAvatarTeamRsp() {
  // @@protoc_insertion_point(destructor:proto.SetUpAvatarTeamRsp)
  SharedDtor();
}

void SetUpAvatarTeamRsp::SharedDtor() {
}

void SetUpAvatarTeamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetUpAvatarTeamRsp::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetUpAvatarTeamRsp& SetUpAvatarTeamRsp::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetUpAvatarTeamRsp* SetUpAvatarTeamRsp::New(::google::protobuf::Arena* arena) const {
  SetUpAvatarTeamRsp* n = new SetUpAvatarTeamRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetUpAvatarTeamRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SetUpAvatarTeamRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_team_guid_list_.Clear();
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_avatar_guid_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(cur_avatar_guid_));
  _internal_metadata_.Clear();
}

bool SetUpAvatarTeamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SetUpAvatarTeamRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 avatar_team_guid_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_avatar_team_guid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26u, input, this->mutable_avatar_team_guid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 cur_avatar_guid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_avatar_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SetUpAvatarTeamRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SetUpAvatarTeamRsp)
  return false;
#undef DO_
}

void SetUpAvatarTeamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SetUpAvatarTeamRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 team_id = 2;
  if (this->team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  // repeated uint64 avatar_team_guid_list = 3;
  if (this->avatar_team_guid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _avatar_team_guid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->avatar_team_guid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->avatar_team_guid_list(i), output);
  }

  // uint64 cur_avatar_guid = 4;
  if (this->cur_avatar_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->cur_avatar_guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SetUpAvatarTeamRsp)
}

::google::protobuf::uint8* SetUpAvatarTeamRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SetUpAvatarTeamRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 team_id = 2;
  if (this->team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  // repeated uint64 avatar_team_guid_list = 3;
  if (this->avatar_team_guid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _avatar_team_guid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->avatar_team_guid_list_, target);
  }

  // uint64 cur_avatar_guid = 4;
  if (this->cur_avatar_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->cur_avatar_guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SetUpAvatarTeamRsp)
  return target;
}

size_t SetUpAvatarTeamRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SetUpAvatarTeamRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 avatar_team_guid_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->avatar_team_guid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _avatar_team_guid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 team_id = 2;
  if (this->team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->team_id());
  }

  // uint64 cur_avatar_guid = 4;
  if (this->cur_avatar_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cur_avatar_guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetUpAvatarTeamRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SetUpAvatarTeamRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SetUpAvatarTeamRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetUpAvatarTeamRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SetUpAvatarTeamRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SetUpAvatarTeamRsp)
    MergeFrom(*source);
  }
}

void SetUpAvatarTeamRsp::MergeFrom(const SetUpAvatarTeamRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SetUpAvatarTeamRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatar_team_guid_list_.MergeFrom(from.avatar_team_guid_list_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.team_id() != 0) {
    set_team_id(from.team_id());
  }
  if (from.cur_avatar_guid() != 0) {
    set_cur_avatar_guid(from.cur_avatar_guid());
  }
}

void SetUpAvatarTeamRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SetUpAvatarTeamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetUpAvatarTeamRsp::CopyFrom(const SetUpAvatarTeamRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SetUpAvatarTeamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUpAvatarTeamRsp::IsInitialized() const {
  return true;
}

void SetUpAvatarTeamRsp::Swap(SetUpAvatarTeamRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetUpAvatarTeamRsp::InternalSwap(SetUpAvatarTeamRsp* other) {
  using std::swap;
  avatar_team_guid_list_.InternalSwap(&other->avatar_team_guid_list_);
  swap(retcode_, other->retcode_);
  swap(team_id_, other->team_id_);
  swap(cur_avatar_guid_, other->cur_avatar_guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetUpAvatarTeamRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetUpAvatarTeamRsp

// int32 retcode = 1;
void SetUpAvatarTeamRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 SetUpAvatarTeamRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.SetUpAvatarTeamRsp.retcode)
  return retcode_;
}
void SetUpAvatarTeamRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.SetUpAvatarTeamRsp.retcode)
}

// uint32 team_id = 2;
void SetUpAvatarTeamRsp::clear_team_id() {
  team_id_ = 0u;
}
::google::protobuf::uint32 SetUpAvatarTeamRsp::team_id() const {
  // @@protoc_insertion_point(field_get:proto.SetUpAvatarTeamRsp.team_id)
  return team_id_;
}
void SetUpAvatarTeamRsp::set_team_id(::google::protobuf::uint32 value) {
  
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SetUpAvatarTeamRsp.team_id)
}

// repeated uint64 avatar_team_guid_list = 3;
int SetUpAvatarTeamRsp::avatar_team_guid_list_size() const {
  return avatar_team_guid_list_.size();
}
void SetUpAvatarTeamRsp::clear_avatar_team_guid_list() {
  avatar_team_guid_list_.Clear();
}
::google::protobuf::uint64 SetUpAvatarTeamRsp::avatar_team_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SetUpAvatarTeamRsp.avatar_team_guid_list)
  return avatar_team_guid_list_.Get(index);
}
void SetUpAvatarTeamRsp::set_avatar_team_guid_list(int index, ::google::protobuf::uint64 value) {
  avatar_team_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.SetUpAvatarTeamRsp.avatar_team_guid_list)
}
void SetUpAvatarTeamRsp::add_avatar_team_guid_list(::google::protobuf::uint64 value) {
  avatar_team_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.SetUpAvatarTeamRsp.avatar_team_guid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SetUpAvatarTeamRsp::avatar_team_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.SetUpAvatarTeamRsp.avatar_team_guid_list)
  return avatar_team_guid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SetUpAvatarTeamRsp::mutable_avatar_team_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SetUpAvatarTeamRsp.avatar_team_guid_list)
  return &avatar_team_guid_list_;
}

// uint64 cur_avatar_guid = 4;
void SetUpAvatarTeamRsp::clear_cur_avatar_guid() {
  cur_avatar_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SetUpAvatarTeamRsp::cur_avatar_guid() const {
  // @@protoc_insertion_point(field_get:proto.SetUpAvatarTeamRsp.cur_avatar_guid)
  return cur_avatar_guid_;
}
void SetUpAvatarTeamRsp::set_cur_avatar_guid(::google::protobuf::uint64 value) {
  
  cur_avatar_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.SetUpAvatarTeamRsp.cur_avatar_guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChooseCurAvatarTeamReq::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChooseCurAvatarTeamReq::ChooseCurAvatarTeamReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChooseCurAvatarTeamReq)
}
ChooseCurAvatarTeamReq::ChooseCurAvatarTeamReq(const ChooseCurAvatarTeamReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_id_ = from.team_id_;
  // @@protoc_insertion_point(copy_constructor:proto.ChooseCurAvatarTeamReq)
}

void ChooseCurAvatarTeamReq::SharedCtor() {
  team_id_ = 0u;
  _cached_size_ = 0;
}

ChooseCurAvatarTeamReq::~ChooseCurAvatarTeamReq() {
  // @@protoc_insertion_point(destructor:proto.ChooseCurAvatarTeamReq)
  SharedDtor();
}

void ChooseCurAvatarTeamReq::SharedDtor() {
}

void ChooseCurAvatarTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChooseCurAvatarTeamReq::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChooseCurAvatarTeamReq& ChooseCurAvatarTeamReq::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChooseCurAvatarTeamReq* ChooseCurAvatarTeamReq::New(::google::protobuf::Arena* arena) const {
  ChooseCurAvatarTeamReq* n = new ChooseCurAvatarTeamReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChooseCurAvatarTeamReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChooseCurAvatarTeamReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_id_ = 0u;
  _internal_metadata_.Clear();
}

bool ChooseCurAvatarTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChooseCurAvatarTeamReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChooseCurAvatarTeamReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChooseCurAvatarTeamReq)
  return false;
#undef DO_
}

void ChooseCurAvatarTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChooseCurAvatarTeamReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 team_id = 1;
  if (this->team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChooseCurAvatarTeamReq)
}

::google::protobuf::uint8* ChooseCurAvatarTeamReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChooseCurAvatarTeamReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 team_id = 1;
  if (this->team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChooseCurAvatarTeamReq)
  return target;
}

size_t ChooseCurAvatarTeamReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChooseCurAvatarTeamReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 team_id = 1;
  if (this->team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->team_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChooseCurAvatarTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChooseCurAvatarTeamReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ChooseCurAvatarTeamReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChooseCurAvatarTeamReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChooseCurAvatarTeamReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChooseCurAvatarTeamReq)
    MergeFrom(*source);
  }
}

void ChooseCurAvatarTeamReq::MergeFrom(const ChooseCurAvatarTeamReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChooseCurAvatarTeamReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.team_id() != 0) {
    set_team_id(from.team_id());
  }
}

void ChooseCurAvatarTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChooseCurAvatarTeamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChooseCurAvatarTeamReq::CopyFrom(const ChooseCurAvatarTeamReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChooseCurAvatarTeamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChooseCurAvatarTeamReq::IsInitialized() const {
  return true;
}

void ChooseCurAvatarTeamReq::Swap(ChooseCurAvatarTeamReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChooseCurAvatarTeamReq::InternalSwap(ChooseCurAvatarTeamReq* other) {
  using std::swap;
  swap(team_id_, other->team_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChooseCurAvatarTeamReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChooseCurAvatarTeamReq

// uint32 team_id = 1;
void ChooseCurAvatarTeamReq::clear_team_id() {
  team_id_ = 0u;
}
::google::protobuf::uint32 ChooseCurAvatarTeamReq::team_id() const {
  // @@protoc_insertion_point(field_get:proto.ChooseCurAvatarTeamReq.team_id)
  return team_id_;
}
void ChooseCurAvatarTeamReq::set_team_id(::google::protobuf::uint32 value) {
  
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChooseCurAvatarTeamReq.team_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChooseCurAvatarTeamRsp::kRetcodeFieldNumber;
const int ChooseCurAvatarTeamRsp::kCurTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChooseCurAvatarTeamRsp::ChooseCurAvatarTeamRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChooseCurAvatarTeamRsp)
}
ChooseCurAvatarTeamRsp::ChooseCurAvatarTeamRsp(const ChooseCurAvatarTeamRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_team_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(cur_team_id_));
  // @@protoc_insertion_point(copy_constructor:proto.ChooseCurAvatarTeamRsp)
}

void ChooseCurAvatarTeamRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_team_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(cur_team_id_));
  _cached_size_ = 0;
}

ChooseCurAvatarTeamRsp::~ChooseCurAvatarTeamRsp() {
  // @@protoc_insertion_point(destructor:proto.ChooseCurAvatarTeamRsp)
  SharedDtor();
}

void ChooseCurAvatarTeamRsp::SharedDtor() {
}

void ChooseCurAvatarTeamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChooseCurAvatarTeamRsp::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChooseCurAvatarTeamRsp& ChooseCurAvatarTeamRsp::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChooseCurAvatarTeamRsp* ChooseCurAvatarTeamRsp::New(::google::protobuf::Arena* arena) const {
  ChooseCurAvatarTeamRsp* n = new ChooseCurAvatarTeamRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChooseCurAvatarTeamRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChooseCurAvatarTeamRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_team_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(cur_team_id_));
  _internal_metadata_.Clear();
}

bool ChooseCurAvatarTeamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChooseCurAvatarTeamRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChooseCurAvatarTeamRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChooseCurAvatarTeamRsp)
  return false;
#undef DO_
}

void ChooseCurAvatarTeamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChooseCurAvatarTeamRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 cur_team_id = 2;
  if (this->cur_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_team_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChooseCurAvatarTeamRsp)
}

::google::protobuf::uint8* ChooseCurAvatarTeamRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChooseCurAvatarTeamRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 cur_team_id = 2;
  if (this->cur_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_team_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChooseCurAvatarTeamRsp)
  return target;
}

size_t ChooseCurAvatarTeamRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChooseCurAvatarTeamRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 cur_team_id = 2;
  if (this->cur_team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_team_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChooseCurAvatarTeamRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChooseCurAvatarTeamRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ChooseCurAvatarTeamRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChooseCurAvatarTeamRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChooseCurAvatarTeamRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChooseCurAvatarTeamRsp)
    MergeFrom(*source);
  }
}

void ChooseCurAvatarTeamRsp::MergeFrom(const ChooseCurAvatarTeamRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChooseCurAvatarTeamRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.cur_team_id() != 0) {
    set_cur_team_id(from.cur_team_id());
  }
}

void ChooseCurAvatarTeamRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChooseCurAvatarTeamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChooseCurAvatarTeamRsp::CopyFrom(const ChooseCurAvatarTeamRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChooseCurAvatarTeamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChooseCurAvatarTeamRsp::IsInitialized() const {
  return true;
}

void ChooseCurAvatarTeamRsp::Swap(ChooseCurAvatarTeamRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChooseCurAvatarTeamRsp::InternalSwap(ChooseCurAvatarTeamRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(cur_team_id_, other->cur_team_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChooseCurAvatarTeamRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChooseCurAvatarTeamRsp

// int32 retcode = 1;
void ChooseCurAvatarTeamRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 ChooseCurAvatarTeamRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ChooseCurAvatarTeamRsp.retcode)
  return retcode_;
}
void ChooseCurAvatarTeamRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ChooseCurAvatarTeamRsp.retcode)
}

// uint32 cur_team_id = 2;
void ChooseCurAvatarTeamRsp::clear_cur_team_id() {
  cur_team_id_ = 0u;
}
::google::protobuf::uint32 ChooseCurAvatarTeamRsp::cur_team_id() const {
  // @@protoc_insertion_point(field_get:proto.ChooseCurAvatarTeamRsp.cur_team_id)
  return cur_team_id_;
}
void ChooseCurAvatarTeamRsp::set_cur_team_id(::google::protobuf::uint32 value) {
  
  cur_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChooseCurAvatarTeamRsp.cur_team_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeAvatarReq::kGuidFieldNumber;
const int ChangeAvatarReq::kSkillIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeAvatarReq::ChangeAvatarReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChangeAvatarReq)
}
ChangeAvatarReq::ChangeAvatarReq(const ChangeAvatarReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&skill_id_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(skill_id_));
  // @@protoc_insertion_point(copy_constructor:proto.ChangeAvatarReq)
}

void ChangeAvatarReq::SharedCtor() {
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(skill_id_));
  _cached_size_ = 0;
}

ChangeAvatarReq::~ChangeAvatarReq() {
  // @@protoc_insertion_point(destructor:proto.ChangeAvatarReq)
  SharedDtor();
}

void ChangeAvatarReq::SharedDtor() {
}

void ChangeAvatarReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeAvatarReq::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChangeAvatarReq& ChangeAvatarReq::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChangeAvatarReq* ChangeAvatarReq::New(::google::protobuf::Arena* arena) const {
  ChangeAvatarReq* n = new ChangeAvatarReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeAvatarReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChangeAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(skill_id_));
  _internal_metadata_.Clear();
}

bool ChangeAvatarReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChangeAvatarReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 skill_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChangeAvatarReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChangeAvatarReq)
  return false;
#undef DO_
}

void ChangeAvatarReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChangeAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // uint32 skill_id = 2;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChangeAvatarReq)
}

::google::protobuf::uint8* ChangeAvatarReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChangeAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // uint32 skill_id = 2;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChangeAvatarReq)
  return target;
}

size_t ChangeAvatarReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChangeAvatarReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 guid = 1;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  // uint32 skill_id = 2;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeAvatarReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChangeAvatarReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeAvatarReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeAvatarReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChangeAvatarReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChangeAvatarReq)
    MergeFrom(*source);
  }
}

void ChangeAvatarReq::MergeFrom(const ChangeAvatarReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChangeAvatarReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
}

void ChangeAvatarReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChangeAvatarReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeAvatarReq::CopyFrom(const ChangeAvatarReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChangeAvatarReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeAvatarReq::IsInitialized() const {
  return true;
}

void ChangeAvatarReq::Swap(ChangeAvatarReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeAvatarReq::InternalSwap(ChangeAvatarReq* other) {
  using std::swap;
  swap(guid_, other->guid_);
  swap(skill_id_, other->skill_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeAvatarReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeAvatarReq

// uint64 guid = 1;
void ChangeAvatarReq::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ChangeAvatarReq::guid() const {
  // @@protoc_insertion_point(field_get:proto.ChangeAvatarReq.guid)
  return guid_;
}
void ChangeAvatarReq::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:proto.ChangeAvatarReq.guid)
}

// uint32 skill_id = 2;
void ChangeAvatarReq::clear_skill_id() {
  skill_id_ = 0u;
}
::google::protobuf::uint32 ChangeAvatarReq::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.ChangeAvatarReq.skill_id)
  return skill_id_;
}
void ChangeAvatarReq::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChangeAvatarReq.skill_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeAvatarRsp::kRetcodeFieldNumber;
const int ChangeAvatarRsp::kCurGuidFieldNumber;
const int ChangeAvatarRsp::kSkillIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeAvatarRsp::ChangeAvatarRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChangeAvatarRsp)
}
ChangeAvatarRsp::ChangeAvatarRsp(const ChangeAvatarRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cur_guid_, &from.cur_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&skill_id_) -
    reinterpret_cast<char*>(&cur_guid_)) + sizeof(skill_id_));
  // @@protoc_insertion_point(copy_constructor:proto.ChangeAvatarRsp)
}

void ChangeAvatarRsp::SharedCtor() {
  ::memset(&cur_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&cur_guid_)) + sizeof(skill_id_));
  _cached_size_ = 0;
}

ChangeAvatarRsp::~ChangeAvatarRsp() {
  // @@protoc_insertion_point(destructor:proto.ChangeAvatarRsp)
  SharedDtor();
}

void ChangeAvatarRsp::SharedDtor() {
}

void ChangeAvatarRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeAvatarRsp::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChangeAvatarRsp& ChangeAvatarRsp::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChangeAvatarRsp* ChangeAvatarRsp::New(::google::protobuf::Arena* arena) const {
  ChangeAvatarRsp* n = new ChangeAvatarRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeAvatarRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChangeAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cur_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&cur_guid_)) + sizeof(skill_id_));
  _internal_metadata_.Clear();
}

bool ChangeAvatarRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChangeAvatarRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 cur_guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 skill_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChangeAvatarRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChangeAvatarRsp)
  return false;
#undef DO_
}

void ChangeAvatarRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChangeAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint64 cur_guid = 2;
  if (this->cur_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cur_guid(), output);
  }

  // uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChangeAvatarRsp)
}

::google::protobuf::uint8* ChangeAvatarRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChangeAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint64 cur_guid = 2;
  if (this->cur_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cur_guid(), target);
  }

  // uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChangeAvatarRsp)
  return target;
}

size_t ChangeAvatarRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChangeAvatarRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 cur_guid = 2;
  if (this->cur_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cur_guid());
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeAvatarRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChangeAvatarRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeAvatarRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeAvatarRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChangeAvatarRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChangeAvatarRsp)
    MergeFrom(*source);
  }
}

void ChangeAvatarRsp::MergeFrom(const ChangeAvatarRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChangeAvatarRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cur_guid() != 0) {
    set_cur_guid(from.cur_guid());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
}

void ChangeAvatarRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChangeAvatarRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeAvatarRsp::CopyFrom(const ChangeAvatarRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChangeAvatarRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeAvatarRsp::IsInitialized() const {
  return true;
}

void ChangeAvatarRsp::Swap(ChangeAvatarRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeAvatarRsp::InternalSwap(ChangeAvatarRsp* other) {
  using std::swap;
  swap(cur_guid_, other->cur_guid_);
  swap(retcode_, other->retcode_);
  swap(skill_id_, other->skill_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeAvatarRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeAvatarRsp

// int32 retcode = 1;
void ChangeAvatarRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 ChangeAvatarRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ChangeAvatarRsp.retcode)
  return retcode_;
}
void ChangeAvatarRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ChangeAvatarRsp.retcode)
}

// uint64 cur_guid = 2;
void ChangeAvatarRsp::clear_cur_guid() {
  cur_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ChangeAvatarRsp::cur_guid() const {
  // @@protoc_insertion_point(field_get:proto.ChangeAvatarRsp.cur_guid)
  return cur_guid_;
}
void ChangeAvatarRsp::set_cur_guid(::google::protobuf::uint64 value) {
  
  cur_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.ChangeAvatarRsp.cur_guid)
}

// uint32 skill_id = 3;
void ChangeAvatarRsp::clear_skill_id() {
  skill_id_ = 0u;
}
::google::protobuf::uint32 ChangeAvatarRsp::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.ChangeAvatarRsp.skill_id)
  return skill_id_;
}
void ChangeAvatarRsp::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChangeAvatarRsp.skill_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarPromoteReq::kGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarPromoteReq::AvatarPromoteReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarPromoteReq)
}
AvatarPromoteReq::AvatarPromoteReq(const AvatarPromoteReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guid_ = from.guid_;
  // @@protoc_insertion_point(copy_constructor:proto.AvatarPromoteReq)
}

void AvatarPromoteReq::SharedCtor() {
  guid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

AvatarPromoteReq::~AvatarPromoteReq() {
  // @@protoc_insertion_point(destructor:proto.AvatarPromoteReq)
  SharedDtor();
}

void AvatarPromoteReq::SharedDtor() {
}

void AvatarPromoteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarPromoteReq::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarPromoteReq& AvatarPromoteReq::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarPromoteReq* AvatarPromoteReq::New(::google::protobuf::Arena* arena) const {
  AvatarPromoteReq* n = new AvatarPromoteReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarPromoteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarPromoteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool AvatarPromoteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarPromoteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarPromoteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarPromoteReq)
  return false;
#undef DO_
}

void AvatarPromoteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarPromoteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarPromoteReq)
}

::google::protobuf::uint8* AvatarPromoteReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarPromoteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarPromoteReq)
  return target;
}

size_t AvatarPromoteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarPromoteReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 guid = 1;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarPromoteReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarPromoteReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarPromoteReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarPromoteReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarPromoteReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarPromoteReq)
    MergeFrom(*source);
  }
}

void AvatarPromoteReq::MergeFrom(const AvatarPromoteReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarPromoteReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guid() != 0) {
    set_guid(from.guid());
  }
}

void AvatarPromoteReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarPromoteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarPromoteReq::CopyFrom(const AvatarPromoteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarPromoteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarPromoteReq::IsInitialized() const {
  return true;
}

void AvatarPromoteReq::Swap(AvatarPromoteReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarPromoteReq::InternalSwap(AvatarPromoteReq* other) {
  using std::swap;
  swap(guid_, other->guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarPromoteReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarPromoteReq

// uint64 guid = 1;
void AvatarPromoteReq::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AvatarPromoteReq::guid() const {
  // @@protoc_insertion_point(field_get:proto.AvatarPromoteReq.guid)
  return guid_;
}
void AvatarPromoteReq::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarPromoteReq.guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarPromoteRsp::kRetcodeFieldNumber;
const int AvatarPromoteRsp::kGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarPromoteRsp::AvatarPromoteRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarPromoteRsp)
}
AvatarPromoteRsp::AvatarPromoteRsp(const AvatarPromoteRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:proto.AvatarPromoteRsp)
}

void AvatarPromoteRsp::SharedCtor() {
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

AvatarPromoteRsp::~AvatarPromoteRsp() {
  // @@protoc_insertion_point(destructor:proto.AvatarPromoteRsp)
  SharedDtor();
}

void AvatarPromoteRsp::SharedDtor() {
}

void AvatarPromoteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarPromoteRsp::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarPromoteRsp& AvatarPromoteRsp::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarPromoteRsp* AvatarPromoteRsp::New(::google::protobuf::Arena* arena) const {
  AvatarPromoteRsp* n = new AvatarPromoteRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarPromoteRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarPromoteRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(retcode_));
  _internal_metadata_.Clear();
}

bool AvatarPromoteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarPromoteRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarPromoteRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarPromoteRsp)
  return false;
#undef DO_
}

void AvatarPromoteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarPromoteRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarPromoteRsp)
}

::google::protobuf::uint8* AvatarPromoteRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarPromoteRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarPromoteRsp)
  return target;
}

size_t AvatarPromoteRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarPromoteRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 guid = 2;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarPromoteRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarPromoteRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarPromoteRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarPromoteRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarPromoteRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarPromoteRsp)
    MergeFrom(*source);
  }
}

void AvatarPromoteRsp::MergeFrom(const AvatarPromoteRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarPromoteRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void AvatarPromoteRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarPromoteRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarPromoteRsp::CopyFrom(const AvatarPromoteRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarPromoteRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarPromoteRsp::IsInitialized() const {
  return true;
}

void AvatarPromoteRsp::Swap(AvatarPromoteRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarPromoteRsp::InternalSwap(AvatarPromoteRsp* other) {
  using std::swap;
  swap(guid_, other->guid_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarPromoteRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarPromoteRsp

// int32 retcode = 1;
void AvatarPromoteRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 AvatarPromoteRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.AvatarPromoteRsp.retcode)
  return retcode_;
}
void AvatarPromoteRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarPromoteRsp.retcode)
}

// uint64 guid = 2;
void AvatarPromoteRsp::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AvatarPromoteRsp::guid() const {
  // @@protoc_insertion_point(field_get:proto.AvatarPromoteRsp.guid)
  return guid_;
}
void AvatarPromoteRsp::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarPromoteRsp.guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpringUseReq::kGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpringUseReq::SpringUseReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SpringUseReq)
}
SpringUseReq::SpringUseReq(const SpringUseReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guid_ = from.guid_;
  // @@protoc_insertion_point(copy_constructor:proto.SpringUseReq)
}

void SpringUseReq::SharedCtor() {
  guid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

SpringUseReq::~SpringUseReq() {
  // @@protoc_insertion_point(destructor:proto.SpringUseReq)
  SharedDtor();
}

void SpringUseReq::SharedDtor() {
}

void SpringUseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpringUseReq::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpringUseReq& SpringUseReq::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpringUseReq* SpringUseReq::New(::google::protobuf::Arena* arena) const {
  SpringUseReq* n = new SpringUseReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpringUseReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SpringUseReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool SpringUseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SpringUseReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SpringUseReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SpringUseReq)
  return false;
#undef DO_
}

void SpringUseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SpringUseReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SpringUseReq)
}

::google::protobuf::uint8* SpringUseReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SpringUseReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SpringUseReq)
  return target;
}

size_t SpringUseReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SpringUseReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 guid = 1;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpringUseReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SpringUseReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SpringUseReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpringUseReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SpringUseReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SpringUseReq)
    MergeFrom(*source);
  }
}

void SpringUseReq::MergeFrom(const SpringUseReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SpringUseReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guid() != 0) {
    set_guid(from.guid());
  }
}

void SpringUseReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SpringUseReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpringUseReq::CopyFrom(const SpringUseReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SpringUseReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpringUseReq::IsInitialized() const {
  return true;
}

void SpringUseReq::Swap(SpringUseReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpringUseReq::InternalSwap(SpringUseReq* other) {
  using std::swap;
  swap(guid_, other->guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpringUseReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpringUseReq

// uint64 guid = 1;
void SpringUseReq::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SpringUseReq::guid() const {
  // @@protoc_insertion_point(field_get:proto.SpringUseReq.guid)
  return guid_;
}
void SpringUseReq::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:proto.SpringUseReq.guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpringUseRsp::kRetcodeFieldNumber;
const int SpringUseRsp::kGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpringUseRsp::SpringUseRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SpringUseRsp)
}
SpringUseRsp::SpringUseRsp(const SpringUseRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:proto.SpringUseRsp)
}

void SpringUseRsp::SharedCtor() {
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

SpringUseRsp::~SpringUseRsp() {
  // @@protoc_insertion_point(destructor:proto.SpringUseRsp)
  SharedDtor();
}

void SpringUseRsp::SharedDtor() {
}

void SpringUseRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpringUseRsp::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpringUseRsp& SpringUseRsp::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpringUseRsp* SpringUseRsp::New(::google::protobuf::Arena* arena) const {
  SpringUseRsp* n = new SpringUseRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpringUseRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SpringUseRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(retcode_));
  _internal_metadata_.Clear();
}

bool SpringUseRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SpringUseRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SpringUseRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SpringUseRsp)
  return false;
#undef DO_
}

void SpringUseRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SpringUseRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SpringUseRsp)
}

::google::protobuf::uint8* SpringUseRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SpringUseRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SpringUseRsp)
  return target;
}

size_t SpringUseRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SpringUseRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 guid = 2;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpringUseRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SpringUseRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SpringUseRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpringUseRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SpringUseRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SpringUseRsp)
    MergeFrom(*source);
  }
}

void SpringUseRsp::MergeFrom(const SpringUseRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SpringUseRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void SpringUseRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SpringUseRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpringUseRsp::CopyFrom(const SpringUseRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SpringUseRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpringUseRsp::IsInitialized() const {
  return true;
}

void SpringUseRsp::Swap(SpringUseRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpringUseRsp::InternalSwap(SpringUseRsp* other) {
  using std::swap;
  swap(guid_, other->guid_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpringUseRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpringUseRsp

// int32 retcode = 1;
void SpringUseRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 SpringUseRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.SpringUseRsp.retcode)
  return retcode_;
}
void SpringUseRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.SpringUseRsp.retcode)
}

// uint64 guid = 2;
void SpringUseRsp::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SpringUseRsp::guid() const {
  // @@protoc_insertion_point(field_get:proto.SpringUseRsp.guid)
  return guid_;
}
void SpringUseRsp::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:proto.SpringUseRsp.guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RefreshBackgroundAvatarReq::RefreshBackgroundAvatarReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.RefreshBackgroundAvatarReq)
}
RefreshBackgroundAvatarReq::RefreshBackgroundAvatarReq(const RefreshBackgroundAvatarReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.RefreshBackgroundAvatarReq)
}

void RefreshBackgroundAvatarReq::SharedCtor() {
  _cached_size_ = 0;
}

RefreshBackgroundAvatarReq::~RefreshBackgroundAvatarReq() {
  // @@protoc_insertion_point(destructor:proto.RefreshBackgroundAvatarReq)
  SharedDtor();
}

void RefreshBackgroundAvatarReq::SharedDtor() {
}

void RefreshBackgroundAvatarReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshBackgroundAvatarReq::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RefreshBackgroundAvatarReq& RefreshBackgroundAvatarReq::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

RefreshBackgroundAvatarReq* RefreshBackgroundAvatarReq::New(::google::protobuf::Arena* arena) const {
  RefreshBackgroundAvatarReq* n = new RefreshBackgroundAvatarReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RefreshBackgroundAvatarReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RefreshBackgroundAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool RefreshBackgroundAvatarReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.RefreshBackgroundAvatarReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.RefreshBackgroundAvatarReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.RefreshBackgroundAvatarReq)
  return false;
#undef DO_
}

void RefreshBackgroundAvatarReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.RefreshBackgroundAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.RefreshBackgroundAvatarReq)
}

::google::protobuf::uint8* RefreshBackgroundAvatarReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.RefreshBackgroundAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RefreshBackgroundAvatarReq)
  return target;
}

size_t RefreshBackgroundAvatarReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RefreshBackgroundAvatarReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshBackgroundAvatarReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.RefreshBackgroundAvatarReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RefreshBackgroundAvatarReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RefreshBackgroundAvatarReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.RefreshBackgroundAvatarReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.RefreshBackgroundAvatarReq)
    MergeFrom(*source);
  }
}

void RefreshBackgroundAvatarReq::MergeFrom(const RefreshBackgroundAvatarReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RefreshBackgroundAvatarReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RefreshBackgroundAvatarReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.RefreshBackgroundAvatarReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshBackgroundAvatarReq::CopyFrom(const RefreshBackgroundAvatarReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RefreshBackgroundAvatarReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshBackgroundAvatarReq::IsInitialized() const {
  return true;
}

void RefreshBackgroundAvatarReq::Swap(RefreshBackgroundAvatarReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RefreshBackgroundAvatarReq::InternalSwap(RefreshBackgroundAvatarReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RefreshBackgroundAvatarReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RefreshBackgroundAvatarReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

RefreshBackgroundAvatarRsp::RefreshBackgroundAvatarRsp_HpFullTimeMapEntry::RefreshBackgroundAvatarRsp_HpFullTimeMapEntry() {}
RefreshBackgroundAvatarRsp::RefreshBackgroundAvatarRsp_HpFullTimeMapEntry::RefreshBackgroundAvatarRsp_HpFullTimeMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata RefreshBackgroundAvatarRsp::RefreshBackgroundAvatarRsp_HpFullTimeMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[14];
}
void RefreshBackgroundAvatarRsp::RefreshBackgroundAvatarRsp_HpFullTimeMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void RefreshBackgroundAvatarRsp::RefreshBackgroundAvatarRsp_HpFullTimeMapEntry::MergeFrom(const RefreshBackgroundAvatarRsp_HpFullTimeMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RefreshBackgroundAvatarRsp::kRetcodeFieldNumber;
const int RefreshBackgroundAvatarRsp::kHpFullTimeMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RefreshBackgroundAvatarRsp::RefreshBackgroundAvatarRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.RefreshBackgroundAvatarRsp)
}
RefreshBackgroundAvatarRsp::RefreshBackgroundAvatarRsp(const RefreshBackgroundAvatarRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hp_full_time_map_.MergeFrom(from.hp_full_time_map_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.RefreshBackgroundAvatarRsp)
}

void RefreshBackgroundAvatarRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

RefreshBackgroundAvatarRsp::~RefreshBackgroundAvatarRsp() {
  // @@protoc_insertion_point(destructor:proto.RefreshBackgroundAvatarRsp)
  SharedDtor();
}

void RefreshBackgroundAvatarRsp::SharedDtor() {
}

void RefreshBackgroundAvatarRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshBackgroundAvatarRsp::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RefreshBackgroundAvatarRsp& RefreshBackgroundAvatarRsp::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

RefreshBackgroundAvatarRsp* RefreshBackgroundAvatarRsp::New(::google::protobuf::Arena* arena) const {
  RefreshBackgroundAvatarRsp* n = new RefreshBackgroundAvatarRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RefreshBackgroundAvatarRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RefreshBackgroundAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hp_full_time_map_.Clear();
  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool RefreshBackgroundAvatarRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.RefreshBackgroundAvatarRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint64, uint32> hp_full_time_map = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          RefreshBackgroundAvatarRsp_HpFullTimeMapEntry::Parser< ::google::protobuf::internal::MapField<
              RefreshBackgroundAvatarRsp_HpFullTimeMapEntry,
              ::google::protobuf::uint64, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::uint32 > > parser(&hp_full_time_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.RefreshBackgroundAvatarRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.RefreshBackgroundAvatarRsp)
  return false;
#undef DO_
}

void RefreshBackgroundAvatarRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.RefreshBackgroundAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // map<uint64, uint32> hp_full_time_map = 2;
  if (!this->hp_full_time_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->hp_full_time_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->hp_full_time_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::uint32 >::const_iterator
          it = this->hp_full_time_map().begin();
          it != this->hp_full_time_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<RefreshBackgroundAvatarRsp_HpFullTimeMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(hp_full_time_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<RefreshBackgroundAvatarRsp_HpFullTimeMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::uint32 >::const_iterator
          it = this->hp_full_time_map().begin();
          it != this->hp_full_time_map().end(); ++it) {
        entry.reset(hp_full_time_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.RefreshBackgroundAvatarRsp)
}

::google::protobuf::uint8* RefreshBackgroundAvatarRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.RefreshBackgroundAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // map<uint64, uint32> hp_full_time_map = 2;
  if (!this->hp_full_time_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->hp_full_time_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->hp_full_time_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::uint32 >::const_iterator
          it = this->hp_full_time_map().begin();
          it != this->hp_full_time_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<RefreshBackgroundAvatarRsp_HpFullTimeMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(hp_full_time_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<RefreshBackgroundAvatarRsp_HpFullTimeMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::uint32 >::const_iterator
          it = this->hp_full_time_map().begin();
          it != this->hp_full_time_map().end(); ++it) {
        entry.reset(hp_full_time_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RefreshBackgroundAvatarRsp)
  return target;
}

size_t RefreshBackgroundAvatarRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RefreshBackgroundAvatarRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint64, uint32> hp_full_time_map = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->hp_full_time_map_size());
  {
    ::google::protobuf::scoped_ptr<RefreshBackgroundAvatarRsp_HpFullTimeMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::uint32 >::const_iterator
        it = this->hp_full_time_map().begin();
        it != this->hp_full_time_map().end(); ++it) {
      entry.reset(hp_full_time_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshBackgroundAvatarRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.RefreshBackgroundAvatarRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const RefreshBackgroundAvatarRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RefreshBackgroundAvatarRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.RefreshBackgroundAvatarRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.RefreshBackgroundAvatarRsp)
    MergeFrom(*source);
  }
}

void RefreshBackgroundAvatarRsp::MergeFrom(const RefreshBackgroundAvatarRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RefreshBackgroundAvatarRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hp_full_time_map_.MergeFrom(from.hp_full_time_map_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void RefreshBackgroundAvatarRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.RefreshBackgroundAvatarRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshBackgroundAvatarRsp::CopyFrom(const RefreshBackgroundAvatarRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RefreshBackgroundAvatarRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshBackgroundAvatarRsp::IsInitialized() const {
  return true;
}

void RefreshBackgroundAvatarRsp::Swap(RefreshBackgroundAvatarRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RefreshBackgroundAvatarRsp::InternalSwap(RefreshBackgroundAvatarRsp* other) {
  using std::swap;
  hp_full_time_map_.Swap(&other->hp_full_time_map_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RefreshBackgroundAvatarRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RefreshBackgroundAvatarRsp

// int32 retcode = 1;
void RefreshBackgroundAvatarRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 RefreshBackgroundAvatarRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.RefreshBackgroundAvatarRsp.retcode)
  return retcode_;
}
void RefreshBackgroundAvatarRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.RefreshBackgroundAvatarRsp.retcode)
}

// map<uint64, uint32> hp_full_time_map = 2;
int RefreshBackgroundAvatarRsp::hp_full_time_map_size() const {
  return hp_full_time_map_.size();
}
void RefreshBackgroundAvatarRsp::clear_hp_full_time_map() {
  hp_full_time_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::uint32 >&
RefreshBackgroundAvatarRsp::hp_full_time_map() const {
  // @@protoc_insertion_point(field_map:proto.RefreshBackgroundAvatarRsp.hp_full_time_map)
  return hp_full_time_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::uint32 >*
RefreshBackgroundAvatarRsp::mutable_hp_full_time_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.RefreshBackgroundAvatarRsp.hp_full_time_map)
  return hp_full_time_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

AvatarTeamUpdateNotify::AvatarTeamUpdateNotify_AvatarTeamMapEntry::AvatarTeamUpdateNotify_AvatarTeamMapEntry() {}
AvatarTeamUpdateNotify::AvatarTeamUpdateNotify_AvatarTeamMapEntry::AvatarTeamUpdateNotify_AvatarTeamMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata AvatarTeamUpdateNotify::AvatarTeamUpdateNotify_AvatarTeamMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[16];
}
void AvatarTeamUpdateNotify::AvatarTeamUpdateNotify_AvatarTeamMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void AvatarTeamUpdateNotify::AvatarTeamUpdateNotify_AvatarTeamMapEntry::MergeFrom(const AvatarTeamUpdateNotify_AvatarTeamMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarTeamUpdateNotify::kAvatarTeamMapFieldNumber;
const int AvatarTeamUpdateNotify::kTempAvatarGuidListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarTeamUpdateNotify::AvatarTeamUpdateNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarTeamUpdateNotify)
}
AvatarTeamUpdateNotify::AvatarTeamUpdateNotify(const AvatarTeamUpdateNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      temp_avatar_guid_list_(from.temp_avatar_guid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avatar_team_map_.MergeFrom(from.avatar_team_map_);
  // @@protoc_insertion_point(copy_constructor:proto.AvatarTeamUpdateNotify)
}

void AvatarTeamUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
}

AvatarTeamUpdateNotify::~AvatarTeamUpdateNotify() {
  // @@protoc_insertion_point(destructor:proto.AvatarTeamUpdateNotify)
  SharedDtor();
}

void AvatarTeamUpdateNotify::SharedDtor() {
}

void AvatarTeamUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarTeamUpdateNotify::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarTeamUpdateNotify& AvatarTeamUpdateNotify::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarTeamUpdateNotify* AvatarTeamUpdateNotify::New(::google::protobuf::Arena* arena) const {
  AvatarTeamUpdateNotify* n = new AvatarTeamUpdateNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarTeamUpdateNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarTeamUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_team_map_.Clear();
  temp_avatar_guid_list_.Clear();
  _internal_metadata_.Clear();
}

bool AvatarTeamUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarTeamUpdateNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint32, .proto.AvatarTeam> avatar_team_map = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          AvatarTeamUpdateNotify_AvatarTeamMapEntry::Parser< ::google::protobuf::internal::MapField<
              AvatarTeamUpdateNotify_AvatarTeamMapEntry,
              ::google::protobuf::uint32, ::proto::AvatarTeam,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarTeam > > parser(&avatar_team_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 temp_avatar_guid_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_temp_avatar_guid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_temp_avatar_guid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarTeamUpdateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarTeamUpdateNotify)
  return false;
#undef DO_
}

void AvatarTeamUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarTeamUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .proto.AvatarTeam> avatar_team_map = 1;
  if (!this->avatar_team_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarTeam >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->avatar_team_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->avatar_team_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarTeam >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarTeam >::const_iterator
          it = this->avatar_team_map().begin();
          it != this->avatar_team_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarTeamUpdateNotify_AvatarTeamMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(avatar_team_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarTeamUpdateNotify_AvatarTeamMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarTeam >::const_iterator
          it = this->avatar_team_map().begin();
          it != this->avatar_team_map().end(); ++it) {
        entry.reset(avatar_team_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  // repeated uint64 temp_avatar_guid_list = 2;
  if (this->temp_avatar_guid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _temp_avatar_guid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->temp_avatar_guid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->temp_avatar_guid_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarTeamUpdateNotify)
}

::google::protobuf::uint8* AvatarTeamUpdateNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarTeamUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .proto.AvatarTeam> avatar_team_map = 1;
  if (!this->avatar_team_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarTeam >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->avatar_team_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->avatar_team_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarTeam >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarTeam >::const_iterator
          it = this->avatar_team_map().begin();
          it != this->avatar_team_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarTeamUpdateNotify_AvatarTeamMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(avatar_team_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarTeamUpdateNotify_AvatarTeamMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarTeam >::const_iterator
          it = this->avatar_team_map().begin();
          it != this->avatar_team_map().end(); ++it) {
        entry.reset(avatar_team_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  // repeated uint64 temp_avatar_guid_list = 2;
  if (this->temp_avatar_guid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _temp_avatar_guid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->temp_avatar_guid_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarTeamUpdateNotify)
  return target;
}

size_t AvatarTeamUpdateNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarTeamUpdateNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, .proto.AvatarTeam> avatar_team_map = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->avatar_team_map_size());
  {
    ::google::protobuf::scoped_ptr<AvatarTeamUpdateNotify_AvatarTeamMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarTeam >::const_iterator
        it = this->avatar_team_map().begin();
        it != this->avatar_team_map().end(); ++it) {
      entry.reset(avatar_team_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated uint64 temp_avatar_guid_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->temp_avatar_guid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _temp_avatar_guid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarTeamUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarTeamUpdateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarTeamUpdateNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarTeamUpdateNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarTeamUpdateNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarTeamUpdateNotify)
    MergeFrom(*source);
  }
}

void AvatarTeamUpdateNotify::MergeFrom(const AvatarTeamUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarTeamUpdateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatar_team_map_.MergeFrom(from.avatar_team_map_);
  temp_avatar_guid_list_.MergeFrom(from.temp_avatar_guid_list_);
}

void AvatarTeamUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarTeamUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarTeamUpdateNotify::CopyFrom(const AvatarTeamUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarTeamUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarTeamUpdateNotify::IsInitialized() const {
  return true;
}

void AvatarTeamUpdateNotify::Swap(AvatarTeamUpdateNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarTeamUpdateNotify::InternalSwap(AvatarTeamUpdateNotify* other) {
  using std::swap;
  avatar_team_map_.Swap(&other->avatar_team_map_);
  temp_avatar_guid_list_.InternalSwap(&other->temp_avatar_guid_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarTeamUpdateNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarTeamUpdateNotify

// map<uint32, .proto.AvatarTeam> avatar_team_map = 1;
int AvatarTeamUpdateNotify::avatar_team_map_size() const {
  return avatar_team_map_.size();
}
void AvatarTeamUpdateNotify::clear_avatar_team_map() {
  avatar_team_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarTeam >&
AvatarTeamUpdateNotify::avatar_team_map() const {
  // @@protoc_insertion_point(field_map:proto.AvatarTeamUpdateNotify.avatar_team_map)
  return avatar_team_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarTeam >*
AvatarTeamUpdateNotify::mutable_avatar_team_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.AvatarTeamUpdateNotify.avatar_team_map)
  return avatar_team_map_.MutableMap();
}

// repeated uint64 temp_avatar_guid_list = 2;
int AvatarTeamUpdateNotify::temp_avatar_guid_list_size() const {
  return temp_avatar_guid_list_.size();
}
void AvatarTeamUpdateNotify::clear_temp_avatar_guid_list() {
  temp_avatar_guid_list_.Clear();
}
::google::protobuf::uint64 AvatarTeamUpdateNotify::temp_avatar_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AvatarTeamUpdateNotify.temp_avatar_guid_list)
  return temp_avatar_guid_list_.Get(index);
}
void AvatarTeamUpdateNotify::set_temp_avatar_guid_list(int index, ::google::protobuf::uint64 value) {
  temp_avatar_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.AvatarTeamUpdateNotify.temp_avatar_guid_list)
}
void AvatarTeamUpdateNotify::add_temp_avatar_guid_list(::google::protobuf::uint64 value) {
  temp_avatar_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.AvatarTeamUpdateNotify.temp_avatar_guid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AvatarTeamUpdateNotify::temp_avatar_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.AvatarTeamUpdateNotify.temp_avatar_guid_list)
  return temp_avatar_guid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AvatarTeamUpdateNotify::mutable_temp_avatar_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AvatarTeamUpdateNotify.temp_avatar_guid_list)
  return &temp_avatar_guid_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

AvatarDataNotify::AvatarDataNotify_AvatarTeamMapEntry::AvatarDataNotify_AvatarTeamMapEntry() {}
AvatarDataNotify::AvatarDataNotify_AvatarTeamMapEntry::AvatarDataNotify_AvatarTeamMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata AvatarDataNotify::AvatarDataNotify_AvatarTeamMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[18];
}
void AvatarDataNotify::AvatarDataNotify_AvatarTeamMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void AvatarDataNotify::AvatarDataNotify_AvatarTeamMapEntry::MergeFrom(const AvatarDataNotify_AvatarTeamMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarDataNotify::kAvatarListFieldNumber;
const int AvatarDataNotify::kAvatarTeamMapFieldNumber;
const int AvatarDataNotify::kCurAvatarTeamIdFieldNumber;
const int AvatarDataNotify::kChooseAvatarGuidFieldNumber;
const int AvatarDataNotify::kTempAvatarGuidListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarDataNotify::AvatarDataNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarDataNotify)
}
AvatarDataNotify::AvatarDataNotify(const AvatarDataNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      avatar_list_(from.avatar_list_),
      temp_avatar_guid_list_(from.temp_avatar_guid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avatar_team_map_.MergeFrom(from.avatar_team_map_);
  ::memcpy(&choose_avatar_guid_, &from.choose_avatar_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_avatar_team_id_) -
    reinterpret_cast<char*>(&choose_avatar_guid_)) + sizeof(cur_avatar_team_id_));
  // @@protoc_insertion_point(copy_constructor:proto.AvatarDataNotify)
}

void AvatarDataNotify::SharedCtor() {
  ::memset(&choose_avatar_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_avatar_team_id_) -
      reinterpret_cast<char*>(&choose_avatar_guid_)) + sizeof(cur_avatar_team_id_));
  _cached_size_ = 0;
}

AvatarDataNotify::~AvatarDataNotify() {
  // @@protoc_insertion_point(destructor:proto.AvatarDataNotify)
  SharedDtor();
}

void AvatarDataNotify::SharedDtor() {
}

void AvatarDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarDataNotify::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarDataNotify& AvatarDataNotify::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarDataNotify* AvatarDataNotify::New(::google::protobuf::Arena* arena) const {
  AvatarDataNotify* n = new AvatarDataNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarDataNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_list_.Clear();
  avatar_team_map_.Clear();
  temp_avatar_guid_list_.Clear();
  ::memset(&choose_avatar_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_avatar_team_id_) -
      reinterpret_cast<char*>(&choose_avatar_guid_)) + sizeof(cur_avatar_team_id_));
  _internal_metadata_.Clear();
}

bool AvatarDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarDataNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.AvatarInfo avatar_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_avatar_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .proto.AvatarTeam> avatar_team_map = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          AvatarDataNotify_AvatarTeamMapEntry::Parser< ::google::protobuf::internal::MapField<
              AvatarDataNotify_AvatarTeamMapEntry,
              ::google::protobuf::uint32, ::proto::AvatarTeam,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarTeam > > parser(&avatar_team_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_avatar_team_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_avatar_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 choose_avatar_guid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &choose_avatar_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 temp_avatar_guid_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_temp_avatar_guid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 42u, input, this->mutable_temp_avatar_guid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarDataNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarDataNotify)
  return false;
#undef DO_
}

void AvatarDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.AvatarInfo avatar_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->avatar_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->avatar_list(static_cast<int>(i)), output);
  }

  // map<uint32, .proto.AvatarTeam> avatar_team_map = 2;
  if (!this->avatar_team_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarTeam >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->avatar_team_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->avatar_team_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarTeam >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarTeam >::const_iterator
          it = this->avatar_team_map().begin();
          it != this->avatar_team_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarDataNotify_AvatarTeamMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(avatar_team_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarDataNotify_AvatarTeamMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarTeam >::const_iterator
          it = this->avatar_team_map().begin();
          it != this->avatar_team_map().end(); ++it) {
        entry.reset(avatar_team_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    }
  }

  // uint32 cur_avatar_team_id = 3;
  if (this->cur_avatar_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_avatar_team_id(), output);
  }

  // uint64 choose_avatar_guid = 4;
  if (this->choose_avatar_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->choose_avatar_guid(), output);
  }

  // repeated uint64 temp_avatar_guid_list = 5;
  if (this->temp_avatar_guid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _temp_avatar_guid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->temp_avatar_guid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->temp_avatar_guid_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarDataNotify)
}

::google::protobuf::uint8* AvatarDataNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.AvatarInfo avatar_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->avatar_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->avatar_list(static_cast<int>(i)), deterministic, target);
  }

  // map<uint32, .proto.AvatarTeam> avatar_team_map = 2;
  if (!this->avatar_team_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarTeam >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->avatar_team_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->avatar_team_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarTeam >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarTeam >::const_iterator
          it = this->avatar_team_map().begin();
          it != this->avatar_team_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarDataNotify_AvatarTeamMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(avatar_team_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarDataNotify_AvatarTeamMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarTeam >::const_iterator
          it = this->avatar_team_map().begin();
          it != this->avatar_team_map().end(); ++it) {
        entry.reset(avatar_team_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    }
  }

  // uint32 cur_avatar_team_id = 3;
  if (this->cur_avatar_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_avatar_team_id(), target);
  }

  // uint64 choose_avatar_guid = 4;
  if (this->choose_avatar_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->choose_avatar_guid(), target);
  }

  // repeated uint64 temp_avatar_guid_list = 5;
  if (this->temp_avatar_guid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _temp_avatar_guid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->temp_avatar_guid_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarDataNotify)
  return target;
}

size_t AvatarDataNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarDataNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.AvatarInfo avatar_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->avatar_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatar_list(static_cast<int>(i)));
    }
  }

  // map<uint32, .proto.AvatarTeam> avatar_team_map = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->avatar_team_map_size());
  {
    ::google::protobuf::scoped_ptr<AvatarDataNotify_AvatarTeamMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarTeam >::const_iterator
        it = this->avatar_team_map().begin();
        it != this->avatar_team_map().end(); ++it) {
      entry.reset(avatar_team_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated uint64 temp_avatar_guid_list = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->temp_avatar_guid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _temp_avatar_guid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint64 choose_avatar_guid = 4;
  if (this->choose_avatar_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->choose_avatar_guid());
  }

  // uint32 cur_avatar_team_id = 3;
  if (this->cur_avatar_team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_avatar_team_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarDataNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarDataNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarDataNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarDataNotify)
    MergeFrom(*source);
  }
}

void AvatarDataNotify::MergeFrom(const AvatarDataNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatar_list_.MergeFrom(from.avatar_list_);
  avatar_team_map_.MergeFrom(from.avatar_team_map_);
  temp_avatar_guid_list_.MergeFrom(from.temp_avatar_guid_list_);
  if (from.choose_avatar_guid() != 0) {
    set_choose_avatar_guid(from.choose_avatar_guid());
  }
  if (from.cur_avatar_team_id() != 0) {
    set_cur_avatar_team_id(from.cur_avatar_team_id());
  }
}

void AvatarDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarDataNotify::CopyFrom(const AvatarDataNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarDataNotify::IsInitialized() const {
  return true;
}

void AvatarDataNotify::Swap(AvatarDataNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarDataNotify::InternalSwap(AvatarDataNotify* other) {
  using std::swap;
  avatar_list_.InternalSwap(&other->avatar_list_);
  avatar_team_map_.Swap(&other->avatar_team_map_);
  temp_avatar_guid_list_.InternalSwap(&other->temp_avatar_guid_list_);
  swap(choose_avatar_guid_, other->choose_avatar_guid_);
  swap(cur_avatar_team_id_, other->cur_avatar_team_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarDataNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarDataNotify

// repeated .proto.AvatarInfo avatar_list = 1;
int AvatarDataNotify::avatar_list_size() const {
  return avatar_list_.size();
}
void AvatarDataNotify::clear_avatar_list() {
  avatar_list_.Clear();
}
const ::proto::AvatarInfo& AvatarDataNotify::avatar_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AvatarDataNotify.avatar_list)
  return avatar_list_.Get(index);
}
::proto::AvatarInfo* AvatarDataNotify::mutable_avatar_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.AvatarDataNotify.avatar_list)
  return avatar_list_.Mutable(index);
}
::proto::AvatarInfo* AvatarDataNotify::add_avatar_list() {
  // @@protoc_insertion_point(field_add:proto.AvatarDataNotify.avatar_list)
  return avatar_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::AvatarInfo >*
AvatarDataNotify::mutable_avatar_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AvatarDataNotify.avatar_list)
  return &avatar_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::AvatarInfo >&
AvatarDataNotify::avatar_list() const {
  // @@protoc_insertion_point(field_list:proto.AvatarDataNotify.avatar_list)
  return avatar_list_;
}

// map<uint32, .proto.AvatarTeam> avatar_team_map = 2;
int AvatarDataNotify::avatar_team_map_size() const {
  return avatar_team_map_.size();
}
void AvatarDataNotify::clear_avatar_team_map() {
  avatar_team_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarTeam >&
AvatarDataNotify::avatar_team_map() const {
  // @@protoc_insertion_point(field_map:proto.AvatarDataNotify.avatar_team_map)
  return avatar_team_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::AvatarTeam >*
AvatarDataNotify::mutable_avatar_team_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.AvatarDataNotify.avatar_team_map)
  return avatar_team_map_.MutableMap();
}

// uint32 cur_avatar_team_id = 3;
void AvatarDataNotify::clear_cur_avatar_team_id() {
  cur_avatar_team_id_ = 0u;
}
::google::protobuf::uint32 AvatarDataNotify::cur_avatar_team_id() const {
  // @@protoc_insertion_point(field_get:proto.AvatarDataNotify.cur_avatar_team_id)
  return cur_avatar_team_id_;
}
void AvatarDataNotify::set_cur_avatar_team_id(::google::protobuf::uint32 value) {
  
  cur_avatar_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarDataNotify.cur_avatar_team_id)
}

// uint64 choose_avatar_guid = 4;
void AvatarDataNotify::clear_choose_avatar_guid() {
  choose_avatar_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AvatarDataNotify::choose_avatar_guid() const {
  // @@protoc_insertion_point(field_get:proto.AvatarDataNotify.choose_avatar_guid)
  return choose_avatar_guid_;
}
void AvatarDataNotify::set_choose_avatar_guid(::google::protobuf::uint64 value) {
  
  choose_avatar_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarDataNotify.choose_avatar_guid)
}

// repeated uint64 temp_avatar_guid_list = 5;
int AvatarDataNotify::temp_avatar_guid_list_size() const {
  return temp_avatar_guid_list_.size();
}
void AvatarDataNotify::clear_temp_avatar_guid_list() {
  temp_avatar_guid_list_.Clear();
}
::google::protobuf::uint64 AvatarDataNotify::temp_avatar_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AvatarDataNotify.temp_avatar_guid_list)
  return temp_avatar_guid_list_.Get(index);
}
void AvatarDataNotify::set_temp_avatar_guid_list(int index, ::google::protobuf::uint64 value) {
  temp_avatar_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.AvatarDataNotify.temp_avatar_guid_list)
}
void AvatarDataNotify::add_temp_avatar_guid_list(::google::protobuf::uint64 value) {
  temp_avatar_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.AvatarDataNotify.temp_avatar_guid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AvatarDataNotify::temp_avatar_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.AvatarDataNotify.temp_avatar_guid_list)
  return temp_avatar_guid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AvatarDataNotify::mutable_temp_avatar_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AvatarDataNotify.temp_avatar_guid_list)
  return &temp_avatar_guid_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarUpgradeReq::kItemIdFieldNumber;
const int AvatarUpgradeReq::kCountFieldNumber;
const int AvatarUpgradeReq::kAvatarGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarUpgradeReq::AvatarUpgradeReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarUpgradeReq)
}
AvatarUpgradeReq::AvatarUpgradeReq(const AvatarUpgradeReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&avatar_guid_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(avatar_guid_));
  // @@protoc_insertion_point(copy_constructor:proto.AvatarUpgradeReq)
}

void AvatarUpgradeReq::SharedCtor() {
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatar_guid_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(avatar_guid_));
  _cached_size_ = 0;
}

AvatarUpgradeReq::~AvatarUpgradeReq() {
  // @@protoc_insertion_point(destructor:proto.AvatarUpgradeReq)
  SharedDtor();
}

void AvatarUpgradeReq::SharedDtor() {
}

void AvatarUpgradeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarUpgradeReq::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarUpgradeReq& AvatarUpgradeReq::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarUpgradeReq* AvatarUpgradeReq::New(::google::protobuf::Arena* arena) const {
  AvatarUpgradeReq* n = new AvatarUpgradeReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarUpgradeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarUpgradeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatar_guid_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(avatar_guid_));
  _internal_metadata_.Clear();
}

bool AvatarUpgradeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarUpgradeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 avatar_guid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &avatar_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarUpgradeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarUpgradeReq)
  return false;
#undef DO_
}

void AvatarUpgradeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarUpgradeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // uint64 avatar_guid = 3;
  if (this->avatar_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->avatar_guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarUpgradeReq)
}

::google::protobuf::uint8* AvatarUpgradeReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarUpgradeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // uint64 avatar_guid = 3;
  if (this->avatar_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->avatar_guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarUpgradeReq)
  return target;
}

size_t AvatarUpgradeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarUpgradeReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_id());
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  // uint64 avatar_guid = 3;
  if (this->avatar_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->avatar_guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarUpgradeReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarUpgradeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarUpgradeReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarUpgradeReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarUpgradeReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarUpgradeReq)
    MergeFrom(*source);
  }
}

void AvatarUpgradeReq::MergeFrom(const AvatarUpgradeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarUpgradeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.item_id() != 0) {
    set_item_id(from.item_id());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.avatar_guid() != 0) {
    set_avatar_guid(from.avatar_guid());
  }
}

void AvatarUpgradeReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarUpgradeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarUpgradeReq::CopyFrom(const AvatarUpgradeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarUpgradeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarUpgradeReq::IsInitialized() const {
  return true;
}

void AvatarUpgradeReq::Swap(AvatarUpgradeReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarUpgradeReq::InternalSwap(AvatarUpgradeReq* other) {
  using std::swap;
  swap(item_id_, other->item_id_);
  swap(count_, other->count_);
  swap(avatar_guid_, other->avatar_guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarUpgradeReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarUpgradeReq

// uint32 item_id = 1;
void AvatarUpgradeReq::clear_item_id() {
  item_id_ = 0u;
}
::google::protobuf::uint32 AvatarUpgradeReq::item_id() const {
  // @@protoc_insertion_point(field_get:proto.AvatarUpgradeReq.item_id)
  return item_id_;
}
void AvatarUpgradeReq::set_item_id(::google::protobuf::uint32 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarUpgradeReq.item_id)
}

// uint32 count = 2;
void AvatarUpgradeReq::clear_count() {
  count_ = 0u;
}
::google::protobuf::uint32 AvatarUpgradeReq::count() const {
  // @@protoc_insertion_point(field_get:proto.AvatarUpgradeReq.count)
  return count_;
}
void AvatarUpgradeReq::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarUpgradeReq.count)
}

// uint64 avatar_guid = 3;
void AvatarUpgradeReq::clear_avatar_guid() {
  avatar_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AvatarUpgradeReq::avatar_guid() const {
  // @@protoc_insertion_point(field_get:proto.AvatarUpgradeReq.avatar_guid)
  return avatar_guid_;
}
void AvatarUpgradeReq::set_avatar_guid(::google::protobuf::uint64 value) {
  
  avatar_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarUpgradeReq.avatar_guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

AvatarUpgradeRsp::AvatarUpgradeRsp_OldFightPropMapEntry::AvatarUpgradeRsp_OldFightPropMapEntry() {}
AvatarUpgradeRsp::AvatarUpgradeRsp_OldFightPropMapEntry::AvatarUpgradeRsp_OldFightPropMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata AvatarUpgradeRsp::AvatarUpgradeRsp_OldFightPropMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[21];
}
void AvatarUpgradeRsp::AvatarUpgradeRsp_OldFightPropMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void AvatarUpgradeRsp::AvatarUpgradeRsp_OldFightPropMapEntry::MergeFrom(const AvatarUpgradeRsp_OldFightPropMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

AvatarUpgradeRsp::AvatarUpgradeRsp_CurFightPropMapEntry::AvatarUpgradeRsp_CurFightPropMapEntry() {}
AvatarUpgradeRsp::AvatarUpgradeRsp_CurFightPropMapEntry::AvatarUpgradeRsp_CurFightPropMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata AvatarUpgradeRsp::AvatarUpgradeRsp_CurFightPropMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[22];
}
void AvatarUpgradeRsp::AvatarUpgradeRsp_CurFightPropMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void AvatarUpgradeRsp::AvatarUpgradeRsp_CurFightPropMapEntry::MergeFrom(const AvatarUpgradeRsp_CurFightPropMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarUpgradeRsp::kRetcodeFieldNumber;
const int AvatarUpgradeRsp::kAvatarGuidFieldNumber;
const int AvatarUpgradeRsp::kOldLevelFieldNumber;
const int AvatarUpgradeRsp::kCurLevelFieldNumber;
const int AvatarUpgradeRsp::kOldFightPropMapFieldNumber;
const int AvatarUpgradeRsp::kCurFightPropMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarUpgradeRsp::AvatarUpgradeRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarUpgradeRsp)
}
AvatarUpgradeRsp::AvatarUpgradeRsp(const AvatarUpgradeRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  old_fight_prop_map_.MergeFrom(from.old_fight_prop_map_);
  cur_fight_prop_map_.MergeFrom(from.cur_fight_prop_map_);
  ::memcpy(&avatar_guid_, &from.avatar_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_level_) -
    reinterpret_cast<char*>(&avatar_guid_)) + sizeof(cur_level_));
  // @@protoc_insertion_point(copy_constructor:proto.AvatarUpgradeRsp)
}

void AvatarUpgradeRsp::SharedCtor() {
  ::memset(&avatar_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_level_) -
      reinterpret_cast<char*>(&avatar_guid_)) + sizeof(cur_level_));
  _cached_size_ = 0;
}

AvatarUpgradeRsp::~AvatarUpgradeRsp() {
  // @@protoc_insertion_point(destructor:proto.AvatarUpgradeRsp)
  SharedDtor();
}

void AvatarUpgradeRsp::SharedDtor() {
}

void AvatarUpgradeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarUpgradeRsp::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarUpgradeRsp& AvatarUpgradeRsp::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarUpgradeRsp* AvatarUpgradeRsp::New(::google::protobuf::Arena* arena) const {
  AvatarUpgradeRsp* n = new AvatarUpgradeRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarUpgradeRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarUpgradeRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  old_fight_prop_map_.Clear();
  cur_fight_prop_map_.Clear();
  ::memset(&avatar_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_level_) -
      reinterpret_cast<char*>(&avatar_guid_)) + sizeof(cur_level_));
  _internal_metadata_.Clear();
}

bool AvatarUpgradeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarUpgradeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 avatar_guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &avatar_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 old_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, float> old_fight_prop_map = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          AvatarUpgradeRsp_OldFightPropMapEntry::Parser< ::google::protobuf::internal::MapField<
              AvatarUpgradeRsp_OldFightPropMapEntry,
              ::google::protobuf::uint32, float,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, float > > parser(&old_fight_prop_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, float> cur_fight_prop_map = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          AvatarUpgradeRsp_CurFightPropMapEntry::Parser< ::google::protobuf::internal::MapField<
              AvatarUpgradeRsp_CurFightPropMapEntry,
              ::google::protobuf::uint32, float,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, float > > parser(&cur_fight_prop_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarUpgradeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarUpgradeRsp)
  return false;
#undef DO_
}

void AvatarUpgradeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarUpgradeRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint64 avatar_guid = 2;
  if (this->avatar_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->avatar_guid(), output);
  }

  // uint32 old_level = 3;
  if (this->old_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->old_level(), output);
  }

  // uint32 cur_level = 4;
  if (this->cur_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cur_level(), output);
  }

  // map<uint32, float> old_fight_prop_map = 5;
  if (!this->old_fight_prop_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, float >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->old_fight_prop_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->old_fight_prop_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
          it = this->old_fight_prop_map().begin();
          it != this->old_fight_prop_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarUpgradeRsp_OldFightPropMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(old_fight_prop_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarUpgradeRsp_OldFightPropMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
          it = this->old_fight_prop_map().begin();
          it != this->old_fight_prop_map().end(); ++it) {
        entry.reset(old_fight_prop_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
      }
    }
  }

  // map<uint32, float> cur_fight_prop_map = 6;
  if (!this->cur_fight_prop_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, float >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->cur_fight_prop_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->cur_fight_prop_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
          it = this->cur_fight_prop_map().begin();
          it != this->cur_fight_prop_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarUpgradeRsp_CurFightPropMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(cur_fight_prop_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarUpgradeRsp_CurFightPropMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
          it = this->cur_fight_prop_map().begin();
          it != this->cur_fight_prop_map().end(); ++it) {
        entry.reset(cur_fight_prop_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarUpgradeRsp)
}

::google::protobuf::uint8* AvatarUpgradeRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarUpgradeRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint64 avatar_guid = 2;
  if (this->avatar_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->avatar_guid(), target);
  }

  // uint32 old_level = 3;
  if (this->old_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->old_level(), target);
  }

  // uint32 cur_level = 4;
  if (this->cur_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cur_level(), target);
  }

  // map<uint32, float> old_fight_prop_map = 5;
  if (!this->old_fight_prop_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, float >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->old_fight_prop_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->old_fight_prop_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
          it = this->old_fight_prop_map().begin();
          it != this->old_fight_prop_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarUpgradeRsp_OldFightPropMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(old_fight_prop_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarUpgradeRsp_OldFightPropMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
          it = this->old_fight_prop_map().begin();
          it != this->old_fight_prop_map().end(); ++it) {
        entry.reset(old_fight_prop_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
      }
    }
  }

  // map<uint32, float> cur_fight_prop_map = 6;
  if (!this->cur_fight_prop_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, float >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->cur_fight_prop_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->cur_fight_prop_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
          it = this->cur_fight_prop_map().begin();
          it != this->cur_fight_prop_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarUpgradeRsp_CurFightPropMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(cur_fight_prop_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarUpgradeRsp_CurFightPropMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
          it = this->cur_fight_prop_map().begin();
          it != this->cur_fight_prop_map().end(); ++it) {
        entry.reset(cur_fight_prop_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarUpgradeRsp)
  return target;
}

size_t AvatarUpgradeRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarUpgradeRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, float> old_fight_prop_map = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->old_fight_prop_map_size());
  {
    ::google::protobuf::scoped_ptr<AvatarUpgradeRsp_OldFightPropMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
        it = this->old_fight_prop_map().begin();
        it != this->old_fight_prop_map().end(); ++it) {
      entry.reset(old_fight_prop_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint32, float> cur_fight_prop_map = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->cur_fight_prop_map_size());
  {
    ::google::protobuf::scoped_ptr<AvatarUpgradeRsp_CurFightPropMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
        it = this->cur_fight_prop_map().begin();
        it != this->cur_fight_prop_map().end(); ++it) {
      entry.reset(cur_fight_prop_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint64 avatar_guid = 2;
  if (this->avatar_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->avatar_guid());
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 old_level = 3;
  if (this->old_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->old_level());
  }

  // uint32 cur_level = 4;
  if (this->cur_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarUpgradeRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarUpgradeRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarUpgradeRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarUpgradeRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarUpgradeRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarUpgradeRsp)
    MergeFrom(*source);
  }
}

void AvatarUpgradeRsp::MergeFrom(const AvatarUpgradeRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarUpgradeRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  old_fight_prop_map_.MergeFrom(from.old_fight_prop_map_);
  cur_fight_prop_map_.MergeFrom(from.cur_fight_prop_map_);
  if (from.avatar_guid() != 0) {
    set_avatar_guid(from.avatar_guid());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.old_level() != 0) {
    set_old_level(from.old_level());
  }
  if (from.cur_level() != 0) {
    set_cur_level(from.cur_level());
  }
}

void AvatarUpgradeRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarUpgradeRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarUpgradeRsp::CopyFrom(const AvatarUpgradeRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarUpgradeRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarUpgradeRsp::IsInitialized() const {
  return true;
}

void AvatarUpgradeRsp::Swap(AvatarUpgradeRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarUpgradeRsp::InternalSwap(AvatarUpgradeRsp* other) {
  using std::swap;
  old_fight_prop_map_.Swap(&other->old_fight_prop_map_);
  cur_fight_prop_map_.Swap(&other->cur_fight_prop_map_);
  swap(avatar_guid_, other->avatar_guid_);
  swap(retcode_, other->retcode_);
  swap(old_level_, other->old_level_);
  swap(cur_level_, other->cur_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarUpgradeRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarUpgradeRsp

// int32 retcode = 1;
void AvatarUpgradeRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 AvatarUpgradeRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.AvatarUpgradeRsp.retcode)
  return retcode_;
}
void AvatarUpgradeRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarUpgradeRsp.retcode)
}

// uint64 avatar_guid = 2;
void AvatarUpgradeRsp::clear_avatar_guid() {
  avatar_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AvatarUpgradeRsp::avatar_guid() const {
  // @@protoc_insertion_point(field_get:proto.AvatarUpgradeRsp.avatar_guid)
  return avatar_guid_;
}
void AvatarUpgradeRsp::set_avatar_guid(::google::protobuf::uint64 value) {
  
  avatar_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarUpgradeRsp.avatar_guid)
}

// uint32 old_level = 3;
void AvatarUpgradeRsp::clear_old_level() {
  old_level_ = 0u;
}
::google::protobuf::uint32 AvatarUpgradeRsp::old_level() const {
  // @@protoc_insertion_point(field_get:proto.AvatarUpgradeRsp.old_level)
  return old_level_;
}
void AvatarUpgradeRsp::set_old_level(::google::protobuf::uint32 value) {
  
  old_level_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarUpgradeRsp.old_level)
}

// uint32 cur_level = 4;
void AvatarUpgradeRsp::clear_cur_level() {
  cur_level_ = 0u;
}
::google::protobuf::uint32 AvatarUpgradeRsp::cur_level() const {
  // @@protoc_insertion_point(field_get:proto.AvatarUpgradeRsp.cur_level)
  return cur_level_;
}
void AvatarUpgradeRsp::set_cur_level(::google::protobuf::uint32 value) {
  
  cur_level_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarUpgradeRsp.cur_level)
}

// map<uint32, float> old_fight_prop_map = 5;
int AvatarUpgradeRsp::old_fight_prop_map_size() const {
  return old_fight_prop_map_.size();
}
void AvatarUpgradeRsp::clear_old_fight_prop_map() {
  old_fight_prop_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, float >&
AvatarUpgradeRsp::old_fight_prop_map() const {
  // @@protoc_insertion_point(field_map:proto.AvatarUpgradeRsp.old_fight_prop_map)
  return old_fight_prop_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, float >*
AvatarUpgradeRsp::mutable_old_fight_prop_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.AvatarUpgradeRsp.old_fight_prop_map)
  return old_fight_prop_map_.MutableMap();
}

// map<uint32, float> cur_fight_prop_map = 6;
int AvatarUpgradeRsp::cur_fight_prop_map_size() const {
  return cur_fight_prop_map_.size();
}
void AvatarUpgradeRsp::clear_cur_fight_prop_map() {
  cur_fight_prop_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, float >&
AvatarUpgradeRsp::cur_fight_prop_map() const {
  // @@protoc_insertion_point(field_map:proto.AvatarUpgradeRsp.cur_fight_prop_map)
  return cur_fight_prop_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, float >*
AvatarUpgradeRsp::mutable_cur_fight_prop_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.AvatarUpgradeRsp.cur_fight_prop_map)
  return cur_fight_prop_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarDieAnimationEndReq::kDieGuidFieldNumber;
const int AvatarDieAnimationEndReq::kSkillIdFieldNumber;
const int AvatarDieAnimationEndReq::kRebornPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarDieAnimationEndReq::AvatarDieAnimationEndReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarDieAnimationEndReq)
}
AvatarDieAnimationEndReq::AvatarDieAnimationEndReq(const AvatarDieAnimationEndReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reborn_pos()) {
    reborn_pos_ = new ::proto::Vector(*from.reborn_pos_);
  } else {
    reborn_pos_ = NULL;
  }
  ::memcpy(&die_guid_, &from.die_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&skill_id_) -
    reinterpret_cast<char*>(&die_guid_)) + sizeof(skill_id_));
  // @@protoc_insertion_point(copy_constructor:proto.AvatarDieAnimationEndReq)
}

void AvatarDieAnimationEndReq::SharedCtor() {
  ::memset(&reborn_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&reborn_pos_)) + sizeof(skill_id_));
  _cached_size_ = 0;
}

AvatarDieAnimationEndReq::~AvatarDieAnimationEndReq() {
  // @@protoc_insertion_point(destructor:proto.AvatarDieAnimationEndReq)
  SharedDtor();
}

void AvatarDieAnimationEndReq::SharedDtor() {
  if (this != internal_default_instance()) delete reborn_pos_;
}

void AvatarDieAnimationEndReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarDieAnimationEndReq::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarDieAnimationEndReq& AvatarDieAnimationEndReq::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarDieAnimationEndReq* AvatarDieAnimationEndReq::New(::google::protobuf::Arena* arena) const {
  AvatarDieAnimationEndReq* n = new AvatarDieAnimationEndReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarDieAnimationEndReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarDieAnimationEndReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && reborn_pos_ != NULL) {
    delete reborn_pos_;
  }
  reborn_pos_ = NULL;
  ::memset(&die_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&die_guid_)) + sizeof(skill_id_));
  _internal_metadata_.Clear();
}

bool AvatarDieAnimationEndReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarDieAnimationEndReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 die_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &die_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 skill_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector reborn_pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reborn_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarDieAnimationEndReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarDieAnimationEndReq)
  return false;
#undef DO_
}

void AvatarDieAnimationEndReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarDieAnimationEndReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 die_guid = 1;
  if (this->die_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->die_guid(), output);
  }

  // uint32 skill_id = 2;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_id(), output);
  }

  // .proto.Vector reborn_pos = 3;
  if (this->has_reborn_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->reborn_pos_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarDieAnimationEndReq)
}

::google::protobuf::uint8* AvatarDieAnimationEndReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarDieAnimationEndReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 die_guid = 1;
  if (this->die_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->die_guid(), target);
  }

  // uint32 skill_id = 2;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_id(), target);
  }

  // .proto.Vector reborn_pos = 3;
  if (this->has_reborn_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->reborn_pos_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarDieAnimationEndReq)
  return target;
}

size_t AvatarDieAnimationEndReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarDieAnimationEndReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.Vector reborn_pos = 3;
  if (this->has_reborn_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reborn_pos_);
  }

  // uint64 die_guid = 1;
  if (this->die_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->die_guid());
  }

  // uint32 skill_id = 2;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarDieAnimationEndReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarDieAnimationEndReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarDieAnimationEndReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarDieAnimationEndReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarDieAnimationEndReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarDieAnimationEndReq)
    MergeFrom(*source);
  }
}

void AvatarDieAnimationEndReq::MergeFrom(const AvatarDieAnimationEndReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarDieAnimationEndReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reborn_pos()) {
    mutable_reborn_pos()->::proto::Vector::MergeFrom(from.reborn_pos());
  }
  if (from.die_guid() != 0) {
    set_die_guid(from.die_guid());
  }
  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
}

void AvatarDieAnimationEndReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarDieAnimationEndReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarDieAnimationEndReq::CopyFrom(const AvatarDieAnimationEndReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarDieAnimationEndReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarDieAnimationEndReq::IsInitialized() const {
  return true;
}

void AvatarDieAnimationEndReq::Swap(AvatarDieAnimationEndReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarDieAnimationEndReq::InternalSwap(AvatarDieAnimationEndReq* other) {
  using std::swap;
  swap(reborn_pos_, other->reborn_pos_);
  swap(die_guid_, other->die_guid_);
  swap(skill_id_, other->skill_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarDieAnimationEndReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarDieAnimationEndReq

// uint64 die_guid = 1;
void AvatarDieAnimationEndReq::clear_die_guid() {
  die_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AvatarDieAnimationEndReq::die_guid() const {
  // @@protoc_insertion_point(field_get:proto.AvatarDieAnimationEndReq.die_guid)
  return die_guid_;
}
void AvatarDieAnimationEndReq::set_die_guid(::google::protobuf::uint64 value) {
  
  die_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarDieAnimationEndReq.die_guid)
}

// uint32 skill_id = 2;
void AvatarDieAnimationEndReq::clear_skill_id() {
  skill_id_ = 0u;
}
::google::protobuf::uint32 AvatarDieAnimationEndReq::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.AvatarDieAnimationEndReq.skill_id)
  return skill_id_;
}
void AvatarDieAnimationEndReq::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarDieAnimationEndReq.skill_id)
}

// .proto.Vector reborn_pos = 3;
bool AvatarDieAnimationEndReq::has_reborn_pos() const {
  return this != internal_default_instance() && reborn_pos_ != NULL;
}
void AvatarDieAnimationEndReq::clear_reborn_pos() {
  if (GetArenaNoVirtual() == NULL && reborn_pos_ != NULL) delete reborn_pos_;
  reborn_pos_ = NULL;
}
const ::proto::Vector& AvatarDieAnimationEndReq::reborn_pos() const {
  const ::proto::Vector* p = reborn_pos_;
  // @@protoc_insertion_point(field_get:proto.AvatarDieAnimationEndReq.reborn_pos)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* AvatarDieAnimationEndReq::mutable_reborn_pos() {
  
  if (reborn_pos_ == NULL) {
    reborn_pos_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.AvatarDieAnimationEndReq.reborn_pos)
  return reborn_pos_;
}
::proto::Vector* AvatarDieAnimationEndReq::release_reborn_pos() {
  // @@protoc_insertion_point(field_release:proto.AvatarDieAnimationEndReq.reborn_pos)
  
  ::proto::Vector* temp = reborn_pos_;
  reborn_pos_ = NULL;
  return temp;
}
void AvatarDieAnimationEndReq::set_allocated_reborn_pos(::proto::Vector* reborn_pos) {
  delete reborn_pos_;
  reborn_pos_ = reborn_pos;
  if (reborn_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AvatarDieAnimationEndReq.reborn_pos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarDieAnimationEndRsp::kRetcodeFieldNumber;
const int AvatarDieAnimationEndRsp::kDieGuidFieldNumber;
const int AvatarDieAnimationEndRsp::kSkillIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarDieAnimationEndRsp::AvatarDieAnimationEndRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarDieAnimationEndRsp)
}
AvatarDieAnimationEndRsp::AvatarDieAnimationEndRsp(const AvatarDieAnimationEndRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&die_guid_, &from.die_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&skill_id_) -
    reinterpret_cast<char*>(&die_guid_)) + sizeof(skill_id_));
  // @@protoc_insertion_point(copy_constructor:proto.AvatarDieAnimationEndRsp)
}

void AvatarDieAnimationEndRsp::SharedCtor() {
  ::memset(&die_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&die_guid_)) + sizeof(skill_id_));
  _cached_size_ = 0;
}

AvatarDieAnimationEndRsp::~AvatarDieAnimationEndRsp() {
  // @@protoc_insertion_point(destructor:proto.AvatarDieAnimationEndRsp)
  SharedDtor();
}

void AvatarDieAnimationEndRsp::SharedDtor() {
}

void AvatarDieAnimationEndRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarDieAnimationEndRsp::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarDieAnimationEndRsp& AvatarDieAnimationEndRsp::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarDieAnimationEndRsp* AvatarDieAnimationEndRsp::New(::google::protobuf::Arena* arena) const {
  AvatarDieAnimationEndRsp* n = new AvatarDieAnimationEndRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarDieAnimationEndRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarDieAnimationEndRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&die_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&die_guid_)) + sizeof(skill_id_));
  _internal_metadata_.Clear();
}

bool AvatarDieAnimationEndRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarDieAnimationEndRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 die_guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &die_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 skill_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarDieAnimationEndRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarDieAnimationEndRsp)
  return false;
#undef DO_
}

void AvatarDieAnimationEndRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarDieAnimationEndRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint64 die_guid = 2;
  if (this->die_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->die_guid(), output);
  }

  // uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarDieAnimationEndRsp)
}

::google::protobuf::uint8* AvatarDieAnimationEndRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarDieAnimationEndRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint64 die_guid = 2;
  if (this->die_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->die_guid(), target);
  }

  // uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarDieAnimationEndRsp)
  return target;
}

size_t AvatarDieAnimationEndRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarDieAnimationEndRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 die_guid = 2;
  if (this->die_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->die_guid());
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarDieAnimationEndRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarDieAnimationEndRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarDieAnimationEndRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarDieAnimationEndRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarDieAnimationEndRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarDieAnimationEndRsp)
    MergeFrom(*source);
  }
}

void AvatarDieAnimationEndRsp::MergeFrom(const AvatarDieAnimationEndRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarDieAnimationEndRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.die_guid() != 0) {
    set_die_guid(from.die_guid());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
}

void AvatarDieAnimationEndRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarDieAnimationEndRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarDieAnimationEndRsp::CopyFrom(const AvatarDieAnimationEndRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarDieAnimationEndRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarDieAnimationEndRsp::IsInitialized() const {
  return true;
}

void AvatarDieAnimationEndRsp::Swap(AvatarDieAnimationEndRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarDieAnimationEndRsp::InternalSwap(AvatarDieAnimationEndRsp* other) {
  using std::swap;
  swap(die_guid_, other->die_guid_);
  swap(retcode_, other->retcode_);
  swap(skill_id_, other->skill_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarDieAnimationEndRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarDieAnimationEndRsp

// int32 retcode = 1;
void AvatarDieAnimationEndRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 AvatarDieAnimationEndRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.AvatarDieAnimationEndRsp.retcode)
  return retcode_;
}
void AvatarDieAnimationEndRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarDieAnimationEndRsp.retcode)
}

// uint64 die_guid = 2;
void AvatarDieAnimationEndRsp::clear_die_guid() {
  die_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AvatarDieAnimationEndRsp::die_guid() const {
  // @@protoc_insertion_point(field_get:proto.AvatarDieAnimationEndRsp.die_guid)
  return die_guid_;
}
void AvatarDieAnimationEndRsp::set_die_guid(::google::protobuf::uint64 value) {
  
  die_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarDieAnimationEndRsp.die_guid)
}

// uint32 skill_id = 3;
void AvatarDieAnimationEndRsp::clear_skill_id() {
  skill_id_ = 0u;
}
::google::protobuf::uint32 AvatarDieAnimationEndRsp::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.AvatarDieAnimationEndRsp.skill_id)
  return skill_id_;
}
void AvatarDieAnimationEndRsp::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarDieAnimationEndRsp.skill_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarChangeElementTypeReq::kSceneIdFieldNumber;
const int AvatarChangeElementTypeReq::kAreaIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarChangeElementTypeReq::AvatarChangeElementTypeReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarChangeElementTypeReq)
}
AvatarChangeElementTypeReq::AvatarChangeElementTypeReq(const AvatarChangeElementTypeReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scene_id_, &from.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&area_id_) -
    reinterpret_cast<char*>(&scene_id_)) + sizeof(area_id_));
  // @@protoc_insertion_point(copy_constructor:proto.AvatarChangeElementTypeReq)
}

void AvatarChangeElementTypeReq::SharedCtor() {
  ::memset(&scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&area_id_) -
      reinterpret_cast<char*>(&scene_id_)) + sizeof(area_id_));
  _cached_size_ = 0;
}

AvatarChangeElementTypeReq::~AvatarChangeElementTypeReq() {
  // @@protoc_insertion_point(destructor:proto.AvatarChangeElementTypeReq)
  SharedDtor();
}

void AvatarChangeElementTypeReq::SharedDtor() {
}

void AvatarChangeElementTypeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarChangeElementTypeReq::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarChangeElementTypeReq& AvatarChangeElementTypeReq::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarChangeElementTypeReq* AvatarChangeElementTypeReq::New(::google::protobuf::Arena* arena) const {
  AvatarChangeElementTypeReq* n = new AvatarChangeElementTypeReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarChangeElementTypeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarChangeElementTypeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&area_id_) -
      reinterpret_cast<char*>(&scene_id_)) + sizeof(area_id_));
  _internal_metadata_.Clear();
}

bool AvatarChangeElementTypeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarChangeElementTypeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 scene_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 area_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarChangeElementTypeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarChangeElementTypeReq)
  return false;
#undef DO_
}

void AvatarChangeElementTypeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarChangeElementTypeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 scene_id = 1;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scene_id(), output);
  }

  // uint32 area_id = 2;
  if (this->area_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->area_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarChangeElementTypeReq)
}

::google::protobuf::uint8* AvatarChangeElementTypeReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarChangeElementTypeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 scene_id = 1;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scene_id(), target);
  }

  // uint32 area_id = 2;
  if (this->area_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->area_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarChangeElementTypeReq)
  return target;
}

size_t AvatarChangeElementTypeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarChangeElementTypeReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 scene_id = 1;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  // uint32 area_id = 2;
  if (this->area_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->area_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarChangeElementTypeReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarChangeElementTypeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarChangeElementTypeReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarChangeElementTypeReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarChangeElementTypeReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarChangeElementTypeReq)
    MergeFrom(*source);
  }
}

void AvatarChangeElementTypeReq::MergeFrom(const AvatarChangeElementTypeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarChangeElementTypeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
  if (from.area_id() != 0) {
    set_area_id(from.area_id());
  }
}

void AvatarChangeElementTypeReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarChangeElementTypeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarChangeElementTypeReq::CopyFrom(const AvatarChangeElementTypeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarChangeElementTypeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarChangeElementTypeReq::IsInitialized() const {
  return true;
}

void AvatarChangeElementTypeReq::Swap(AvatarChangeElementTypeReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarChangeElementTypeReq::InternalSwap(AvatarChangeElementTypeReq* other) {
  using std::swap;
  swap(scene_id_, other->scene_id_);
  swap(area_id_, other->area_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarChangeElementTypeReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarChangeElementTypeReq

// uint32 scene_id = 1;
void AvatarChangeElementTypeReq::clear_scene_id() {
  scene_id_ = 0u;
}
::google::protobuf::uint32 AvatarChangeElementTypeReq::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.AvatarChangeElementTypeReq.scene_id)
  return scene_id_;
}
void AvatarChangeElementTypeReq::set_scene_id(::google::protobuf::uint32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarChangeElementTypeReq.scene_id)
}

// uint32 area_id = 2;
void AvatarChangeElementTypeReq::clear_area_id() {
  area_id_ = 0u;
}
::google::protobuf::uint32 AvatarChangeElementTypeReq::area_id() const {
  // @@protoc_insertion_point(field_get:proto.AvatarChangeElementTypeReq.area_id)
  return area_id_;
}
void AvatarChangeElementTypeReq::set_area_id(::google::protobuf::uint32 value) {
  
  area_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarChangeElementTypeReq.area_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarChangeElementTypeRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarChangeElementTypeRsp::AvatarChangeElementTypeRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarChangeElementTypeRsp)
}
AvatarChangeElementTypeRsp::AvatarChangeElementTypeRsp(const AvatarChangeElementTypeRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.AvatarChangeElementTypeRsp)
}

void AvatarChangeElementTypeRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

AvatarChangeElementTypeRsp::~AvatarChangeElementTypeRsp() {
  // @@protoc_insertion_point(destructor:proto.AvatarChangeElementTypeRsp)
  SharedDtor();
}

void AvatarChangeElementTypeRsp::SharedDtor() {
}

void AvatarChangeElementTypeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarChangeElementTypeRsp::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarChangeElementTypeRsp& AvatarChangeElementTypeRsp::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarChangeElementTypeRsp* AvatarChangeElementTypeRsp::New(::google::protobuf::Arena* arena) const {
  AvatarChangeElementTypeRsp* n = new AvatarChangeElementTypeRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarChangeElementTypeRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarChangeElementTypeRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool AvatarChangeElementTypeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarChangeElementTypeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarChangeElementTypeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarChangeElementTypeRsp)
  return false;
#undef DO_
}

void AvatarChangeElementTypeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarChangeElementTypeRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarChangeElementTypeRsp)
}

::google::protobuf::uint8* AvatarChangeElementTypeRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarChangeElementTypeRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarChangeElementTypeRsp)
  return target;
}

size_t AvatarChangeElementTypeRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarChangeElementTypeRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarChangeElementTypeRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarChangeElementTypeRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarChangeElementTypeRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarChangeElementTypeRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarChangeElementTypeRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarChangeElementTypeRsp)
    MergeFrom(*source);
  }
}

void AvatarChangeElementTypeRsp::MergeFrom(const AvatarChangeElementTypeRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarChangeElementTypeRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void AvatarChangeElementTypeRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarChangeElementTypeRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarChangeElementTypeRsp::CopyFrom(const AvatarChangeElementTypeRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarChangeElementTypeRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarChangeElementTypeRsp::IsInitialized() const {
  return true;
}

void AvatarChangeElementTypeRsp::Swap(AvatarChangeElementTypeRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarChangeElementTypeRsp::InternalSwap(AvatarChangeElementTypeRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarChangeElementTypeRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarChangeElementTypeRsp

// int32 retcode = 1;
void AvatarChangeElementTypeRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 AvatarChangeElementTypeRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.AvatarChangeElementTypeRsp.retcode)
  return retcode_;
}
void AvatarChangeElementTypeRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarChangeElementTypeRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

AvatarFetterDataNotify::AvatarFetterDataNotify_FetterInfoMapEntry::AvatarFetterDataNotify_FetterInfoMapEntry() {}
AvatarFetterDataNotify::AvatarFetterDataNotify_FetterInfoMapEntry::AvatarFetterDataNotify_FetterInfoMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata AvatarFetterDataNotify::AvatarFetterDataNotify_FetterInfoMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[28];
}
void AvatarFetterDataNotify::AvatarFetterDataNotify_FetterInfoMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void AvatarFetterDataNotify::AvatarFetterDataNotify_FetterInfoMapEntry::MergeFrom(const AvatarFetterDataNotify_FetterInfoMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarFetterDataNotify::kFetterInfoMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarFetterDataNotify::AvatarFetterDataNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarFetterDataNotify)
}
AvatarFetterDataNotify::AvatarFetterDataNotify(const AvatarFetterDataNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fetter_info_map_.MergeFrom(from.fetter_info_map_);
  // @@protoc_insertion_point(copy_constructor:proto.AvatarFetterDataNotify)
}

void AvatarFetterDataNotify::SharedCtor() {
  _cached_size_ = 0;
}

AvatarFetterDataNotify::~AvatarFetterDataNotify() {
  // @@protoc_insertion_point(destructor:proto.AvatarFetterDataNotify)
  SharedDtor();
}

void AvatarFetterDataNotify::SharedDtor() {
}

void AvatarFetterDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarFetterDataNotify::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarFetterDataNotify& AvatarFetterDataNotify::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarFetterDataNotify* AvatarFetterDataNotify::New(::google::protobuf::Arena* arena) const {
  AvatarFetterDataNotify* n = new AvatarFetterDataNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarFetterDataNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarFetterDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fetter_info_map_.Clear();
  _internal_metadata_.Clear();
}

bool AvatarFetterDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarFetterDataNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint64, .proto.AvatarFetterInfo> fetter_info_map = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          AvatarFetterDataNotify_FetterInfoMapEntry::Parser< ::google::protobuf::internal::MapField<
              AvatarFetterDataNotify_FetterInfoMapEntry,
              ::google::protobuf::uint64, ::proto::AvatarFetterInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarFetterInfo > > parser(&fetter_info_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarFetterDataNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarFetterDataNotify)
  return false;
#undef DO_
}

void AvatarFetterDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarFetterDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, .proto.AvatarFetterInfo> fetter_info_map = 1;
  if (!this->fetter_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarFetterInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->fetter_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->fetter_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarFetterInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarFetterInfo >::const_iterator
          it = this->fetter_info_map().begin();
          it != this->fetter_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarFetterDataNotify_FetterInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(fetter_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarFetterDataNotify_FetterInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarFetterInfo >::const_iterator
          it = this->fetter_info_map().begin();
          it != this->fetter_info_map().end(); ++it) {
        entry.reset(fetter_info_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarFetterDataNotify)
}

::google::protobuf::uint8* AvatarFetterDataNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarFetterDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, .proto.AvatarFetterInfo> fetter_info_map = 1;
  if (!this->fetter_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarFetterInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->fetter_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->fetter_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarFetterInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarFetterInfo >::const_iterator
          it = this->fetter_info_map().begin();
          it != this->fetter_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarFetterDataNotify_FetterInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(fetter_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarFetterDataNotify_FetterInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarFetterInfo >::const_iterator
          it = this->fetter_info_map().begin();
          it != this->fetter_info_map().end(); ++it) {
        entry.reset(fetter_info_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarFetterDataNotify)
  return target;
}

size_t AvatarFetterDataNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarFetterDataNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint64, .proto.AvatarFetterInfo> fetter_info_map = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fetter_info_map_size());
  {
    ::google::protobuf::scoped_ptr<AvatarFetterDataNotify_FetterInfoMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarFetterInfo >::const_iterator
        it = this->fetter_info_map().begin();
        it != this->fetter_info_map().end(); ++it) {
      entry.reset(fetter_info_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarFetterDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarFetterDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarFetterDataNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarFetterDataNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarFetterDataNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarFetterDataNotify)
    MergeFrom(*source);
  }
}

void AvatarFetterDataNotify::MergeFrom(const AvatarFetterDataNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarFetterDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fetter_info_map_.MergeFrom(from.fetter_info_map_);
}

void AvatarFetterDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarFetterDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarFetterDataNotify::CopyFrom(const AvatarFetterDataNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarFetterDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarFetterDataNotify::IsInitialized() const {
  return true;
}

void AvatarFetterDataNotify::Swap(AvatarFetterDataNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarFetterDataNotify::InternalSwap(AvatarFetterDataNotify* other) {
  using std::swap;
  fetter_info_map_.Swap(&other->fetter_info_map_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarFetterDataNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarFetterDataNotify

// map<uint64, .proto.AvatarFetterInfo> fetter_info_map = 1;
int AvatarFetterDataNotify::fetter_info_map_size() const {
  return fetter_info_map_.size();
}
void AvatarFetterDataNotify::clear_fetter_info_map() {
  fetter_info_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarFetterInfo >&
AvatarFetterDataNotify::fetter_info_map() const {
  // @@protoc_insertion_point(field_map:proto.AvatarFetterDataNotify.fetter_info_map)
  return fetter_info_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarFetterInfo >*
AvatarFetterDataNotify::mutable_fetter_info_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.AvatarFetterDataNotify.fetter_info_map)
  return fetter_info_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

AvatarExpeditionDataNotify::AvatarExpeditionDataNotify_ExpeditionInfoMapEntry::AvatarExpeditionDataNotify_ExpeditionInfoMapEntry() {}
AvatarExpeditionDataNotify::AvatarExpeditionDataNotify_ExpeditionInfoMapEntry::AvatarExpeditionDataNotify_ExpeditionInfoMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata AvatarExpeditionDataNotify::AvatarExpeditionDataNotify_ExpeditionInfoMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[30];
}
void AvatarExpeditionDataNotify::AvatarExpeditionDataNotify_ExpeditionInfoMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void AvatarExpeditionDataNotify::AvatarExpeditionDataNotify_ExpeditionInfoMapEntry::MergeFrom(const AvatarExpeditionDataNotify_ExpeditionInfoMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarExpeditionDataNotify::kExpeditionInfoMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarExpeditionDataNotify::AvatarExpeditionDataNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarExpeditionDataNotify)
}
AvatarExpeditionDataNotify::AvatarExpeditionDataNotify(const AvatarExpeditionDataNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  expedition_info_map_.MergeFrom(from.expedition_info_map_);
  // @@protoc_insertion_point(copy_constructor:proto.AvatarExpeditionDataNotify)
}

void AvatarExpeditionDataNotify::SharedCtor() {
  _cached_size_ = 0;
}

AvatarExpeditionDataNotify::~AvatarExpeditionDataNotify() {
  // @@protoc_insertion_point(destructor:proto.AvatarExpeditionDataNotify)
  SharedDtor();
}

void AvatarExpeditionDataNotify::SharedDtor() {
}

void AvatarExpeditionDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarExpeditionDataNotify::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarExpeditionDataNotify& AvatarExpeditionDataNotify::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarExpeditionDataNotify* AvatarExpeditionDataNotify::New(::google::protobuf::Arena* arena) const {
  AvatarExpeditionDataNotify* n = new AvatarExpeditionDataNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarExpeditionDataNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarExpeditionDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  expedition_info_map_.Clear();
  _internal_metadata_.Clear();
}

bool AvatarExpeditionDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarExpeditionDataNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          AvatarExpeditionDataNotify_ExpeditionInfoMapEntry::Parser< ::google::protobuf::internal::MapField<
              AvatarExpeditionDataNotify_ExpeditionInfoMapEntry,
              ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo > > parser(&expedition_info_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarExpeditionDataNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarExpeditionDataNotify)
  return false;
#undef DO_
}

void AvatarExpeditionDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarExpeditionDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 1;
  if (!this->expedition_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->expedition_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->expedition_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
          it = this->expedition_info_map().begin();
          it != this->expedition_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarExpeditionDataNotify_ExpeditionInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(expedition_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarExpeditionDataNotify_ExpeditionInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
          it = this->expedition_info_map().begin();
          it != this->expedition_info_map().end(); ++it) {
        entry.reset(expedition_info_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarExpeditionDataNotify)
}

::google::protobuf::uint8* AvatarExpeditionDataNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarExpeditionDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 1;
  if (!this->expedition_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->expedition_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->expedition_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
          it = this->expedition_info_map().begin();
          it != this->expedition_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarExpeditionDataNotify_ExpeditionInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(expedition_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarExpeditionDataNotify_ExpeditionInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
          it = this->expedition_info_map().begin();
          it != this->expedition_info_map().end(); ++it) {
        entry.reset(expedition_info_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarExpeditionDataNotify)
  return target;
}

size_t AvatarExpeditionDataNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarExpeditionDataNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->expedition_info_map_size());
  {
    ::google::protobuf::scoped_ptr<AvatarExpeditionDataNotify_ExpeditionInfoMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
        it = this->expedition_info_map().begin();
        it != this->expedition_info_map().end(); ++it) {
      entry.reset(expedition_info_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarExpeditionDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarExpeditionDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarExpeditionDataNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarExpeditionDataNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarExpeditionDataNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarExpeditionDataNotify)
    MergeFrom(*source);
  }
}

void AvatarExpeditionDataNotify::MergeFrom(const AvatarExpeditionDataNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarExpeditionDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  expedition_info_map_.MergeFrom(from.expedition_info_map_);
}

void AvatarExpeditionDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarExpeditionDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarExpeditionDataNotify::CopyFrom(const AvatarExpeditionDataNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarExpeditionDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarExpeditionDataNotify::IsInitialized() const {
  return true;
}

void AvatarExpeditionDataNotify::Swap(AvatarExpeditionDataNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarExpeditionDataNotify::InternalSwap(AvatarExpeditionDataNotify* other) {
  using std::swap;
  expedition_info_map_.Swap(&other->expedition_info_map_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarExpeditionDataNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarExpeditionDataNotify

// map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 1;
int AvatarExpeditionDataNotify::expedition_info_map_size() const {
  return expedition_info_map_.size();
}
void AvatarExpeditionDataNotify::clear_expedition_info_map() {
  expedition_info_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >&
AvatarExpeditionDataNotify::expedition_info_map() const {
  // @@protoc_insertion_point(field_map:proto.AvatarExpeditionDataNotify.expedition_info_map)
  return expedition_info_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >*
AvatarExpeditionDataNotify::mutable_expedition_info_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.AvatarExpeditionDataNotify.expedition_info_map)
  return expedition_info_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarExpeditionAllDataReq::AvatarExpeditionAllDataReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarExpeditionAllDataReq)
}
AvatarExpeditionAllDataReq::AvatarExpeditionAllDataReq(const AvatarExpeditionAllDataReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.AvatarExpeditionAllDataReq)
}

void AvatarExpeditionAllDataReq::SharedCtor() {
  _cached_size_ = 0;
}

AvatarExpeditionAllDataReq::~AvatarExpeditionAllDataReq() {
  // @@protoc_insertion_point(destructor:proto.AvatarExpeditionAllDataReq)
  SharedDtor();
}

void AvatarExpeditionAllDataReq::SharedDtor() {
}

void AvatarExpeditionAllDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarExpeditionAllDataReq::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarExpeditionAllDataReq& AvatarExpeditionAllDataReq::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarExpeditionAllDataReq* AvatarExpeditionAllDataReq::New(::google::protobuf::Arena* arena) const {
  AvatarExpeditionAllDataReq* n = new AvatarExpeditionAllDataReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarExpeditionAllDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarExpeditionAllDataReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool AvatarExpeditionAllDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarExpeditionAllDataReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarExpeditionAllDataReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarExpeditionAllDataReq)
  return false;
#undef DO_
}

void AvatarExpeditionAllDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarExpeditionAllDataReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarExpeditionAllDataReq)
}

::google::protobuf::uint8* AvatarExpeditionAllDataReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarExpeditionAllDataReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarExpeditionAllDataReq)
  return target;
}

size_t AvatarExpeditionAllDataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarExpeditionAllDataReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarExpeditionAllDataReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarExpeditionAllDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarExpeditionAllDataReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarExpeditionAllDataReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarExpeditionAllDataReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarExpeditionAllDataReq)
    MergeFrom(*source);
  }
}

void AvatarExpeditionAllDataReq::MergeFrom(const AvatarExpeditionAllDataReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarExpeditionAllDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AvatarExpeditionAllDataReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarExpeditionAllDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarExpeditionAllDataReq::CopyFrom(const AvatarExpeditionAllDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarExpeditionAllDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarExpeditionAllDataReq::IsInitialized() const {
  return true;
}

void AvatarExpeditionAllDataReq::Swap(AvatarExpeditionAllDataReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarExpeditionAllDataReq::InternalSwap(AvatarExpeditionAllDataReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarExpeditionAllDataReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarExpeditionAllDataReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

AvatarExpeditionAllDataRsp::AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry::AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry() {}
AvatarExpeditionAllDataRsp::AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry::AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata AvatarExpeditionAllDataRsp::AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[33];
}
void AvatarExpeditionAllDataRsp::AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void AvatarExpeditionAllDataRsp::AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry::MergeFrom(const AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarExpeditionAllDataRsp::kRetcodeFieldNumber;
const int AvatarExpeditionAllDataRsp::kExpeditionInfoMapFieldNumber;
const int AvatarExpeditionAllDataRsp::kOpenExpeditionListFieldNumber;
const int AvatarExpeditionAllDataRsp::kExpeditionCountLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarExpeditionAllDataRsp::AvatarExpeditionAllDataRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarExpeditionAllDataRsp)
}
AvatarExpeditionAllDataRsp::AvatarExpeditionAllDataRsp(const AvatarExpeditionAllDataRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      open_expedition_list_(from.open_expedition_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  expedition_info_map_.MergeFrom(from.expedition_info_map_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&expedition_count_limit_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(expedition_count_limit_));
  // @@protoc_insertion_point(copy_constructor:proto.AvatarExpeditionAllDataRsp)
}

void AvatarExpeditionAllDataRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expedition_count_limit_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(expedition_count_limit_));
  _cached_size_ = 0;
}

AvatarExpeditionAllDataRsp::~AvatarExpeditionAllDataRsp() {
  // @@protoc_insertion_point(destructor:proto.AvatarExpeditionAllDataRsp)
  SharedDtor();
}

void AvatarExpeditionAllDataRsp::SharedDtor() {
}

void AvatarExpeditionAllDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarExpeditionAllDataRsp::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarExpeditionAllDataRsp& AvatarExpeditionAllDataRsp::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarExpeditionAllDataRsp* AvatarExpeditionAllDataRsp::New(::google::protobuf::Arena* arena) const {
  AvatarExpeditionAllDataRsp* n = new AvatarExpeditionAllDataRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarExpeditionAllDataRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarExpeditionAllDataRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  expedition_info_map_.Clear();
  open_expedition_list_.Clear();
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expedition_count_limit_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(expedition_count_limit_));
  _internal_metadata_.Clear();
}

bool AvatarExpeditionAllDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarExpeditionAllDataRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry::Parser< ::google::protobuf::internal::MapField<
              AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry,
              ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo > > parser(&expedition_info_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 open_expedition_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_open_expedition_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_open_expedition_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 expedition_count_limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expedition_count_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarExpeditionAllDataRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarExpeditionAllDataRsp)
  return false;
#undef DO_
}

void AvatarExpeditionAllDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarExpeditionAllDataRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 2;
  if (!this->expedition_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->expedition_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->expedition_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
          it = this->expedition_info_map().begin();
          it != this->expedition_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(expedition_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
          it = this->expedition_info_map().begin();
          it != this->expedition_info_map().end(); ++it) {
        entry.reset(expedition_info_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    }
  }

  // repeated uint32 open_expedition_list = 3;
  if (this->open_expedition_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _open_expedition_list_cached_byte_size_));
  }
  for (int i = 0, n = this->open_expedition_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->open_expedition_list(i), output);
  }

  // uint32 expedition_count_limit = 4;
  if (this->expedition_count_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->expedition_count_limit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarExpeditionAllDataRsp)
}

::google::protobuf::uint8* AvatarExpeditionAllDataRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarExpeditionAllDataRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 2;
  if (!this->expedition_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->expedition_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->expedition_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
          it = this->expedition_info_map().begin();
          it != this->expedition_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(expedition_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
          it = this->expedition_info_map().begin();
          it != this->expedition_info_map().end(); ++it) {
        entry.reset(expedition_info_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    }
  }

  // repeated uint32 open_expedition_list = 3;
  if (this->open_expedition_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _open_expedition_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->open_expedition_list_, target);
  }

  // uint32 expedition_count_limit = 4;
  if (this->expedition_count_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->expedition_count_limit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarExpeditionAllDataRsp)
  return target;
}

size_t AvatarExpeditionAllDataRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarExpeditionAllDataRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->expedition_info_map_size());
  {
    ::google::protobuf::scoped_ptr<AvatarExpeditionAllDataRsp_ExpeditionInfoMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
        it = this->expedition_info_map().begin();
        it != this->expedition_info_map().end(); ++it) {
      entry.reset(expedition_info_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated uint32 open_expedition_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->open_expedition_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _open_expedition_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 expedition_count_limit = 4;
  if (this->expedition_count_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->expedition_count_limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarExpeditionAllDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarExpeditionAllDataRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarExpeditionAllDataRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarExpeditionAllDataRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarExpeditionAllDataRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarExpeditionAllDataRsp)
    MergeFrom(*source);
  }
}

void AvatarExpeditionAllDataRsp::MergeFrom(const AvatarExpeditionAllDataRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarExpeditionAllDataRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  expedition_info_map_.MergeFrom(from.expedition_info_map_);
  open_expedition_list_.MergeFrom(from.open_expedition_list_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.expedition_count_limit() != 0) {
    set_expedition_count_limit(from.expedition_count_limit());
  }
}

void AvatarExpeditionAllDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarExpeditionAllDataRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarExpeditionAllDataRsp::CopyFrom(const AvatarExpeditionAllDataRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarExpeditionAllDataRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarExpeditionAllDataRsp::IsInitialized() const {
  return true;
}

void AvatarExpeditionAllDataRsp::Swap(AvatarExpeditionAllDataRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarExpeditionAllDataRsp::InternalSwap(AvatarExpeditionAllDataRsp* other) {
  using std::swap;
  expedition_info_map_.Swap(&other->expedition_info_map_);
  open_expedition_list_.InternalSwap(&other->open_expedition_list_);
  swap(retcode_, other->retcode_);
  swap(expedition_count_limit_, other->expedition_count_limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarExpeditionAllDataRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarExpeditionAllDataRsp

// int32 retcode = 1;
void AvatarExpeditionAllDataRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 AvatarExpeditionAllDataRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.AvatarExpeditionAllDataRsp.retcode)
  return retcode_;
}
void AvatarExpeditionAllDataRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarExpeditionAllDataRsp.retcode)
}

// map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 2;
int AvatarExpeditionAllDataRsp::expedition_info_map_size() const {
  return expedition_info_map_.size();
}
void AvatarExpeditionAllDataRsp::clear_expedition_info_map() {
  expedition_info_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >&
AvatarExpeditionAllDataRsp::expedition_info_map() const {
  // @@protoc_insertion_point(field_map:proto.AvatarExpeditionAllDataRsp.expedition_info_map)
  return expedition_info_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >*
AvatarExpeditionAllDataRsp::mutable_expedition_info_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.AvatarExpeditionAllDataRsp.expedition_info_map)
  return expedition_info_map_.MutableMap();
}

// repeated uint32 open_expedition_list = 3;
int AvatarExpeditionAllDataRsp::open_expedition_list_size() const {
  return open_expedition_list_.size();
}
void AvatarExpeditionAllDataRsp::clear_open_expedition_list() {
  open_expedition_list_.Clear();
}
::google::protobuf::uint32 AvatarExpeditionAllDataRsp::open_expedition_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.AvatarExpeditionAllDataRsp.open_expedition_list)
  return open_expedition_list_.Get(index);
}
void AvatarExpeditionAllDataRsp::set_open_expedition_list(int index, ::google::protobuf::uint32 value) {
  open_expedition_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.AvatarExpeditionAllDataRsp.open_expedition_list)
}
void AvatarExpeditionAllDataRsp::add_open_expedition_list(::google::protobuf::uint32 value) {
  open_expedition_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.AvatarExpeditionAllDataRsp.open_expedition_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AvatarExpeditionAllDataRsp::open_expedition_list() const {
  // @@protoc_insertion_point(field_list:proto.AvatarExpeditionAllDataRsp.open_expedition_list)
  return open_expedition_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AvatarExpeditionAllDataRsp::mutable_open_expedition_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.AvatarExpeditionAllDataRsp.open_expedition_list)
  return &open_expedition_list_;
}

// uint32 expedition_count_limit = 4;
void AvatarExpeditionAllDataRsp::clear_expedition_count_limit() {
  expedition_count_limit_ = 0u;
}
::google::protobuf::uint32 AvatarExpeditionAllDataRsp::expedition_count_limit() const {
  // @@protoc_insertion_point(field_get:proto.AvatarExpeditionAllDataRsp.expedition_count_limit)
  return expedition_count_limit_;
}
void AvatarExpeditionAllDataRsp::set_expedition_count_limit(::google::protobuf::uint32 value) {
  
  expedition_count_limit_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarExpeditionAllDataRsp.expedition_count_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarExpeditionStartReq::kAvatarGuidFieldNumber;
const int AvatarExpeditionStartReq::kExpIdFieldNumber;
const int AvatarExpeditionStartReq::kHourTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarExpeditionStartReq::AvatarExpeditionStartReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarExpeditionStartReq)
}
AvatarExpeditionStartReq::AvatarExpeditionStartReq(const AvatarExpeditionStartReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&avatar_guid_, &from.avatar_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&hour_time_) -
    reinterpret_cast<char*>(&avatar_guid_)) + sizeof(hour_time_));
  // @@protoc_insertion_point(copy_constructor:proto.AvatarExpeditionStartReq)
}

void AvatarExpeditionStartReq::SharedCtor() {
  ::memset(&avatar_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hour_time_) -
      reinterpret_cast<char*>(&avatar_guid_)) + sizeof(hour_time_));
  _cached_size_ = 0;
}

AvatarExpeditionStartReq::~AvatarExpeditionStartReq() {
  // @@protoc_insertion_point(destructor:proto.AvatarExpeditionStartReq)
  SharedDtor();
}

void AvatarExpeditionStartReq::SharedDtor() {
}

void AvatarExpeditionStartReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarExpeditionStartReq::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarExpeditionStartReq& AvatarExpeditionStartReq::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarExpeditionStartReq* AvatarExpeditionStartReq::New(::google::protobuf::Arena* arena) const {
  AvatarExpeditionStartReq* n = new AvatarExpeditionStartReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarExpeditionStartReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarExpeditionStartReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&avatar_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hour_time_) -
      reinterpret_cast<char*>(&avatar_guid_)) + sizeof(hour_time_));
  _internal_metadata_.Clear();
}

bool AvatarExpeditionStartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarExpeditionStartReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 avatar_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &avatar_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 exp_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hour_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarExpeditionStartReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarExpeditionStartReq)
  return false;
#undef DO_
}

void AvatarExpeditionStartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarExpeditionStartReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 avatar_guid = 1;
  if (this->avatar_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->avatar_guid(), output);
  }

  // uint32 exp_id = 2;
  if (this->exp_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp_id(), output);
  }

  // uint32 hour_time = 3;
  if (this->hour_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hour_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarExpeditionStartReq)
}

::google::protobuf::uint8* AvatarExpeditionStartReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarExpeditionStartReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 avatar_guid = 1;
  if (this->avatar_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->avatar_guid(), target);
  }

  // uint32 exp_id = 2;
  if (this->exp_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exp_id(), target);
  }

  // uint32 hour_time = 3;
  if (this->hour_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hour_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarExpeditionStartReq)
  return target;
}

size_t AvatarExpeditionStartReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarExpeditionStartReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 avatar_guid = 1;
  if (this->avatar_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->avatar_guid());
  }

  // uint32 exp_id = 2;
  if (this->exp_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exp_id());
  }

  // uint32 hour_time = 3;
  if (this->hour_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hour_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarExpeditionStartReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarExpeditionStartReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarExpeditionStartReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarExpeditionStartReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarExpeditionStartReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarExpeditionStartReq)
    MergeFrom(*source);
  }
}

void AvatarExpeditionStartReq::MergeFrom(const AvatarExpeditionStartReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarExpeditionStartReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatar_guid() != 0) {
    set_avatar_guid(from.avatar_guid());
  }
  if (from.exp_id() != 0) {
    set_exp_id(from.exp_id());
  }
  if (from.hour_time() != 0) {
    set_hour_time(from.hour_time());
  }
}

void AvatarExpeditionStartReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarExpeditionStartReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarExpeditionStartReq::CopyFrom(const AvatarExpeditionStartReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarExpeditionStartReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarExpeditionStartReq::IsInitialized() const {
  return true;
}

void AvatarExpeditionStartReq::Swap(AvatarExpeditionStartReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarExpeditionStartReq::InternalSwap(AvatarExpeditionStartReq* other) {
  using std::swap;
  swap(avatar_guid_, other->avatar_guid_);
  swap(exp_id_, other->exp_id_);
  swap(hour_time_, other->hour_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarExpeditionStartReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarExpeditionStartReq

// uint64 avatar_guid = 1;
void AvatarExpeditionStartReq::clear_avatar_guid() {
  avatar_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AvatarExpeditionStartReq::avatar_guid() const {
  // @@protoc_insertion_point(field_get:proto.AvatarExpeditionStartReq.avatar_guid)
  return avatar_guid_;
}
void AvatarExpeditionStartReq::set_avatar_guid(::google::protobuf::uint64 value) {
  
  avatar_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarExpeditionStartReq.avatar_guid)
}

// uint32 exp_id = 2;
void AvatarExpeditionStartReq::clear_exp_id() {
  exp_id_ = 0u;
}
::google::protobuf::uint32 AvatarExpeditionStartReq::exp_id() const {
  // @@protoc_insertion_point(field_get:proto.AvatarExpeditionStartReq.exp_id)
  return exp_id_;
}
void AvatarExpeditionStartReq::set_exp_id(::google::protobuf::uint32 value) {
  
  exp_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarExpeditionStartReq.exp_id)
}

// uint32 hour_time = 3;
void AvatarExpeditionStartReq::clear_hour_time() {
  hour_time_ = 0u;
}
::google::protobuf::uint32 AvatarExpeditionStartReq::hour_time() const {
  // @@protoc_insertion_point(field_get:proto.AvatarExpeditionStartReq.hour_time)
  return hour_time_;
}
void AvatarExpeditionStartReq::set_hour_time(::google::protobuf::uint32 value) {
  
  hour_time_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarExpeditionStartReq.hour_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

AvatarExpeditionStartRsp::AvatarExpeditionStartRsp_ExpeditionInfoMapEntry::AvatarExpeditionStartRsp_ExpeditionInfoMapEntry() {}
AvatarExpeditionStartRsp::AvatarExpeditionStartRsp_ExpeditionInfoMapEntry::AvatarExpeditionStartRsp_ExpeditionInfoMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata AvatarExpeditionStartRsp::AvatarExpeditionStartRsp_ExpeditionInfoMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[36];
}
void AvatarExpeditionStartRsp::AvatarExpeditionStartRsp_ExpeditionInfoMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void AvatarExpeditionStartRsp::AvatarExpeditionStartRsp_ExpeditionInfoMapEntry::MergeFrom(const AvatarExpeditionStartRsp_ExpeditionInfoMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarExpeditionStartRsp::kRetcodeFieldNumber;
const int AvatarExpeditionStartRsp::kExpeditionInfoMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarExpeditionStartRsp::AvatarExpeditionStartRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarExpeditionStartRsp)
}
AvatarExpeditionStartRsp::AvatarExpeditionStartRsp(const AvatarExpeditionStartRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  expedition_info_map_.MergeFrom(from.expedition_info_map_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.AvatarExpeditionStartRsp)
}

void AvatarExpeditionStartRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

AvatarExpeditionStartRsp::~AvatarExpeditionStartRsp() {
  // @@protoc_insertion_point(destructor:proto.AvatarExpeditionStartRsp)
  SharedDtor();
}

void AvatarExpeditionStartRsp::SharedDtor() {
}

void AvatarExpeditionStartRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarExpeditionStartRsp::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarExpeditionStartRsp& AvatarExpeditionStartRsp::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarExpeditionStartRsp* AvatarExpeditionStartRsp::New(::google::protobuf::Arena* arena) const {
  AvatarExpeditionStartRsp* n = new AvatarExpeditionStartRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarExpeditionStartRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarExpeditionStartRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  expedition_info_map_.Clear();
  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool AvatarExpeditionStartRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarExpeditionStartRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          AvatarExpeditionStartRsp_ExpeditionInfoMapEntry::Parser< ::google::protobuf::internal::MapField<
              AvatarExpeditionStartRsp_ExpeditionInfoMapEntry,
              ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo > > parser(&expedition_info_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarExpeditionStartRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarExpeditionStartRsp)
  return false;
#undef DO_
}

void AvatarExpeditionStartRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarExpeditionStartRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 2;
  if (!this->expedition_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->expedition_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->expedition_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
          it = this->expedition_info_map().begin();
          it != this->expedition_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarExpeditionStartRsp_ExpeditionInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(expedition_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarExpeditionStartRsp_ExpeditionInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
          it = this->expedition_info_map().begin();
          it != this->expedition_info_map().end(); ++it) {
        entry.reset(expedition_info_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarExpeditionStartRsp)
}

::google::protobuf::uint8* AvatarExpeditionStartRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarExpeditionStartRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 2;
  if (!this->expedition_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->expedition_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->expedition_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
          it = this->expedition_info_map().begin();
          it != this->expedition_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarExpeditionStartRsp_ExpeditionInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(expedition_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarExpeditionStartRsp_ExpeditionInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
          it = this->expedition_info_map().begin();
          it != this->expedition_info_map().end(); ++it) {
        entry.reset(expedition_info_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarExpeditionStartRsp)
  return target;
}

size_t AvatarExpeditionStartRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarExpeditionStartRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->expedition_info_map_size());
  {
    ::google::protobuf::scoped_ptr<AvatarExpeditionStartRsp_ExpeditionInfoMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
        it = this->expedition_info_map().begin();
        it != this->expedition_info_map().end(); ++it) {
      entry.reset(expedition_info_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarExpeditionStartRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarExpeditionStartRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarExpeditionStartRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarExpeditionStartRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarExpeditionStartRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarExpeditionStartRsp)
    MergeFrom(*source);
  }
}

void AvatarExpeditionStartRsp::MergeFrom(const AvatarExpeditionStartRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarExpeditionStartRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  expedition_info_map_.MergeFrom(from.expedition_info_map_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void AvatarExpeditionStartRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarExpeditionStartRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarExpeditionStartRsp::CopyFrom(const AvatarExpeditionStartRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarExpeditionStartRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarExpeditionStartRsp::IsInitialized() const {
  return true;
}

void AvatarExpeditionStartRsp::Swap(AvatarExpeditionStartRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarExpeditionStartRsp::InternalSwap(AvatarExpeditionStartRsp* other) {
  using std::swap;
  expedition_info_map_.Swap(&other->expedition_info_map_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarExpeditionStartRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarExpeditionStartRsp

// int32 retcode = 1;
void AvatarExpeditionStartRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 AvatarExpeditionStartRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.AvatarExpeditionStartRsp.retcode)
  return retcode_;
}
void AvatarExpeditionStartRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarExpeditionStartRsp.retcode)
}

// map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 2;
int AvatarExpeditionStartRsp::expedition_info_map_size() const {
  return expedition_info_map_.size();
}
void AvatarExpeditionStartRsp::clear_expedition_info_map() {
  expedition_info_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >&
AvatarExpeditionStartRsp::expedition_info_map() const {
  // @@protoc_insertion_point(field_map:proto.AvatarExpeditionStartRsp.expedition_info_map)
  return expedition_info_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >*
AvatarExpeditionStartRsp::mutable_expedition_info_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.AvatarExpeditionStartRsp.expedition_info_map)
  return expedition_info_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarExpeditionCallBackReq::kAvatarGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarExpeditionCallBackReq::AvatarExpeditionCallBackReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarExpeditionCallBackReq)
}
AvatarExpeditionCallBackReq::AvatarExpeditionCallBackReq(const AvatarExpeditionCallBackReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      avatar_guid_(from.avatar_guid_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.AvatarExpeditionCallBackReq)
}

void AvatarExpeditionCallBackReq::SharedCtor() {
  _cached_size_ = 0;
}

AvatarExpeditionCallBackReq::~AvatarExpeditionCallBackReq() {
  // @@protoc_insertion_point(destructor:proto.AvatarExpeditionCallBackReq)
  SharedDtor();
}

void AvatarExpeditionCallBackReq::SharedDtor() {
}

void AvatarExpeditionCallBackReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarExpeditionCallBackReq::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarExpeditionCallBackReq& AvatarExpeditionCallBackReq::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarExpeditionCallBackReq* AvatarExpeditionCallBackReq::New(::google::protobuf::Arena* arena) const {
  AvatarExpeditionCallBackReq* n = new AvatarExpeditionCallBackReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarExpeditionCallBackReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarExpeditionCallBackReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_guid_.Clear();
  _internal_metadata_.Clear();
}

bool AvatarExpeditionCallBackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarExpeditionCallBackReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 avatar_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_avatar_guid())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10u, input, this->mutable_avatar_guid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarExpeditionCallBackReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarExpeditionCallBackReq)
  return false;
#undef DO_
}

void AvatarExpeditionCallBackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarExpeditionCallBackReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 avatar_guid = 1;
  if (this->avatar_guid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _avatar_guid_cached_byte_size_));
  }
  for (int i = 0, n = this->avatar_guid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->avatar_guid(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarExpeditionCallBackReq)
}

::google::protobuf::uint8* AvatarExpeditionCallBackReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarExpeditionCallBackReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 avatar_guid = 1;
  if (this->avatar_guid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _avatar_guid_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->avatar_guid_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarExpeditionCallBackReq)
  return target;
}

size_t AvatarExpeditionCallBackReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarExpeditionCallBackReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 avatar_guid = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->avatar_guid_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _avatar_guid_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarExpeditionCallBackReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarExpeditionCallBackReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarExpeditionCallBackReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarExpeditionCallBackReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarExpeditionCallBackReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarExpeditionCallBackReq)
    MergeFrom(*source);
  }
}

void AvatarExpeditionCallBackReq::MergeFrom(const AvatarExpeditionCallBackReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarExpeditionCallBackReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatar_guid_.MergeFrom(from.avatar_guid_);
}

void AvatarExpeditionCallBackReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarExpeditionCallBackReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarExpeditionCallBackReq::CopyFrom(const AvatarExpeditionCallBackReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarExpeditionCallBackReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarExpeditionCallBackReq::IsInitialized() const {
  return true;
}

void AvatarExpeditionCallBackReq::Swap(AvatarExpeditionCallBackReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarExpeditionCallBackReq::InternalSwap(AvatarExpeditionCallBackReq* other) {
  using std::swap;
  avatar_guid_.InternalSwap(&other->avatar_guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarExpeditionCallBackReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarExpeditionCallBackReq

// repeated uint64 avatar_guid = 1;
int AvatarExpeditionCallBackReq::avatar_guid_size() const {
  return avatar_guid_.size();
}
void AvatarExpeditionCallBackReq::clear_avatar_guid() {
  avatar_guid_.Clear();
}
::google::protobuf::uint64 AvatarExpeditionCallBackReq::avatar_guid(int index) const {
  // @@protoc_insertion_point(field_get:proto.AvatarExpeditionCallBackReq.avatar_guid)
  return avatar_guid_.Get(index);
}
void AvatarExpeditionCallBackReq::set_avatar_guid(int index, ::google::protobuf::uint64 value) {
  avatar_guid_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.AvatarExpeditionCallBackReq.avatar_guid)
}
void AvatarExpeditionCallBackReq::add_avatar_guid(::google::protobuf::uint64 value) {
  avatar_guid_.Add(value);
  // @@protoc_insertion_point(field_add:proto.AvatarExpeditionCallBackReq.avatar_guid)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AvatarExpeditionCallBackReq::avatar_guid() const {
  // @@protoc_insertion_point(field_list:proto.AvatarExpeditionCallBackReq.avatar_guid)
  return avatar_guid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AvatarExpeditionCallBackReq::mutable_avatar_guid() {
  // @@protoc_insertion_point(field_mutable_list:proto.AvatarExpeditionCallBackReq.avatar_guid)
  return &avatar_guid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

AvatarExpeditionCallBackRsp::AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry::AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry() {}
AvatarExpeditionCallBackRsp::AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry::AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata AvatarExpeditionCallBackRsp::AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[39];
}
void AvatarExpeditionCallBackRsp::AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void AvatarExpeditionCallBackRsp::AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry::MergeFrom(const AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarExpeditionCallBackRsp::kRetcodeFieldNumber;
const int AvatarExpeditionCallBackRsp::kExpeditionInfoMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarExpeditionCallBackRsp::AvatarExpeditionCallBackRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarExpeditionCallBackRsp)
}
AvatarExpeditionCallBackRsp::AvatarExpeditionCallBackRsp(const AvatarExpeditionCallBackRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  expedition_info_map_.MergeFrom(from.expedition_info_map_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.AvatarExpeditionCallBackRsp)
}

void AvatarExpeditionCallBackRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

AvatarExpeditionCallBackRsp::~AvatarExpeditionCallBackRsp() {
  // @@protoc_insertion_point(destructor:proto.AvatarExpeditionCallBackRsp)
  SharedDtor();
}

void AvatarExpeditionCallBackRsp::SharedDtor() {
}

void AvatarExpeditionCallBackRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarExpeditionCallBackRsp::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarExpeditionCallBackRsp& AvatarExpeditionCallBackRsp::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarExpeditionCallBackRsp* AvatarExpeditionCallBackRsp::New(::google::protobuf::Arena* arena) const {
  AvatarExpeditionCallBackRsp* n = new AvatarExpeditionCallBackRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarExpeditionCallBackRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarExpeditionCallBackRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  expedition_info_map_.Clear();
  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool AvatarExpeditionCallBackRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarExpeditionCallBackRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry::Parser< ::google::protobuf::internal::MapField<
              AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry,
              ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo > > parser(&expedition_info_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarExpeditionCallBackRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarExpeditionCallBackRsp)
  return false;
#undef DO_
}

void AvatarExpeditionCallBackRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarExpeditionCallBackRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 2;
  if (!this->expedition_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->expedition_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->expedition_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
          it = this->expedition_info_map().begin();
          it != this->expedition_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(expedition_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
          it = this->expedition_info_map().begin();
          it != this->expedition_info_map().end(); ++it) {
        entry.reset(expedition_info_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarExpeditionCallBackRsp)
}

::google::protobuf::uint8* AvatarExpeditionCallBackRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarExpeditionCallBackRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 2;
  if (!this->expedition_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->expedition_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->expedition_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
          it = this->expedition_info_map().begin();
          it != this->expedition_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(expedition_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
          it = this->expedition_info_map().begin();
          it != this->expedition_info_map().end(); ++it) {
        entry.reset(expedition_info_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarExpeditionCallBackRsp)
  return target;
}

size_t AvatarExpeditionCallBackRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarExpeditionCallBackRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->expedition_info_map_size());
  {
    ::google::protobuf::scoped_ptr<AvatarExpeditionCallBackRsp_ExpeditionInfoMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
        it = this->expedition_info_map().begin();
        it != this->expedition_info_map().end(); ++it) {
      entry.reset(expedition_info_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarExpeditionCallBackRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarExpeditionCallBackRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarExpeditionCallBackRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarExpeditionCallBackRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarExpeditionCallBackRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarExpeditionCallBackRsp)
    MergeFrom(*source);
  }
}

void AvatarExpeditionCallBackRsp::MergeFrom(const AvatarExpeditionCallBackRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarExpeditionCallBackRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  expedition_info_map_.MergeFrom(from.expedition_info_map_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void AvatarExpeditionCallBackRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarExpeditionCallBackRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarExpeditionCallBackRsp::CopyFrom(const AvatarExpeditionCallBackRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarExpeditionCallBackRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarExpeditionCallBackRsp::IsInitialized() const {
  return true;
}

void AvatarExpeditionCallBackRsp::Swap(AvatarExpeditionCallBackRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarExpeditionCallBackRsp::InternalSwap(AvatarExpeditionCallBackRsp* other) {
  using std::swap;
  expedition_info_map_.Swap(&other->expedition_info_map_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarExpeditionCallBackRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarExpeditionCallBackRsp

// int32 retcode = 1;
void AvatarExpeditionCallBackRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 AvatarExpeditionCallBackRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.AvatarExpeditionCallBackRsp.retcode)
  return retcode_;
}
void AvatarExpeditionCallBackRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarExpeditionCallBackRsp.retcode)
}

// map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 2;
int AvatarExpeditionCallBackRsp::expedition_info_map_size() const {
  return expedition_info_map_.size();
}
void AvatarExpeditionCallBackRsp::clear_expedition_info_map() {
  expedition_info_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >&
AvatarExpeditionCallBackRsp::expedition_info_map() const {
  // @@protoc_insertion_point(field_map:proto.AvatarExpeditionCallBackRsp.expedition_info_map)
  return expedition_info_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >*
AvatarExpeditionCallBackRsp::mutable_expedition_info_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.AvatarExpeditionCallBackRsp.expedition_info_map)
  return expedition_info_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarExpeditionGetRewardReq::kAvatarGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarExpeditionGetRewardReq::AvatarExpeditionGetRewardReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarExpeditionGetRewardReq)
}
AvatarExpeditionGetRewardReq::AvatarExpeditionGetRewardReq(const AvatarExpeditionGetRewardReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avatar_guid_ = from.avatar_guid_;
  // @@protoc_insertion_point(copy_constructor:proto.AvatarExpeditionGetRewardReq)
}

void AvatarExpeditionGetRewardReq::SharedCtor() {
  avatar_guid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

AvatarExpeditionGetRewardReq::~AvatarExpeditionGetRewardReq() {
  // @@protoc_insertion_point(destructor:proto.AvatarExpeditionGetRewardReq)
  SharedDtor();
}

void AvatarExpeditionGetRewardReq::SharedDtor() {
}

void AvatarExpeditionGetRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarExpeditionGetRewardReq::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarExpeditionGetRewardReq& AvatarExpeditionGetRewardReq::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarExpeditionGetRewardReq* AvatarExpeditionGetRewardReq::New(::google::protobuf::Arena* arena) const {
  AvatarExpeditionGetRewardReq* n = new AvatarExpeditionGetRewardReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarExpeditionGetRewardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarExpeditionGetRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_guid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool AvatarExpeditionGetRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarExpeditionGetRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 avatar_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &avatar_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarExpeditionGetRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarExpeditionGetRewardReq)
  return false;
#undef DO_
}

void AvatarExpeditionGetRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarExpeditionGetRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 avatar_guid = 1;
  if (this->avatar_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->avatar_guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarExpeditionGetRewardReq)
}

::google::protobuf::uint8* AvatarExpeditionGetRewardReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarExpeditionGetRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 avatar_guid = 1;
  if (this->avatar_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->avatar_guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarExpeditionGetRewardReq)
  return target;
}

size_t AvatarExpeditionGetRewardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarExpeditionGetRewardReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 avatar_guid = 1;
  if (this->avatar_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->avatar_guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarExpeditionGetRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarExpeditionGetRewardReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarExpeditionGetRewardReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarExpeditionGetRewardReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarExpeditionGetRewardReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarExpeditionGetRewardReq)
    MergeFrom(*source);
  }
}

void AvatarExpeditionGetRewardReq::MergeFrom(const AvatarExpeditionGetRewardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarExpeditionGetRewardReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatar_guid() != 0) {
    set_avatar_guid(from.avatar_guid());
  }
}

void AvatarExpeditionGetRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarExpeditionGetRewardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarExpeditionGetRewardReq::CopyFrom(const AvatarExpeditionGetRewardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarExpeditionGetRewardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarExpeditionGetRewardReq::IsInitialized() const {
  return true;
}

void AvatarExpeditionGetRewardReq::Swap(AvatarExpeditionGetRewardReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarExpeditionGetRewardReq::InternalSwap(AvatarExpeditionGetRewardReq* other) {
  using std::swap;
  swap(avatar_guid_, other->avatar_guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarExpeditionGetRewardReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarExpeditionGetRewardReq

// uint64 avatar_guid = 1;
void AvatarExpeditionGetRewardReq::clear_avatar_guid() {
  avatar_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AvatarExpeditionGetRewardReq::avatar_guid() const {
  // @@protoc_insertion_point(field_get:proto.AvatarExpeditionGetRewardReq.avatar_guid)
  return avatar_guid_;
}
void AvatarExpeditionGetRewardReq::set_avatar_guid(::google::protobuf::uint64 value) {
  
  avatar_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarExpeditionGetRewardReq.avatar_guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

AvatarExpeditionGetRewardRsp::AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry::AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry() {}
AvatarExpeditionGetRewardRsp::AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry::AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata AvatarExpeditionGetRewardRsp::AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[42];
}
void AvatarExpeditionGetRewardRsp::AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void AvatarExpeditionGetRewardRsp::AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry::MergeFrom(const AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarExpeditionGetRewardRsp::kRetcodeFieldNumber;
const int AvatarExpeditionGetRewardRsp::kExpeditionInfoMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarExpeditionGetRewardRsp::AvatarExpeditionGetRewardRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AvatarExpeditionGetRewardRsp)
}
AvatarExpeditionGetRewardRsp::AvatarExpeditionGetRewardRsp(const AvatarExpeditionGetRewardRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  expedition_info_map_.MergeFrom(from.expedition_info_map_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.AvatarExpeditionGetRewardRsp)
}

void AvatarExpeditionGetRewardRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

AvatarExpeditionGetRewardRsp::~AvatarExpeditionGetRewardRsp() {
  // @@protoc_insertion_point(destructor:proto.AvatarExpeditionGetRewardRsp)
  SharedDtor();
}

void AvatarExpeditionGetRewardRsp::SharedDtor() {
}

void AvatarExpeditionGetRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarExpeditionGetRewardRsp::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvatarExpeditionGetRewardRsp& AvatarExpeditionGetRewardRsp::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

AvatarExpeditionGetRewardRsp* AvatarExpeditionGetRewardRsp::New(::google::protobuf::Arena* arena) const {
  AvatarExpeditionGetRewardRsp* n = new AvatarExpeditionGetRewardRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvatarExpeditionGetRewardRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AvatarExpeditionGetRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  expedition_info_map_.Clear();
  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool AvatarExpeditionGetRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AvatarExpeditionGetRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry::Parser< ::google::protobuf::internal::MapField<
              AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry,
              ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo > > parser(&expedition_info_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AvatarExpeditionGetRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AvatarExpeditionGetRewardRsp)
  return false;
#undef DO_
}

void AvatarExpeditionGetRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AvatarExpeditionGetRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 2;
  if (!this->expedition_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->expedition_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->expedition_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
          it = this->expedition_info_map().begin();
          it != this->expedition_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(expedition_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
          it = this->expedition_info_map().begin();
          it != this->expedition_info_map().end(); ++it) {
        entry.reset(expedition_info_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AvatarExpeditionGetRewardRsp)
}

::google::protobuf::uint8* AvatarExpeditionGetRewardRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AvatarExpeditionGetRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 2;
  if (!this->expedition_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->expedition_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->expedition_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
          it = this->expedition_info_map().begin();
          it != this->expedition_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(expedition_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
          it = this->expedition_info_map().begin();
          it != this->expedition_info_map().end(); ++it) {
        entry.reset(expedition_info_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AvatarExpeditionGetRewardRsp)
  return target;
}

size_t AvatarExpeditionGetRewardRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AvatarExpeditionGetRewardRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->expedition_info_map_size());
  {
    ::google::protobuf::scoped_ptr<AvatarExpeditionGetRewardRsp_ExpeditionInfoMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >::const_iterator
        it = this->expedition_info_map().begin();
        it != this->expedition_info_map().end(); ++it) {
      entry.reset(expedition_info_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarExpeditionGetRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AvatarExpeditionGetRewardRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarExpeditionGetRewardRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvatarExpeditionGetRewardRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AvatarExpeditionGetRewardRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AvatarExpeditionGetRewardRsp)
    MergeFrom(*source);
  }
}

void AvatarExpeditionGetRewardRsp::MergeFrom(const AvatarExpeditionGetRewardRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AvatarExpeditionGetRewardRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  expedition_info_map_.MergeFrom(from.expedition_info_map_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void AvatarExpeditionGetRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AvatarExpeditionGetRewardRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarExpeditionGetRewardRsp::CopyFrom(const AvatarExpeditionGetRewardRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AvatarExpeditionGetRewardRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarExpeditionGetRewardRsp::IsInitialized() const {
  return true;
}

void AvatarExpeditionGetRewardRsp::Swap(AvatarExpeditionGetRewardRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarExpeditionGetRewardRsp::InternalSwap(AvatarExpeditionGetRewardRsp* other) {
  using std::swap;
  expedition_info_map_.Swap(&other->expedition_info_map_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvatarExpeditionGetRewardRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvatarExpeditionGetRewardRsp

// int32 retcode = 1;
void AvatarExpeditionGetRewardRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 AvatarExpeditionGetRewardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.AvatarExpeditionGetRewardRsp.retcode)
  return retcode_;
}
void AvatarExpeditionGetRewardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.AvatarExpeditionGetRewardRsp.retcode)
}

// map<uint64, .proto.AvatarExpeditionInfo> expedition_info_map = 2;
int AvatarExpeditionGetRewardRsp::expedition_info_map_size() const {
  return expedition_info_map_.size();
}
void AvatarExpeditionGetRewardRsp::clear_expedition_info_map() {
  expedition_info_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >&
AvatarExpeditionGetRewardRsp::expedition_info_map() const {
  // @@protoc_insertion_point(field_map:proto.AvatarExpeditionGetRewardRsp.expedition_info_map)
  return expedition_info_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint64, ::proto::AvatarExpeditionInfo >*
AvatarExpeditionGetRewardRsp::mutable_expedition_info_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.AvatarExpeditionGetRewardRsp.expedition_info_map)
  return expedition_info_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeMpTeamAvatarReq::kAvatarGuidListFieldNumber;
const int ChangeMpTeamAvatarReq::kCurAvatarGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeMpTeamAvatarReq::ChangeMpTeamAvatarReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChangeMpTeamAvatarReq)
}
ChangeMpTeamAvatarReq::ChangeMpTeamAvatarReq(const ChangeMpTeamAvatarReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      avatar_guid_list_(from.avatar_guid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cur_avatar_guid_ = from.cur_avatar_guid_;
  // @@protoc_insertion_point(copy_constructor:proto.ChangeMpTeamAvatarReq)
}

void ChangeMpTeamAvatarReq::SharedCtor() {
  cur_avatar_guid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ChangeMpTeamAvatarReq::~ChangeMpTeamAvatarReq() {
  // @@protoc_insertion_point(destructor:proto.ChangeMpTeamAvatarReq)
  SharedDtor();
}

void ChangeMpTeamAvatarReq::SharedDtor() {
}

void ChangeMpTeamAvatarReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeMpTeamAvatarReq::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChangeMpTeamAvatarReq& ChangeMpTeamAvatarReq::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChangeMpTeamAvatarReq* ChangeMpTeamAvatarReq::New(::google::protobuf::Arena* arena) const {
  ChangeMpTeamAvatarReq* n = new ChangeMpTeamAvatarReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeMpTeamAvatarReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChangeMpTeamAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_guid_list_.Clear();
  cur_avatar_guid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool ChangeMpTeamAvatarReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChangeMpTeamAvatarReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 avatar_guid_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_avatar_guid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10u, input, this->mutable_avatar_guid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 cur_avatar_guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_avatar_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChangeMpTeamAvatarReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChangeMpTeamAvatarReq)
  return false;
#undef DO_
}

void ChangeMpTeamAvatarReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChangeMpTeamAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 avatar_guid_list = 1;
  if (this->avatar_guid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _avatar_guid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->avatar_guid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->avatar_guid_list(i), output);
  }

  // uint64 cur_avatar_guid = 2;
  if (this->cur_avatar_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cur_avatar_guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChangeMpTeamAvatarReq)
}

::google::protobuf::uint8* ChangeMpTeamAvatarReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChangeMpTeamAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 avatar_guid_list = 1;
  if (this->avatar_guid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _avatar_guid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->avatar_guid_list_, target);
  }

  // uint64 cur_avatar_guid = 2;
  if (this->cur_avatar_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cur_avatar_guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChangeMpTeamAvatarReq)
  return target;
}

size_t ChangeMpTeamAvatarReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChangeMpTeamAvatarReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 avatar_guid_list = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->avatar_guid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _avatar_guid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint64 cur_avatar_guid = 2;
  if (this->cur_avatar_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cur_avatar_guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeMpTeamAvatarReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChangeMpTeamAvatarReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeMpTeamAvatarReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeMpTeamAvatarReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChangeMpTeamAvatarReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChangeMpTeamAvatarReq)
    MergeFrom(*source);
  }
}

void ChangeMpTeamAvatarReq::MergeFrom(const ChangeMpTeamAvatarReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChangeMpTeamAvatarReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatar_guid_list_.MergeFrom(from.avatar_guid_list_);
  if (from.cur_avatar_guid() != 0) {
    set_cur_avatar_guid(from.cur_avatar_guid());
  }
}

void ChangeMpTeamAvatarReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChangeMpTeamAvatarReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeMpTeamAvatarReq::CopyFrom(const ChangeMpTeamAvatarReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChangeMpTeamAvatarReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeMpTeamAvatarReq::IsInitialized() const {
  return true;
}

void ChangeMpTeamAvatarReq::Swap(ChangeMpTeamAvatarReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeMpTeamAvatarReq::InternalSwap(ChangeMpTeamAvatarReq* other) {
  using std::swap;
  avatar_guid_list_.InternalSwap(&other->avatar_guid_list_);
  swap(cur_avatar_guid_, other->cur_avatar_guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeMpTeamAvatarReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeMpTeamAvatarReq

// repeated uint64 avatar_guid_list = 1;
int ChangeMpTeamAvatarReq::avatar_guid_list_size() const {
  return avatar_guid_list_.size();
}
void ChangeMpTeamAvatarReq::clear_avatar_guid_list() {
  avatar_guid_list_.Clear();
}
::google::protobuf::uint64 ChangeMpTeamAvatarReq::avatar_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ChangeMpTeamAvatarReq.avatar_guid_list)
  return avatar_guid_list_.Get(index);
}
void ChangeMpTeamAvatarReq::set_avatar_guid_list(int index, ::google::protobuf::uint64 value) {
  avatar_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ChangeMpTeamAvatarReq.avatar_guid_list)
}
void ChangeMpTeamAvatarReq::add_avatar_guid_list(::google::protobuf::uint64 value) {
  avatar_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.ChangeMpTeamAvatarReq.avatar_guid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ChangeMpTeamAvatarReq::avatar_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.ChangeMpTeamAvatarReq.avatar_guid_list)
  return avatar_guid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ChangeMpTeamAvatarReq::mutable_avatar_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ChangeMpTeamAvatarReq.avatar_guid_list)
  return &avatar_guid_list_;
}

// uint64 cur_avatar_guid = 2;
void ChangeMpTeamAvatarReq::clear_cur_avatar_guid() {
  cur_avatar_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ChangeMpTeamAvatarReq::cur_avatar_guid() const {
  // @@protoc_insertion_point(field_get:proto.ChangeMpTeamAvatarReq.cur_avatar_guid)
  return cur_avatar_guid_;
}
void ChangeMpTeamAvatarReq::set_cur_avatar_guid(::google::protobuf::uint64 value) {
  
  cur_avatar_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.ChangeMpTeamAvatarReq.cur_avatar_guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeMpTeamAvatarRsp::kRetcodeFieldNumber;
const int ChangeMpTeamAvatarRsp::kAvatarGuidListFieldNumber;
const int ChangeMpTeamAvatarRsp::kCurAvatarGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeMpTeamAvatarRsp::ChangeMpTeamAvatarRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChangeMpTeamAvatarRsp)
}
ChangeMpTeamAvatarRsp::ChangeMpTeamAvatarRsp(const ChangeMpTeamAvatarRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      avatar_guid_list_(from.avatar_guid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cur_avatar_guid_, &from.cur_avatar_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&cur_avatar_guid_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:proto.ChangeMpTeamAvatarRsp)
}

void ChangeMpTeamAvatarRsp::SharedCtor() {
  ::memset(&cur_avatar_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&cur_avatar_guid_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

ChangeMpTeamAvatarRsp::~ChangeMpTeamAvatarRsp() {
  // @@protoc_insertion_point(destructor:proto.ChangeMpTeamAvatarRsp)
  SharedDtor();
}

void ChangeMpTeamAvatarRsp::SharedDtor() {
}

void ChangeMpTeamAvatarRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeMpTeamAvatarRsp::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChangeMpTeamAvatarRsp& ChangeMpTeamAvatarRsp::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChangeMpTeamAvatarRsp* ChangeMpTeamAvatarRsp::New(::google::protobuf::Arena* arena) const {
  ChangeMpTeamAvatarRsp* n = new ChangeMpTeamAvatarRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeMpTeamAvatarRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChangeMpTeamAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_guid_list_.Clear();
  ::memset(&cur_avatar_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&cur_avatar_guid_)) + sizeof(retcode_));
  _internal_metadata_.Clear();
}

bool ChangeMpTeamAvatarRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChangeMpTeamAvatarRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 avatar_guid_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_avatar_guid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_avatar_guid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 cur_avatar_guid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_avatar_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChangeMpTeamAvatarRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChangeMpTeamAvatarRsp)
  return false;
#undef DO_
}

void ChangeMpTeamAvatarRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChangeMpTeamAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // repeated uint64 avatar_guid_list = 2;
  if (this->avatar_guid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _avatar_guid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->avatar_guid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->avatar_guid_list(i), output);
  }

  // uint64 cur_avatar_guid = 3;
  if (this->cur_avatar_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cur_avatar_guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChangeMpTeamAvatarRsp)
}

::google::protobuf::uint8* ChangeMpTeamAvatarRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChangeMpTeamAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // repeated uint64 avatar_guid_list = 2;
  if (this->avatar_guid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _avatar_guid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->avatar_guid_list_, target);
  }

  // uint64 cur_avatar_guid = 3;
  if (this->cur_avatar_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cur_avatar_guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChangeMpTeamAvatarRsp)
  return target;
}

size_t ChangeMpTeamAvatarRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChangeMpTeamAvatarRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 avatar_guid_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->avatar_guid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _avatar_guid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint64 cur_avatar_guid = 3;
  if (this->cur_avatar_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cur_avatar_guid());
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeMpTeamAvatarRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChangeMpTeamAvatarRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeMpTeamAvatarRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeMpTeamAvatarRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChangeMpTeamAvatarRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChangeMpTeamAvatarRsp)
    MergeFrom(*source);
  }
}

void ChangeMpTeamAvatarRsp::MergeFrom(const ChangeMpTeamAvatarRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChangeMpTeamAvatarRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatar_guid_list_.MergeFrom(from.avatar_guid_list_);
  if (from.cur_avatar_guid() != 0) {
    set_cur_avatar_guid(from.cur_avatar_guid());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void ChangeMpTeamAvatarRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChangeMpTeamAvatarRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeMpTeamAvatarRsp::CopyFrom(const ChangeMpTeamAvatarRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChangeMpTeamAvatarRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeMpTeamAvatarRsp::IsInitialized() const {
  return true;
}

void ChangeMpTeamAvatarRsp::Swap(ChangeMpTeamAvatarRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeMpTeamAvatarRsp::InternalSwap(ChangeMpTeamAvatarRsp* other) {
  using std::swap;
  avatar_guid_list_.InternalSwap(&other->avatar_guid_list_);
  swap(cur_avatar_guid_, other->cur_avatar_guid_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeMpTeamAvatarRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeMpTeamAvatarRsp

// int32 retcode = 1;
void ChangeMpTeamAvatarRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 ChangeMpTeamAvatarRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ChangeMpTeamAvatarRsp.retcode)
  return retcode_;
}
void ChangeMpTeamAvatarRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ChangeMpTeamAvatarRsp.retcode)
}

// repeated uint64 avatar_guid_list = 2;
int ChangeMpTeamAvatarRsp::avatar_guid_list_size() const {
  return avatar_guid_list_.size();
}
void ChangeMpTeamAvatarRsp::clear_avatar_guid_list() {
  avatar_guid_list_.Clear();
}
::google::protobuf::uint64 ChangeMpTeamAvatarRsp::avatar_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ChangeMpTeamAvatarRsp.avatar_guid_list)
  return avatar_guid_list_.Get(index);
}
void ChangeMpTeamAvatarRsp::set_avatar_guid_list(int index, ::google::protobuf::uint64 value) {
  avatar_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ChangeMpTeamAvatarRsp.avatar_guid_list)
}
void ChangeMpTeamAvatarRsp::add_avatar_guid_list(::google::protobuf::uint64 value) {
  avatar_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.ChangeMpTeamAvatarRsp.avatar_guid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ChangeMpTeamAvatarRsp::avatar_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.ChangeMpTeamAvatarRsp.avatar_guid_list)
  return avatar_guid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ChangeMpTeamAvatarRsp::mutable_avatar_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ChangeMpTeamAvatarRsp.avatar_guid_list)
  return &avatar_guid_list_;
}

// uint64 cur_avatar_guid = 3;
void ChangeMpTeamAvatarRsp::clear_cur_avatar_guid() {
  cur_avatar_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ChangeMpTeamAvatarRsp::cur_avatar_guid() const {
  // @@protoc_insertion_point(field_get:proto.ChangeMpTeamAvatarRsp.cur_avatar_guid)
  return cur_avatar_guid_;
}
void ChangeMpTeamAvatarRsp::set_cur_avatar_guid(::google::protobuf::uint64 value) {
  
  cur_avatar_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.ChangeMpTeamAvatarRsp.cur_avatar_guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeTeamNameReq::kTeamIdFieldNumber;
const int ChangeTeamNameReq::kTeamNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeTeamNameReq::ChangeTeamNameReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChangeTeamNameReq)
}
ChangeTeamNameReq::ChangeTeamNameReq(const ChangeTeamNameReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.team_name().size() > 0) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  team_id_ = from.team_id_;
  // @@protoc_insertion_point(copy_constructor:proto.ChangeTeamNameReq)
}

void ChangeTeamNameReq::SharedCtor() {
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_id_ = 0;
  _cached_size_ = 0;
}

ChangeTeamNameReq::~ChangeTeamNameReq() {
  // @@protoc_insertion_point(destructor:proto.ChangeTeamNameReq)
  SharedDtor();
}

void ChangeTeamNameReq::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChangeTeamNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeTeamNameReq::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChangeTeamNameReq& ChangeTeamNameReq::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChangeTeamNameReq* ChangeTeamNameReq::New(::google::protobuf::Arena* arena) const {
  ChangeTeamNameReq* n = new ChangeTeamNameReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeTeamNameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChangeTeamNameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_id_ = 0;
  _internal_metadata_.Clear();
}

bool ChangeTeamNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChangeTeamNameReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string team_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ChangeTeamNameReq.team_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChangeTeamNameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChangeTeamNameReq)
  return false;
#undef DO_
}

void ChangeTeamNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChangeTeamNameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 team_id = 1;
  if (this->team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team_id(), output);
  }

  // string team_name = 2;
  if (this->team_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ChangeTeamNameReq.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->team_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChangeTeamNameReq)
}

::google::protobuf::uint8* ChangeTeamNameReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChangeTeamNameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 team_id = 1;
  if (this->team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team_id(), target);
  }

  // string team_name = 2;
  if (this->team_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ChangeTeamNameReq.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChangeTeamNameReq)
  return target;
}

size_t ChangeTeamNameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChangeTeamNameReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string team_name = 2;
  if (this->team_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->team_name());
  }

  // int32 team_id = 1;
  if (this->team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->team_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeTeamNameReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChangeTeamNameReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeTeamNameReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeTeamNameReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChangeTeamNameReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChangeTeamNameReq)
    MergeFrom(*source);
  }
}

void ChangeTeamNameReq::MergeFrom(const ChangeTeamNameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChangeTeamNameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.team_name().size() > 0) {

    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  if (from.team_id() != 0) {
    set_team_id(from.team_id());
  }
}

void ChangeTeamNameReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChangeTeamNameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeTeamNameReq::CopyFrom(const ChangeTeamNameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChangeTeamNameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeTeamNameReq::IsInitialized() const {
  return true;
}

void ChangeTeamNameReq::Swap(ChangeTeamNameReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeTeamNameReq::InternalSwap(ChangeTeamNameReq* other) {
  using std::swap;
  team_name_.Swap(&other->team_name_);
  swap(team_id_, other->team_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeTeamNameReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeTeamNameReq

// int32 team_id = 1;
void ChangeTeamNameReq::clear_team_id() {
  team_id_ = 0;
}
::google::protobuf::int32 ChangeTeamNameReq::team_id() const {
  // @@protoc_insertion_point(field_get:proto.ChangeTeamNameReq.team_id)
  return team_id_;
}
void ChangeTeamNameReq::set_team_id(::google::protobuf::int32 value) {
  
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChangeTeamNameReq.team_id)
}

// string team_name = 2;
void ChangeTeamNameReq::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChangeTeamNameReq::team_name() const {
  // @@protoc_insertion_point(field_get:proto.ChangeTeamNameReq.team_name)
  return team_name_.GetNoArena();
}
void ChangeTeamNameReq::set_team_name(const ::std::string& value) {
  
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ChangeTeamNameReq.team_name)
}
#if LANG_CXX11
void ChangeTeamNameReq::set_team_name(::std::string&& value) {
  
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ChangeTeamNameReq.team_name)
}
#endif
void ChangeTeamNameReq::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ChangeTeamNameReq.team_name)
}
void ChangeTeamNameReq::set_team_name(const char* value, size_t size) {
  
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ChangeTeamNameReq.team_name)
}
::std::string* ChangeTeamNameReq::mutable_team_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.ChangeTeamNameReq.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChangeTeamNameReq::release_team_name() {
  // @@protoc_insertion_point(field_release:proto.ChangeTeamNameReq.team_name)
  
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChangeTeamNameReq::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    
  } else {
    
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.ChangeTeamNameReq.team_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeTeamNameRsp::kTeamIdFieldNumber;
const int ChangeTeamNameRsp::kTeamNameFieldNumber;
const int ChangeTeamNameRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeTeamNameRsp::ChangeTeamNameRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChangeTeamNameRsp)
}
ChangeTeamNameRsp::ChangeTeamNameRsp(const ChangeTeamNameRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.team_name().size() > 0) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:proto.ChangeTeamNameRsp)
}

void ChangeTeamNameRsp::SharedCtor() {
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

ChangeTeamNameRsp::~ChangeTeamNameRsp() {
  // @@protoc_insertion_point(destructor:proto.ChangeTeamNameRsp)
  SharedDtor();
}

void ChangeTeamNameRsp::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChangeTeamNameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeTeamNameRsp::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChangeTeamNameRsp& ChangeTeamNameRsp::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChangeTeamNameRsp* ChangeTeamNameRsp::New(::google::protobuf::Arena* arena) const {
  ChangeTeamNameRsp* n = new ChangeTeamNameRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeTeamNameRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChangeTeamNameRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(retcode_));
  _internal_metadata_.Clear();
}

bool ChangeTeamNameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChangeTeamNameRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string team_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ChangeTeamNameRsp.team_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChangeTeamNameRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChangeTeamNameRsp)
  return false;
#undef DO_
}

void ChangeTeamNameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChangeTeamNameRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 team_id = 1;
  if (this->team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team_id(), output);
  }

  // string team_name = 2;
  if (this->team_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ChangeTeamNameRsp.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->team_name(), output);
  }

  // int32 retcode = 3;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChangeTeamNameRsp)
}

::google::protobuf::uint8* ChangeTeamNameRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChangeTeamNameRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 team_id = 1;
  if (this->team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team_id(), target);
  }

  // string team_name = 2;
  if (this->team_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ChangeTeamNameRsp.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_name(), target);
  }

  // int32 retcode = 3;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChangeTeamNameRsp)
  return target;
}

size_t ChangeTeamNameRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChangeTeamNameRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string team_name = 2;
  if (this->team_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->team_name());
  }

  // int32 team_id = 1;
  if (this->team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->team_id());
  }

  // int32 retcode = 3;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeTeamNameRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChangeTeamNameRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeTeamNameRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeTeamNameRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChangeTeamNameRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChangeTeamNameRsp)
    MergeFrom(*source);
  }
}

void ChangeTeamNameRsp::MergeFrom(const ChangeTeamNameRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChangeTeamNameRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.team_name().size() > 0) {

    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  if (from.team_id() != 0) {
    set_team_id(from.team_id());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void ChangeTeamNameRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChangeTeamNameRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeTeamNameRsp::CopyFrom(const ChangeTeamNameRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChangeTeamNameRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeTeamNameRsp::IsInitialized() const {
  return true;
}

void ChangeTeamNameRsp::Swap(ChangeTeamNameRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeTeamNameRsp::InternalSwap(ChangeTeamNameRsp* other) {
  using std::swap;
  team_name_.Swap(&other->team_name_);
  swap(team_id_, other->team_id_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeTeamNameRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeTeamNameRsp

// int32 team_id = 1;
void ChangeTeamNameRsp::clear_team_id() {
  team_id_ = 0;
}
::google::protobuf::int32 ChangeTeamNameRsp::team_id() const {
  // @@protoc_insertion_point(field_get:proto.ChangeTeamNameRsp.team_id)
  return team_id_;
}
void ChangeTeamNameRsp::set_team_id(::google::protobuf::int32 value) {
  
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChangeTeamNameRsp.team_id)
}

// string team_name = 2;
void ChangeTeamNameRsp::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChangeTeamNameRsp::team_name() const {
  // @@protoc_insertion_point(field_get:proto.ChangeTeamNameRsp.team_name)
  return team_name_.GetNoArena();
}
void ChangeTeamNameRsp::set_team_name(const ::std::string& value) {
  
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ChangeTeamNameRsp.team_name)
}
#if LANG_CXX11
void ChangeTeamNameRsp::set_team_name(::std::string&& value) {
  
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ChangeTeamNameRsp.team_name)
}
#endif
void ChangeTeamNameRsp::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ChangeTeamNameRsp.team_name)
}
void ChangeTeamNameRsp::set_team_name(const char* value, size_t size) {
  
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ChangeTeamNameRsp.team_name)
}
::std::string* ChangeTeamNameRsp::mutable_team_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.ChangeTeamNameRsp.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChangeTeamNameRsp::release_team_name() {
  // @@protoc_insertion_point(field_release:proto.ChangeTeamNameRsp.team_name)
  
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChangeTeamNameRsp::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    
  } else {
    
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.ChangeTeamNameRsp.team_name)
}

// int32 retcode = 3;
void ChangeTeamNameRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 ChangeTeamNameRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ChangeTeamNameRsp.retcode)
  return retcode_;
}
void ChangeTeamNameRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ChangeTeamNameRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneTeamAvatar::kPlayerUidFieldNumber;
const int SceneTeamAvatar::kAvatarGuidFieldNumber;
const int SceneTeamAvatar::kSceneIdFieldNumber;
const int SceneTeamAvatar::kEntityIdFieldNumber;
const int SceneTeamAvatar::kAvatarInfoFieldNumber;
const int SceneTeamAvatar::kSceneAvatarInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneTeamAvatar::SceneTeamAvatar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneTeamAvatar)
}
SceneTeamAvatar::SceneTeamAvatar(const SceneTeamAvatar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_avatar_info()) {
    avatar_info_ = new ::proto::AvatarInfo(*from.avatar_info_);
  } else {
    avatar_info_ = NULL;
  }
  if (from.has_scene_avatar_info()) {
    scene_avatar_info_ = new ::proto::SceneAvatarInfo(*from.scene_avatar_info_);
  } else {
    scene_avatar_info_ = NULL;
  }
  ::memcpy(&avatar_guid_, &from.avatar_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&entity_id_) -
    reinterpret_cast<char*>(&avatar_guid_)) + sizeof(entity_id_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneTeamAvatar)
}

void SceneTeamAvatar::SharedCtor() {
  ::memset(&avatar_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entity_id_) -
      reinterpret_cast<char*>(&avatar_info_)) + sizeof(entity_id_));
  _cached_size_ = 0;
}

SceneTeamAvatar::~SceneTeamAvatar() {
  // @@protoc_insertion_point(destructor:proto.SceneTeamAvatar)
  SharedDtor();
}

void SceneTeamAvatar::SharedDtor() {
  if (this != internal_default_instance()) delete avatar_info_;
  if (this != internal_default_instance()) delete scene_avatar_info_;
}

void SceneTeamAvatar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneTeamAvatar::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneTeamAvatar& SceneTeamAvatar::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneTeamAvatar* SceneTeamAvatar::New(::google::protobuf::Arena* arena) const {
  SceneTeamAvatar* n = new SceneTeamAvatar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneTeamAvatar::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneTeamAvatar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && avatar_info_ != NULL) {
    delete avatar_info_;
  }
  avatar_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && scene_avatar_info_ != NULL) {
    delete scene_avatar_info_;
  }
  scene_avatar_info_ = NULL;
  ::memset(&avatar_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entity_id_) -
      reinterpret_cast<char*>(&avatar_guid_)) + sizeof(entity_id_));
  _internal_metadata_.Clear();
}

bool SceneTeamAvatar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneTeamAvatar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 player_uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 avatar_guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &avatar_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 scene_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 entity_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AvatarInfo avatar_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatar_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneAvatarInfo scene_avatar_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scene_avatar_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneTeamAvatar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneTeamAvatar)
  return false;
#undef DO_
}

void SceneTeamAvatar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneTeamAvatar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 1;
  if (this->player_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_uid(), output);
  }

  // uint64 avatar_guid = 2;
  if (this->avatar_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->avatar_guid(), output);
  }

  // uint32 scene_id = 3;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene_id(), output);
  }

  // uint32 entity_id = 4;
  if (this->entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->entity_id(), output);
  }

  // .proto.AvatarInfo avatar_info = 5;
  if (this->has_avatar_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->avatar_info_, output);
  }

  // .proto.SceneAvatarInfo scene_avatar_info = 6;
  if (this->has_scene_avatar_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->scene_avatar_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneTeamAvatar)
}

::google::protobuf::uint8* SceneTeamAvatar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneTeamAvatar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 1;
  if (this->player_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_uid(), target);
  }

  // uint64 avatar_guid = 2;
  if (this->avatar_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->avatar_guid(), target);
  }

  // uint32 scene_id = 3;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene_id(), target);
  }

  // uint32 entity_id = 4;
  if (this->entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->entity_id(), target);
  }

  // .proto.AvatarInfo avatar_info = 5;
  if (this->has_avatar_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->avatar_info_, deterministic, target);
  }

  // .proto.SceneAvatarInfo scene_avatar_info = 6;
  if (this->has_scene_avatar_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->scene_avatar_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneTeamAvatar)
  return target;
}

size_t SceneTeamAvatar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneTeamAvatar)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.AvatarInfo avatar_info = 5;
  if (this->has_avatar_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->avatar_info_);
  }

  // .proto.SceneAvatarInfo scene_avatar_info = 6;
  if (this->has_scene_avatar_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scene_avatar_info_);
  }

  // uint64 avatar_guid = 2;
  if (this->avatar_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->avatar_guid());
  }

  // uint32 player_uid = 1;
  if (this->player_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_uid());
  }

  // uint32 scene_id = 3;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  // uint32 entity_id = 4;
  if (this->entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->entity_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneTeamAvatar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneTeamAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneTeamAvatar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneTeamAvatar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneTeamAvatar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneTeamAvatar)
    MergeFrom(*source);
  }
}

void SceneTeamAvatar::MergeFrom(const SceneTeamAvatar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneTeamAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_avatar_info()) {
    mutable_avatar_info()->::proto::AvatarInfo::MergeFrom(from.avatar_info());
  }
  if (from.has_scene_avatar_info()) {
    mutable_scene_avatar_info()->::proto::SceneAvatarInfo::MergeFrom(from.scene_avatar_info());
  }
  if (from.avatar_guid() != 0) {
    set_avatar_guid(from.avatar_guid());
  }
  if (from.player_uid() != 0) {
    set_player_uid(from.player_uid());
  }
  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
  if (from.entity_id() != 0) {
    set_entity_id(from.entity_id());
  }
}

void SceneTeamAvatar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneTeamAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneTeamAvatar::CopyFrom(const SceneTeamAvatar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneTeamAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneTeamAvatar::IsInitialized() const {
  return true;
}

void SceneTeamAvatar::Swap(SceneTeamAvatar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneTeamAvatar::InternalSwap(SceneTeamAvatar* other) {
  using std::swap;
  swap(avatar_info_, other->avatar_info_);
  swap(scene_avatar_info_, other->scene_avatar_info_);
  swap(avatar_guid_, other->avatar_guid_);
  swap(player_uid_, other->player_uid_);
  swap(scene_id_, other->scene_id_);
  swap(entity_id_, other->entity_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneTeamAvatar::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneTeamAvatar

// uint32 player_uid = 1;
void SceneTeamAvatar::clear_player_uid() {
  player_uid_ = 0u;
}
::google::protobuf::uint32 SceneTeamAvatar::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.SceneTeamAvatar.player_uid)
  return player_uid_;
}
void SceneTeamAvatar::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneTeamAvatar.player_uid)
}

// uint64 avatar_guid = 2;
void SceneTeamAvatar::clear_avatar_guid() {
  avatar_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SceneTeamAvatar::avatar_guid() const {
  // @@protoc_insertion_point(field_get:proto.SceneTeamAvatar.avatar_guid)
  return avatar_guid_;
}
void SceneTeamAvatar::set_avatar_guid(::google::protobuf::uint64 value) {
  
  avatar_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneTeamAvatar.avatar_guid)
}

// uint32 scene_id = 3;
void SceneTeamAvatar::clear_scene_id() {
  scene_id_ = 0u;
}
::google::protobuf::uint32 SceneTeamAvatar::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneTeamAvatar.scene_id)
  return scene_id_;
}
void SceneTeamAvatar::set_scene_id(::google::protobuf::uint32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneTeamAvatar.scene_id)
}

// uint32 entity_id = 4;
void SceneTeamAvatar::clear_entity_id() {
  entity_id_ = 0u;
}
::google::protobuf::uint32 SceneTeamAvatar::entity_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneTeamAvatar.entity_id)
  return entity_id_;
}
void SceneTeamAvatar::set_entity_id(::google::protobuf::uint32 value) {
  
  entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneTeamAvatar.entity_id)
}

// .proto.AvatarInfo avatar_info = 5;
bool SceneTeamAvatar::has_avatar_info() const {
  return this != internal_default_instance() && avatar_info_ != NULL;
}
void SceneTeamAvatar::clear_avatar_info() {
  if (GetArenaNoVirtual() == NULL && avatar_info_ != NULL) delete avatar_info_;
  avatar_info_ = NULL;
}
const ::proto::AvatarInfo& SceneTeamAvatar::avatar_info() const {
  const ::proto::AvatarInfo* p = avatar_info_;
  // @@protoc_insertion_point(field_get:proto.SceneTeamAvatar.avatar_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::AvatarInfo*>(
      &::proto::_AvatarInfo_default_instance_);
}
::proto::AvatarInfo* SceneTeamAvatar::mutable_avatar_info() {
  
  if (avatar_info_ == NULL) {
    avatar_info_ = new ::proto::AvatarInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneTeamAvatar.avatar_info)
  return avatar_info_;
}
::proto::AvatarInfo* SceneTeamAvatar::release_avatar_info() {
  // @@protoc_insertion_point(field_release:proto.SceneTeamAvatar.avatar_info)
  
  ::proto::AvatarInfo* temp = avatar_info_;
  avatar_info_ = NULL;
  return temp;
}
void SceneTeamAvatar::set_allocated_avatar_info(::proto::AvatarInfo* avatar_info) {
  delete avatar_info_;
  avatar_info_ = avatar_info;
  if (avatar_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneTeamAvatar.avatar_info)
}

// .proto.SceneAvatarInfo scene_avatar_info = 6;
bool SceneTeamAvatar::has_scene_avatar_info() const {
  return this != internal_default_instance() && scene_avatar_info_ != NULL;
}
void SceneTeamAvatar::clear_scene_avatar_info() {
  if (GetArenaNoVirtual() == NULL && scene_avatar_info_ != NULL) delete scene_avatar_info_;
  scene_avatar_info_ = NULL;
}
const ::proto::SceneAvatarInfo& SceneTeamAvatar::scene_avatar_info() const {
  const ::proto::SceneAvatarInfo* p = scene_avatar_info_;
  // @@protoc_insertion_point(field_get:proto.SceneTeamAvatar.scene_avatar_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::SceneAvatarInfo*>(
      &::proto::_SceneAvatarInfo_default_instance_);
}
::proto::SceneAvatarInfo* SceneTeamAvatar::mutable_scene_avatar_info() {
  
  if (scene_avatar_info_ == NULL) {
    scene_avatar_info_ = new ::proto::SceneAvatarInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneTeamAvatar.scene_avatar_info)
  return scene_avatar_info_;
}
::proto::SceneAvatarInfo* SceneTeamAvatar::release_scene_avatar_info() {
  // @@protoc_insertion_point(field_release:proto.SceneTeamAvatar.scene_avatar_info)
  
  ::proto::SceneAvatarInfo* temp = scene_avatar_info_;
  scene_avatar_info_ = NULL;
  return temp;
}
void SceneTeamAvatar::set_allocated_scene_avatar_info(::proto::SceneAvatarInfo* scene_avatar_info) {
  delete scene_avatar_info_;
  scene_avatar_info_ = scene_avatar_info;
  if (scene_avatar_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneTeamAvatar.scene_avatar_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneTeamUpdateNotify::kSceneTeamAvatarListFieldNumber;
const int SceneTeamUpdateNotify::kDisplayCurAvatarListFieldNumber;
const int SceneTeamUpdateNotify::kIsInMpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneTeamUpdateNotify::SceneTeamUpdateNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneTeamUpdateNotify)
}
SceneTeamUpdateNotify::SceneTeamUpdateNotify(const SceneTeamUpdateNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      scene_team_avatar_list_(from.scene_team_avatar_list_),
      display_cur_avatar_list_(from.display_cur_avatar_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_in_mp_ = from.is_in_mp_;
  // @@protoc_insertion_point(copy_constructor:proto.SceneTeamUpdateNotify)
}

void SceneTeamUpdateNotify::SharedCtor() {
  is_in_mp_ = false;
  _cached_size_ = 0;
}

SceneTeamUpdateNotify::~SceneTeamUpdateNotify() {
  // @@protoc_insertion_point(destructor:proto.SceneTeamUpdateNotify)
  SharedDtor();
}

void SceneTeamUpdateNotify::SharedDtor() {
}

void SceneTeamUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneTeamUpdateNotify::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneTeamUpdateNotify& SceneTeamUpdateNotify::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneTeamUpdateNotify* SceneTeamUpdateNotify::New(::google::protobuf::Arena* arena) const {
  SceneTeamUpdateNotify* n = new SceneTeamUpdateNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneTeamUpdateNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneTeamUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scene_team_avatar_list_.Clear();
  display_cur_avatar_list_.Clear();
  is_in_mp_ = false;
  _internal_metadata_.Clear();
}

bool SceneTeamUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneTeamUpdateNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.SceneTeamAvatar scene_team_avatar_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scene_team_avatar_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.MPDisplayCurAvatar display_cur_avatar_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_display_cur_avatar_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_in_mp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_in_mp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneTeamUpdateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneTeamUpdateNotify)
  return false;
#undef DO_
}

void SceneTeamUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneTeamUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.SceneTeamAvatar scene_team_avatar_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scene_team_avatar_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->scene_team_avatar_list(static_cast<int>(i)), output);
  }

  // repeated .proto.MPDisplayCurAvatar display_cur_avatar_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->display_cur_avatar_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->display_cur_avatar_list(static_cast<int>(i)), output);
  }

  // bool is_in_mp = 3;
  if (this->is_in_mp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_in_mp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneTeamUpdateNotify)
}

::google::protobuf::uint8* SceneTeamUpdateNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneTeamUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.SceneTeamAvatar scene_team_avatar_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scene_team_avatar_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->scene_team_avatar_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.MPDisplayCurAvatar display_cur_avatar_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->display_cur_avatar_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->display_cur_avatar_list(static_cast<int>(i)), deterministic, target);
  }

  // bool is_in_mp = 3;
  if (this->is_in_mp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_in_mp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneTeamUpdateNotify)
  return target;
}

size_t SceneTeamUpdateNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneTeamUpdateNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.SceneTeamAvatar scene_team_avatar_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->scene_team_avatar_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scene_team_avatar_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.MPDisplayCurAvatar display_cur_avatar_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->display_cur_avatar_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display_cur_avatar_list(static_cast<int>(i)));
    }
  }

  // bool is_in_mp = 3;
  if (this->is_in_mp() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneTeamUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneTeamUpdateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneTeamUpdateNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneTeamUpdateNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneTeamUpdateNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneTeamUpdateNotify)
    MergeFrom(*source);
  }
}

void SceneTeamUpdateNotify::MergeFrom(const SceneTeamUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneTeamUpdateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scene_team_avatar_list_.MergeFrom(from.scene_team_avatar_list_);
  display_cur_avatar_list_.MergeFrom(from.display_cur_avatar_list_);
  if (from.is_in_mp() != 0) {
    set_is_in_mp(from.is_in_mp());
  }
}

void SceneTeamUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneTeamUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneTeamUpdateNotify::CopyFrom(const SceneTeamUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneTeamUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneTeamUpdateNotify::IsInitialized() const {
  return true;
}

void SceneTeamUpdateNotify::Swap(SceneTeamUpdateNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneTeamUpdateNotify::InternalSwap(SceneTeamUpdateNotify* other) {
  using std::swap;
  scene_team_avatar_list_.InternalSwap(&other->scene_team_avatar_list_);
  display_cur_avatar_list_.InternalSwap(&other->display_cur_avatar_list_);
  swap(is_in_mp_, other->is_in_mp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneTeamUpdateNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneTeamUpdateNotify

// repeated .proto.SceneTeamAvatar scene_team_avatar_list = 1;
int SceneTeamUpdateNotify::scene_team_avatar_list_size() const {
  return scene_team_avatar_list_.size();
}
void SceneTeamUpdateNotify::clear_scene_team_avatar_list() {
  scene_team_avatar_list_.Clear();
}
const ::proto::SceneTeamAvatar& SceneTeamUpdateNotify::scene_team_avatar_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SceneTeamUpdateNotify.scene_team_avatar_list)
  return scene_team_avatar_list_.Get(index);
}
::proto::SceneTeamAvatar* SceneTeamUpdateNotify::mutable_scene_team_avatar_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.SceneTeamUpdateNotify.scene_team_avatar_list)
  return scene_team_avatar_list_.Mutable(index);
}
::proto::SceneTeamAvatar* SceneTeamUpdateNotify::add_scene_team_avatar_list() {
  // @@protoc_insertion_point(field_add:proto.SceneTeamUpdateNotify.scene_team_avatar_list)
  return scene_team_avatar_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::SceneTeamAvatar >*
SceneTeamUpdateNotify::mutable_scene_team_avatar_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SceneTeamUpdateNotify.scene_team_avatar_list)
  return &scene_team_avatar_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::SceneTeamAvatar >&
SceneTeamUpdateNotify::scene_team_avatar_list() const {
  // @@protoc_insertion_point(field_list:proto.SceneTeamUpdateNotify.scene_team_avatar_list)
  return scene_team_avatar_list_;
}

// repeated .proto.MPDisplayCurAvatar display_cur_avatar_list = 2;
int SceneTeamUpdateNotify::display_cur_avatar_list_size() const {
  return display_cur_avatar_list_.size();
}
void SceneTeamUpdateNotify::clear_display_cur_avatar_list() {
  display_cur_avatar_list_.Clear();
}
const ::proto::MPDisplayCurAvatar& SceneTeamUpdateNotify::display_cur_avatar_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SceneTeamUpdateNotify.display_cur_avatar_list)
  return display_cur_avatar_list_.Get(index);
}
::proto::MPDisplayCurAvatar* SceneTeamUpdateNotify::mutable_display_cur_avatar_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.SceneTeamUpdateNotify.display_cur_avatar_list)
  return display_cur_avatar_list_.Mutable(index);
}
::proto::MPDisplayCurAvatar* SceneTeamUpdateNotify::add_display_cur_avatar_list() {
  // @@protoc_insertion_point(field_add:proto.SceneTeamUpdateNotify.display_cur_avatar_list)
  return display_cur_avatar_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::MPDisplayCurAvatar >*
SceneTeamUpdateNotify::mutable_display_cur_avatar_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SceneTeamUpdateNotify.display_cur_avatar_list)
  return &display_cur_avatar_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::MPDisplayCurAvatar >&
SceneTeamUpdateNotify::display_cur_avatar_list() const {
  // @@protoc_insertion_point(field_list:proto.SceneTeamUpdateNotify.display_cur_avatar_list)
  return display_cur_avatar_list_;
}

// bool is_in_mp = 3;
void SceneTeamUpdateNotify::clear_is_in_mp() {
  is_in_mp_ = false;
}
bool SceneTeamUpdateNotify::is_in_mp() const {
  // @@protoc_insertion_point(field_get:proto.SceneTeamUpdateNotify.is_in_mp)
  return is_in_mp_;
}
void SceneTeamUpdateNotify::set_is_in_mp(bool value) {
  
  is_in_mp_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneTeamUpdateNotify.is_in_mp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

MPDisplayCurAvatar::MPDisplayCurAvatar_FightPropMapEntry::MPDisplayCurAvatar_FightPropMapEntry() {}
MPDisplayCurAvatar::MPDisplayCurAvatar_FightPropMapEntry::MPDisplayCurAvatar_FightPropMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata MPDisplayCurAvatar::MPDisplayCurAvatar_FightPropMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[50];
}
void MPDisplayCurAvatar::MPDisplayCurAvatar_FightPropMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void MPDisplayCurAvatar::MPDisplayCurAvatar_FightPropMapEntry::MergeFrom(const MPDisplayCurAvatar_FightPropMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MPDisplayCurAvatar::kPlayerUidFieldNumber;
const int MPDisplayCurAvatar::kAvatarGuidFieldNumber;
const int MPDisplayCurAvatar::kLifeStateFieldNumber;
const int MPDisplayCurAvatar::kFightPropMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MPDisplayCurAvatar::MPDisplayCurAvatar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MPDisplayCurAvatar)
}
MPDisplayCurAvatar::MPDisplayCurAvatar(const MPDisplayCurAvatar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fight_prop_map_.MergeFrom(from.fight_prop_map_);
  ::memcpy(&avatar_guid_, &from.avatar_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&life_state_) -
    reinterpret_cast<char*>(&avatar_guid_)) + sizeof(life_state_));
  // @@protoc_insertion_point(copy_constructor:proto.MPDisplayCurAvatar)
}

void MPDisplayCurAvatar::SharedCtor() {
  ::memset(&avatar_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&life_state_) -
      reinterpret_cast<char*>(&avatar_guid_)) + sizeof(life_state_));
  _cached_size_ = 0;
}

MPDisplayCurAvatar::~MPDisplayCurAvatar() {
  // @@protoc_insertion_point(destructor:proto.MPDisplayCurAvatar)
  SharedDtor();
}

void MPDisplayCurAvatar::SharedDtor() {
}

void MPDisplayCurAvatar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MPDisplayCurAvatar::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MPDisplayCurAvatar& MPDisplayCurAvatar::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

MPDisplayCurAvatar* MPDisplayCurAvatar::New(::google::protobuf::Arena* arena) const {
  MPDisplayCurAvatar* n = new MPDisplayCurAvatar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MPDisplayCurAvatar::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MPDisplayCurAvatar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fight_prop_map_.Clear();
  ::memset(&avatar_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&life_state_) -
      reinterpret_cast<char*>(&avatar_guid_)) + sizeof(life_state_));
  _internal_metadata_.Clear();
}

bool MPDisplayCurAvatar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MPDisplayCurAvatar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 player_uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 avatar_guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &avatar_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 life_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &life_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, float> fight_prop_map = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          MPDisplayCurAvatar_FightPropMapEntry::Parser< ::google::protobuf::internal::MapField<
              MPDisplayCurAvatar_FightPropMapEntry,
              ::google::protobuf::uint32, float,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, float > > parser(&fight_prop_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MPDisplayCurAvatar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MPDisplayCurAvatar)
  return false;
#undef DO_
}

void MPDisplayCurAvatar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MPDisplayCurAvatar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 1;
  if (this->player_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_uid(), output);
  }

  // uint64 avatar_guid = 2;
  if (this->avatar_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->avatar_guid(), output);
  }

  // uint32 life_state = 3;
  if (this->life_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->life_state(), output);
  }

  // map<uint32, float> fight_prop_map = 4;
  if (!this->fight_prop_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, float >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->fight_prop_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->fight_prop_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
          it = this->fight_prop_map().begin();
          it != this->fight_prop_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MPDisplayCurAvatar_FightPropMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(fight_prop_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<MPDisplayCurAvatar_FightPropMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
          it = this->fight_prop_map().begin();
          it != this->fight_prop_map().end(); ++it) {
        entry.reset(fight_prop_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MPDisplayCurAvatar)
}

::google::protobuf::uint8* MPDisplayCurAvatar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MPDisplayCurAvatar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 1;
  if (this->player_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_uid(), target);
  }

  // uint64 avatar_guid = 2;
  if (this->avatar_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->avatar_guid(), target);
  }

  // uint32 life_state = 3;
  if (this->life_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->life_state(), target);
  }

  // map<uint32, float> fight_prop_map = 4;
  if (!this->fight_prop_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, float >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->fight_prop_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->fight_prop_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
          it = this->fight_prop_map().begin();
          it != this->fight_prop_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MPDisplayCurAvatar_FightPropMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(fight_prop_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<MPDisplayCurAvatar_FightPropMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
          it = this->fight_prop_map().begin();
          it != this->fight_prop_map().end(); ++it) {
        entry.reset(fight_prop_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MPDisplayCurAvatar)
  return target;
}

size_t MPDisplayCurAvatar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MPDisplayCurAvatar)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, float> fight_prop_map = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fight_prop_map_size());
  {
    ::google::protobuf::scoped_ptr<MPDisplayCurAvatar_FightPropMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
        it = this->fight_prop_map().begin();
        it != this->fight_prop_map().end(); ++it) {
      entry.reset(fight_prop_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint64 avatar_guid = 2;
  if (this->avatar_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->avatar_guid());
  }

  // uint32 player_uid = 1;
  if (this->player_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_uid());
  }

  // uint32 life_state = 3;
  if (this->life_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->life_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MPDisplayCurAvatar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MPDisplayCurAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  const MPDisplayCurAvatar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MPDisplayCurAvatar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MPDisplayCurAvatar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MPDisplayCurAvatar)
    MergeFrom(*source);
  }
}

void MPDisplayCurAvatar::MergeFrom(const MPDisplayCurAvatar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MPDisplayCurAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fight_prop_map_.MergeFrom(from.fight_prop_map_);
  if (from.avatar_guid() != 0) {
    set_avatar_guid(from.avatar_guid());
  }
  if (from.player_uid() != 0) {
    set_player_uid(from.player_uid());
  }
  if (from.life_state() != 0) {
    set_life_state(from.life_state());
  }
}

void MPDisplayCurAvatar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MPDisplayCurAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPDisplayCurAvatar::CopyFrom(const MPDisplayCurAvatar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MPDisplayCurAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPDisplayCurAvatar::IsInitialized() const {
  return true;
}

void MPDisplayCurAvatar::Swap(MPDisplayCurAvatar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MPDisplayCurAvatar::InternalSwap(MPDisplayCurAvatar* other) {
  using std::swap;
  fight_prop_map_.Swap(&other->fight_prop_map_);
  swap(avatar_guid_, other->avatar_guid_);
  swap(player_uid_, other->player_uid_);
  swap(life_state_, other->life_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MPDisplayCurAvatar::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MPDisplayCurAvatar

// uint32 player_uid = 1;
void MPDisplayCurAvatar::clear_player_uid() {
  player_uid_ = 0u;
}
::google::protobuf::uint32 MPDisplayCurAvatar::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.MPDisplayCurAvatar.player_uid)
  return player_uid_;
}
void MPDisplayCurAvatar::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.MPDisplayCurAvatar.player_uid)
}

// uint64 avatar_guid = 2;
void MPDisplayCurAvatar::clear_avatar_guid() {
  avatar_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MPDisplayCurAvatar::avatar_guid() const {
  // @@protoc_insertion_point(field_get:proto.MPDisplayCurAvatar.avatar_guid)
  return avatar_guid_;
}
void MPDisplayCurAvatar::set_avatar_guid(::google::protobuf::uint64 value) {
  
  avatar_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.MPDisplayCurAvatar.avatar_guid)
}

// uint32 life_state = 3;
void MPDisplayCurAvatar::clear_life_state() {
  life_state_ = 0u;
}
::google::protobuf::uint32 MPDisplayCurAvatar::life_state() const {
  // @@protoc_insertion_point(field_get:proto.MPDisplayCurAvatar.life_state)
  return life_state_;
}
void MPDisplayCurAvatar::set_life_state(::google::protobuf::uint32 value) {
  
  life_state_ = value;
  // @@protoc_insertion_point(field_set:proto.MPDisplayCurAvatar.life_state)
}

// map<uint32, float> fight_prop_map = 4;
int MPDisplayCurAvatar::fight_prop_map_size() const {
  return fight_prop_map_.size();
}
void MPDisplayCurAvatar::clear_fight_prop_map() {
  fight_prop_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, float >&
MPDisplayCurAvatar::fight_prop_map() const {
  // @@protoc_insertion_point(field_map:proto.MPDisplayCurAvatar.fight_prop_map)
  return fight_prop_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, float >*
MPDisplayCurAvatar::mutable_fight_prop_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.MPDisplayCurAvatar.fight_prop_map)
  return fight_prop_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneTeamMPDisplayCurAvatarNotify::kDisplayCurAvatarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneTeamMPDisplayCurAvatarNotify::SceneTeamMPDisplayCurAvatarNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneTeamMPDisplayCurAvatarNotify)
}
SceneTeamMPDisplayCurAvatarNotify::SceneTeamMPDisplayCurAvatarNotify(const SceneTeamMPDisplayCurAvatarNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_display_cur_avatar()) {
    display_cur_avatar_ = new ::proto::MPDisplayCurAvatar(*from.display_cur_avatar_);
  } else {
    display_cur_avatar_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.SceneTeamMPDisplayCurAvatarNotify)
}

void SceneTeamMPDisplayCurAvatarNotify::SharedCtor() {
  display_cur_avatar_ = NULL;
  _cached_size_ = 0;
}

SceneTeamMPDisplayCurAvatarNotify::~SceneTeamMPDisplayCurAvatarNotify() {
  // @@protoc_insertion_point(destructor:proto.SceneTeamMPDisplayCurAvatarNotify)
  SharedDtor();
}

void SceneTeamMPDisplayCurAvatarNotify::SharedDtor() {
  if (this != internal_default_instance()) delete display_cur_avatar_;
}

void SceneTeamMPDisplayCurAvatarNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneTeamMPDisplayCurAvatarNotify::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneTeamMPDisplayCurAvatarNotify& SceneTeamMPDisplayCurAvatarNotify::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneTeamMPDisplayCurAvatarNotify* SceneTeamMPDisplayCurAvatarNotify::New(::google::protobuf::Arena* arena) const {
  SceneTeamMPDisplayCurAvatarNotify* n = new SceneTeamMPDisplayCurAvatarNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneTeamMPDisplayCurAvatarNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneTeamMPDisplayCurAvatarNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && display_cur_avatar_ != NULL) {
    delete display_cur_avatar_;
  }
  display_cur_avatar_ = NULL;
  _internal_metadata_.Clear();
}

bool SceneTeamMPDisplayCurAvatarNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneTeamMPDisplayCurAvatarNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.MPDisplayCurAvatar display_cur_avatar = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display_cur_avatar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneTeamMPDisplayCurAvatarNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneTeamMPDisplayCurAvatarNotify)
  return false;
#undef DO_
}

void SceneTeamMPDisplayCurAvatarNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneTeamMPDisplayCurAvatarNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.MPDisplayCurAvatar display_cur_avatar = 1;
  if (this->has_display_cur_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->display_cur_avatar_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneTeamMPDisplayCurAvatarNotify)
}

::google::protobuf::uint8* SceneTeamMPDisplayCurAvatarNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneTeamMPDisplayCurAvatarNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.MPDisplayCurAvatar display_cur_avatar = 1;
  if (this->has_display_cur_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->display_cur_avatar_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneTeamMPDisplayCurAvatarNotify)
  return target;
}

size_t SceneTeamMPDisplayCurAvatarNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneTeamMPDisplayCurAvatarNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.MPDisplayCurAvatar display_cur_avatar = 1;
  if (this->has_display_cur_avatar()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->display_cur_avatar_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneTeamMPDisplayCurAvatarNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneTeamMPDisplayCurAvatarNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneTeamMPDisplayCurAvatarNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneTeamMPDisplayCurAvatarNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneTeamMPDisplayCurAvatarNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneTeamMPDisplayCurAvatarNotify)
    MergeFrom(*source);
  }
}

void SceneTeamMPDisplayCurAvatarNotify::MergeFrom(const SceneTeamMPDisplayCurAvatarNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneTeamMPDisplayCurAvatarNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_display_cur_avatar()) {
    mutable_display_cur_avatar()->::proto::MPDisplayCurAvatar::MergeFrom(from.display_cur_avatar());
  }
}

void SceneTeamMPDisplayCurAvatarNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneTeamMPDisplayCurAvatarNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneTeamMPDisplayCurAvatarNotify::CopyFrom(const SceneTeamMPDisplayCurAvatarNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneTeamMPDisplayCurAvatarNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneTeamMPDisplayCurAvatarNotify::IsInitialized() const {
  return true;
}

void SceneTeamMPDisplayCurAvatarNotify::Swap(SceneTeamMPDisplayCurAvatarNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneTeamMPDisplayCurAvatarNotify::InternalSwap(SceneTeamMPDisplayCurAvatarNotify* other) {
  using std::swap;
  swap(display_cur_avatar_, other->display_cur_avatar_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneTeamMPDisplayCurAvatarNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneTeamMPDisplayCurAvatarNotify

// .proto.MPDisplayCurAvatar display_cur_avatar = 1;
bool SceneTeamMPDisplayCurAvatarNotify::has_display_cur_avatar() const {
  return this != internal_default_instance() && display_cur_avatar_ != NULL;
}
void SceneTeamMPDisplayCurAvatarNotify::clear_display_cur_avatar() {
  if (GetArenaNoVirtual() == NULL && display_cur_avatar_ != NULL) delete display_cur_avatar_;
  display_cur_avatar_ = NULL;
}
const ::proto::MPDisplayCurAvatar& SceneTeamMPDisplayCurAvatarNotify::display_cur_avatar() const {
  const ::proto::MPDisplayCurAvatar* p = display_cur_avatar_;
  // @@protoc_insertion_point(field_get:proto.SceneTeamMPDisplayCurAvatarNotify.display_cur_avatar)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::MPDisplayCurAvatar*>(
      &::proto::_MPDisplayCurAvatar_default_instance_);
}
::proto::MPDisplayCurAvatar* SceneTeamMPDisplayCurAvatarNotify::mutable_display_cur_avatar() {
  
  if (display_cur_avatar_ == NULL) {
    display_cur_avatar_ = new ::proto::MPDisplayCurAvatar;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneTeamMPDisplayCurAvatarNotify.display_cur_avatar)
  return display_cur_avatar_;
}
::proto::MPDisplayCurAvatar* SceneTeamMPDisplayCurAvatarNotify::release_display_cur_avatar() {
  // @@protoc_insertion_point(field_release:proto.SceneTeamMPDisplayCurAvatarNotify.display_cur_avatar)
  
  ::proto::MPDisplayCurAvatar* temp = display_cur_avatar_;
  display_cur_avatar_ = NULL;
  return temp;
}
void SceneTeamMPDisplayCurAvatarNotify::set_allocated_display_cur_avatar(::proto::MPDisplayCurAvatar* display_cur_avatar) {
  delete display_cur_avatar_;
  display_cur_avatar_ = display_cur_avatar;
  if (display_cur_avatar) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneTeamMPDisplayCurAvatarNotify.display_cur_avatar)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FocusAvatarReq::kAvatarGuidFieldNumber;
const int FocusAvatarReq::kIsFocusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FocusAvatarReq::FocusAvatarReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FocusAvatarReq)
}
FocusAvatarReq::FocusAvatarReq(const FocusAvatarReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&avatar_guid_, &from.avatar_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_focus_) -
    reinterpret_cast<char*>(&avatar_guid_)) + sizeof(is_focus_));
  // @@protoc_insertion_point(copy_constructor:proto.FocusAvatarReq)
}

void FocusAvatarReq::SharedCtor() {
  ::memset(&avatar_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_focus_) -
      reinterpret_cast<char*>(&avatar_guid_)) + sizeof(is_focus_));
  _cached_size_ = 0;
}

FocusAvatarReq::~FocusAvatarReq() {
  // @@protoc_insertion_point(destructor:proto.FocusAvatarReq)
  SharedDtor();
}

void FocusAvatarReq::SharedDtor() {
}

void FocusAvatarReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FocusAvatarReq::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FocusAvatarReq& FocusAvatarReq::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

FocusAvatarReq* FocusAvatarReq::New(::google::protobuf::Arena* arena) const {
  FocusAvatarReq* n = new FocusAvatarReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FocusAvatarReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FocusAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&avatar_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_focus_) -
      reinterpret_cast<char*>(&avatar_guid_)) + sizeof(is_focus_));
  _internal_metadata_.Clear();
}

bool FocusAvatarReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FocusAvatarReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 avatar_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &avatar_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_focus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_focus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FocusAvatarReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FocusAvatarReq)
  return false;
#undef DO_
}

void FocusAvatarReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FocusAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 avatar_guid = 1;
  if (this->avatar_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->avatar_guid(), output);
  }

  // bool is_focus = 2;
  if (this->is_focus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_focus(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.FocusAvatarReq)
}

::google::protobuf::uint8* FocusAvatarReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.FocusAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 avatar_guid = 1;
  if (this->avatar_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->avatar_guid(), target);
  }

  // bool is_focus = 2;
  if (this->is_focus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_focus(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FocusAvatarReq)
  return target;
}

size_t FocusAvatarReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FocusAvatarReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 avatar_guid = 1;
  if (this->avatar_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->avatar_guid());
  }

  // bool is_focus = 2;
  if (this->is_focus() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FocusAvatarReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FocusAvatarReq)
  GOOGLE_DCHECK_NE(&from, this);
  const FocusAvatarReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FocusAvatarReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FocusAvatarReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FocusAvatarReq)
    MergeFrom(*source);
  }
}

void FocusAvatarReq::MergeFrom(const FocusAvatarReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FocusAvatarReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatar_guid() != 0) {
    set_avatar_guid(from.avatar_guid());
  }
  if (from.is_focus() != 0) {
    set_is_focus(from.is_focus());
  }
}

void FocusAvatarReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FocusAvatarReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FocusAvatarReq::CopyFrom(const FocusAvatarReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FocusAvatarReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FocusAvatarReq::IsInitialized() const {
  return true;
}

void FocusAvatarReq::Swap(FocusAvatarReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FocusAvatarReq::InternalSwap(FocusAvatarReq* other) {
  using std::swap;
  swap(avatar_guid_, other->avatar_guid_);
  swap(is_focus_, other->is_focus_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FocusAvatarReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FocusAvatarReq

// uint64 avatar_guid = 1;
void FocusAvatarReq::clear_avatar_guid() {
  avatar_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 FocusAvatarReq::avatar_guid() const {
  // @@protoc_insertion_point(field_get:proto.FocusAvatarReq.avatar_guid)
  return avatar_guid_;
}
void FocusAvatarReq::set_avatar_guid(::google::protobuf::uint64 value) {
  
  avatar_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.FocusAvatarReq.avatar_guid)
}

// bool is_focus = 2;
void FocusAvatarReq::clear_is_focus() {
  is_focus_ = false;
}
bool FocusAvatarReq::is_focus() const {
  // @@protoc_insertion_point(field_get:proto.FocusAvatarReq.is_focus)
  return is_focus_;
}
void FocusAvatarReq::set_is_focus(bool value) {
  
  is_focus_ = value;
  // @@protoc_insertion_point(field_set:proto.FocusAvatarReq.is_focus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FocusAvatarRsp::kRetcodeFieldNumber;
const int FocusAvatarRsp::kIsFocusFieldNumber;
const int FocusAvatarRsp::kAvatarGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FocusAvatarRsp::FocusAvatarRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FocusAvatarRsp)
}
FocusAvatarRsp::FocusAvatarRsp(const FocusAvatarRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&avatar_guid_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(avatar_guid_));
  // @@protoc_insertion_point(copy_constructor:proto.FocusAvatarRsp)
}

void FocusAvatarRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatar_guid_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(avatar_guid_));
  _cached_size_ = 0;
}

FocusAvatarRsp::~FocusAvatarRsp() {
  // @@protoc_insertion_point(destructor:proto.FocusAvatarRsp)
  SharedDtor();
}

void FocusAvatarRsp::SharedDtor() {
}

void FocusAvatarRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FocusAvatarRsp::descriptor() {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FocusAvatarRsp& FocusAvatarRsp::default_instance() {
  protobuf_cmd_2fcmd_5favatar_2eproto::InitDefaults();
  return *internal_default_instance();
}

FocusAvatarRsp* FocusAvatarRsp::New(::google::protobuf::Arena* arena) const {
  FocusAvatarRsp* n = new FocusAvatarRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FocusAvatarRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FocusAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatar_guid_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(avatar_guid_));
  _internal_metadata_.Clear();
}

bool FocusAvatarRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FocusAvatarRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_focus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_focus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 avatar_guid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &avatar_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FocusAvatarRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FocusAvatarRsp)
  return false;
#undef DO_
}

void FocusAvatarRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FocusAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // bool is_focus = 2;
  if (this->is_focus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_focus(), output);
  }

  // uint64 avatar_guid = 3;
  if (this->avatar_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->avatar_guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.FocusAvatarRsp)
}

::google::protobuf::uint8* FocusAvatarRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.FocusAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // bool is_focus = 2;
  if (this->is_focus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_focus(), target);
  }

  // uint64 avatar_guid = 3;
  if (this->avatar_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->avatar_guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FocusAvatarRsp)
  return target;
}

size_t FocusAvatarRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FocusAvatarRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // bool is_focus = 2;
  if (this->is_focus() != 0) {
    total_size += 1 + 1;
  }

  // uint64 avatar_guid = 3;
  if (this->avatar_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->avatar_guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FocusAvatarRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FocusAvatarRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const FocusAvatarRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FocusAvatarRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FocusAvatarRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FocusAvatarRsp)
    MergeFrom(*source);
  }
}

void FocusAvatarRsp::MergeFrom(const FocusAvatarRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FocusAvatarRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.is_focus() != 0) {
    set_is_focus(from.is_focus());
  }
  if (from.avatar_guid() != 0) {
    set_avatar_guid(from.avatar_guid());
  }
}

void FocusAvatarRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FocusAvatarRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FocusAvatarRsp::CopyFrom(const FocusAvatarRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FocusAvatarRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FocusAvatarRsp::IsInitialized() const {
  return true;
}

void FocusAvatarRsp::Swap(FocusAvatarRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FocusAvatarRsp::InternalSwap(FocusAvatarRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(is_focus_, other->is_focus_);
  swap(avatar_guid_, other->avatar_guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FocusAvatarRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5favatar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5favatar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FocusAvatarRsp

// int32 retcode = 1;
void FocusAvatarRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 FocusAvatarRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.FocusAvatarRsp.retcode)
  return retcode_;
}
void FocusAvatarRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.FocusAvatarRsp.retcode)
}

// bool is_focus = 2;
void FocusAvatarRsp::clear_is_focus() {
  is_focus_ = false;
}
bool FocusAvatarRsp::is_focus() const {
  // @@protoc_insertion_point(field_get:proto.FocusAvatarRsp.is_focus)
  return is_focus_;
}
void FocusAvatarRsp::set_is_focus(bool value) {
  
  is_focus_ = value;
  // @@protoc_insertion_point(field_set:proto.FocusAvatarRsp.is_focus)
}

// uint64 avatar_guid = 3;
void FocusAvatarRsp::clear_avatar_guid() {
  avatar_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 FocusAvatarRsp::avatar_guid() const {
  // @@protoc_insertion_point(field_get:proto.FocusAvatarRsp.avatar_guid)
  return avatar_guid_;
}
void FocusAvatarRsp::set_avatar_guid(::google::protobuf::uint64 value) {
  
  avatar_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.FocusAvatarRsp.avatar_guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
