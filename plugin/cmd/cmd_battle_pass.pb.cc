// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_battle_pass.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cmd/cmd_battle_pass.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
class BattlePassCycleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BattlePassCycle>
     _instance;
} _BattlePassCycle_default_instance_;
class BattlePassMissionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BattlePassMission>
     _instance;
} _BattlePassMission_default_instance_;
class BattlePassRewardTagDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BattlePassRewardTag>
     _instance;
} _BattlePassRewardTag_default_instance_;
class BattlePassScheduleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BattlePassSchedule>
     _instance;
} _BattlePassSchedule_default_instance_;
class BattlePassAllDataNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BattlePassAllDataNotify>
     _instance;
} _BattlePassAllDataNotify_default_instance_;
class BattlePassMissionUpdateNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BattlePassMissionUpdateNotify>
     _instance;
} _BattlePassMissionUpdateNotify_default_instance_;
class BattlePassMissionDelNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BattlePassMissionDelNotify>
     _instance;
} _BattlePassMissionDelNotify_default_instance_;
class BattlePassCurScheduleUpdateNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BattlePassCurScheduleUpdateNotify>
     _instance;
} _BattlePassCurScheduleUpdateNotify_default_instance_;
class BattlePassRewardTakeOptionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BattlePassRewardTakeOption>
     _instance;
} _BattlePassRewardTakeOption_default_instance_;
class TakeBattlePassRewardReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TakeBattlePassRewardReq>
     _instance;
} _TakeBattlePassRewardReq_default_instance_;
class TakeBattlePassRewardRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TakeBattlePassRewardRsp>
     _instance;
} _TakeBattlePassRewardRsp_default_instance_;
class TakeBattlePassMissionPointReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TakeBattlePassMissionPointReq>
     _instance;
} _TakeBattlePassMissionPointReq_default_instance_;
class TakeBattlePassMissionPointRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TakeBattlePassMissionPointRsp>
     _instance;
} _TakeBattlePassMissionPointRsp_default_instance_;

namespace protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[13];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[10];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassCycle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassCycle, cycle_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassCycle, begin_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassCycle, end_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassMission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassMission, mission_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassMission, cur_progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassMission, total_progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassMission, reward_battle_pass_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassMission, mission_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassMission, mission_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassRewardTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassRewardTag, unlock_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassRewardTag, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassRewardTag, reward_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassSchedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassSchedule, schedule_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassSchedule, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassSchedule, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassSchedule, unlock_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassSchedule, reward_taken_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassSchedule, begin_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassSchedule, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassSchedule, cur_cycle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassAllDataNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassAllDataNotify, have_cur_schedule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassAllDataNotify, cur_schedule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassAllDataNotify, mission_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassMissionUpdateNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassMissionUpdateNotify, mission_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassMissionDelNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassMissionDelNotify, del_mission_id_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassCurScheduleUpdateNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassCurScheduleUpdateNotify, have_cur_schedule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassCurScheduleUpdateNotify, cur_schedule_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassRewardTakeOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassRewardTakeOption, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassRewardTakeOption, has_option_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassRewardTakeOption, option_idx_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBattlePassRewardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBattlePassRewardReq, take_option_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBattlePassRewardRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBattlePassRewardRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBattlePassRewardRsp, take_option_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBattlePassRewardRsp, reward_item_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBattlePassMissionPointReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBattlePassMissionPointReq, mission_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBattlePassMissionPointRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBattlePassMissionPointRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBattlePassMissionPointRsp, mission_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(BattlePassCycle)},
  { 8, -1, sizeof(BattlePassMission)},
  { 19, -1, sizeof(BattlePassRewardTag)},
  { 27, -1, sizeof(BattlePassSchedule)},
  { 40, -1, sizeof(BattlePassAllDataNotify)},
  { 48, -1, sizeof(BattlePassMissionUpdateNotify)},
  { 54, -1, sizeof(BattlePassMissionDelNotify)},
  { 60, -1, sizeof(BattlePassCurScheduleUpdateNotify)},
  { 67, -1, sizeof(BattlePassRewardTakeOption)},
  { 75, -1, sizeof(TakeBattlePassRewardReq)},
  { 81, -1, sizeof(TakeBattlePassRewardRsp)},
  { 89, -1, sizeof(TakeBattlePassMissionPointReq)},
  { 95, -1, sizeof(TakeBattlePassMissionPointRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_BattlePassCycle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BattlePassMission_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BattlePassRewardTag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BattlePassSchedule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BattlePassAllDataNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BattlePassMissionUpdateNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BattlePassMissionDelNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BattlePassCurScheduleUpdateNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BattlePassRewardTakeOption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TakeBattlePassRewardReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TakeBattlePassRewardRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TakeBattlePassMissionPointReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TakeBattlePassMissionPointRsp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cmd/cmd_battle_pass.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::protobuf_define_2eproto::InitDefaults();
  _BattlePassCycle_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BattlePassCycle_default_instance_);_BattlePassMission_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BattlePassMission_default_instance_);_BattlePassRewardTag_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BattlePassRewardTag_default_instance_);_BattlePassSchedule_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BattlePassSchedule_default_instance_);_BattlePassAllDataNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BattlePassAllDataNotify_default_instance_);_BattlePassMissionUpdateNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BattlePassMissionUpdateNotify_default_instance_);_BattlePassMissionDelNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BattlePassMissionDelNotify_default_instance_);_BattlePassCurScheduleUpdateNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BattlePassCurScheduleUpdateNotify_default_instance_);_BattlePassRewardTakeOption_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BattlePassRewardTakeOption_default_instance_);_TakeBattlePassRewardReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TakeBattlePassRewardReq_default_instance_);_TakeBattlePassRewardRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TakeBattlePassRewardRsp_default_instance_);_TakeBattlePassMissionPointReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TakeBattlePassMissionPointReq_default_instance_);_TakeBattlePassMissionPointRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TakeBattlePassMissionPointRsp_default_instance_);_BattlePassSchedule_default_instance_._instance.get_mutable()->cur_cycle_ = const_cast< ::proto::BattlePassCycle*>(
      ::proto::BattlePassCycle::internal_default_instance());
  _BattlePassAllDataNotify_default_instance_._instance.get_mutable()->cur_schedule_ = const_cast< ::proto::BattlePassSchedule*>(
      ::proto::BattlePassSchedule::internal_default_instance());
  _BattlePassCurScheduleUpdateNotify_default_instance_._instance.get_mutable()->cur_schedule_ = const_cast< ::proto::BattlePassSchedule*>(
      ::proto::BattlePassSchedule::internal_default_instance());
  _BattlePassRewardTakeOption_default_instance_._instance.get_mutable()->tag_ = const_cast< ::proto::BattlePassRewardTag*>(
      ::proto::BattlePassRewardTag::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031cmd/cmd_battle_pass.proto\022\005proto\032\014defi"
      "ne.proto\"J\n\017BattlePassCycle\022\021\n\tcycle_idx"
      "\030\001 \001(\r\022\022\n\nbegin_time\030\002 \001(\r\022\020\n\010end_time\030\003"
      " \001(\r\"\272\002\n\021BattlePassMission\022\022\n\nmission_id"
      "\030\001 \001(\r\022\024\n\014cur_progress\030\002 \001(\r\022\026\n\016total_pr"
      "ogress\030\003 \001(\r\022 \n\030reward_battle_pass_point"
      "\030\004 \001(\r\022\024\n\014mission_type\030\005 \001(\r\022>\n\016mission_"
      "status\030\006 \001(\0162&.proto.BattlePassMission.M"
      "issionStatus\"k\n\rMissionStatus\022\023\n\017MISSION"
      "_INVALID\020\000\022\026\n\022MISSION_UNFINISHED\020\001\022\024\n\020MI"
      "SSION_FINISHED\020\002\022\027\n\023MISSION_POINT_TAKEN\020"
      "\003\"m\n\023BattlePassRewardTag\0224\n\runlock_statu"
      "s\030\001 \001(\0162\035.proto.BattlePassUnlockStatus\022\r"
      "\n\005level\030\002 \001(\r\022\021\n\treward_id\030\003 \001(\r\"\205\002\n\022Bat"
      "tlePassSchedule\022\023\n\013schedule_id\030\001 \001(\r\022\r\n\005"
      "level\030\002 \001(\r\022\r\n\005point\030\003 \001(\r\0224\n\runlock_sta"
      "tus\030\004 \001(\0162\035.proto.BattlePassUnlockStatus"
      "\0225\n\021reward_taken_list\030\005 \003(\0132\032.proto.Batt"
      "lePassRewardTag\022\022\n\nbegin_time\030\006 \001(\r\022\020\n\010e"
      "nd_time\030\007 \001(\r\022)\n\tcur_cycle\030\010 \001(\0132\026.proto"
      ".BattlePassCycle\"\344\001\n\027BattlePassAllDataNo"
      "tify\022\031\n\021have_cur_schedule\030\001 \001(\010\022/\n\014cur_s"
      "chedule\030\002 \001(\0132\031.proto.BattlePassSchedule"
      "\022.\n\014mission_list\030\003 \003(\0132\030.proto.BattlePas"
      "sMission\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\251\024"
      "\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABL"
      "E\020\001\032\002\020\001\"\236\001\n\035BattlePassMissionUpdateNotif"
      "y\022.\n\014mission_list\030\001 \003(\0132\030.proto.BattlePa"
      "ssMission\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\252"
      "\024\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIAB"
      "LE\020\001\032\002\020\001\"\210\001\n\032BattlePassMissionDelNotify\022"
      "\033\n\023del_mission_id_list\030\001 \003(\r\"M\n\005CmdId\022\010\n"
      "\004NONE\020\000\022\013\n\006CMD_ID\020\253\024\022\023\n\017ENET_CHANNEL_ID\020"
      "\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"\276\001\n!BattlePa"
      "ssCurScheduleUpdateNotify\022\031\n\021have_cur_sc"
      "hedule\030\001 \001(\010\022/\n\014cur_schedule\030\002 \001(\0132\031.pro"
      "to.BattlePassSchedule\"M\n\005CmdId\022\010\n\004NONE\020\000"
      "\022\013\n\006CMD_ID\020\254\024\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020EN"
      "ET_IS_RELIABLE\020\001\032\002\020\001\"q\n\032BattlePassReward"
      "TakeOption\022\'\n\003tag\030\001 \001(\0132\032.proto.BattlePa"
      "ssRewardTag\022\026\n\016has_option_idx\030\002 \001(\010\022\022\n\no"
      "ption_idx\030\003 \001(\r\"\272\001\n\027TakeBattlePassReward"
      "Req\022;\n\020take_option_list\030\001 \003(\0132!.proto.Ba"
      "ttlePassRewardTakeOption\"b\n\005CmdId\022\010\n\004NON"
      "E\020\000\022\013\n\006CMD_ID\020\255\024\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n"
      "\020ENET_IS_RELIABLE\020\001\022\023\n\017IS_ALLOW_CLIENT\020\001"
      "\032\002\020\001\"\342\001\n\027TakeBattlePassRewardRsp\022\017\n\007retc"
      "ode\030\001 \001(\005\022;\n\020take_option_list\030\002 \003(\0132!.pr"
      "oto.BattlePassRewardTakeOption\022*\n\020reward"
      "_item_list\030\003 \003(\0132\020.proto.ItemParam\"M\n\005Cm"
      "dId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\256\024\022\023\n\017ENET_CHANN"
      "EL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"\227\001\n\035Ta"
      "keBattlePassMissionPointReq\022\022\n\nmission_i"
      "d\030\001 \001(\r\"b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\257\024\022"
      "\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE"
      "\020\001\022\023\n\017IS_ALLOW_CLIENT\020\001\032\002\020\001\"\223\001\n\035TakeBatt"
      "lePassMissionPointRsp\022\017\n\007retcode\030\001 \001(\005\022\022"
      "\n\nmission_id\030\002 \001(\r\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n"
      "\006CMD_ID\020\260\024\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_"
      "IS_RELIABLE\020\001\032\002\020\001*r\n\026BattlePassUnlockSta"
      "tus\022\036\n\032BATTLE_PASS_UNLOCK_INVALID\020\000\022\033\n\027B"
      "ATTLE_PASS_UNLOCK_FREE\020\001\022\033\n\027BATTLE_PASS_"
      "UNLOCK_PAID\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2501);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cmd/cmd_battle_pass.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_define_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto

const ::google::protobuf::EnumDescriptor* BattlePassMission_MissionStatus_descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_enum_descriptors[0];
}
bool BattlePassMission_MissionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BattlePassMission_MissionStatus BattlePassMission::MISSION_INVALID;
const BattlePassMission_MissionStatus BattlePassMission::MISSION_UNFINISHED;
const BattlePassMission_MissionStatus BattlePassMission::MISSION_FINISHED;
const BattlePassMission_MissionStatus BattlePassMission::MISSION_POINT_TAKEN;
const BattlePassMission_MissionStatus BattlePassMission::MissionStatus_MIN;
const BattlePassMission_MissionStatus BattlePassMission::MissionStatus_MAX;
const int BattlePassMission::MissionStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BattlePassAllDataNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_enum_descriptors[1];
}
bool BattlePassAllDataNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2601:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BattlePassAllDataNotify_CmdId BattlePassAllDataNotify::NONE;
const BattlePassAllDataNotify_CmdId BattlePassAllDataNotify::CMD_ID;
const BattlePassAllDataNotify_CmdId BattlePassAllDataNotify::ENET_CHANNEL_ID;
const BattlePassAllDataNotify_CmdId BattlePassAllDataNotify::ENET_IS_RELIABLE;
const BattlePassAllDataNotify_CmdId BattlePassAllDataNotify::CmdId_MIN;
const BattlePassAllDataNotify_CmdId BattlePassAllDataNotify::CmdId_MAX;
const int BattlePassAllDataNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BattlePassMissionUpdateNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_enum_descriptors[2];
}
bool BattlePassMissionUpdateNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2602:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BattlePassMissionUpdateNotify_CmdId BattlePassMissionUpdateNotify::NONE;
const BattlePassMissionUpdateNotify_CmdId BattlePassMissionUpdateNotify::CMD_ID;
const BattlePassMissionUpdateNotify_CmdId BattlePassMissionUpdateNotify::ENET_CHANNEL_ID;
const BattlePassMissionUpdateNotify_CmdId BattlePassMissionUpdateNotify::ENET_IS_RELIABLE;
const BattlePassMissionUpdateNotify_CmdId BattlePassMissionUpdateNotify::CmdId_MIN;
const BattlePassMissionUpdateNotify_CmdId BattlePassMissionUpdateNotify::CmdId_MAX;
const int BattlePassMissionUpdateNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BattlePassMissionDelNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_enum_descriptors[3];
}
bool BattlePassMissionDelNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2603:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BattlePassMissionDelNotify_CmdId BattlePassMissionDelNotify::NONE;
const BattlePassMissionDelNotify_CmdId BattlePassMissionDelNotify::CMD_ID;
const BattlePassMissionDelNotify_CmdId BattlePassMissionDelNotify::ENET_CHANNEL_ID;
const BattlePassMissionDelNotify_CmdId BattlePassMissionDelNotify::ENET_IS_RELIABLE;
const BattlePassMissionDelNotify_CmdId BattlePassMissionDelNotify::CmdId_MIN;
const BattlePassMissionDelNotify_CmdId BattlePassMissionDelNotify::CmdId_MAX;
const int BattlePassMissionDelNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BattlePassCurScheduleUpdateNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_enum_descriptors[4];
}
bool BattlePassCurScheduleUpdateNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2604:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BattlePassCurScheduleUpdateNotify_CmdId BattlePassCurScheduleUpdateNotify::NONE;
const BattlePassCurScheduleUpdateNotify_CmdId BattlePassCurScheduleUpdateNotify::CMD_ID;
const BattlePassCurScheduleUpdateNotify_CmdId BattlePassCurScheduleUpdateNotify::ENET_CHANNEL_ID;
const BattlePassCurScheduleUpdateNotify_CmdId BattlePassCurScheduleUpdateNotify::ENET_IS_RELIABLE;
const BattlePassCurScheduleUpdateNotify_CmdId BattlePassCurScheduleUpdateNotify::CmdId_MIN;
const BattlePassCurScheduleUpdateNotify_CmdId BattlePassCurScheduleUpdateNotify::CmdId_MAX;
const int BattlePassCurScheduleUpdateNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TakeBattlePassRewardReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_enum_descriptors[5];
}
bool TakeBattlePassRewardReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2605:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TakeBattlePassRewardReq_CmdId TakeBattlePassRewardReq::NONE;
const TakeBattlePassRewardReq_CmdId TakeBattlePassRewardReq::CMD_ID;
const TakeBattlePassRewardReq_CmdId TakeBattlePassRewardReq::ENET_CHANNEL_ID;
const TakeBattlePassRewardReq_CmdId TakeBattlePassRewardReq::ENET_IS_RELIABLE;
const TakeBattlePassRewardReq_CmdId TakeBattlePassRewardReq::IS_ALLOW_CLIENT;
const TakeBattlePassRewardReq_CmdId TakeBattlePassRewardReq::CmdId_MIN;
const TakeBattlePassRewardReq_CmdId TakeBattlePassRewardReq::CmdId_MAX;
const int TakeBattlePassRewardReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TakeBattlePassRewardRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_enum_descriptors[6];
}
bool TakeBattlePassRewardRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2606:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TakeBattlePassRewardRsp_CmdId TakeBattlePassRewardRsp::NONE;
const TakeBattlePassRewardRsp_CmdId TakeBattlePassRewardRsp::CMD_ID;
const TakeBattlePassRewardRsp_CmdId TakeBattlePassRewardRsp::ENET_CHANNEL_ID;
const TakeBattlePassRewardRsp_CmdId TakeBattlePassRewardRsp::ENET_IS_RELIABLE;
const TakeBattlePassRewardRsp_CmdId TakeBattlePassRewardRsp::CmdId_MIN;
const TakeBattlePassRewardRsp_CmdId TakeBattlePassRewardRsp::CmdId_MAX;
const int TakeBattlePassRewardRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TakeBattlePassMissionPointReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_enum_descriptors[7];
}
bool TakeBattlePassMissionPointReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2607:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TakeBattlePassMissionPointReq_CmdId TakeBattlePassMissionPointReq::NONE;
const TakeBattlePassMissionPointReq_CmdId TakeBattlePassMissionPointReq::CMD_ID;
const TakeBattlePassMissionPointReq_CmdId TakeBattlePassMissionPointReq::ENET_CHANNEL_ID;
const TakeBattlePassMissionPointReq_CmdId TakeBattlePassMissionPointReq::ENET_IS_RELIABLE;
const TakeBattlePassMissionPointReq_CmdId TakeBattlePassMissionPointReq::IS_ALLOW_CLIENT;
const TakeBattlePassMissionPointReq_CmdId TakeBattlePassMissionPointReq::CmdId_MIN;
const TakeBattlePassMissionPointReq_CmdId TakeBattlePassMissionPointReq::CmdId_MAX;
const int TakeBattlePassMissionPointReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TakeBattlePassMissionPointRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_enum_descriptors[8];
}
bool TakeBattlePassMissionPointRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2608:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TakeBattlePassMissionPointRsp_CmdId TakeBattlePassMissionPointRsp::NONE;
const TakeBattlePassMissionPointRsp_CmdId TakeBattlePassMissionPointRsp::CMD_ID;
const TakeBattlePassMissionPointRsp_CmdId TakeBattlePassMissionPointRsp::ENET_CHANNEL_ID;
const TakeBattlePassMissionPointRsp_CmdId TakeBattlePassMissionPointRsp::ENET_IS_RELIABLE;
const TakeBattlePassMissionPointRsp_CmdId TakeBattlePassMissionPointRsp::CmdId_MIN;
const TakeBattlePassMissionPointRsp_CmdId TakeBattlePassMissionPointRsp::CmdId_MAX;
const int TakeBattlePassMissionPointRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BattlePassUnlockStatus_descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_enum_descriptors[9];
}
bool BattlePassUnlockStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattlePassCycle::kCycleIdxFieldNumber;
const int BattlePassCycle::kBeginTimeFieldNumber;
const int BattlePassCycle::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattlePassCycle::BattlePassCycle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BattlePassCycle)
}
BattlePassCycle::BattlePassCycle(const BattlePassCycle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cycle_idx_, &from.cycle_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&cycle_idx_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:proto.BattlePassCycle)
}

void BattlePassCycle::SharedCtor() {
  ::memset(&cycle_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&cycle_idx_)) + sizeof(end_time_));
  _cached_size_ = 0;
}

BattlePassCycle::~BattlePassCycle() {
  // @@protoc_insertion_point(destructor:proto.BattlePassCycle)
  SharedDtor();
}

void BattlePassCycle::SharedDtor() {
}

void BattlePassCycle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePassCycle::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattlePassCycle& BattlePassCycle::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

BattlePassCycle* BattlePassCycle::New(::google::protobuf::Arena* arena) const {
  BattlePassCycle* n = new BattlePassCycle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattlePassCycle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattlePassCycle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cycle_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&cycle_idx_)) + sizeof(end_time_));
  _internal_metadata_.Clear();
}

bool BattlePassCycle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BattlePassCycle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 cycle_idx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cycle_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 begin_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BattlePassCycle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BattlePassCycle)
  return false;
#undef DO_
}

void BattlePassCycle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BattlePassCycle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cycle_idx = 1;
  if (this->cycle_idx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cycle_idx(), output);
  }

  // uint32 begin_time = 2;
  if (this->begin_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->begin_time(), output);
  }

  // uint32 end_time = 3;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->end_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BattlePassCycle)
}

::google::protobuf::uint8* BattlePassCycle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattlePassCycle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cycle_idx = 1;
  if (this->cycle_idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cycle_idx(), target);
  }

  // uint32 begin_time = 2;
  if (this->begin_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->begin_time(), target);
  }

  // uint32 end_time = 3;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->end_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattlePassCycle)
  return target;
}

size_t BattlePassCycle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattlePassCycle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 cycle_idx = 1;
  if (this->cycle_idx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cycle_idx());
  }

  // uint32 begin_time = 2;
  if (this->begin_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->begin_time());
  }

  // uint32 end_time = 3;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePassCycle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattlePassCycle)
  GOOGLE_DCHECK_NE(&from, this);
  const BattlePassCycle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattlePassCycle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattlePassCycle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattlePassCycle)
    MergeFrom(*source);
  }
}

void BattlePassCycle::MergeFrom(const BattlePassCycle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattlePassCycle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cycle_idx() != 0) {
    set_cycle_idx(from.cycle_idx());
  }
  if (from.begin_time() != 0) {
    set_begin_time(from.begin_time());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
}

void BattlePassCycle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattlePassCycle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePassCycle::CopyFrom(const BattlePassCycle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattlePassCycle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePassCycle::IsInitialized() const {
  return true;
}

void BattlePassCycle::Swap(BattlePassCycle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattlePassCycle::InternalSwap(BattlePassCycle* other) {
  using std::swap;
  swap(cycle_idx_, other->cycle_idx_);
  swap(begin_time_, other->begin_time_);
  swap(end_time_, other->end_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattlePassCycle::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattlePassCycle

// uint32 cycle_idx = 1;
void BattlePassCycle::clear_cycle_idx() {
  cycle_idx_ = 0u;
}
::google::protobuf::uint32 BattlePassCycle::cycle_idx() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassCycle.cycle_idx)
  return cycle_idx_;
}
void BattlePassCycle::set_cycle_idx(::google::protobuf::uint32 value) {
  
  cycle_idx_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassCycle.cycle_idx)
}

// uint32 begin_time = 2;
void BattlePassCycle::clear_begin_time() {
  begin_time_ = 0u;
}
::google::protobuf::uint32 BattlePassCycle::begin_time() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassCycle.begin_time)
  return begin_time_;
}
void BattlePassCycle::set_begin_time(::google::protobuf::uint32 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassCycle.begin_time)
}

// uint32 end_time = 3;
void BattlePassCycle::clear_end_time() {
  end_time_ = 0u;
}
::google::protobuf::uint32 BattlePassCycle::end_time() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassCycle.end_time)
  return end_time_;
}
void BattlePassCycle::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassCycle.end_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattlePassMission::kMissionIdFieldNumber;
const int BattlePassMission::kCurProgressFieldNumber;
const int BattlePassMission::kTotalProgressFieldNumber;
const int BattlePassMission::kRewardBattlePassPointFieldNumber;
const int BattlePassMission::kMissionTypeFieldNumber;
const int BattlePassMission::kMissionStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattlePassMission::BattlePassMission()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BattlePassMission)
}
BattlePassMission::BattlePassMission(const BattlePassMission& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mission_id_, &from.mission_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mission_status_) -
    reinterpret_cast<char*>(&mission_id_)) + sizeof(mission_status_));
  // @@protoc_insertion_point(copy_constructor:proto.BattlePassMission)
}

void BattlePassMission::SharedCtor() {
  ::memset(&mission_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mission_status_) -
      reinterpret_cast<char*>(&mission_id_)) + sizeof(mission_status_));
  _cached_size_ = 0;
}

BattlePassMission::~BattlePassMission() {
  // @@protoc_insertion_point(destructor:proto.BattlePassMission)
  SharedDtor();
}

void BattlePassMission::SharedDtor() {
}

void BattlePassMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePassMission::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattlePassMission& BattlePassMission::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

BattlePassMission* BattlePassMission::New(::google::protobuf::Arena* arena) const {
  BattlePassMission* n = new BattlePassMission;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattlePassMission::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattlePassMission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mission_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mission_status_) -
      reinterpret_cast<char*>(&mission_id_)) + sizeof(mission_status_));
  _internal_metadata_.Clear();
}

bool BattlePassMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BattlePassMission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 mission_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mission_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_progress = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_progress = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 reward_battle_pass_point = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_battle_pass_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mission_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mission_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.BattlePassMission.MissionStatus mission_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mission_status(static_cast< ::proto::BattlePassMission_MissionStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BattlePassMission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BattlePassMission)
  return false;
#undef DO_
}

void BattlePassMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BattlePassMission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mission_id = 1;
  if (this->mission_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mission_id(), output);
  }

  // uint32 cur_progress = 2;
  if (this->cur_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_progress(), output);
  }

  // uint32 total_progress = 3;
  if (this->total_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_progress(), output);
  }

  // uint32 reward_battle_pass_point = 4;
  if (this->reward_battle_pass_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reward_battle_pass_point(), output);
  }

  // uint32 mission_type = 5;
  if (this->mission_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mission_type(), output);
  }

  // .proto.BattlePassMission.MissionStatus mission_status = 6;
  if (this->mission_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->mission_status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BattlePassMission)
}

::google::protobuf::uint8* BattlePassMission::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattlePassMission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mission_id = 1;
  if (this->mission_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mission_id(), target);
  }

  // uint32 cur_progress = 2;
  if (this->cur_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_progress(), target);
  }

  // uint32 total_progress = 3;
  if (this->total_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_progress(), target);
  }

  // uint32 reward_battle_pass_point = 4;
  if (this->reward_battle_pass_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reward_battle_pass_point(), target);
  }

  // uint32 mission_type = 5;
  if (this->mission_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mission_type(), target);
  }

  // .proto.BattlePassMission.MissionStatus mission_status = 6;
  if (this->mission_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->mission_status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattlePassMission)
  return target;
}

size_t BattlePassMission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattlePassMission)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 mission_id = 1;
  if (this->mission_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mission_id());
  }

  // uint32 cur_progress = 2;
  if (this->cur_progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_progress());
  }

  // uint32 total_progress = 3;
  if (this->total_progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_progress());
  }

  // uint32 reward_battle_pass_point = 4;
  if (this->reward_battle_pass_point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reward_battle_pass_point());
  }

  // uint32 mission_type = 5;
  if (this->mission_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mission_type());
  }

  // .proto.BattlePassMission.MissionStatus mission_status = 6;
  if (this->mission_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mission_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePassMission::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattlePassMission)
  GOOGLE_DCHECK_NE(&from, this);
  const BattlePassMission* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattlePassMission>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattlePassMission)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattlePassMission)
    MergeFrom(*source);
  }
}

void BattlePassMission::MergeFrom(const BattlePassMission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattlePassMission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mission_id() != 0) {
    set_mission_id(from.mission_id());
  }
  if (from.cur_progress() != 0) {
    set_cur_progress(from.cur_progress());
  }
  if (from.total_progress() != 0) {
    set_total_progress(from.total_progress());
  }
  if (from.reward_battle_pass_point() != 0) {
    set_reward_battle_pass_point(from.reward_battle_pass_point());
  }
  if (from.mission_type() != 0) {
    set_mission_type(from.mission_type());
  }
  if (from.mission_status() != 0) {
    set_mission_status(from.mission_status());
  }
}

void BattlePassMission::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattlePassMission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePassMission::CopyFrom(const BattlePassMission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattlePassMission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePassMission::IsInitialized() const {
  return true;
}

void BattlePassMission::Swap(BattlePassMission* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattlePassMission::InternalSwap(BattlePassMission* other) {
  using std::swap;
  swap(mission_id_, other->mission_id_);
  swap(cur_progress_, other->cur_progress_);
  swap(total_progress_, other->total_progress_);
  swap(reward_battle_pass_point_, other->reward_battle_pass_point_);
  swap(mission_type_, other->mission_type_);
  swap(mission_status_, other->mission_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattlePassMission::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattlePassMission

// uint32 mission_id = 1;
void BattlePassMission::clear_mission_id() {
  mission_id_ = 0u;
}
::google::protobuf::uint32 BattlePassMission::mission_id() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMission.mission_id)
  return mission_id_;
}
void BattlePassMission::set_mission_id(::google::protobuf::uint32 value) {
  
  mission_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassMission.mission_id)
}

// uint32 cur_progress = 2;
void BattlePassMission::clear_cur_progress() {
  cur_progress_ = 0u;
}
::google::protobuf::uint32 BattlePassMission::cur_progress() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMission.cur_progress)
  return cur_progress_;
}
void BattlePassMission::set_cur_progress(::google::protobuf::uint32 value) {
  
  cur_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassMission.cur_progress)
}

// uint32 total_progress = 3;
void BattlePassMission::clear_total_progress() {
  total_progress_ = 0u;
}
::google::protobuf::uint32 BattlePassMission::total_progress() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMission.total_progress)
  return total_progress_;
}
void BattlePassMission::set_total_progress(::google::protobuf::uint32 value) {
  
  total_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassMission.total_progress)
}

// uint32 reward_battle_pass_point = 4;
void BattlePassMission::clear_reward_battle_pass_point() {
  reward_battle_pass_point_ = 0u;
}
::google::protobuf::uint32 BattlePassMission::reward_battle_pass_point() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMission.reward_battle_pass_point)
  return reward_battle_pass_point_;
}
void BattlePassMission::set_reward_battle_pass_point(::google::protobuf::uint32 value) {
  
  reward_battle_pass_point_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassMission.reward_battle_pass_point)
}

// uint32 mission_type = 5;
void BattlePassMission::clear_mission_type() {
  mission_type_ = 0u;
}
::google::protobuf::uint32 BattlePassMission::mission_type() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMission.mission_type)
  return mission_type_;
}
void BattlePassMission::set_mission_type(::google::protobuf::uint32 value) {
  
  mission_type_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassMission.mission_type)
}

// .proto.BattlePassMission.MissionStatus mission_status = 6;
void BattlePassMission::clear_mission_status() {
  mission_status_ = 0;
}
::proto::BattlePassMission_MissionStatus BattlePassMission::mission_status() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMission.mission_status)
  return static_cast< ::proto::BattlePassMission_MissionStatus >(mission_status_);
}
void BattlePassMission::set_mission_status(::proto::BattlePassMission_MissionStatus value) {
  
  mission_status_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassMission.mission_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattlePassRewardTag::kUnlockStatusFieldNumber;
const int BattlePassRewardTag::kLevelFieldNumber;
const int BattlePassRewardTag::kRewardIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattlePassRewardTag::BattlePassRewardTag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BattlePassRewardTag)
}
BattlePassRewardTag::BattlePassRewardTag(const BattlePassRewardTag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&unlock_status_, &from.unlock_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_id_) -
    reinterpret_cast<char*>(&unlock_status_)) + sizeof(reward_id_));
  // @@protoc_insertion_point(copy_constructor:proto.BattlePassRewardTag)
}

void BattlePassRewardTag::SharedCtor() {
  ::memset(&unlock_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_id_) -
      reinterpret_cast<char*>(&unlock_status_)) + sizeof(reward_id_));
  _cached_size_ = 0;
}

BattlePassRewardTag::~BattlePassRewardTag() {
  // @@protoc_insertion_point(destructor:proto.BattlePassRewardTag)
  SharedDtor();
}

void BattlePassRewardTag::SharedDtor() {
}

void BattlePassRewardTag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePassRewardTag::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattlePassRewardTag& BattlePassRewardTag::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

BattlePassRewardTag* BattlePassRewardTag::New(::google::protobuf::Arena* arena) const {
  BattlePassRewardTag* n = new BattlePassRewardTag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattlePassRewardTag::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattlePassRewardTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&unlock_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_id_) -
      reinterpret_cast<char*>(&unlock_status_)) + sizeof(reward_id_));
  _internal_metadata_.Clear();
}

bool BattlePassRewardTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BattlePassRewardTag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.BattlePassUnlockStatus unlock_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_unlock_status(static_cast< ::proto::BattlePassUnlockStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 reward_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BattlePassRewardTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BattlePassRewardTag)
  return false;
#undef DO_
}

void BattlePassRewardTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BattlePassRewardTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.BattlePassUnlockStatus unlock_status = 1;
  if (this->unlock_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->unlock_status(), output);
  }

  // uint32 level = 2;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // uint32 reward_id = 3;
  if (this->reward_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reward_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BattlePassRewardTag)
}

::google::protobuf::uint8* BattlePassRewardTag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattlePassRewardTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.BattlePassUnlockStatus unlock_status = 1;
  if (this->unlock_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->unlock_status(), target);
  }

  // uint32 level = 2;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // uint32 reward_id = 3;
  if (this->reward_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reward_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattlePassRewardTag)
  return target;
}

size_t BattlePassRewardTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattlePassRewardTag)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.BattlePassUnlockStatus unlock_status = 1;
  if (this->unlock_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->unlock_status());
  }

  // uint32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // uint32 reward_id = 3;
  if (this->reward_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reward_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePassRewardTag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattlePassRewardTag)
  GOOGLE_DCHECK_NE(&from, this);
  const BattlePassRewardTag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattlePassRewardTag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattlePassRewardTag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattlePassRewardTag)
    MergeFrom(*source);
  }
}

void BattlePassRewardTag::MergeFrom(const BattlePassRewardTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattlePassRewardTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unlock_status() != 0) {
    set_unlock_status(from.unlock_status());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.reward_id() != 0) {
    set_reward_id(from.reward_id());
  }
}

void BattlePassRewardTag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattlePassRewardTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePassRewardTag::CopyFrom(const BattlePassRewardTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattlePassRewardTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePassRewardTag::IsInitialized() const {
  return true;
}

void BattlePassRewardTag::Swap(BattlePassRewardTag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattlePassRewardTag::InternalSwap(BattlePassRewardTag* other) {
  using std::swap;
  swap(unlock_status_, other->unlock_status_);
  swap(level_, other->level_);
  swap(reward_id_, other->reward_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattlePassRewardTag::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattlePassRewardTag

// .proto.BattlePassUnlockStatus unlock_status = 1;
void BattlePassRewardTag::clear_unlock_status() {
  unlock_status_ = 0;
}
::proto::BattlePassUnlockStatus BattlePassRewardTag::unlock_status() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassRewardTag.unlock_status)
  return static_cast< ::proto::BattlePassUnlockStatus >(unlock_status_);
}
void BattlePassRewardTag::set_unlock_status(::proto::BattlePassUnlockStatus value) {
  
  unlock_status_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassRewardTag.unlock_status)
}

// uint32 level = 2;
void BattlePassRewardTag::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 BattlePassRewardTag::level() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassRewardTag.level)
  return level_;
}
void BattlePassRewardTag::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassRewardTag.level)
}

// uint32 reward_id = 3;
void BattlePassRewardTag::clear_reward_id() {
  reward_id_ = 0u;
}
::google::protobuf::uint32 BattlePassRewardTag::reward_id() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassRewardTag.reward_id)
  return reward_id_;
}
void BattlePassRewardTag::set_reward_id(::google::protobuf::uint32 value) {
  
  reward_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassRewardTag.reward_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattlePassSchedule::kScheduleIdFieldNumber;
const int BattlePassSchedule::kLevelFieldNumber;
const int BattlePassSchedule::kPointFieldNumber;
const int BattlePassSchedule::kUnlockStatusFieldNumber;
const int BattlePassSchedule::kRewardTakenListFieldNumber;
const int BattlePassSchedule::kBeginTimeFieldNumber;
const int BattlePassSchedule::kEndTimeFieldNumber;
const int BattlePassSchedule::kCurCycleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattlePassSchedule::BattlePassSchedule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BattlePassSchedule)
}
BattlePassSchedule::BattlePassSchedule(const BattlePassSchedule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      reward_taken_list_(from.reward_taken_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cur_cycle()) {
    cur_cycle_ = new ::proto::BattlePassCycle(*from.cur_cycle_);
  } else {
    cur_cycle_ = NULL;
  }
  ::memcpy(&schedule_id_, &from.schedule_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&schedule_id_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:proto.BattlePassSchedule)
}

void BattlePassSchedule::SharedCtor() {
  ::memset(&cur_cycle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&cur_cycle_)) + sizeof(end_time_));
  _cached_size_ = 0;
}

BattlePassSchedule::~BattlePassSchedule() {
  // @@protoc_insertion_point(destructor:proto.BattlePassSchedule)
  SharedDtor();
}

void BattlePassSchedule::SharedDtor() {
  if (this != internal_default_instance()) delete cur_cycle_;
}

void BattlePassSchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePassSchedule::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattlePassSchedule& BattlePassSchedule::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

BattlePassSchedule* BattlePassSchedule::New(::google::protobuf::Arena* arena) const {
  BattlePassSchedule* n = new BattlePassSchedule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattlePassSchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattlePassSchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_taken_list_.Clear();
  if (GetArenaNoVirtual() == NULL && cur_cycle_ != NULL) {
    delete cur_cycle_;
  }
  cur_cycle_ = NULL;
  ::memset(&schedule_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&schedule_id_)) + sizeof(end_time_));
  _internal_metadata_.Clear();
}

bool BattlePassSchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BattlePassSchedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 schedule_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schedule_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.BattlePassUnlockStatus unlock_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_unlock_status(static_cast< ::proto::BattlePassUnlockStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.BattlePassRewardTag reward_taken_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_taken_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 begin_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.BattlePassCycle cur_cycle = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cur_cycle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BattlePassSchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BattlePassSchedule)
  return false;
#undef DO_
}

void BattlePassSchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BattlePassSchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 schedule_id = 1;
  if (this->schedule_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->schedule_id(), output);
  }

  // uint32 level = 2;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // uint32 point = 3;
  if (this->point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->point(), output);
  }

  // .proto.BattlePassUnlockStatus unlock_status = 4;
  if (this->unlock_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->unlock_status(), output);
  }

  // repeated .proto.BattlePassRewardTag reward_taken_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reward_taken_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reward_taken_list(static_cast<int>(i)), output);
  }

  // uint32 begin_time = 6;
  if (this->begin_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->begin_time(), output);
  }

  // uint32 end_time = 7;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->end_time(), output);
  }

  // .proto.BattlePassCycle cur_cycle = 8;
  if (this->has_cur_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->cur_cycle_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BattlePassSchedule)
}

::google::protobuf::uint8* BattlePassSchedule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattlePassSchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 schedule_id = 1;
  if (this->schedule_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->schedule_id(), target);
  }

  // uint32 level = 2;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // uint32 point = 3;
  if (this->point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->point(), target);
  }

  // .proto.BattlePassUnlockStatus unlock_status = 4;
  if (this->unlock_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->unlock_status(), target);
  }

  // repeated .proto.BattlePassRewardTag reward_taken_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reward_taken_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->reward_taken_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 begin_time = 6;
  if (this->begin_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->begin_time(), target);
  }

  // uint32 end_time = 7;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->end_time(), target);
  }

  // .proto.BattlePassCycle cur_cycle = 8;
  if (this->has_cur_cycle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->cur_cycle_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattlePassSchedule)
  return target;
}

size_t BattlePassSchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattlePassSchedule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.BattlePassRewardTag reward_taken_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->reward_taken_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward_taken_list(static_cast<int>(i)));
    }
  }

  // .proto.BattlePassCycle cur_cycle = 8;
  if (this->has_cur_cycle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cur_cycle_);
  }

  // uint32 schedule_id = 1;
  if (this->schedule_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->schedule_id());
  }

  // uint32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // uint32 point = 3;
  if (this->point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point());
  }

  // .proto.BattlePassUnlockStatus unlock_status = 4;
  if (this->unlock_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->unlock_status());
  }

  // uint32 begin_time = 6;
  if (this->begin_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->begin_time());
  }

  // uint32 end_time = 7;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePassSchedule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattlePassSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  const BattlePassSchedule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattlePassSchedule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattlePassSchedule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattlePassSchedule)
    MergeFrom(*source);
  }
}

void BattlePassSchedule::MergeFrom(const BattlePassSchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattlePassSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_taken_list_.MergeFrom(from.reward_taken_list_);
  if (from.has_cur_cycle()) {
    mutable_cur_cycle()->::proto::BattlePassCycle::MergeFrom(from.cur_cycle());
  }
  if (from.schedule_id() != 0) {
    set_schedule_id(from.schedule_id());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.point() != 0) {
    set_point(from.point());
  }
  if (from.unlock_status() != 0) {
    set_unlock_status(from.unlock_status());
  }
  if (from.begin_time() != 0) {
    set_begin_time(from.begin_time());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
}

void BattlePassSchedule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattlePassSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePassSchedule::CopyFrom(const BattlePassSchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattlePassSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePassSchedule::IsInitialized() const {
  return true;
}

void BattlePassSchedule::Swap(BattlePassSchedule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattlePassSchedule::InternalSwap(BattlePassSchedule* other) {
  using std::swap;
  reward_taken_list_.InternalSwap(&other->reward_taken_list_);
  swap(cur_cycle_, other->cur_cycle_);
  swap(schedule_id_, other->schedule_id_);
  swap(level_, other->level_);
  swap(point_, other->point_);
  swap(unlock_status_, other->unlock_status_);
  swap(begin_time_, other->begin_time_);
  swap(end_time_, other->end_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattlePassSchedule::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattlePassSchedule

// uint32 schedule_id = 1;
void BattlePassSchedule::clear_schedule_id() {
  schedule_id_ = 0u;
}
::google::protobuf::uint32 BattlePassSchedule::schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.schedule_id)
  return schedule_id_;
}
void BattlePassSchedule::set_schedule_id(::google::protobuf::uint32 value) {
  
  schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.schedule_id)
}

// uint32 level = 2;
void BattlePassSchedule::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 BattlePassSchedule::level() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.level)
  return level_;
}
void BattlePassSchedule::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.level)
}

// uint32 point = 3;
void BattlePassSchedule::clear_point() {
  point_ = 0u;
}
::google::protobuf::uint32 BattlePassSchedule::point() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.point)
  return point_;
}
void BattlePassSchedule::set_point(::google::protobuf::uint32 value) {
  
  point_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.point)
}

// .proto.BattlePassUnlockStatus unlock_status = 4;
void BattlePassSchedule::clear_unlock_status() {
  unlock_status_ = 0;
}
::proto::BattlePassUnlockStatus BattlePassSchedule::unlock_status() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.unlock_status)
  return static_cast< ::proto::BattlePassUnlockStatus >(unlock_status_);
}
void BattlePassSchedule::set_unlock_status(::proto::BattlePassUnlockStatus value) {
  
  unlock_status_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.unlock_status)
}

// repeated .proto.BattlePassRewardTag reward_taken_list = 5;
int BattlePassSchedule::reward_taken_list_size() const {
  return reward_taken_list_.size();
}
void BattlePassSchedule::clear_reward_taken_list() {
  reward_taken_list_.Clear();
}
const ::proto::BattlePassRewardTag& BattlePassSchedule::reward_taken_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.reward_taken_list)
  return reward_taken_list_.Get(index);
}
::proto::BattlePassRewardTag* BattlePassSchedule::mutable_reward_taken_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BattlePassSchedule.reward_taken_list)
  return reward_taken_list_.Mutable(index);
}
::proto::BattlePassRewardTag* BattlePassSchedule::add_reward_taken_list() {
  // @@protoc_insertion_point(field_add:proto.BattlePassSchedule.reward_taken_list)
  return reward_taken_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTag >*
BattlePassSchedule::mutable_reward_taken_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattlePassSchedule.reward_taken_list)
  return &reward_taken_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTag >&
BattlePassSchedule::reward_taken_list() const {
  // @@protoc_insertion_point(field_list:proto.BattlePassSchedule.reward_taken_list)
  return reward_taken_list_;
}

// uint32 begin_time = 6;
void BattlePassSchedule::clear_begin_time() {
  begin_time_ = 0u;
}
::google::protobuf::uint32 BattlePassSchedule::begin_time() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.begin_time)
  return begin_time_;
}
void BattlePassSchedule::set_begin_time(::google::protobuf::uint32 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.begin_time)
}

// uint32 end_time = 7;
void BattlePassSchedule::clear_end_time() {
  end_time_ = 0u;
}
::google::protobuf::uint32 BattlePassSchedule::end_time() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.end_time)
  return end_time_;
}
void BattlePassSchedule::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.end_time)
}

// .proto.BattlePassCycle cur_cycle = 8;
bool BattlePassSchedule::has_cur_cycle() const {
  return this != internal_default_instance() && cur_cycle_ != NULL;
}
void BattlePassSchedule::clear_cur_cycle() {
  if (GetArenaNoVirtual() == NULL && cur_cycle_ != NULL) delete cur_cycle_;
  cur_cycle_ = NULL;
}
const ::proto::BattlePassCycle& BattlePassSchedule::cur_cycle() const {
  const ::proto::BattlePassCycle* p = cur_cycle_;
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.cur_cycle)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BattlePassCycle*>(
      &::proto::_BattlePassCycle_default_instance_);
}
::proto::BattlePassCycle* BattlePassSchedule::mutable_cur_cycle() {
  
  if (cur_cycle_ == NULL) {
    cur_cycle_ = new ::proto::BattlePassCycle;
  }
  // @@protoc_insertion_point(field_mutable:proto.BattlePassSchedule.cur_cycle)
  return cur_cycle_;
}
::proto::BattlePassCycle* BattlePassSchedule::release_cur_cycle() {
  // @@protoc_insertion_point(field_release:proto.BattlePassSchedule.cur_cycle)
  
  ::proto::BattlePassCycle* temp = cur_cycle_;
  cur_cycle_ = NULL;
  return temp;
}
void BattlePassSchedule::set_allocated_cur_cycle(::proto::BattlePassCycle* cur_cycle) {
  delete cur_cycle_;
  cur_cycle_ = cur_cycle;
  if (cur_cycle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BattlePassSchedule.cur_cycle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattlePassAllDataNotify::kHaveCurScheduleFieldNumber;
const int BattlePassAllDataNotify::kCurScheduleFieldNumber;
const int BattlePassAllDataNotify::kMissionListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattlePassAllDataNotify::BattlePassAllDataNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BattlePassAllDataNotify)
}
BattlePassAllDataNotify::BattlePassAllDataNotify(const BattlePassAllDataNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mission_list_(from.mission_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cur_schedule()) {
    cur_schedule_ = new ::proto::BattlePassSchedule(*from.cur_schedule_);
  } else {
    cur_schedule_ = NULL;
  }
  have_cur_schedule_ = from.have_cur_schedule_;
  // @@protoc_insertion_point(copy_constructor:proto.BattlePassAllDataNotify)
}

void BattlePassAllDataNotify::SharedCtor() {
  ::memset(&cur_schedule_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&have_cur_schedule_) -
      reinterpret_cast<char*>(&cur_schedule_)) + sizeof(have_cur_schedule_));
  _cached_size_ = 0;
}

BattlePassAllDataNotify::~BattlePassAllDataNotify() {
  // @@protoc_insertion_point(destructor:proto.BattlePassAllDataNotify)
  SharedDtor();
}

void BattlePassAllDataNotify::SharedDtor() {
  if (this != internal_default_instance()) delete cur_schedule_;
}

void BattlePassAllDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePassAllDataNotify::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattlePassAllDataNotify& BattlePassAllDataNotify::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

BattlePassAllDataNotify* BattlePassAllDataNotify::New(::google::protobuf::Arena* arena) const {
  BattlePassAllDataNotify* n = new BattlePassAllDataNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattlePassAllDataNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattlePassAllDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mission_list_.Clear();
  if (GetArenaNoVirtual() == NULL && cur_schedule_ != NULL) {
    delete cur_schedule_;
  }
  cur_schedule_ = NULL;
  have_cur_schedule_ = false;
  _internal_metadata_.Clear();
}

bool BattlePassAllDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BattlePassAllDataNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool have_cur_schedule = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_cur_schedule_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.BattlePassSchedule cur_schedule = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cur_schedule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.BattlePassMission mission_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BattlePassAllDataNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BattlePassAllDataNotify)
  return false;
#undef DO_
}

void BattlePassAllDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BattlePassAllDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool have_cur_schedule = 1;
  if (this->have_cur_schedule() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->have_cur_schedule(), output);
  }

  // .proto.BattlePassSchedule cur_schedule = 2;
  if (this->has_cur_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cur_schedule_, output);
  }

  // repeated .proto.BattlePassMission mission_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mission_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mission_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BattlePassAllDataNotify)
}

::google::protobuf::uint8* BattlePassAllDataNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattlePassAllDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool have_cur_schedule = 1;
  if (this->have_cur_schedule() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->have_cur_schedule(), target);
  }

  // .proto.BattlePassSchedule cur_schedule = 2;
  if (this->has_cur_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cur_schedule_, deterministic, target);
  }

  // repeated .proto.BattlePassMission mission_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mission_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->mission_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattlePassAllDataNotify)
  return target;
}

size_t BattlePassAllDataNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattlePassAllDataNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.BattlePassMission mission_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->mission_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission_list(static_cast<int>(i)));
    }
  }

  // .proto.BattlePassSchedule cur_schedule = 2;
  if (this->has_cur_schedule()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cur_schedule_);
  }

  // bool have_cur_schedule = 1;
  if (this->have_cur_schedule() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePassAllDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattlePassAllDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const BattlePassAllDataNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattlePassAllDataNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattlePassAllDataNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattlePassAllDataNotify)
    MergeFrom(*source);
  }
}

void BattlePassAllDataNotify::MergeFrom(const BattlePassAllDataNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattlePassAllDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mission_list_.MergeFrom(from.mission_list_);
  if (from.has_cur_schedule()) {
    mutable_cur_schedule()->::proto::BattlePassSchedule::MergeFrom(from.cur_schedule());
  }
  if (from.have_cur_schedule() != 0) {
    set_have_cur_schedule(from.have_cur_schedule());
  }
}

void BattlePassAllDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattlePassAllDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePassAllDataNotify::CopyFrom(const BattlePassAllDataNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattlePassAllDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePassAllDataNotify::IsInitialized() const {
  return true;
}

void BattlePassAllDataNotify::Swap(BattlePassAllDataNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattlePassAllDataNotify::InternalSwap(BattlePassAllDataNotify* other) {
  using std::swap;
  mission_list_.InternalSwap(&other->mission_list_);
  swap(cur_schedule_, other->cur_schedule_);
  swap(have_cur_schedule_, other->have_cur_schedule_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattlePassAllDataNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattlePassAllDataNotify

// bool have_cur_schedule = 1;
void BattlePassAllDataNotify::clear_have_cur_schedule() {
  have_cur_schedule_ = false;
}
bool BattlePassAllDataNotify::have_cur_schedule() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassAllDataNotify.have_cur_schedule)
  return have_cur_schedule_;
}
void BattlePassAllDataNotify::set_have_cur_schedule(bool value) {
  
  have_cur_schedule_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassAllDataNotify.have_cur_schedule)
}

// .proto.BattlePassSchedule cur_schedule = 2;
bool BattlePassAllDataNotify::has_cur_schedule() const {
  return this != internal_default_instance() && cur_schedule_ != NULL;
}
void BattlePassAllDataNotify::clear_cur_schedule() {
  if (GetArenaNoVirtual() == NULL && cur_schedule_ != NULL) delete cur_schedule_;
  cur_schedule_ = NULL;
}
const ::proto::BattlePassSchedule& BattlePassAllDataNotify::cur_schedule() const {
  const ::proto::BattlePassSchedule* p = cur_schedule_;
  // @@protoc_insertion_point(field_get:proto.BattlePassAllDataNotify.cur_schedule)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BattlePassSchedule*>(
      &::proto::_BattlePassSchedule_default_instance_);
}
::proto::BattlePassSchedule* BattlePassAllDataNotify::mutable_cur_schedule() {
  
  if (cur_schedule_ == NULL) {
    cur_schedule_ = new ::proto::BattlePassSchedule;
  }
  // @@protoc_insertion_point(field_mutable:proto.BattlePassAllDataNotify.cur_schedule)
  return cur_schedule_;
}
::proto::BattlePassSchedule* BattlePassAllDataNotify::release_cur_schedule() {
  // @@protoc_insertion_point(field_release:proto.BattlePassAllDataNotify.cur_schedule)
  
  ::proto::BattlePassSchedule* temp = cur_schedule_;
  cur_schedule_ = NULL;
  return temp;
}
void BattlePassAllDataNotify::set_allocated_cur_schedule(::proto::BattlePassSchedule* cur_schedule) {
  delete cur_schedule_;
  cur_schedule_ = cur_schedule;
  if (cur_schedule) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BattlePassAllDataNotify.cur_schedule)
}

// repeated .proto.BattlePassMission mission_list = 3;
int BattlePassAllDataNotify::mission_list_size() const {
  return mission_list_.size();
}
void BattlePassAllDataNotify::clear_mission_list() {
  mission_list_.Clear();
}
const ::proto::BattlePassMission& BattlePassAllDataNotify::mission_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattlePassAllDataNotify.mission_list)
  return mission_list_.Get(index);
}
::proto::BattlePassMission* BattlePassAllDataNotify::mutable_mission_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BattlePassAllDataNotify.mission_list)
  return mission_list_.Mutable(index);
}
::proto::BattlePassMission* BattlePassAllDataNotify::add_mission_list() {
  // @@protoc_insertion_point(field_add:proto.BattlePassAllDataNotify.mission_list)
  return mission_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission >*
BattlePassAllDataNotify::mutable_mission_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattlePassAllDataNotify.mission_list)
  return &mission_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission >&
BattlePassAllDataNotify::mission_list() const {
  // @@protoc_insertion_point(field_list:proto.BattlePassAllDataNotify.mission_list)
  return mission_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattlePassMissionUpdateNotify::kMissionListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattlePassMissionUpdateNotify::BattlePassMissionUpdateNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BattlePassMissionUpdateNotify)
}
BattlePassMissionUpdateNotify::BattlePassMissionUpdateNotify(const BattlePassMissionUpdateNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mission_list_(from.mission_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.BattlePassMissionUpdateNotify)
}

void BattlePassMissionUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
}

BattlePassMissionUpdateNotify::~BattlePassMissionUpdateNotify() {
  // @@protoc_insertion_point(destructor:proto.BattlePassMissionUpdateNotify)
  SharedDtor();
}

void BattlePassMissionUpdateNotify::SharedDtor() {
}

void BattlePassMissionUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePassMissionUpdateNotify::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattlePassMissionUpdateNotify& BattlePassMissionUpdateNotify::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

BattlePassMissionUpdateNotify* BattlePassMissionUpdateNotify::New(::google::protobuf::Arena* arena) const {
  BattlePassMissionUpdateNotify* n = new BattlePassMissionUpdateNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattlePassMissionUpdateNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattlePassMissionUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mission_list_.Clear();
  _internal_metadata_.Clear();
}

bool BattlePassMissionUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BattlePassMissionUpdateNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.BattlePassMission mission_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BattlePassMissionUpdateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BattlePassMissionUpdateNotify)
  return false;
#undef DO_
}

void BattlePassMissionUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BattlePassMissionUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.BattlePassMission mission_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mission_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mission_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BattlePassMissionUpdateNotify)
}

::google::protobuf::uint8* BattlePassMissionUpdateNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattlePassMissionUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.BattlePassMission mission_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mission_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->mission_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattlePassMissionUpdateNotify)
  return target;
}

size_t BattlePassMissionUpdateNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattlePassMissionUpdateNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.BattlePassMission mission_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->mission_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePassMissionUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattlePassMissionUpdateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const BattlePassMissionUpdateNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattlePassMissionUpdateNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattlePassMissionUpdateNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattlePassMissionUpdateNotify)
    MergeFrom(*source);
  }
}

void BattlePassMissionUpdateNotify::MergeFrom(const BattlePassMissionUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattlePassMissionUpdateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mission_list_.MergeFrom(from.mission_list_);
}

void BattlePassMissionUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattlePassMissionUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePassMissionUpdateNotify::CopyFrom(const BattlePassMissionUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattlePassMissionUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePassMissionUpdateNotify::IsInitialized() const {
  return true;
}

void BattlePassMissionUpdateNotify::Swap(BattlePassMissionUpdateNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattlePassMissionUpdateNotify::InternalSwap(BattlePassMissionUpdateNotify* other) {
  using std::swap;
  mission_list_.InternalSwap(&other->mission_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattlePassMissionUpdateNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattlePassMissionUpdateNotify

// repeated .proto.BattlePassMission mission_list = 1;
int BattlePassMissionUpdateNotify::mission_list_size() const {
  return mission_list_.size();
}
void BattlePassMissionUpdateNotify::clear_mission_list() {
  mission_list_.Clear();
}
const ::proto::BattlePassMission& BattlePassMissionUpdateNotify::mission_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMissionUpdateNotify.mission_list)
  return mission_list_.Get(index);
}
::proto::BattlePassMission* BattlePassMissionUpdateNotify::mutable_mission_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BattlePassMissionUpdateNotify.mission_list)
  return mission_list_.Mutable(index);
}
::proto::BattlePassMission* BattlePassMissionUpdateNotify::add_mission_list() {
  // @@protoc_insertion_point(field_add:proto.BattlePassMissionUpdateNotify.mission_list)
  return mission_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission >*
BattlePassMissionUpdateNotify::mutable_mission_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattlePassMissionUpdateNotify.mission_list)
  return &mission_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission >&
BattlePassMissionUpdateNotify::mission_list() const {
  // @@protoc_insertion_point(field_list:proto.BattlePassMissionUpdateNotify.mission_list)
  return mission_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattlePassMissionDelNotify::kDelMissionIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattlePassMissionDelNotify::BattlePassMissionDelNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BattlePassMissionDelNotify)
}
BattlePassMissionDelNotify::BattlePassMissionDelNotify(const BattlePassMissionDelNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      del_mission_id_list_(from.del_mission_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.BattlePassMissionDelNotify)
}

void BattlePassMissionDelNotify::SharedCtor() {
  _cached_size_ = 0;
}

BattlePassMissionDelNotify::~BattlePassMissionDelNotify() {
  // @@protoc_insertion_point(destructor:proto.BattlePassMissionDelNotify)
  SharedDtor();
}

void BattlePassMissionDelNotify::SharedDtor() {
}

void BattlePassMissionDelNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePassMissionDelNotify::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattlePassMissionDelNotify& BattlePassMissionDelNotify::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

BattlePassMissionDelNotify* BattlePassMissionDelNotify::New(::google::protobuf::Arena* arena) const {
  BattlePassMissionDelNotify* n = new BattlePassMissionDelNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattlePassMissionDelNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattlePassMissionDelNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  del_mission_id_list_.Clear();
  _internal_metadata_.Clear();
}

bool BattlePassMissionDelNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BattlePassMissionDelNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 del_mission_id_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_del_mission_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_del_mission_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BattlePassMissionDelNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BattlePassMissionDelNotify)
  return false;
#undef DO_
}

void BattlePassMissionDelNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BattlePassMissionDelNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 del_mission_id_list = 1;
  if (this->del_mission_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _del_mission_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->del_mission_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->del_mission_id_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BattlePassMissionDelNotify)
}

::google::protobuf::uint8* BattlePassMissionDelNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattlePassMissionDelNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 del_mission_id_list = 1;
  if (this->del_mission_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _del_mission_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->del_mission_id_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattlePassMissionDelNotify)
  return target;
}

size_t BattlePassMissionDelNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattlePassMissionDelNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 del_mission_id_list = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->del_mission_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _del_mission_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePassMissionDelNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattlePassMissionDelNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const BattlePassMissionDelNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattlePassMissionDelNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattlePassMissionDelNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattlePassMissionDelNotify)
    MergeFrom(*source);
  }
}

void BattlePassMissionDelNotify::MergeFrom(const BattlePassMissionDelNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattlePassMissionDelNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  del_mission_id_list_.MergeFrom(from.del_mission_id_list_);
}

void BattlePassMissionDelNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattlePassMissionDelNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePassMissionDelNotify::CopyFrom(const BattlePassMissionDelNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattlePassMissionDelNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePassMissionDelNotify::IsInitialized() const {
  return true;
}

void BattlePassMissionDelNotify::Swap(BattlePassMissionDelNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattlePassMissionDelNotify::InternalSwap(BattlePassMissionDelNotify* other) {
  using std::swap;
  del_mission_id_list_.InternalSwap(&other->del_mission_id_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattlePassMissionDelNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattlePassMissionDelNotify

// repeated uint32 del_mission_id_list = 1;
int BattlePassMissionDelNotify::del_mission_id_list_size() const {
  return del_mission_id_list_.size();
}
void BattlePassMissionDelNotify::clear_del_mission_id_list() {
  del_mission_id_list_.Clear();
}
::google::protobuf::uint32 BattlePassMissionDelNotify::del_mission_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMissionDelNotify.del_mission_id_list)
  return del_mission_id_list_.Get(index);
}
void BattlePassMissionDelNotify::set_del_mission_id_list(int index, ::google::protobuf::uint32 value) {
  del_mission_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BattlePassMissionDelNotify.del_mission_id_list)
}
void BattlePassMissionDelNotify::add_del_mission_id_list(::google::protobuf::uint32 value) {
  del_mission_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BattlePassMissionDelNotify.del_mission_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BattlePassMissionDelNotify::del_mission_id_list() const {
  // @@protoc_insertion_point(field_list:proto.BattlePassMissionDelNotify.del_mission_id_list)
  return del_mission_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BattlePassMissionDelNotify::mutable_del_mission_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattlePassMissionDelNotify.del_mission_id_list)
  return &del_mission_id_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattlePassCurScheduleUpdateNotify::kHaveCurScheduleFieldNumber;
const int BattlePassCurScheduleUpdateNotify::kCurScheduleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattlePassCurScheduleUpdateNotify::BattlePassCurScheduleUpdateNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BattlePassCurScheduleUpdateNotify)
}
BattlePassCurScheduleUpdateNotify::BattlePassCurScheduleUpdateNotify(const BattlePassCurScheduleUpdateNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cur_schedule()) {
    cur_schedule_ = new ::proto::BattlePassSchedule(*from.cur_schedule_);
  } else {
    cur_schedule_ = NULL;
  }
  have_cur_schedule_ = from.have_cur_schedule_;
  // @@protoc_insertion_point(copy_constructor:proto.BattlePassCurScheduleUpdateNotify)
}

void BattlePassCurScheduleUpdateNotify::SharedCtor() {
  ::memset(&cur_schedule_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&have_cur_schedule_) -
      reinterpret_cast<char*>(&cur_schedule_)) + sizeof(have_cur_schedule_));
  _cached_size_ = 0;
}

BattlePassCurScheduleUpdateNotify::~BattlePassCurScheduleUpdateNotify() {
  // @@protoc_insertion_point(destructor:proto.BattlePassCurScheduleUpdateNotify)
  SharedDtor();
}

void BattlePassCurScheduleUpdateNotify::SharedDtor() {
  if (this != internal_default_instance()) delete cur_schedule_;
}

void BattlePassCurScheduleUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePassCurScheduleUpdateNotify::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattlePassCurScheduleUpdateNotify& BattlePassCurScheduleUpdateNotify::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

BattlePassCurScheduleUpdateNotify* BattlePassCurScheduleUpdateNotify::New(::google::protobuf::Arena* arena) const {
  BattlePassCurScheduleUpdateNotify* n = new BattlePassCurScheduleUpdateNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattlePassCurScheduleUpdateNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattlePassCurScheduleUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && cur_schedule_ != NULL) {
    delete cur_schedule_;
  }
  cur_schedule_ = NULL;
  have_cur_schedule_ = false;
  _internal_metadata_.Clear();
}

bool BattlePassCurScheduleUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BattlePassCurScheduleUpdateNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool have_cur_schedule = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_cur_schedule_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.BattlePassSchedule cur_schedule = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cur_schedule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BattlePassCurScheduleUpdateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BattlePassCurScheduleUpdateNotify)
  return false;
#undef DO_
}

void BattlePassCurScheduleUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BattlePassCurScheduleUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool have_cur_schedule = 1;
  if (this->have_cur_schedule() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->have_cur_schedule(), output);
  }

  // .proto.BattlePassSchedule cur_schedule = 2;
  if (this->has_cur_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cur_schedule_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BattlePassCurScheduleUpdateNotify)
}

::google::protobuf::uint8* BattlePassCurScheduleUpdateNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattlePassCurScheduleUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool have_cur_schedule = 1;
  if (this->have_cur_schedule() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->have_cur_schedule(), target);
  }

  // .proto.BattlePassSchedule cur_schedule = 2;
  if (this->has_cur_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cur_schedule_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattlePassCurScheduleUpdateNotify)
  return target;
}

size_t BattlePassCurScheduleUpdateNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattlePassCurScheduleUpdateNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.BattlePassSchedule cur_schedule = 2;
  if (this->has_cur_schedule()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cur_schedule_);
  }

  // bool have_cur_schedule = 1;
  if (this->have_cur_schedule() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePassCurScheduleUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattlePassCurScheduleUpdateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const BattlePassCurScheduleUpdateNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattlePassCurScheduleUpdateNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattlePassCurScheduleUpdateNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattlePassCurScheduleUpdateNotify)
    MergeFrom(*source);
  }
}

void BattlePassCurScheduleUpdateNotify::MergeFrom(const BattlePassCurScheduleUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattlePassCurScheduleUpdateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cur_schedule()) {
    mutable_cur_schedule()->::proto::BattlePassSchedule::MergeFrom(from.cur_schedule());
  }
  if (from.have_cur_schedule() != 0) {
    set_have_cur_schedule(from.have_cur_schedule());
  }
}

void BattlePassCurScheduleUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattlePassCurScheduleUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePassCurScheduleUpdateNotify::CopyFrom(const BattlePassCurScheduleUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattlePassCurScheduleUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePassCurScheduleUpdateNotify::IsInitialized() const {
  return true;
}

void BattlePassCurScheduleUpdateNotify::Swap(BattlePassCurScheduleUpdateNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattlePassCurScheduleUpdateNotify::InternalSwap(BattlePassCurScheduleUpdateNotify* other) {
  using std::swap;
  swap(cur_schedule_, other->cur_schedule_);
  swap(have_cur_schedule_, other->have_cur_schedule_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattlePassCurScheduleUpdateNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattlePassCurScheduleUpdateNotify

// bool have_cur_schedule = 1;
void BattlePassCurScheduleUpdateNotify::clear_have_cur_schedule() {
  have_cur_schedule_ = false;
}
bool BattlePassCurScheduleUpdateNotify::have_cur_schedule() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassCurScheduleUpdateNotify.have_cur_schedule)
  return have_cur_schedule_;
}
void BattlePassCurScheduleUpdateNotify::set_have_cur_schedule(bool value) {
  
  have_cur_schedule_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassCurScheduleUpdateNotify.have_cur_schedule)
}

// .proto.BattlePassSchedule cur_schedule = 2;
bool BattlePassCurScheduleUpdateNotify::has_cur_schedule() const {
  return this != internal_default_instance() && cur_schedule_ != NULL;
}
void BattlePassCurScheduleUpdateNotify::clear_cur_schedule() {
  if (GetArenaNoVirtual() == NULL && cur_schedule_ != NULL) delete cur_schedule_;
  cur_schedule_ = NULL;
}
const ::proto::BattlePassSchedule& BattlePassCurScheduleUpdateNotify::cur_schedule() const {
  const ::proto::BattlePassSchedule* p = cur_schedule_;
  // @@protoc_insertion_point(field_get:proto.BattlePassCurScheduleUpdateNotify.cur_schedule)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BattlePassSchedule*>(
      &::proto::_BattlePassSchedule_default_instance_);
}
::proto::BattlePassSchedule* BattlePassCurScheduleUpdateNotify::mutable_cur_schedule() {
  
  if (cur_schedule_ == NULL) {
    cur_schedule_ = new ::proto::BattlePassSchedule;
  }
  // @@protoc_insertion_point(field_mutable:proto.BattlePassCurScheduleUpdateNotify.cur_schedule)
  return cur_schedule_;
}
::proto::BattlePassSchedule* BattlePassCurScheduleUpdateNotify::release_cur_schedule() {
  // @@protoc_insertion_point(field_release:proto.BattlePassCurScheduleUpdateNotify.cur_schedule)
  
  ::proto::BattlePassSchedule* temp = cur_schedule_;
  cur_schedule_ = NULL;
  return temp;
}
void BattlePassCurScheduleUpdateNotify::set_allocated_cur_schedule(::proto::BattlePassSchedule* cur_schedule) {
  delete cur_schedule_;
  cur_schedule_ = cur_schedule;
  if (cur_schedule) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BattlePassCurScheduleUpdateNotify.cur_schedule)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattlePassRewardTakeOption::kTagFieldNumber;
const int BattlePassRewardTakeOption::kHasOptionIdxFieldNumber;
const int BattlePassRewardTakeOption::kOptionIdxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattlePassRewardTakeOption::BattlePassRewardTakeOption()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BattlePassRewardTakeOption)
}
BattlePassRewardTakeOption::BattlePassRewardTakeOption(const BattlePassRewardTakeOption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tag()) {
    tag_ = new ::proto::BattlePassRewardTag(*from.tag_);
  } else {
    tag_ = NULL;
  }
  ::memcpy(&has_option_idx_, &from.has_option_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&option_idx_) -
    reinterpret_cast<char*>(&has_option_idx_)) + sizeof(option_idx_));
  // @@protoc_insertion_point(copy_constructor:proto.BattlePassRewardTakeOption)
}

void BattlePassRewardTakeOption::SharedCtor() {
  ::memset(&tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&option_idx_) -
      reinterpret_cast<char*>(&tag_)) + sizeof(option_idx_));
  _cached_size_ = 0;
}

BattlePassRewardTakeOption::~BattlePassRewardTakeOption() {
  // @@protoc_insertion_point(destructor:proto.BattlePassRewardTakeOption)
  SharedDtor();
}

void BattlePassRewardTakeOption::SharedDtor() {
  if (this != internal_default_instance()) delete tag_;
}

void BattlePassRewardTakeOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePassRewardTakeOption::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattlePassRewardTakeOption& BattlePassRewardTakeOption::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

BattlePassRewardTakeOption* BattlePassRewardTakeOption::New(::google::protobuf::Arena* arena) const {
  BattlePassRewardTakeOption* n = new BattlePassRewardTakeOption;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattlePassRewardTakeOption::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattlePassRewardTakeOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tag_ != NULL) {
    delete tag_;
  }
  tag_ = NULL;
  ::memset(&has_option_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&option_idx_) -
      reinterpret_cast<char*>(&has_option_idx_)) + sizeof(option_idx_));
  _internal_metadata_.Clear();
}

bool BattlePassRewardTakeOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BattlePassRewardTakeOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.BattlePassRewardTag tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_option_idx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_option_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 option_idx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &option_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BattlePassRewardTakeOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BattlePassRewardTakeOption)
  return false;
#undef DO_
}

void BattlePassRewardTakeOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BattlePassRewardTakeOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.BattlePassRewardTag tag = 1;
  if (this->has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tag_, output);
  }

  // bool has_option_idx = 2;
  if (this->has_option_idx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_option_idx(), output);
  }

  // uint32 option_idx = 3;
  if (this->option_idx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->option_idx(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BattlePassRewardTakeOption)
}

::google::protobuf::uint8* BattlePassRewardTakeOption::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattlePassRewardTakeOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.BattlePassRewardTag tag = 1;
  if (this->has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tag_, deterministic, target);
  }

  // bool has_option_idx = 2;
  if (this->has_option_idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->has_option_idx(), target);
  }

  // uint32 option_idx = 3;
  if (this->option_idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->option_idx(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattlePassRewardTakeOption)
  return target;
}

size_t BattlePassRewardTakeOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattlePassRewardTakeOption)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.BattlePassRewardTag tag = 1;
  if (this->has_tag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tag_);
  }

  // bool has_option_idx = 2;
  if (this->has_option_idx() != 0) {
    total_size += 1 + 1;
  }

  // uint32 option_idx = 3;
  if (this->option_idx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->option_idx());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePassRewardTakeOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattlePassRewardTakeOption)
  GOOGLE_DCHECK_NE(&from, this);
  const BattlePassRewardTakeOption* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattlePassRewardTakeOption>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattlePassRewardTakeOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattlePassRewardTakeOption)
    MergeFrom(*source);
  }
}

void BattlePassRewardTakeOption::MergeFrom(const BattlePassRewardTakeOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattlePassRewardTakeOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tag()) {
    mutable_tag()->::proto::BattlePassRewardTag::MergeFrom(from.tag());
  }
  if (from.has_option_idx() != 0) {
    set_has_option_idx(from.has_option_idx());
  }
  if (from.option_idx() != 0) {
    set_option_idx(from.option_idx());
  }
}

void BattlePassRewardTakeOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattlePassRewardTakeOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePassRewardTakeOption::CopyFrom(const BattlePassRewardTakeOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattlePassRewardTakeOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePassRewardTakeOption::IsInitialized() const {
  return true;
}

void BattlePassRewardTakeOption::Swap(BattlePassRewardTakeOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattlePassRewardTakeOption::InternalSwap(BattlePassRewardTakeOption* other) {
  using std::swap;
  swap(tag_, other->tag_);
  swap(has_option_idx_, other->has_option_idx_);
  swap(option_idx_, other->option_idx_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattlePassRewardTakeOption::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattlePassRewardTakeOption

// .proto.BattlePassRewardTag tag = 1;
bool BattlePassRewardTakeOption::has_tag() const {
  return this != internal_default_instance() && tag_ != NULL;
}
void BattlePassRewardTakeOption::clear_tag() {
  if (GetArenaNoVirtual() == NULL && tag_ != NULL) delete tag_;
  tag_ = NULL;
}
const ::proto::BattlePassRewardTag& BattlePassRewardTakeOption::tag() const {
  const ::proto::BattlePassRewardTag* p = tag_;
  // @@protoc_insertion_point(field_get:proto.BattlePassRewardTakeOption.tag)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BattlePassRewardTag*>(
      &::proto::_BattlePassRewardTag_default_instance_);
}
::proto::BattlePassRewardTag* BattlePassRewardTakeOption::mutable_tag() {
  
  if (tag_ == NULL) {
    tag_ = new ::proto::BattlePassRewardTag;
  }
  // @@protoc_insertion_point(field_mutable:proto.BattlePassRewardTakeOption.tag)
  return tag_;
}
::proto::BattlePassRewardTag* BattlePassRewardTakeOption::release_tag() {
  // @@protoc_insertion_point(field_release:proto.BattlePassRewardTakeOption.tag)
  
  ::proto::BattlePassRewardTag* temp = tag_;
  tag_ = NULL;
  return temp;
}
void BattlePassRewardTakeOption::set_allocated_tag(::proto::BattlePassRewardTag* tag) {
  delete tag_;
  tag_ = tag;
  if (tag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BattlePassRewardTakeOption.tag)
}

// bool has_option_idx = 2;
void BattlePassRewardTakeOption::clear_has_option_idx() {
  has_option_idx_ = false;
}
bool BattlePassRewardTakeOption::has_option_idx() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassRewardTakeOption.has_option_idx)
  return has_option_idx_;
}
void BattlePassRewardTakeOption::set_has_option_idx(bool value) {
  
  has_option_idx_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassRewardTakeOption.has_option_idx)
}

// uint32 option_idx = 3;
void BattlePassRewardTakeOption::clear_option_idx() {
  option_idx_ = 0u;
}
::google::protobuf::uint32 BattlePassRewardTakeOption::option_idx() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassRewardTakeOption.option_idx)
  return option_idx_;
}
void BattlePassRewardTakeOption::set_option_idx(::google::protobuf::uint32 value) {
  
  option_idx_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassRewardTakeOption.option_idx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TakeBattlePassRewardReq::kTakeOptionListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakeBattlePassRewardReq::TakeBattlePassRewardReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TakeBattlePassRewardReq)
}
TakeBattlePassRewardReq::TakeBattlePassRewardReq(const TakeBattlePassRewardReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      take_option_list_(from.take_option_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.TakeBattlePassRewardReq)
}

void TakeBattlePassRewardReq::SharedCtor() {
  _cached_size_ = 0;
}

TakeBattlePassRewardReq::~TakeBattlePassRewardReq() {
  // @@protoc_insertion_point(destructor:proto.TakeBattlePassRewardReq)
  SharedDtor();
}

void TakeBattlePassRewardReq::SharedDtor() {
}

void TakeBattlePassRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeBattlePassRewardReq::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TakeBattlePassRewardReq& TakeBattlePassRewardReq::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

TakeBattlePassRewardReq* TakeBattlePassRewardReq::New(::google::protobuf::Arena* arena) const {
  TakeBattlePassRewardReq* n = new TakeBattlePassRewardReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TakeBattlePassRewardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TakeBattlePassRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  take_option_list_.Clear();
  _internal_metadata_.Clear();
}

bool TakeBattlePassRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.TakeBattlePassRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.BattlePassRewardTakeOption take_option_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_take_option_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.TakeBattlePassRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.TakeBattlePassRewardReq)
  return false;
#undef DO_
}

void TakeBattlePassRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.TakeBattlePassRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.BattlePassRewardTakeOption take_option_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->take_option_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->take_option_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.TakeBattlePassRewardReq)
}

::google::protobuf::uint8* TakeBattlePassRewardReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.TakeBattlePassRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.BattlePassRewardTakeOption take_option_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->take_option_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->take_option_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TakeBattlePassRewardReq)
  return target;
}

size_t TakeBattlePassRewardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TakeBattlePassRewardReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.BattlePassRewardTakeOption take_option_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->take_option_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->take_option_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeBattlePassRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.TakeBattlePassRewardReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TakeBattlePassRewardReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TakeBattlePassRewardReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.TakeBattlePassRewardReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.TakeBattlePassRewardReq)
    MergeFrom(*source);
  }
}

void TakeBattlePassRewardReq::MergeFrom(const TakeBattlePassRewardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.TakeBattlePassRewardReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  take_option_list_.MergeFrom(from.take_option_list_);
}

void TakeBattlePassRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.TakeBattlePassRewardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeBattlePassRewardReq::CopyFrom(const TakeBattlePassRewardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TakeBattlePassRewardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeBattlePassRewardReq::IsInitialized() const {
  return true;
}

void TakeBattlePassRewardReq::Swap(TakeBattlePassRewardReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakeBattlePassRewardReq::InternalSwap(TakeBattlePassRewardReq* other) {
  using std::swap;
  take_option_list_.InternalSwap(&other->take_option_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TakeBattlePassRewardReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TakeBattlePassRewardReq

// repeated .proto.BattlePassRewardTakeOption take_option_list = 1;
int TakeBattlePassRewardReq::take_option_list_size() const {
  return take_option_list_.size();
}
void TakeBattlePassRewardReq::clear_take_option_list() {
  take_option_list_.Clear();
}
const ::proto::BattlePassRewardTakeOption& TakeBattlePassRewardReq::take_option_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassRewardReq.take_option_list)
  return take_option_list_.Get(index);
}
::proto::BattlePassRewardTakeOption* TakeBattlePassRewardReq::mutable_take_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TakeBattlePassRewardReq.take_option_list)
  return take_option_list_.Mutable(index);
}
::proto::BattlePassRewardTakeOption* TakeBattlePassRewardReq::add_take_option_list() {
  // @@protoc_insertion_point(field_add:proto.TakeBattlePassRewardReq.take_option_list)
  return take_option_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption >*
TakeBattlePassRewardReq::mutable_take_option_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeBattlePassRewardReq.take_option_list)
  return &take_option_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption >&
TakeBattlePassRewardReq::take_option_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeBattlePassRewardReq.take_option_list)
  return take_option_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TakeBattlePassRewardRsp::kRetcodeFieldNumber;
const int TakeBattlePassRewardRsp::kTakeOptionListFieldNumber;
const int TakeBattlePassRewardRsp::kRewardItemListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakeBattlePassRewardRsp::TakeBattlePassRewardRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TakeBattlePassRewardRsp)
}
TakeBattlePassRewardRsp::TakeBattlePassRewardRsp(const TakeBattlePassRewardRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      take_option_list_(from.take_option_list_),
      reward_item_list_(from.reward_item_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.TakeBattlePassRewardRsp)
}

void TakeBattlePassRewardRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

TakeBattlePassRewardRsp::~TakeBattlePassRewardRsp() {
  // @@protoc_insertion_point(destructor:proto.TakeBattlePassRewardRsp)
  SharedDtor();
}

void TakeBattlePassRewardRsp::SharedDtor() {
}

void TakeBattlePassRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeBattlePassRewardRsp::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TakeBattlePassRewardRsp& TakeBattlePassRewardRsp::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

TakeBattlePassRewardRsp* TakeBattlePassRewardRsp::New(::google::protobuf::Arena* arena) const {
  TakeBattlePassRewardRsp* n = new TakeBattlePassRewardRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TakeBattlePassRewardRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TakeBattlePassRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  take_option_list_.Clear();
  reward_item_list_.Clear();
  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool TakeBattlePassRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.TakeBattlePassRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.BattlePassRewardTakeOption take_option_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_take_option_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ItemParam reward_item_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.TakeBattlePassRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.TakeBattlePassRewardRsp)
  return false;
#undef DO_
}

void TakeBattlePassRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.TakeBattlePassRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // repeated .proto.BattlePassRewardTakeOption take_option_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->take_option_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->take_option_list(static_cast<int>(i)), output);
  }

  // repeated .proto.ItemParam reward_item_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reward_item_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward_item_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.TakeBattlePassRewardRsp)
}

::google::protobuf::uint8* TakeBattlePassRewardRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.TakeBattlePassRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // repeated .proto.BattlePassRewardTakeOption take_option_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->take_option_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->take_option_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.ItemParam reward_item_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reward_item_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->reward_item_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TakeBattlePassRewardRsp)
  return target;
}

size_t TakeBattlePassRewardRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TakeBattlePassRewardRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.BattlePassRewardTakeOption take_option_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->take_option_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->take_option_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.ItemParam reward_item_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->reward_item_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward_item_list(static_cast<int>(i)));
    }
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeBattlePassRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.TakeBattlePassRewardRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const TakeBattlePassRewardRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TakeBattlePassRewardRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.TakeBattlePassRewardRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.TakeBattlePassRewardRsp)
    MergeFrom(*source);
  }
}

void TakeBattlePassRewardRsp::MergeFrom(const TakeBattlePassRewardRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.TakeBattlePassRewardRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  take_option_list_.MergeFrom(from.take_option_list_);
  reward_item_list_.MergeFrom(from.reward_item_list_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void TakeBattlePassRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.TakeBattlePassRewardRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeBattlePassRewardRsp::CopyFrom(const TakeBattlePassRewardRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TakeBattlePassRewardRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeBattlePassRewardRsp::IsInitialized() const {
  return true;
}

void TakeBattlePassRewardRsp::Swap(TakeBattlePassRewardRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakeBattlePassRewardRsp::InternalSwap(TakeBattlePassRewardRsp* other) {
  using std::swap;
  take_option_list_.InternalSwap(&other->take_option_list_);
  reward_item_list_.InternalSwap(&other->reward_item_list_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TakeBattlePassRewardRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TakeBattlePassRewardRsp

// int32 retcode = 1;
void TakeBattlePassRewardRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 TakeBattlePassRewardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassRewardRsp.retcode)
  return retcode_;
}
void TakeBattlePassRewardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeBattlePassRewardRsp.retcode)
}

// repeated .proto.BattlePassRewardTakeOption take_option_list = 2;
int TakeBattlePassRewardRsp::take_option_list_size() const {
  return take_option_list_.size();
}
void TakeBattlePassRewardRsp::clear_take_option_list() {
  take_option_list_.Clear();
}
const ::proto::BattlePassRewardTakeOption& TakeBattlePassRewardRsp::take_option_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassRewardRsp.take_option_list)
  return take_option_list_.Get(index);
}
::proto::BattlePassRewardTakeOption* TakeBattlePassRewardRsp::mutable_take_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TakeBattlePassRewardRsp.take_option_list)
  return take_option_list_.Mutable(index);
}
::proto::BattlePassRewardTakeOption* TakeBattlePassRewardRsp::add_take_option_list() {
  // @@protoc_insertion_point(field_add:proto.TakeBattlePassRewardRsp.take_option_list)
  return take_option_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption >*
TakeBattlePassRewardRsp::mutable_take_option_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeBattlePassRewardRsp.take_option_list)
  return &take_option_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption >&
TakeBattlePassRewardRsp::take_option_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeBattlePassRewardRsp.take_option_list)
  return take_option_list_;
}

// repeated .proto.ItemParam reward_item_list = 3;
int TakeBattlePassRewardRsp::reward_item_list_size() const {
  return reward_item_list_.size();
}
void TakeBattlePassRewardRsp::clear_reward_item_list() {
  reward_item_list_.Clear();
}
const ::proto::ItemParam& TakeBattlePassRewardRsp::reward_item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassRewardRsp.reward_item_list)
  return reward_item_list_.Get(index);
}
::proto::ItemParam* TakeBattlePassRewardRsp::mutable_reward_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TakeBattlePassRewardRsp.reward_item_list)
  return reward_item_list_.Mutable(index);
}
::proto::ItemParam* TakeBattlePassRewardRsp::add_reward_item_list() {
  // @@protoc_insertion_point(field_add:proto.TakeBattlePassRewardRsp.reward_item_list)
  return reward_item_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
TakeBattlePassRewardRsp::mutable_reward_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeBattlePassRewardRsp.reward_item_list)
  return &reward_item_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
TakeBattlePassRewardRsp::reward_item_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeBattlePassRewardRsp.reward_item_list)
  return reward_item_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TakeBattlePassMissionPointReq::kMissionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakeBattlePassMissionPointReq::TakeBattlePassMissionPointReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TakeBattlePassMissionPointReq)
}
TakeBattlePassMissionPointReq::TakeBattlePassMissionPointReq(const TakeBattlePassMissionPointReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mission_id_ = from.mission_id_;
  // @@protoc_insertion_point(copy_constructor:proto.TakeBattlePassMissionPointReq)
}

void TakeBattlePassMissionPointReq::SharedCtor() {
  mission_id_ = 0u;
  _cached_size_ = 0;
}

TakeBattlePassMissionPointReq::~TakeBattlePassMissionPointReq() {
  // @@protoc_insertion_point(destructor:proto.TakeBattlePassMissionPointReq)
  SharedDtor();
}

void TakeBattlePassMissionPointReq::SharedDtor() {
}

void TakeBattlePassMissionPointReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeBattlePassMissionPointReq::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TakeBattlePassMissionPointReq& TakeBattlePassMissionPointReq::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

TakeBattlePassMissionPointReq* TakeBattlePassMissionPointReq::New(::google::protobuf::Arena* arena) const {
  TakeBattlePassMissionPointReq* n = new TakeBattlePassMissionPointReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TakeBattlePassMissionPointReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TakeBattlePassMissionPointReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mission_id_ = 0u;
  _internal_metadata_.Clear();
}

bool TakeBattlePassMissionPointReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.TakeBattlePassMissionPointReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 mission_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mission_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.TakeBattlePassMissionPointReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.TakeBattlePassMissionPointReq)
  return false;
#undef DO_
}

void TakeBattlePassMissionPointReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.TakeBattlePassMissionPointReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mission_id = 1;
  if (this->mission_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mission_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.TakeBattlePassMissionPointReq)
}

::google::protobuf::uint8* TakeBattlePassMissionPointReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.TakeBattlePassMissionPointReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mission_id = 1;
  if (this->mission_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mission_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TakeBattlePassMissionPointReq)
  return target;
}

size_t TakeBattlePassMissionPointReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TakeBattlePassMissionPointReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 mission_id = 1;
  if (this->mission_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mission_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeBattlePassMissionPointReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.TakeBattlePassMissionPointReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TakeBattlePassMissionPointReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TakeBattlePassMissionPointReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.TakeBattlePassMissionPointReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.TakeBattlePassMissionPointReq)
    MergeFrom(*source);
  }
}

void TakeBattlePassMissionPointReq::MergeFrom(const TakeBattlePassMissionPointReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.TakeBattlePassMissionPointReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mission_id() != 0) {
    set_mission_id(from.mission_id());
  }
}

void TakeBattlePassMissionPointReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.TakeBattlePassMissionPointReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeBattlePassMissionPointReq::CopyFrom(const TakeBattlePassMissionPointReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TakeBattlePassMissionPointReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeBattlePassMissionPointReq::IsInitialized() const {
  return true;
}

void TakeBattlePassMissionPointReq::Swap(TakeBattlePassMissionPointReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakeBattlePassMissionPointReq::InternalSwap(TakeBattlePassMissionPointReq* other) {
  using std::swap;
  swap(mission_id_, other->mission_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TakeBattlePassMissionPointReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TakeBattlePassMissionPointReq

// uint32 mission_id = 1;
void TakeBattlePassMissionPointReq::clear_mission_id() {
  mission_id_ = 0u;
}
::google::protobuf::uint32 TakeBattlePassMissionPointReq::mission_id() const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassMissionPointReq.mission_id)
  return mission_id_;
}
void TakeBattlePassMissionPointReq::set_mission_id(::google::protobuf::uint32 value) {
  
  mission_id_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeBattlePassMissionPointReq.mission_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TakeBattlePassMissionPointRsp::kRetcodeFieldNumber;
const int TakeBattlePassMissionPointRsp::kMissionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakeBattlePassMissionPointRsp::TakeBattlePassMissionPointRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TakeBattlePassMissionPointRsp)
}
TakeBattlePassMissionPointRsp::TakeBattlePassMissionPointRsp(const TakeBattlePassMissionPointRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&mission_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(mission_id_));
  // @@protoc_insertion_point(copy_constructor:proto.TakeBattlePassMissionPointRsp)
}

void TakeBattlePassMissionPointRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mission_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(mission_id_));
  _cached_size_ = 0;
}

TakeBattlePassMissionPointRsp::~TakeBattlePassMissionPointRsp() {
  // @@protoc_insertion_point(destructor:proto.TakeBattlePassMissionPointRsp)
  SharedDtor();
}

void TakeBattlePassMissionPointRsp::SharedDtor() {
}

void TakeBattlePassMissionPointRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeBattlePassMissionPointRsp::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TakeBattlePassMissionPointRsp& TakeBattlePassMissionPointRsp::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

TakeBattlePassMissionPointRsp* TakeBattlePassMissionPointRsp::New(::google::protobuf::Arena* arena) const {
  TakeBattlePassMissionPointRsp* n = new TakeBattlePassMissionPointRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TakeBattlePassMissionPointRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TakeBattlePassMissionPointRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mission_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(mission_id_));
  _internal_metadata_.Clear();
}

bool TakeBattlePassMissionPointRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.TakeBattlePassMissionPointRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mission_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mission_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.TakeBattlePassMissionPointRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.TakeBattlePassMissionPointRsp)
  return false;
#undef DO_
}

void TakeBattlePassMissionPointRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.TakeBattlePassMissionPointRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 mission_id = 2;
  if (this->mission_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mission_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.TakeBattlePassMissionPointRsp)
}

::google::protobuf::uint8* TakeBattlePassMissionPointRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.TakeBattlePassMissionPointRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 mission_id = 2;
  if (this->mission_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mission_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TakeBattlePassMissionPointRsp)
  return target;
}

size_t TakeBattlePassMissionPointRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TakeBattlePassMissionPointRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 mission_id = 2;
  if (this->mission_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mission_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeBattlePassMissionPointRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.TakeBattlePassMissionPointRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const TakeBattlePassMissionPointRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TakeBattlePassMissionPointRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.TakeBattlePassMissionPointRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.TakeBattlePassMissionPointRsp)
    MergeFrom(*source);
  }
}

void TakeBattlePassMissionPointRsp::MergeFrom(const TakeBattlePassMissionPointRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.TakeBattlePassMissionPointRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.mission_id() != 0) {
    set_mission_id(from.mission_id());
  }
}

void TakeBattlePassMissionPointRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.TakeBattlePassMissionPointRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeBattlePassMissionPointRsp::CopyFrom(const TakeBattlePassMissionPointRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TakeBattlePassMissionPointRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeBattlePassMissionPointRsp::IsInitialized() const {
  return true;
}

void TakeBattlePassMissionPointRsp::Swap(TakeBattlePassMissionPointRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakeBattlePassMissionPointRsp::InternalSwap(TakeBattlePassMissionPointRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(mission_id_, other->mission_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TakeBattlePassMissionPointRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TakeBattlePassMissionPointRsp

// int32 retcode = 1;
void TakeBattlePassMissionPointRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 TakeBattlePassMissionPointRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassMissionPointRsp.retcode)
  return retcode_;
}
void TakeBattlePassMissionPointRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeBattlePassMissionPointRsp.retcode)
}

// uint32 mission_id = 2;
void TakeBattlePassMissionPointRsp::clear_mission_id() {
  mission_id_ = 0u;
}
::google::protobuf::uint32 TakeBattlePassMissionPointRsp::mission_id() const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassMissionPointRsp.mission_id)
  return mission_id_;
}
void TakeBattlePassMissionPointRsp::set_mission_id(::google::protobuf::uint32 value) {
  
  mission_id_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeBattlePassMissionPointRsp.mission_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
