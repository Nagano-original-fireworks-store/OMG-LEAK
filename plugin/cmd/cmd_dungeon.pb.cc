// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_dungeon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cmd/cmd_dungeon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
class DungeonEntryInfoReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonEntryInfoReq>
     _instance;
} _DungeonEntryInfoReq_default_instance_;
class DungeonEntryInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonEntryInfo>
     _instance;
} _DungeonEntryInfo_default_instance_;
class DungeonEntryInfoRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonEntryInfoRsp>
     _instance;
} _DungeonEntryInfoRsp_default_instance_;
class PlayerEnterDungeonReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlayerEnterDungeonReq>
     _instance;
} _PlayerEnterDungeonReq_default_instance_;
class PlayerEnterDungeonRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlayerEnterDungeonRsp>
     _instance;
} _PlayerEnterDungeonRsp_default_instance_;
class PlayerQuitDungeonReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlayerQuitDungeonReq>
     _instance;
} _PlayerQuitDungeonReq_default_instance_;
class PlayerQuitDungeonRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlayerQuitDungeonRsp>
     _instance;
} _PlayerQuitDungeonRsp_default_instance_;
class DungeonWayPointNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonWayPointNotify>
     _instance;
} _DungeonWayPointNotify_default_instance_;
class DungeonWayPointActivateReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonWayPointActivateReq>
     _instance;
} _DungeonWayPointActivateReq_default_instance_;
class DungeonWayPointActivateRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonWayPointActivateRsp>
     _instance;
} _DungeonWayPointActivateRsp_default_instance_;
class DungeonSettleNotify_SettleShowEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonSettleNotify::DungeonSettleNotify_SettleShowEntry>
     _instance;
} _DungeonSettleNotify_SettleShowEntry_default_instance_;
class DungeonSettleNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonSettleNotify>
     _instance;
} _DungeonSettleNotify_default_instance_;
class DungeonPlayerDieNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonPlayerDieNotify>
     _instance;
  ::google::protobuf::uint32 monster_id_;
  ::google::protobuf::uint32 gadget_id_;
} _DungeonPlayerDieNotify_default_instance_;
class DungeonDieOptionReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonDieOptionReq>
     _instance;
} _DungeonDieOptionReq_default_instance_;
class DungeonDieOptionRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonDieOptionRsp>
     _instance;
} _DungeonDieOptionRsp_default_instance_;
class DungeonShowReminderNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonShowReminderNotify>
     _instance;
} _DungeonShowReminderNotify_default_instance_;
class DungeonPlayerDieReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonPlayerDieReq>
     _instance;
} _DungeonPlayerDieReq_default_instance_;
class DungeonPlayerDieRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonPlayerDieRsp>
     _instance;
} _DungeonPlayerDieRsp_default_instance_;
class DungeonDataNotify_DungeonDataMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonDataNotify::DungeonDataNotify_DungeonDataMapEntry>
     _instance;
} _DungeonDataNotify_DungeonDataMapEntry_default_instance_;
class DungeonDataNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonDataNotify>
     _instance;
} _DungeonDataNotify_default_instance_;
class DungeonChallengeBeginNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonChallengeBeginNotify>
     _instance;
} _DungeonChallengeBeginNotify_default_instance_;
class DungeonChallengeFinishNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonChallengeFinishNotify>
     _instance;
} _DungeonChallengeFinishNotify_default_instance_;
class ChallengeDataNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChallengeDataNotify>
     _instance;
} _ChallengeDataNotify_default_instance_;
class DungeonFollowNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonFollowNotify>
     _instance;
} _DungeonFollowNotify_default_instance_;
class DungeonGetStatueDropReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonGetStatueDropReq>
     _instance;
} _DungeonGetStatueDropReq_default_instance_;
class DungeonGetStatueDropRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonGetStatueDropRsp>
     _instance;
} _DungeonGetStatueDropRsp_default_instance_;
class ChallengeRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChallengeRecord>
     _instance;
} _ChallengeRecord_default_instance_;
class ChallengeRecordNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChallengeRecordNotify>
     _instance;
} _ChallengeRecordNotify_default_instance_;
class DungeonCandidateTeamAvatarDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamAvatar>
     _instance;
} _DungeonCandidateTeamAvatar_default_instance_;
class DungeonCandidateTeamInfoNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamInfoNotify>
     _instance;
} _DungeonCandidateTeamInfoNotify_default_instance_;
class DungeonCandidateTeamInviteNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamInviteNotify>
     _instance;
} _DungeonCandidateTeamInviteNotify_default_instance_;
class DungeonCandidateTeamRefuseNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamRefuseNotify>
     _instance;
} _DungeonCandidateTeamRefuseNotify_default_instance_;
class DungeonCandidateTeamPlayerLeaveNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamPlayerLeaveNotify>
     _instance;
} _DungeonCandidateTeamPlayerLeaveNotify_default_instance_;
class DungeonCandidateTeamDismissNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamDismissNotify>
     _instance;
} _DungeonCandidateTeamDismissNotify_default_instance_;
class DungeonCandidateTeamCreateReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamCreateReq>
     _instance;
} _DungeonCandidateTeamCreateReq_default_instance_;
class DungeonCandidateTeamCreateRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamCreateRsp>
     _instance;
} _DungeonCandidateTeamCreateRsp_default_instance_;
class DungeonCandidateTeamInviteReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamInviteReq>
     _instance;
} _DungeonCandidateTeamInviteReq_default_instance_;
class DungeonCandidateTeamInviteRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamInviteRsp>
     _instance;
} _DungeonCandidateTeamInviteRsp_default_instance_;
class DungeonCandidateTeamKickReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamKickReq>
     _instance;
} _DungeonCandidateTeamKickReq_default_instance_;
class DungeonCandidateTeamKickRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamKickRsp>
     _instance;
} _DungeonCandidateTeamKickRsp_default_instance_;
class DungeonCandidateTeamLeaveReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamLeaveReq>
     _instance;
} _DungeonCandidateTeamLeaveReq_default_instance_;
class DungeonCandidateTeamLeaveRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamLeaveRsp>
     _instance;
} _DungeonCandidateTeamLeaveRsp_default_instance_;
class DungeonCandidateTeamReplyInviteReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamReplyInviteReq>
     _instance;
} _DungeonCandidateTeamReplyInviteReq_default_instance_;
class DungeonCandidateTeamReplyInviteRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamReplyInviteRsp>
     _instance;
} _DungeonCandidateTeamReplyInviteRsp_default_instance_;
class DungeonCandidateTeamSetReadyReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamSetReadyReq>
     _instance;
} _DungeonCandidateTeamSetReadyReq_default_instance_;
class DungeonCandidateTeamSetReadyRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamSetReadyRsp>
     _instance;
} _DungeonCandidateTeamSetReadyRsp_default_instance_;
class DungeonCandidateTeamChangeAvatarReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamChangeAvatarReq>
     _instance;
} _DungeonCandidateTeamChangeAvatarReq_default_instance_;
class DungeonCandidateTeamChangeAvatarRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamChangeAvatarRsp>
     _instance;
} _DungeonCandidateTeamChangeAvatarRsp_default_instance_;
class DailyDungeonEntryInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DailyDungeonEntryInfo>
     _instance;
} _DailyDungeonEntryInfo_default_instance_;
class GetDailyDungeonEntryInfoReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetDailyDungeonEntryInfoReq>
     _instance;
} _GetDailyDungeonEntryInfoReq_default_instance_;
class GetDailyDungeonEntryInfoRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetDailyDungeonEntryInfoRsp>
     _instance;
} _GetDailyDungeonEntryInfoRsp_default_instance_;
class DungeonSlipRevivePointActivateReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonSlipRevivePointActivateReq>
     _instance;
} _DungeonSlipRevivePointActivateReq_default_instance_;
class DungeonSlipRevivePointActivateRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonSlipRevivePointActivateRsp>
     _instance;
} _DungeonSlipRevivePointActivateRsp_default_instance_;

namespace protobuf_cmd_2fcmd_5fdungeon_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[53];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[50];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfoReq, point_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfo, dungeon_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfo, is_passed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfo, left_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfo, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfo, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfo, max_boss_chest_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfo, boss_chest_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfoRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfoRsp, point_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfoRsp, dungeon_entry_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfoRsp, recommend_dungeon_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterDungeonReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterDungeonReq, point_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterDungeonReq, dungeon_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterDungeonRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterDungeonRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterDungeonRsp, point_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterDungeonRsp, dungeon_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuitDungeonReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuitDungeonReq, point_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuitDungeonRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuitDungeonRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuitDungeonRsp, point_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonWayPointNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonWayPointNotify, active_way_point_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonWayPointNotify, is_add_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonWayPointActivateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonWayPointActivateReq, way_point_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonWayPointActivateRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonWayPointActivateRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonWayPointActivateRsp, way_point_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSettleNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSettleNotify, dungeon_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSettleNotify, is_success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSettleNotify, fail_cond_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSettleNotify, settle_show_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSettleNotify, close_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieNotify, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieNotify, dungeon_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieNotify, die_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieNotify, revive_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieNotify, wait_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieNotify, murderer_entity_id_),
  offsetof(DungeonPlayerDieNotifyDefaultTypeInternal, monster_id_),
  offsetof(DungeonPlayerDieNotifyDefaultTypeInternal, gadget_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieNotify, entity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDieOptionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDieOptionReq, die_option_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDieOptionRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDieOptionRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDieOptionRsp, die_option_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDieOptionRsp, revive_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonShowReminderNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonShowReminderNotify, reminder_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieReq, dungeon_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieReq, die_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDataNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDataNotify, dungeon_data_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeBeginNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeBeginNotify, challenge_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeBeginNotify, challenge_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeBeginNotify, param_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeFinishNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeFinishNotify, challenge_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeFinishNotify, is_success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeFinishNotify, is_new_record_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeFinishNotify, challenge_record_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeFinishNotify, current_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeDataNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeDataNotify, challenge_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeDataNotify, param_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeDataNotify, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonFollowNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonFollowNotify, target_uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonGetStatueDropReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonGetStatueDropRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonGetStatueDropRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeRecord, challenge_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeRecord, challenge_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeRecord, challenge_record_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeRecord, best_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeRecordNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeRecordNotify, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeRecordNotify, challenge_record_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamAvatar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamAvatar, player_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamAvatar, avatar_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInfoNotify, dungeon_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInfoNotify, avatar_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInfoNotify, ready_player_uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInviteNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInviteNotify, player_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInviteNotify, dungeon_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInviteNotify, vaild_deadline_time_sec_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamRefuseNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamRefuseNotify, player_uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamPlayerLeaveNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamPlayerLeaveNotify, player_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamPlayerLeaveNotify, reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamDismissNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamDismissNotify, player_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamDismissNotify, reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamCreateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamCreateReq, dungeon_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamCreateReq, point_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamCreateRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamCreateRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInviteReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInviteReq, player_uids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInviteRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInviteRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamKickReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamKickReq, player_uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamKickRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamKickRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamLeaveReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamLeaveRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamLeaveRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamReplyInviteReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamReplyInviteReq, is_accept_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamReplyInviteRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamReplyInviteRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamReplyInviteRsp, is_trans_point_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamSetReadyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamSetReadyReq, is_ready_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamSetReadyRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamSetReadyRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamChangeAvatarReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamChangeAvatarReq, avatar_guid_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamChangeAvatarRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamChangeAvatarRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyDungeonEntryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyDungeonEntryInfo, dungeon_entry_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyDungeonEntryInfo, dungeon_entry_config_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyDungeonEntryInfo, recommend_dungeon_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyDungeonEntryInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyDungeonEntryInfoReq, scene_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyDungeonEntryInfoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyDungeonEntryInfoRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyDungeonEntryInfoRsp, daily_dungeon_info_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSlipRevivePointActivateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSlipRevivePointActivateReq, slip_revive_point_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSlipRevivePointActivateRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSlipRevivePointActivateRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSlipRevivePointActivateRsp, slip_revive_point_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(DungeonEntryInfoReq)},
  { 6, -1, sizeof(DungeonEntryInfo)},
  { 18, -1, sizeof(DungeonEntryInfoRsp)},
  { 27, -1, sizeof(PlayerEnterDungeonReq)},
  { 34, -1, sizeof(PlayerEnterDungeonRsp)},
  { 42, -1, sizeof(PlayerQuitDungeonReq)},
  { 48, -1, sizeof(PlayerQuitDungeonRsp)},
  { 55, -1, sizeof(DungeonWayPointNotify)},
  { 62, -1, sizeof(DungeonWayPointActivateReq)},
  { 68, -1, sizeof(DungeonWayPointActivateRsp)},
  { 75, -1, sizeof(DungeonSettleNotify)},
  { 85, -1, sizeof(DungeonPlayerDieNotify)},
  { 98, -1, sizeof(DungeonDieOptionReq)},
  { 104, -1, sizeof(DungeonDieOptionRsp)},
  { 112, -1, sizeof(DungeonShowReminderNotify)},
  { 118, -1, sizeof(DungeonPlayerDieReq)},
  { 125, -1, sizeof(DungeonPlayerDieRsp)},
  { 131, -1, sizeof(DungeonDataNotify)},
  { 137, -1, sizeof(DungeonChallengeBeginNotify)},
  { 145, -1, sizeof(DungeonChallengeFinishNotify)},
  { 155, -1, sizeof(ChallengeDataNotify)},
  { 163, -1, sizeof(DungeonFollowNotify)},
  { 169, -1, sizeof(DungeonGetStatueDropReq)},
  { 174, -1, sizeof(DungeonGetStatueDropRsp)},
  { 180, -1, sizeof(ChallengeRecord)},
  { 189, -1, sizeof(ChallengeRecordNotify)},
  { 196, -1, sizeof(DungeonCandidateTeamAvatar)},
  { 203, -1, sizeof(DungeonCandidateTeamInfoNotify)},
  { 211, -1, sizeof(DungeonCandidateTeamInviteNotify)},
  { 219, -1, sizeof(DungeonCandidateTeamRefuseNotify)},
  { 225, -1, sizeof(DungeonCandidateTeamPlayerLeaveNotify)},
  { 232, -1, sizeof(DungeonCandidateTeamDismissNotify)},
  { 239, -1, sizeof(DungeonCandidateTeamCreateReq)},
  { 246, -1, sizeof(DungeonCandidateTeamCreateRsp)},
  { 252, -1, sizeof(DungeonCandidateTeamInviteReq)},
  { 258, -1, sizeof(DungeonCandidateTeamInviteRsp)},
  { 264, -1, sizeof(DungeonCandidateTeamKickReq)},
  { 270, -1, sizeof(DungeonCandidateTeamKickRsp)},
  { 276, -1, sizeof(DungeonCandidateTeamLeaveReq)},
  { 281, -1, sizeof(DungeonCandidateTeamLeaveRsp)},
  { 287, -1, sizeof(DungeonCandidateTeamReplyInviteReq)},
  { 293, -1, sizeof(DungeonCandidateTeamReplyInviteRsp)},
  { 300, -1, sizeof(DungeonCandidateTeamSetReadyReq)},
  { 306, -1, sizeof(DungeonCandidateTeamSetReadyRsp)},
  { 312, -1, sizeof(DungeonCandidateTeamChangeAvatarReq)},
  { 318, -1, sizeof(DungeonCandidateTeamChangeAvatarRsp)},
  { 324, -1, sizeof(DailyDungeonEntryInfo)},
  { 332, -1, sizeof(GetDailyDungeonEntryInfoReq)},
  { 338, -1, sizeof(GetDailyDungeonEntryInfoRsp)},
  { 345, -1, sizeof(DungeonSlipRevivePointActivateReq)},
  { 351, -1, sizeof(DungeonSlipRevivePointActivateRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonEntryInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonEntryInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonEntryInfoRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerEnterDungeonReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerEnterDungeonRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerQuitDungeonReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerQuitDungeonRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonWayPointNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonWayPointActivateReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonWayPointActivateRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonSettleNotify_SettleShowEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonSettleNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonPlayerDieNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonDieOptionReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonDieOptionRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonShowReminderNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonPlayerDieReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonPlayerDieRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonDataNotify_DungeonDataMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonDataNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonChallengeBeginNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonChallengeFinishNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChallengeDataNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonFollowNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonGetStatueDropReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonGetStatueDropRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChallengeRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChallengeRecordNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamAvatar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamInfoNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamInviteNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamRefuseNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamPlayerLeaveNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamDismissNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamCreateReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamCreateRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamInviteReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamInviteRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamKickReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamKickRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamLeaveReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamLeaveRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamReplyInviteReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamReplyInviteRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamSetReadyReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamSetReadyRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamChangeAvatarReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamChangeAvatarRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DailyDungeonEntryInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetDailyDungeonEntryInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetDailyDungeonEntryInfoRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonSlipRevivePointActivateReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonSlipRevivePointActivateRsp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cmd/cmd_dungeon.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[10].reflection = DungeonSettleNotify::DungeonSettleNotify_SettleShowEntry::CreateReflection(file_level_metadata[10].descriptor, _DungeonSettleNotify_SettleShowEntry_default_instance_._instance.get_mutable());
file_level_metadata[18].reflection = DungeonDataNotify::DungeonDataNotify_DungeonDataMapEntry::CreateReflection(file_level_metadata[18].descriptor, _DungeonDataNotify_DungeonDataMapEntry_default_instance_._instance.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 53);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::protobuf_define_2eproto::InitDefaults();
  _DungeonEntryInfoReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonEntryInfoReq_default_instance_);_DungeonEntryInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonEntryInfo_default_instance_);_DungeonEntryInfoRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonEntryInfoRsp_default_instance_);_PlayerEnterDungeonReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlayerEnterDungeonReq_default_instance_);_PlayerEnterDungeonRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlayerEnterDungeonRsp_default_instance_);_PlayerQuitDungeonReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlayerQuitDungeonReq_default_instance_);_PlayerQuitDungeonRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlayerQuitDungeonRsp_default_instance_);_DungeonWayPointNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonWayPointNotify_default_instance_);_DungeonWayPointActivateReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonWayPointActivateReq_default_instance_);_DungeonWayPointActivateRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonWayPointActivateRsp_default_instance_);_DungeonSettleNotify_SettleShowEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonSettleNotify_SettleShowEntry_default_instance_);_DungeonSettleNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonSettleNotify_default_instance_);_DungeonPlayerDieNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonPlayerDieNotify_default_instance_);_DungeonDieOptionReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonDieOptionReq_default_instance_);_DungeonDieOptionRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonDieOptionRsp_default_instance_);_DungeonShowReminderNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonShowReminderNotify_default_instance_);_DungeonPlayerDieReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonPlayerDieReq_default_instance_);_DungeonPlayerDieRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonPlayerDieRsp_default_instance_);_DungeonDataNotify_DungeonDataMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonDataNotify_DungeonDataMapEntry_default_instance_);_DungeonDataNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonDataNotify_default_instance_);_DungeonChallengeBeginNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonChallengeBeginNotify_default_instance_);_DungeonChallengeFinishNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonChallengeFinishNotify_default_instance_);_ChallengeDataNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChallengeDataNotify_default_instance_);_DungeonFollowNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonFollowNotify_default_instance_);_DungeonGetStatueDropReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonGetStatueDropReq_default_instance_);_DungeonGetStatueDropRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonGetStatueDropRsp_default_instance_);_ChallengeRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChallengeRecord_default_instance_);_ChallengeRecordNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChallengeRecordNotify_default_instance_);_DungeonCandidateTeamAvatar_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamAvatar_default_instance_);_DungeonCandidateTeamInfoNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamInfoNotify_default_instance_);_DungeonCandidateTeamInviteNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamInviteNotify_default_instance_);_DungeonCandidateTeamRefuseNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamRefuseNotify_default_instance_);_DungeonCandidateTeamPlayerLeaveNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamPlayerLeaveNotify_default_instance_);_DungeonCandidateTeamDismissNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamDismissNotify_default_instance_);_DungeonCandidateTeamCreateReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamCreateReq_default_instance_);_DungeonCandidateTeamCreateRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamCreateRsp_default_instance_);_DungeonCandidateTeamInviteReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamInviteReq_default_instance_);_DungeonCandidateTeamInviteRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamInviteRsp_default_instance_);_DungeonCandidateTeamKickReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamKickReq_default_instance_);_DungeonCandidateTeamKickRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamKickRsp_default_instance_);_DungeonCandidateTeamLeaveReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamLeaveReq_default_instance_);_DungeonCandidateTeamLeaveRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamLeaveRsp_default_instance_);_DungeonCandidateTeamReplyInviteReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamReplyInviteReq_default_instance_);_DungeonCandidateTeamReplyInviteRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamReplyInviteRsp_default_instance_);_DungeonCandidateTeamSetReadyReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamSetReadyReq_default_instance_);_DungeonCandidateTeamSetReadyRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamSetReadyRsp_default_instance_);_DungeonCandidateTeamChangeAvatarReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamChangeAvatarReq_default_instance_);_DungeonCandidateTeamChangeAvatarRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamChangeAvatarRsp_default_instance_);_DailyDungeonEntryInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DailyDungeonEntryInfo_default_instance_);_GetDailyDungeonEntryInfoReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetDailyDungeonEntryInfoReq_default_instance_);_GetDailyDungeonEntryInfoRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetDailyDungeonEntryInfoRsp_default_instance_);_DungeonSlipRevivePointActivateReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonSlipRevivePointActivateReq_default_instance_);_DungeonSlipRevivePointActivateRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonSlipRevivePointActivateRsp_default_instance_);_DungeonSettleNotify_SettleShowEntry_default_instance_._instance.get_mutable()->set_default_instance(_DungeonSettleNotify_SettleShowEntry_default_instance_._instance.get_mutable());
  _DungeonSettleNotify_SettleShowEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _DungeonPlayerDieNotify_default_instance_.monster_id_ = 0u;
  _DungeonPlayerDieNotify_default_instance_.gadget_id_ = 0u;
  _DungeonDataNotify_DungeonDataMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_DungeonDataNotify_DungeonDataMapEntry_default_instance_._instance.get_mutable());
  _DungeonDataNotify_DungeonDataMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _DungeonCandidateTeamAvatar_default_instance_._instance.get_mutable()->avatar_info_ = const_cast< ::proto::AvatarInfo*>(
      ::proto::AvatarInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025cmd/cmd_dungeon.proto\022\005proto\032\014define.p"
      "roto\"\213\001\n\023DungeonEntryInfoReq\022\020\n\010point_id"
      "\030\001 \001(\r\"b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\205\007\022\023"
      "\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020"
      "\001\022\023\n\017IS_ALLOW_CLIENT\020\001\032\002\020\001\"\247\001\n\020DungeonEn"
      "tryInfo\022\022\n\ndungeon_id\030\001 \001(\r\022\021\n\tis_passed"
      "\030\002 \001(\010\022\022\n\nleft_times\030\003 \001(\r\022\022\n\nstart_time"
      "\030\004 \001(\r\022\020\n\010end_time\030\005 \001(\r\022\032\n\022max_boss_che"
      "st_num\030\006 \001(\r\022\026\n\016boss_chest_num\030\007 \001(\r\"\332\001\n"
      "\023DungeonEntryInfoRsp\022\017\n\007retcode\030\001 \001(\005\022\020\n"
      "\010point_id\030\002 \001(\r\0223\n\022dungeon_entry_list\030\003 "
      "\003(\0132\027.proto.DungeonEntryInfo\022\034\n\024recommen"
      "d_dungeon_id\030\004 \001(\r\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n"
      "\006CMD_ID\020\206\007\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_"
      "IS_RELIABLE\020\001\032\002\020\001\"\241\001\n\025PlayerEnterDungeon"
      "Req\022\020\n\010point_id\030\001 \001(\r\022\022\n\ndungeon_id\030\002 \001("
      "\r\"b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\207\007\022\023\n\017ENE"
      "T_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\022\023\n\017"
      "IS_ALLOW_CLIENT\020\001\032\002\020\001\"\235\001\n\025PlayerEnterDun"
      "geonRsp\022\017\n\007retcode\030\001 \001(\005\022\020\n\010point_id\030\002 \001"
      "(\r\022\022\n\ndungeon_id\030\003 \001(\r\"M\n\005CmdId\022\010\n\004NONE\020"
      "\000\022\013\n\006CMD_ID\020\210\007\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020E"
      "NET_IS_RELIABLE\020\001\032\002\020\001\"\214\001\n\024PlayerQuitDung"
      "eonReq\022\020\n\010point_id\030\001 \001(\r\"b\n\005CmdId\022\010\n\004NON"
      "E\020\000\022\013\n\006CMD_ID\020\211\007\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n"
      "\020ENET_IS_RELIABLE\020\001\022\023\n\017IS_ALLOW_CLIENT\020\001"
      "\032\002\020\001\"\210\001\n\024PlayerQuitDungeonRsp\022\017\n\007retcode"
      "\030\001 \001(\005\022\020\n\010point_id\030\002 \001(\r\"M\n\005CmdId\022\010\n\004NON"
      "E\020\000\022\013\n\006CMD_ID\020\212\007\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n"
      "\020ENET_IS_RELIABLE\020\001\032\002\020\001\"\225\001\n\025DungeonWayPo"
      "intNotify\022\035\n\025active_way_point_list\030\001 \003(\r"
      "\022\016\n\006is_add\030\002 \001(\010\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006C"
      "MD_ID\020\213\007\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS"
      "_RELIABLE\020\001\032\002\020\001\"\226\001\n\032DungeonWayPointActiv"
      "ateReq\022\024\n\014way_point_id\030\001 \001(\r\"b\n\005CmdId\022\010\n"
      "\004NONE\020\000\022\013\n\006CMD_ID\020\214\007\022\023\n\017ENET_CHANNEL_ID\020"
      "\000\022\024\n\020ENET_IS_RELIABLE\020\001\022\023\n\017IS_ALLOW_CLIE"
      "NT\020\001\032\002\020\001\"\222\001\n\032DungeonWayPointActivateRsp\022"
      "\017\n\007retcode\030\001 \001(\005\022\024\n\014way_point_id\030\002 \001(\r\"M"
      "\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\215\007\022\023\n\017ENET_C"
      "HANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"\276\002"
      "\n\023DungeonSettleNotify\022\022\n\ndungeon_id\030\001 \001("
      "\r\022\022\n\nis_success\030\002 \001(\010\022\026\n\016fail_cond_list\030"
      "\003 \003(\r\022\?\n\013settle_show\030\004 \003(\0132*.proto.Dunge"
      "onSettleNotify.SettleShowEntry\022\022\n\nclose_"
      "time\030\005 \001(\r\032C\n\017SettleShowEntry\022\013\n\003key\030\001 \001"
      "(\r\022\037\n\005value\030\002 \001(\0132\020.proto.ParamList:\0028\001\""
      "M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\216\007\022\023\n\017ENET_"
      "CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"\235"
      "\002\n\026DungeonPlayerDieNotify\022\022\n\ndungeon_id\030"
      "\001 \001(\r\022&\n\010die_type\030\002 \001(\0162\024.proto.PlayerDi"
      "eType\022\024\n\014revive_count\030\003 \001(\r\022\021\n\twait_time"
      "\030\004 \001(\r\022\032\n\022murderer_entity_id\030\005 \001(\r\022\024\n\nmo"
      "nster_id\030\006 \001(\rH\000\022\023\n\tgadget_id\030\007 \001(\rH\000\"M\n"
      "\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\217\007\022\023\n\017ENET_CH"
      "ANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001B\010\n\006"
      "entity\"\245\001\n\023DungeonDieOptionReq\022*\n\ndie_op"
      "tion\030\001 \001(\0162\026.proto.PlayerDieOption\"b\n\005Cm"
      "dId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\220\007\022\023\n\017ENET_CHANN"
      "EL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\022\023\n\017IS_ALLO"
      "W_CLIENT\020\001\032\002\020\001\"\267\001\n\023DungeonDieOptionRsp\022\017"
      "\n\007retcode\030\001 \001(\005\022*\n\ndie_option\030\002 \001(\0162\026.pr"
      "oto.PlayerDieOption\022\024\n\014revive_count\030\003 \001("
      "\r\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\221\007\022\023\n\017ENE"
      "T_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001"
      "\"\177\n\031DungeonShowReminderNotify\022\023\n\013reminde"
      "r_id\030\001 \001(\r\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020"
      "\222\007\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIA"
      "BLE\020\001\032\002\020\001\"\265\001\n\023DungeonPlayerDieReq\022\022\n\ndun"
      "geon_id\030\001 \001(\r\022&\n\010die_type\030\002 \001(\0162\024.proto."
      "PlayerDieType\"b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_"
      "ID\020\223\007\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RE"
      "LIABLE\020\001\022\023\n\017IS_ALLOW_CLIENT\020\001\032\002\020\001\"u\n\023Dun"
      "geonPlayerDieRsp\022\017\n\007retcode\030\001 \001(\005\"M\n\005Cmd"
      "Id\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\224\007\022\023\n\017ENET_CHANNE"
      "L_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"\341\001\n\021Dun"
      "geonDataNotify\022F\n\020dungeon_data_map\030\001 \003(\013"
      "2,.proto.DungeonDataNotify.DungeonDataMa"
      "pEntry\0325\n\023DungeonDataMapEntry\022\013\n\003key\030\001 \001"
      "(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"M\n\005CmdId\022\010\n\004NONE\020\000"
      "\022\013\n\006CMD_ID\020\225\007\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020EN"
      "ET_IS_RELIABLE\020\001\032\002\020\001\"\257\001\n\033DungeonChalleng"
      "eBeginNotify\022\024\n\014challenge_id\030\001 \001(\r\022\027\n\017ch"
      "allenge_index\030\002 \001(\r\022\022\n\nparam_list\030\003 \003(\r\""
      "M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\226\007\022\023\n\017ENET_"
      "CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"\347"
      "\001\n\034DungeonChallengeFinishNotify\022\027\n\017chall"
      "enge_index\030\001 \001(\r\022\022\n\nis_success\030\002 \001(\010\022\025\n\r"
      "is_new_record\030\003 \001(\010\022\035\n\025challenge_record_"
      "type\030\004 \001(\r\022\025\n\rcurrent_value\030\005 \001(\r\"M\n\005Cmd"
      "Id\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\227\007\022\023\n\017ENET_CHANNE"
      "L_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"\241\001\n\023Cha"
      "llengeDataNotify\022\027\n\017challenge_index\030\001 \001("
      "\r\022\023\n\013param_index\030\002 \001(\r\022\r\n\005value\030\003 \001(\r\"M\n"
      "\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\230\007\022\023\n\017ENET_CH"
      "ANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"x\n\023"
      "DungeonFollowNotify\022\022\n\ntarget_uid\030\001 \001(\r\""
      "M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\231\007\022\023\n\017ENET_"
      "CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"}"
      "\n\027DungeonGetStatueDropReq\"b\n\005CmdId\022\010\n\004NO"
      "NE\020\000\022\013\n\006CMD_ID\020\232\007\022\023\n\017ENET_CHANNEL_ID\020\000\022\024"
      "\n\020ENET_IS_RELIABLE\020\001\022\023\n\017IS_ALLOW_CLIENT\020"
      "\001\032\002\020\001\"y\n\027DungeonGetStatueDropRsp\022\017\n\007retc"
      "ode\030\001 \001(\005\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\233"
      "\007\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIAB"
      "LE\020\001\032\002\020\001\"s\n\017ChallengeRecord\022\027\n\017challenge"
      "_index\030\001 \001(\r\022\024\n\014challenge_id\030\002 \001(\r\022\035\n\025ch"
      "allenge_record_type\030\003 \001(\r\022\022\n\nbest_value\030"
      "\004 \001(\r\"\257\001\n\025ChallengeRecordNotify\022\020\n\010group"
      "_id\030\001 \001(\r\0225\n\025challenge_record_list\030\002 \003(\013"
      "2\026.proto.ChallengeRecord\"M\n\005CmdId\022\010\n\004NON"
      "E\020\000\022\013\n\006CMD_ID\020\234\007\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n"
      "\020ENET_IS_RELIABLE\020\001\032\002\020\001\"X\n\032DungeonCandid"
      "ateTeamAvatar\022\022\n\nplayer_uid\030\001 \001(\r\022&\n\013ava"
      "tar_info\030\002 \001(\0132\021.proto.AvatarInfo\"\325\001\n\036Du"
      "ngeonCandidateTeamInfoNotify\022\022\n\ndungeon_"
      "id\030\001 \001(\r\0226\n\013avatar_list\030\002 \003(\0132!.proto.Du"
      "ngeonCandidateTeamAvatar\022\030\n\020ready_player"
      "_uid\030\003 \003(\r\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020"
      "\235\007\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIA"
      "BLE\020\001\032\002\020\001\"\272\001\n DungeonCandidateTeamInvite"
      "Notify\022\022\n\nplayer_uid\030\001 \001(\r\022\022\n\ndungeon_id"
      "\030\002 \001(\r\022\037\n\027vaild_deadline_time_sec\030\003 \001(\r\""
      "M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\236\007\022\023\n\017ENET_"
      "CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"\205"
      "\001\n DungeonCandidateTeamRefuseNotify\022\022\n\np"
      "layer_uid\030\001 \001(\r\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CM"
      "D_ID\020\237\007\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_"
      "RELIABLE\020\001\032\002\020\001\"\310\001\n%DungeonCandidateTeamP"
      "layerLeaveNotify\022\022\n\nplayer_uid\030\001 \001(\r\022<\n\006"
      "reason\030\002 \001(\0162,.proto.DungeonCandidateTea"
      "mPlayerLeaveReason\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n"
      "\006CMD_ID\020\240\007\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_"
      "IS_RELIABLE\020\001\032\002\020\001\"\300\001\n!DungeonCandidateTe"
      "amDismissNotify\022\022\n\nplayer_uid\030\001 \001(\r\0228\n\006r"
      "eason\030\002 \001(\0162(.proto.DungeonCandidateTeam"
      "DismissReason\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_"
      "ID\020\241\007\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RE"
      "LIABLE\020\001\032\002\020\001\"\251\001\n\035DungeonCandidateTeamCre"
      "ateReq\022\022\n\ndungeon_id\030\001 \001(\r\022\020\n\010point_id\030\002"
      " \001(\r\"b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\242\007\022\023\n\017"
      "ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\022"
      "\023\n\017IS_ALLOW_CLIENT\020\001\032\002\020\001\"\177\n\035DungeonCandi"
      "dateTeamCreateRsp\022\017\n\007retcode\030\001 \001(\005\"M\n\005Cm"
      "dId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\243\007\022\023\n\017ENET_CHANN"
      "EL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"\230\001\n\035Du"
      "ngeonCandidateTeamInviteReq\022\023\n\013player_ui"
      "ds\030\001 \003(\r\"b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\244\007"
      "\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABL"
      "E\020\001\022\023\n\017IS_ALLOW_CLIENT\020\001\032\002\020\001\"\177\n\035DungeonC"
      "andidateTeamInviteRsp\022\017\n\007retcode\030\001 \001(\005\"M"
      "\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\245\007\022\023\n\017ENET_C"
      "HANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"\225\001"
      "\n\033DungeonCandidateTeamKickReq\022\022\n\nplayer_"
      "uid\030\001 \001(\r\"b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\246"
      "\007\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIAB"
      "LE\020\001\022\023\n\017IS_ALLOW_CLIENT\020\001\032\002\020\001\"}\n\033Dungeon"
      "CandidateTeamKickRsp\022\017\n\007retcode\030\001 \001(\005\"M\n"
      "\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\247\007\022\023\n\017ENET_CH"
      "ANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"\202\001\n"
      "\034DungeonCandidateTeamLeaveReq\"b\n\005CmdId\022\010"
      "\n\004NONE\020\000\022\013\n\006CMD_ID\020\250\007\022\023\n\017ENET_CHANNEL_ID"
      "\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\022\023\n\017IS_ALLOW_CLI"
      "ENT\020\001\032\002\020\001\"~\n\034DungeonCandidateTeamLeaveRs"
      "p\022\017\n\007retcode\030\001 \001(\005\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n"
      "\006CMD_ID\020\251\007\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_"
      "IS_RELIABLE\020\001\032\002\020\001\"\233\001\n\"DungeonCandidateTe"
      "amReplyInviteReq\022\021\n\tis_accept\030\001 \001(\010\"b\n\005C"
      "mdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\252\007\022\023\n\017ENET_CHAN"
      "NEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\022\023\n\017IS_ALL"
      "OW_CLIENT\020\001\032\002\020\001\"\234\001\n\"DungeonCandidateTeam"
      "ReplyInviteRsp\022\017\n\007retcode\030\001 \001(\005\022\026\n\016is_tr"
      "ans_point\030\002 \001(\010\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CM"
      "D_ID\020\253\007\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_"
      "RELIABLE\020\001\032\002\020\001\"\227\001\n\037DungeonCandidateTeamS"
      "etReadyReq\022\020\n\010is_ready\030\001 \001(\010\"b\n\005CmdId\022\010\n"
      "\004NONE\020\000\022\013\n\006CMD_ID\020\254\007\022\023\n\017ENET_CHANNEL_ID\020"
      "\000\022\024\n\020ENET_IS_RELIABLE\020\001\022\023\n\017IS_ALLOW_CLIE"
      "NT\020\001\032\002\020\001\"\201\001\n\037DungeonCandidateTeamSetRead"
      "yRsp\022\017\n\007retcode\030\001 \001(\005\"M\n\005CmdId\022\010\n\004NONE\020\000"
      "\022\013\n\006CMD_ID\020\255\007\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020EN"
      "ET_IS_RELIABLE\020\001\032\002\020\001\"\243\001\n#DungeonCandidat"
      "eTeamChangeAvatarReq\022\030\n\020avatar_guid_list"
      "\030\001 \003(\004\"b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\256\007\022\023"
      "\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020"
      "\001\022\023\n\017IS_ALLOW_CLIENT\020\001\032\002\020\001\"\205\001\n#DungeonCa"
      "ndidateTeamChangeAvatarRsp\022\017\n\007retcode\030\001 "
      "\001(\005\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\257\007\022\023\n\017E"
      "NET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002"
      "\020\001\"p\n\025DailyDungeonEntryInfo\022\030\n\020dungeon_e"
      "ntry_id\030\001 \001(\r\022\037\n\027dungeon_entry_config_id"
      "\030\002 \001(\r\022\034\n\024recommend_dungeon_id\030\003 \001(\r\"\223\001\n"
      "\033GetDailyDungeonEntryInfoReq\022\020\n\010scene_id"
      "\030\001 \001(\r\"b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\260\007\022\023"
      "\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020"
      "\001\022\023\n\017IS_ALLOW_CLIENT\020\001\032\002\020\001\"\274\001\n\033GetDailyD"
      "ungeonEntryInfoRsp\022\017\n\007retcode\030\001 \001(\005\022=\n\027d"
      "aily_dungeon_info_list\030\002 \003(\0132\034.proto.Dai"
      "lyDungeonEntryInfo\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n"
      "\006CMD_ID\020\261\007\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_"
      "IS_RELIABLE\020\001\032\002\020\001\"\245\001\n!DungeonSlipReviveP"
      "ointActivateReq\022\034\n\024slip_revive_point_id\030"
      "\001 \001(\r\"b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\262\007\022\023\n"
      "\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001"
      "\022\023\n\017IS_ALLOW_CLIENT\020\001\032\002\020\001\"\241\001\n!DungeonSli"
      "pRevivePointActivateRsp\022\017\n\007retcode\030\001 \001(\005"
      "\022\034\n\024slip_revive_point_id\030\002 \001(\r\"M\n\005CmdId\022"
      "\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\263\007\022\023\n\017ENET_CHANNEL_I"
      "D\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001*\347\001\n\017Dungeo"
      "nDataType\022\025\n\021DUNGEON_DATA_NONE\020\000\022\031\n\025DUNG"
      "EON_DATA_END_TIME\020\001\022\"\n\036DUNGEON_DATA_MONS"
      "TER_DIE_COUNT\020\002\022 \n\034DUNGEON_DATA_LEVEL_CO"
      "NFIG_ID\020\003\022.\n*DUNGEON_DATA_TOWER_MONTHLY_"
      "LEVEL_CONFIG_ID\020\004\022,\n(DUNGEON_DATA_TOWER_"
      "FLOOR_LEVEL_CONFIG_ID\020\005*\260\001\n%DungeonCandi"
      "dateTeamPlayerLeaveReason\022!\n\035DUNGEON_CAN"
      "DIDATE_TPLR_NORMAL\020\000\022\036\n\032DUNGEON_CANDIDAT"
      "E_TPLR_DIE\020\001\022\"\n\036DUNGEON_CANDIDATE_TPLR_B"
      "E_KICK\020\002\022 \n\034DUNGEON_CANDIDATE_DISCONNECT"
      "\020\003*f\n!DungeonCandidateTeamDismissReason\022"
      "!\n\035DUNGEON_CANDIDATE_TPDR_NORMAL\020\000\022\036\n\032DU"
      "NGEON_CANDIDATE_TPDR_DIE\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 8874);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cmd/cmd_dungeon.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_define_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cmd_2fcmd_5fdungeon_2eproto

const ::google::protobuf::EnumDescriptor* DungeonEntryInfoReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[0];
}
bool DungeonEntryInfoReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 901:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonEntryInfoReq_CmdId DungeonEntryInfoReq::NONE;
const DungeonEntryInfoReq_CmdId DungeonEntryInfoReq::CMD_ID;
const DungeonEntryInfoReq_CmdId DungeonEntryInfoReq::ENET_CHANNEL_ID;
const DungeonEntryInfoReq_CmdId DungeonEntryInfoReq::ENET_IS_RELIABLE;
const DungeonEntryInfoReq_CmdId DungeonEntryInfoReq::IS_ALLOW_CLIENT;
const DungeonEntryInfoReq_CmdId DungeonEntryInfoReq::CmdId_MIN;
const DungeonEntryInfoReq_CmdId DungeonEntryInfoReq::CmdId_MAX;
const int DungeonEntryInfoReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonEntryInfoRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[1];
}
bool DungeonEntryInfoRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 902:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonEntryInfoRsp_CmdId DungeonEntryInfoRsp::NONE;
const DungeonEntryInfoRsp_CmdId DungeonEntryInfoRsp::CMD_ID;
const DungeonEntryInfoRsp_CmdId DungeonEntryInfoRsp::ENET_CHANNEL_ID;
const DungeonEntryInfoRsp_CmdId DungeonEntryInfoRsp::ENET_IS_RELIABLE;
const DungeonEntryInfoRsp_CmdId DungeonEntryInfoRsp::CmdId_MIN;
const DungeonEntryInfoRsp_CmdId DungeonEntryInfoRsp::CmdId_MAX;
const int DungeonEntryInfoRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PlayerEnterDungeonReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[2];
}
bool PlayerEnterDungeonReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 903:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PlayerEnterDungeonReq_CmdId PlayerEnterDungeonReq::NONE;
const PlayerEnterDungeonReq_CmdId PlayerEnterDungeonReq::CMD_ID;
const PlayerEnterDungeonReq_CmdId PlayerEnterDungeonReq::ENET_CHANNEL_ID;
const PlayerEnterDungeonReq_CmdId PlayerEnterDungeonReq::ENET_IS_RELIABLE;
const PlayerEnterDungeonReq_CmdId PlayerEnterDungeonReq::IS_ALLOW_CLIENT;
const PlayerEnterDungeonReq_CmdId PlayerEnterDungeonReq::CmdId_MIN;
const PlayerEnterDungeonReq_CmdId PlayerEnterDungeonReq::CmdId_MAX;
const int PlayerEnterDungeonReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PlayerEnterDungeonRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[3];
}
bool PlayerEnterDungeonRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 904:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PlayerEnterDungeonRsp_CmdId PlayerEnterDungeonRsp::NONE;
const PlayerEnterDungeonRsp_CmdId PlayerEnterDungeonRsp::CMD_ID;
const PlayerEnterDungeonRsp_CmdId PlayerEnterDungeonRsp::ENET_CHANNEL_ID;
const PlayerEnterDungeonRsp_CmdId PlayerEnterDungeonRsp::ENET_IS_RELIABLE;
const PlayerEnterDungeonRsp_CmdId PlayerEnterDungeonRsp::CmdId_MIN;
const PlayerEnterDungeonRsp_CmdId PlayerEnterDungeonRsp::CmdId_MAX;
const int PlayerEnterDungeonRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PlayerQuitDungeonReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[4];
}
bool PlayerQuitDungeonReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 905:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PlayerQuitDungeonReq_CmdId PlayerQuitDungeonReq::NONE;
const PlayerQuitDungeonReq_CmdId PlayerQuitDungeonReq::CMD_ID;
const PlayerQuitDungeonReq_CmdId PlayerQuitDungeonReq::ENET_CHANNEL_ID;
const PlayerQuitDungeonReq_CmdId PlayerQuitDungeonReq::ENET_IS_RELIABLE;
const PlayerQuitDungeonReq_CmdId PlayerQuitDungeonReq::IS_ALLOW_CLIENT;
const PlayerQuitDungeonReq_CmdId PlayerQuitDungeonReq::CmdId_MIN;
const PlayerQuitDungeonReq_CmdId PlayerQuitDungeonReq::CmdId_MAX;
const int PlayerQuitDungeonReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PlayerQuitDungeonRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[5];
}
bool PlayerQuitDungeonRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 906:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PlayerQuitDungeonRsp_CmdId PlayerQuitDungeonRsp::NONE;
const PlayerQuitDungeonRsp_CmdId PlayerQuitDungeonRsp::CMD_ID;
const PlayerQuitDungeonRsp_CmdId PlayerQuitDungeonRsp::ENET_CHANNEL_ID;
const PlayerQuitDungeonRsp_CmdId PlayerQuitDungeonRsp::ENET_IS_RELIABLE;
const PlayerQuitDungeonRsp_CmdId PlayerQuitDungeonRsp::CmdId_MIN;
const PlayerQuitDungeonRsp_CmdId PlayerQuitDungeonRsp::CmdId_MAX;
const int PlayerQuitDungeonRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonWayPointNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[6];
}
bool DungeonWayPointNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 907:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonWayPointNotify_CmdId DungeonWayPointNotify::NONE;
const DungeonWayPointNotify_CmdId DungeonWayPointNotify::CMD_ID;
const DungeonWayPointNotify_CmdId DungeonWayPointNotify::ENET_CHANNEL_ID;
const DungeonWayPointNotify_CmdId DungeonWayPointNotify::ENET_IS_RELIABLE;
const DungeonWayPointNotify_CmdId DungeonWayPointNotify::CmdId_MIN;
const DungeonWayPointNotify_CmdId DungeonWayPointNotify::CmdId_MAX;
const int DungeonWayPointNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonWayPointActivateReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[7];
}
bool DungeonWayPointActivateReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 908:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonWayPointActivateReq_CmdId DungeonWayPointActivateReq::NONE;
const DungeonWayPointActivateReq_CmdId DungeonWayPointActivateReq::CMD_ID;
const DungeonWayPointActivateReq_CmdId DungeonWayPointActivateReq::ENET_CHANNEL_ID;
const DungeonWayPointActivateReq_CmdId DungeonWayPointActivateReq::ENET_IS_RELIABLE;
const DungeonWayPointActivateReq_CmdId DungeonWayPointActivateReq::IS_ALLOW_CLIENT;
const DungeonWayPointActivateReq_CmdId DungeonWayPointActivateReq::CmdId_MIN;
const DungeonWayPointActivateReq_CmdId DungeonWayPointActivateReq::CmdId_MAX;
const int DungeonWayPointActivateReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonWayPointActivateRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[8];
}
bool DungeonWayPointActivateRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 909:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonWayPointActivateRsp_CmdId DungeonWayPointActivateRsp::NONE;
const DungeonWayPointActivateRsp_CmdId DungeonWayPointActivateRsp::CMD_ID;
const DungeonWayPointActivateRsp_CmdId DungeonWayPointActivateRsp::ENET_CHANNEL_ID;
const DungeonWayPointActivateRsp_CmdId DungeonWayPointActivateRsp::ENET_IS_RELIABLE;
const DungeonWayPointActivateRsp_CmdId DungeonWayPointActivateRsp::CmdId_MIN;
const DungeonWayPointActivateRsp_CmdId DungeonWayPointActivateRsp::CmdId_MAX;
const int DungeonWayPointActivateRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonSettleNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[9];
}
bool DungeonSettleNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 910:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonSettleNotify_CmdId DungeonSettleNotify::NONE;
const DungeonSettleNotify_CmdId DungeonSettleNotify::CMD_ID;
const DungeonSettleNotify_CmdId DungeonSettleNotify::ENET_CHANNEL_ID;
const DungeonSettleNotify_CmdId DungeonSettleNotify::ENET_IS_RELIABLE;
const DungeonSettleNotify_CmdId DungeonSettleNotify::CmdId_MIN;
const DungeonSettleNotify_CmdId DungeonSettleNotify::CmdId_MAX;
const int DungeonSettleNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonPlayerDieNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[10];
}
bool DungeonPlayerDieNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 911:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonPlayerDieNotify_CmdId DungeonPlayerDieNotify::NONE;
const DungeonPlayerDieNotify_CmdId DungeonPlayerDieNotify::CMD_ID;
const DungeonPlayerDieNotify_CmdId DungeonPlayerDieNotify::ENET_CHANNEL_ID;
const DungeonPlayerDieNotify_CmdId DungeonPlayerDieNotify::ENET_IS_RELIABLE;
const DungeonPlayerDieNotify_CmdId DungeonPlayerDieNotify::CmdId_MIN;
const DungeonPlayerDieNotify_CmdId DungeonPlayerDieNotify::CmdId_MAX;
const int DungeonPlayerDieNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonDieOptionReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[11];
}
bool DungeonDieOptionReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 912:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonDieOptionReq_CmdId DungeonDieOptionReq::NONE;
const DungeonDieOptionReq_CmdId DungeonDieOptionReq::CMD_ID;
const DungeonDieOptionReq_CmdId DungeonDieOptionReq::ENET_CHANNEL_ID;
const DungeonDieOptionReq_CmdId DungeonDieOptionReq::ENET_IS_RELIABLE;
const DungeonDieOptionReq_CmdId DungeonDieOptionReq::IS_ALLOW_CLIENT;
const DungeonDieOptionReq_CmdId DungeonDieOptionReq::CmdId_MIN;
const DungeonDieOptionReq_CmdId DungeonDieOptionReq::CmdId_MAX;
const int DungeonDieOptionReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonDieOptionRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[12];
}
bool DungeonDieOptionRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 913:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonDieOptionRsp_CmdId DungeonDieOptionRsp::NONE;
const DungeonDieOptionRsp_CmdId DungeonDieOptionRsp::CMD_ID;
const DungeonDieOptionRsp_CmdId DungeonDieOptionRsp::ENET_CHANNEL_ID;
const DungeonDieOptionRsp_CmdId DungeonDieOptionRsp::ENET_IS_RELIABLE;
const DungeonDieOptionRsp_CmdId DungeonDieOptionRsp::CmdId_MIN;
const DungeonDieOptionRsp_CmdId DungeonDieOptionRsp::CmdId_MAX;
const int DungeonDieOptionRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonShowReminderNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[13];
}
bool DungeonShowReminderNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 914:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonShowReminderNotify_CmdId DungeonShowReminderNotify::NONE;
const DungeonShowReminderNotify_CmdId DungeonShowReminderNotify::CMD_ID;
const DungeonShowReminderNotify_CmdId DungeonShowReminderNotify::ENET_CHANNEL_ID;
const DungeonShowReminderNotify_CmdId DungeonShowReminderNotify::ENET_IS_RELIABLE;
const DungeonShowReminderNotify_CmdId DungeonShowReminderNotify::CmdId_MIN;
const DungeonShowReminderNotify_CmdId DungeonShowReminderNotify::CmdId_MAX;
const int DungeonShowReminderNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonPlayerDieReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[14];
}
bool DungeonPlayerDieReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 915:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonPlayerDieReq_CmdId DungeonPlayerDieReq::NONE;
const DungeonPlayerDieReq_CmdId DungeonPlayerDieReq::CMD_ID;
const DungeonPlayerDieReq_CmdId DungeonPlayerDieReq::ENET_CHANNEL_ID;
const DungeonPlayerDieReq_CmdId DungeonPlayerDieReq::ENET_IS_RELIABLE;
const DungeonPlayerDieReq_CmdId DungeonPlayerDieReq::IS_ALLOW_CLIENT;
const DungeonPlayerDieReq_CmdId DungeonPlayerDieReq::CmdId_MIN;
const DungeonPlayerDieReq_CmdId DungeonPlayerDieReq::CmdId_MAX;
const int DungeonPlayerDieReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonPlayerDieRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[15];
}
bool DungeonPlayerDieRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 916:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonPlayerDieRsp_CmdId DungeonPlayerDieRsp::NONE;
const DungeonPlayerDieRsp_CmdId DungeonPlayerDieRsp::CMD_ID;
const DungeonPlayerDieRsp_CmdId DungeonPlayerDieRsp::ENET_CHANNEL_ID;
const DungeonPlayerDieRsp_CmdId DungeonPlayerDieRsp::ENET_IS_RELIABLE;
const DungeonPlayerDieRsp_CmdId DungeonPlayerDieRsp::CmdId_MIN;
const DungeonPlayerDieRsp_CmdId DungeonPlayerDieRsp::CmdId_MAX;
const int DungeonPlayerDieRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonDataNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[16];
}
bool DungeonDataNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 917:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonDataNotify_CmdId DungeonDataNotify::NONE;
const DungeonDataNotify_CmdId DungeonDataNotify::CMD_ID;
const DungeonDataNotify_CmdId DungeonDataNotify::ENET_CHANNEL_ID;
const DungeonDataNotify_CmdId DungeonDataNotify::ENET_IS_RELIABLE;
const DungeonDataNotify_CmdId DungeonDataNotify::CmdId_MIN;
const DungeonDataNotify_CmdId DungeonDataNotify::CmdId_MAX;
const int DungeonDataNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonChallengeBeginNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[17];
}
bool DungeonChallengeBeginNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 918:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonChallengeBeginNotify_CmdId DungeonChallengeBeginNotify::NONE;
const DungeonChallengeBeginNotify_CmdId DungeonChallengeBeginNotify::CMD_ID;
const DungeonChallengeBeginNotify_CmdId DungeonChallengeBeginNotify::ENET_CHANNEL_ID;
const DungeonChallengeBeginNotify_CmdId DungeonChallengeBeginNotify::ENET_IS_RELIABLE;
const DungeonChallengeBeginNotify_CmdId DungeonChallengeBeginNotify::CmdId_MIN;
const DungeonChallengeBeginNotify_CmdId DungeonChallengeBeginNotify::CmdId_MAX;
const int DungeonChallengeBeginNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonChallengeFinishNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[18];
}
bool DungeonChallengeFinishNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 919:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonChallengeFinishNotify_CmdId DungeonChallengeFinishNotify::NONE;
const DungeonChallengeFinishNotify_CmdId DungeonChallengeFinishNotify::CMD_ID;
const DungeonChallengeFinishNotify_CmdId DungeonChallengeFinishNotify::ENET_CHANNEL_ID;
const DungeonChallengeFinishNotify_CmdId DungeonChallengeFinishNotify::ENET_IS_RELIABLE;
const DungeonChallengeFinishNotify_CmdId DungeonChallengeFinishNotify::CmdId_MIN;
const DungeonChallengeFinishNotify_CmdId DungeonChallengeFinishNotify::CmdId_MAX;
const int DungeonChallengeFinishNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChallengeDataNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[19];
}
bool ChallengeDataNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 920:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChallengeDataNotify_CmdId ChallengeDataNotify::NONE;
const ChallengeDataNotify_CmdId ChallengeDataNotify::CMD_ID;
const ChallengeDataNotify_CmdId ChallengeDataNotify::ENET_CHANNEL_ID;
const ChallengeDataNotify_CmdId ChallengeDataNotify::ENET_IS_RELIABLE;
const ChallengeDataNotify_CmdId ChallengeDataNotify::CmdId_MIN;
const ChallengeDataNotify_CmdId ChallengeDataNotify::CmdId_MAX;
const int ChallengeDataNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonFollowNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[20];
}
bool DungeonFollowNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 921:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonFollowNotify_CmdId DungeonFollowNotify::NONE;
const DungeonFollowNotify_CmdId DungeonFollowNotify::CMD_ID;
const DungeonFollowNotify_CmdId DungeonFollowNotify::ENET_CHANNEL_ID;
const DungeonFollowNotify_CmdId DungeonFollowNotify::ENET_IS_RELIABLE;
const DungeonFollowNotify_CmdId DungeonFollowNotify::CmdId_MIN;
const DungeonFollowNotify_CmdId DungeonFollowNotify::CmdId_MAX;
const int DungeonFollowNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonGetStatueDropReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[21];
}
bool DungeonGetStatueDropReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 922:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonGetStatueDropReq_CmdId DungeonGetStatueDropReq::NONE;
const DungeonGetStatueDropReq_CmdId DungeonGetStatueDropReq::CMD_ID;
const DungeonGetStatueDropReq_CmdId DungeonGetStatueDropReq::ENET_CHANNEL_ID;
const DungeonGetStatueDropReq_CmdId DungeonGetStatueDropReq::ENET_IS_RELIABLE;
const DungeonGetStatueDropReq_CmdId DungeonGetStatueDropReq::IS_ALLOW_CLIENT;
const DungeonGetStatueDropReq_CmdId DungeonGetStatueDropReq::CmdId_MIN;
const DungeonGetStatueDropReq_CmdId DungeonGetStatueDropReq::CmdId_MAX;
const int DungeonGetStatueDropReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonGetStatueDropRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[22];
}
bool DungeonGetStatueDropRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 923:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonGetStatueDropRsp_CmdId DungeonGetStatueDropRsp::NONE;
const DungeonGetStatueDropRsp_CmdId DungeonGetStatueDropRsp::CMD_ID;
const DungeonGetStatueDropRsp_CmdId DungeonGetStatueDropRsp::ENET_CHANNEL_ID;
const DungeonGetStatueDropRsp_CmdId DungeonGetStatueDropRsp::ENET_IS_RELIABLE;
const DungeonGetStatueDropRsp_CmdId DungeonGetStatueDropRsp::CmdId_MIN;
const DungeonGetStatueDropRsp_CmdId DungeonGetStatueDropRsp::CmdId_MAX;
const int DungeonGetStatueDropRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChallengeRecordNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[23];
}
bool ChallengeRecordNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 924:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChallengeRecordNotify_CmdId ChallengeRecordNotify::NONE;
const ChallengeRecordNotify_CmdId ChallengeRecordNotify::CMD_ID;
const ChallengeRecordNotify_CmdId ChallengeRecordNotify::ENET_CHANNEL_ID;
const ChallengeRecordNotify_CmdId ChallengeRecordNotify::ENET_IS_RELIABLE;
const ChallengeRecordNotify_CmdId ChallengeRecordNotify::CmdId_MIN;
const ChallengeRecordNotify_CmdId ChallengeRecordNotify::CmdId_MAX;
const int ChallengeRecordNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamInfoNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[24];
}
bool DungeonCandidateTeamInfoNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 925:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonCandidateTeamInfoNotify_CmdId DungeonCandidateTeamInfoNotify::NONE;
const DungeonCandidateTeamInfoNotify_CmdId DungeonCandidateTeamInfoNotify::CMD_ID;
const DungeonCandidateTeamInfoNotify_CmdId DungeonCandidateTeamInfoNotify::ENET_CHANNEL_ID;
const DungeonCandidateTeamInfoNotify_CmdId DungeonCandidateTeamInfoNotify::ENET_IS_RELIABLE;
const DungeonCandidateTeamInfoNotify_CmdId DungeonCandidateTeamInfoNotify::CmdId_MIN;
const DungeonCandidateTeamInfoNotify_CmdId DungeonCandidateTeamInfoNotify::CmdId_MAX;
const int DungeonCandidateTeamInfoNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamInviteNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[25];
}
bool DungeonCandidateTeamInviteNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 926:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonCandidateTeamInviteNotify_CmdId DungeonCandidateTeamInviteNotify::NONE;
const DungeonCandidateTeamInviteNotify_CmdId DungeonCandidateTeamInviteNotify::CMD_ID;
const DungeonCandidateTeamInviteNotify_CmdId DungeonCandidateTeamInviteNotify::ENET_CHANNEL_ID;
const DungeonCandidateTeamInviteNotify_CmdId DungeonCandidateTeamInviteNotify::ENET_IS_RELIABLE;
const DungeonCandidateTeamInviteNotify_CmdId DungeonCandidateTeamInviteNotify::CmdId_MIN;
const DungeonCandidateTeamInviteNotify_CmdId DungeonCandidateTeamInviteNotify::CmdId_MAX;
const int DungeonCandidateTeamInviteNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamRefuseNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[26];
}
bool DungeonCandidateTeamRefuseNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 927:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonCandidateTeamRefuseNotify_CmdId DungeonCandidateTeamRefuseNotify::NONE;
const DungeonCandidateTeamRefuseNotify_CmdId DungeonCandidateTeamRefuseNotify::CMD_ID;
const DungeonCandidateTeamRefuseNotify_CmdId DungeonCandidateTeamRefuseNotify::ENET_CHANNEL_ID;
const DungeonCandidateTeamRefuseNotify_CmdId DungeonCandidateTeamRefuseNotify::ENET_IS_RELIABLE;
const DungeonCandidateTeamRefuseNotify_CmdId DungeonCandidateTeamRefuseNotify::CmdId_MIN;
const DungeonCandidateTeamRefuseNotify_CmdId DungeonCandidateTeamRefuseNotify::CmdId_MAX;
const int DungeonCandidateTeamRefuseNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamPlayerLeaveNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[27];
}
bool DungeonCandidateTeamPlayerLeaveNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 928:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonCandidateTeamPlayerLeaveNotify_CmdId DungeonCandidateTeamPlayerLeaveNotify::NONE;
const DungeonCandidateTeamPlayerLeaveNotify_CmdId DungeonCandidateTeamPlayerLeaveNotify::CMD_ID;
const DungeonCandidateTeamPlayerLeaveNotify_CmdId DungeonCandidateTeamPlayerLeaveNotify::ENET_CHANNEL_ID;
const DungeonCandidateTeamPlayerLeaveNotify_CmdId DungeonCandidateTeamPlayerLeaveNotify::ENET_IS_RELIABLE;
const DungeonCandidateTeamPlayerLeaveNotify_CmdId DungeonCandidateTeamPlayerLeaveNotify::CmdId_MIN;
const DungeonCandidateTeamPlayerLeaveNotify_CmdId DungeonCandidateTeamPlayerLeaveNotify::CmdId_MAX;
const int DungeonCandidateTeamPlayerLeaveNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamDismissNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[28];
}
bool DungeonCandidateTeamDismissNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 929:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonCandidateTeamDismissNotify_CmdId DungeonCandidateTeamDismissNotify::NONE;
const DungeonCandidateTeamDismissNotify_CmdId DungeonCandidateTeamDismissNotify::CMD_ID;
const DungeonCandidateTeamDismissNotify_CmdId DungeonCandidateTeamDismissNotify::ENET_CHANNEL_ID;
const DungeonCandidateTeamDismissNotify_CmdId DungeonCandidateTeamDismissNotify::ENET_IS_RELIABLE;
const DungeonCandidateTeamDismissNotify_CmdId DungeonCandidateTeamDismissNotify::CmdId_MIN;
const DungeonCandidateTeamDismissNotify_CmdId DungeonCandidateTeamDismissNotify::CmdId_MAX;
const int DungeonCandidateTeamDismissNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamCreateReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[29];
}
bool DungeonCandidateTeamCreateReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 930:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonCandidateTeamCreateReq_CmdId DungeonCandidateTeamCreateReq::NONE;
const DungeonCandidateTeamCreateReq_CmdId DungeonCandidateTeamCreateReq::CMD_ID;
const DungeonCandidateTeamCreateReq_CmdId DungeonCandidateTeamCreateReq::ENET_CHANNEL_ID;
const DungeonCandidateTeamCreateReq_CmdId DungeonCandidateTeamCreateReq::ENET_IS_RELIABLE;
const DungeonCandidateTeamCreateReq_CmdId DungeonCandidateTeamCreateReq::IS_ALLOW_CLIENT;
const DungeonCandidateTeamCreateReq_CmdId DungeonCandidateTeamCreateReq::CmdId_MIN;
const DungeonCandidateTeamCreateReq_CmdId DungeonCandidateTeamCreateReq::CmdId_MAX;
const int DungeonCandidateTeamCreateReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamCreateRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[30];
}
bool DungeonCandidateTeamCreateRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 931:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonCandidateTeamCreateRsp_CmdId DungeonCandidateTeamCreateRsp::NONE;
const DungeonCandidateTeamCreateRsp_CmdId DungeonCandidateTeamCreateRsp::CMD_ID;
const DungeonCandidateTeamCreateRsp_CmdId DungeonCandidateTeamCreateRsp::ENET_CHANNEL_ID;
const DungeonCandidateTeamCreateRsp_CmdId DungeonCandidateTeamCreateRsp::ENET_IS_RELIABLE;
const DungeonCandidateTeamCreateRsp_CmdId DungeonCandidateTeamCreateRsp::CmdId_MIN;
const DungeonCandidateTeamCreateRsp_CmdId DungeonCandidateTeamCreateRsp::CmdId_MAX;
const int DungeonCandidateTeamCreateRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamInviteReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[31];
}
bool DungeonCandidateTeamInviteReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 932:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonCandidateTeamInviteReq_CmdId DungeonCandidateTeamInviteReq::NONE;
const DungeonCandidateTeamInviteReq_CmdId DungeonCandidateTeamInviteReq::CMD_ID;
const DungeonCandidateTeamInviteReq_CmdId DungeonCandidateTeamInviteReq::ENET_CHANNEL_ID;
const DungeonCandidateTeamInviteReq_CmdId DungeonCandidateTeamInviteReq::ENET_IS_RELIABLE;
const DungeonCandidateTeamInviteReq_CmdId DungeonCandidateTeamInviteReq::IS_ALLOW_CLIENT;
const DungeonCandidateTeamInviteReq_CmdId DungeonCandidateTeamInviteReq::CmdId_MIN;
const DungeonCandidateTeamInviteReq_CmdId DungeonCandidateTeamInviteReq::CmdId_MAX;
const int DungeonCandidateTeamInviteReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamInviteRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[32];
}
bool DungeonCandidateTeamInviteRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 933:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonCandidateTeamInviteRsp_CmdId DungeonCandidateTeamInviteRsp::NONE;
const DungeonCandidateTeamInviteRsp_CmdId DungeonCandidateTeamInviteRsp::CMD_ID;
const DungeonCandidateTeamInviteRsp_CmdId DungeonCandidateTeamInviteRsp::ENET_CHANNEL_ID;
const DungeonCandidateTeamInviteRsp_CmdId DungeonCandidateTeamInviteRsp::ENET_IS_RELIABLE;
const DungeonCandidateTeamInviteRsp_CmdId DungeonCandidateTeamInviteRsp::CmdId_MIN;
const DungeonCandidateTeamInviteRsp_CmdId DungeonCandidateTeamInviteRsp::CmdId_MAX;
const int DungeonCandidateTeamInviteRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamKickReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[33];
}
bool DungeonCandidateTeamKickReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 934:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonCandidateTeamKickReq_CmdId DungeonCandidateTeamKickReq::NONE;
const DungeonCandidateTeamKickReq_CmdId DungeonCandidateTeamKickReq::CMD_ID;
const DungeonCandidateTeamKickReq_CmdId DungeonCandidateTeamKickReq::ENET_CHANNEL_ID;
const DungeonCandidateTeamKickReq_CmdId DungeonCandidateTeamKickReq::ENET_IS_RELIABLE;
const DungeonCandidateTeamKickReq_CmdId DungeonCandidateTeamKickReq::IS_ALLOW_CLIENT;
const DungeonCandidateTeamKickReq_CmdId DungeonCandidateTeamKickReq::CmdId_MIN;
const DungeonCandidateTeamKickReq_CmdId DungeonCandidateTeamKickReq::CmdId_MAX;
const int DungeonCandidateTeamKickReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamKickRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[34];
}
bool DungeonCandidateTeamKickRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 935:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonCandidateTeamKickRsp_CmdId DungeonCandidateTeamKickRsp::NONE;
const DungeonCandidateTeamKickRsp_CmdId DungeonCandidateTeamKickRsp::CMD_ID;
const DungeonCandidateTeamKickRsp_CmdId DungeonCandidateTeamKickRsp::ENET_CHANNEL_ID;
const DungeonCandidateTeamKickRsp_CmdId DungeonCandidateTeamKickRsp::ENET_IS_RELIABLE;
const DungeonCandidateTeamKickRsp_CmdId DungeonCandidateTeamKickRsp::CmdId_MIN;
const DungeonCandidateTeamKickRsp_CmdId DungeonCandidateTeamKickRsp::CmdId_MAX;
const int DungeonCandidateTeamKickRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamLeaveReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[35];
}
bool DungeonCandidateTeamLeaveReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 936:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonCandidateTeamLeaveReq_CmdId DungeonCandidateTeamLeaveReq::NONE;
const DungeonCandidateTeamLeaveReq_CmdId DungeonCandidateTeamLeaveReq::CMD_ID;
const DungeonCandidateTeamLeaveReq_CmdId DungeonCandidateTeamLeaveReq::ENET_CHANNEL_ID;
const DungeonCandidateTeamLeaveReq_CmdId DungeonCandidateTeamLeaveReq::ENET_IS_RELIABLE;
const DungeonCandidateTeamLeaveReq_CmdId DungeonCandidateTeamLeaveReq::IS_ALLOW_CLIENT;
const DungeonCandidateTeamLeaveReq_CmdId DungeonCandidateTeamLeaveReq::CmdId_MIN;
const DungeonCandidateTeamLeaveReq_CmdId DungeonCandidateTeamLeaveReq::CmdId_MAX;
const int DungeonCandidateTeamLeaveReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamLeaveRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[36];
}
bool DungeonCandidateTeamLeaveRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 937:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonCandidateTeamLeaveRsp_CmdId DungeonCandidateTeamLeaveRsp::NONE;
const DungeonCandidateTeamLeaveRsp_CmdId DungeonCandidateTeamLeaveRsp::CMD_ID;
const DungeonCandidateTeamLeaveRsp_CmdId DungeonCandidateTeamLeaveRsp::ENET_CHANNEL_ID;
const DungeonCandidateTeamLeaveRsp_CmdId DungeonCandidateTeamLeaveRsp::ENET_IS_RELIABLE;
const DungeonCandidateTeamLeaveRsp_CmdId DungeonCandidateTeamLeaveRsp::CmdId_MIN;
const DungeonCandidateTeamLeaveRsp_CmdId DungeonCandidateTeamLeaveRsp::CmdId_MAX;
const int DungeonCandidateTeamLeaveRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamReplyInviteReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[37];
}
bool DungeonCandidateTeamReplyInviteReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 938:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonCandidateTeamReplyInviteReq_CmdId DungeonCandidateTeamReplyInviteReq::NONE;
const DungeonCandidateTeamReplyInviteReq_CmdId DungeonCandidateTeamReplyInviteReq::CMD_ID;
const DungeonCandidateTeamReplyInviteReq_CmdId DungeonCandidateTeamReplyInviteReq::ENET_CHANNEL_ID;
const DungeonCandidateTeamReplyInviteReq_CmdId DungeonCandidateTeamReplyInviteReq::ENET_IS_RELIABLE;
const DungeonCandidateTeamReplyInviteReq_CmdId DungeonCandidateTeamReplyInviteReq::IS_ALLOW_CLIENT;
const DungeonCandidateTeamReplyInviteReq_CmdId DungeonCandidateTeamReplyInviteReq::CmdId_MIN;
const DungeonCandidateTeamReplyInviteReq_CmdId DungeonCandidateTeamReplyInviteReq::CmdId_MAX;
const int DungeonCandidateTeamReplyInviteReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamReplyInviteRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[38];
}
bool DungeonCandidateTeamReplyInviteRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 939:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonCandidateTeamReplyInviteRsp_CmdId DungeonCandidateTeamReplyInviteRsp::NONE;
const DungeonCandidateTeamReplyInviteRsp_CmdId DungeonCandidateTeamReplyInviteRsp::CMD_ID;
const DungeonCandidateTeamReplyInviteRsp_CmdId DungeonCandidateTeamReplyInviteRsp::ENET_CHANNEL_ID;
const DungeonCandidateTeamReplyInviteRsp_CmdId DungeonCandidateTeamReplyInviteRsp::ENET_IS_RELIABLE;
const DungeonCandidateTeamReplyInviteRsp_CmdId DungeonCandidateTeamReplyInviteRsp::CmdId_MIN;
const DungeonCandidateTeamReplyInviteRsp_CmdId DungeonCandidateTeamReplyInviteRsp::CmdId_MAX;
const int DungeonCandidateTeamReplyInviteRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamSetReadyReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[39];
}
bool DungeonCandidateTeamSetReadyReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 940:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonCandidateTeamSetReadyReq_CmdId DungeonCandidateTeamSetReadyReq::NONE;
const DungeonCandidateTeamSetReadyReq_CmdId DungeonCandidateTeamSetReadyReq::CMD_ID;
const DungeonCandidateTeamSetReadyReq_CmdId DungeonCandidateTeamSetReadyReq::ENET_CHANNEL_ID;
const DungeonCandidateTeamSetReadyReq_CmdId DungeonCandidateTeamSetReadyReq::ENET_IS_RELIABLE;
const DungeonCandidateTeamSetReadyReq_CmdId DungeonCandidateTeamSetReadyReq::IS_ALLOW_CLIENT;
const DungeonCandidateTeamSetReadyReq_CmdId DungeonCandidateTeamSetReadyReq::CmdId_MIN;
const DungeonCandidateTeamSetReadyReq_CmdId DungeonCandidateTeamSetReadyReq::CmdId_MAX;
const int DungeonCandidateTeamSetReadyReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamSetReadyRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[40];
}
bool DungeonCandidateTeamSetReadyRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 941:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonCandidateTeamSetReadyRsp_CmdId DungeonCandidateTeamSetReadyRsp::NONE;
const DungeonCandidateTeamSetReadyRsp_CmdId DungeonCandidateTeamSetReadyRsp::CMD_ID;
const DungeonCandidateTeamSetReadyRsp_CmdId DungeonCandidateTeamSetReadyRsp::ENET_CHANNEL_ID;
const DungeonCandidateTeamSetReadyRsp_CmdId DungeonCandidateTeamSetReadyRsp::ENET_IS_RELIABLE;
const DungeonCandidateTeamSetReadyRsp_CmdId DungeonCandidateTeamSetReadyRsp::CmdId_MIN;
const DungeonCandidateTeamSetReadyRsp_CmdId DungeonCandidateTeamSetReadyRsp::CmdId_MAX;
const int DungeonCandidateTeamSetReadyRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamChangeAvatarReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[41];
}
bool DungeonCandidateTeamChangeAvatarReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 942:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonCandidateTeamChangeAvatarReq_CmdId DungeonCandidateTeamChangeAvatarReq::NONE;
const DungeonCandidateTeamChangeAvatarReq_CmdId DungeonCandidateTeamChangeAvatarReq::CMD_ID;
const DungeonCandidateTeamChangeAvatarReq_CmdId DungeonCandidateTeamChangeAvatarReq::ENET_CHANNEL_ID;
const DungeonCandidateTeamChangeAvatarReq_CmdId DungeonCandidateTeamChangeAvatarReq::ENET_IS_RELIABLE;
const DungeonCandidateTeamChangeAvatarReq_CmdId DungeonCandidateTeamChangeAvatarReq::IS_ALLOW_CLIENT;
const DungeonCandidateTeamChangeAvatarReq_CmdId DungeonCandidateTeamChangeAvatarReq::CmdId_MIN;
const DungeonCandidateTeamChangeAvatarReq_CmdId DungeonCandidateTeamChangeAvatarReq::CmdId_MAX;
const int DungeonCandidateTeamChangeAvatarReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamChangeAvatarRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[42];
}
bool DungeonCandidateTeamChangeAvatarRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 943:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonCandidateTeamChangeAvatarRsp_CmdId DungeonCandidateTeamChangeAvatarRsp::NONE;
const DungeonCandidateTeamChangeAvatarRsp_CmdId DungeonCandidateTeamChangeAvatarRsp::CMD_ID;
const DungeonCandidateTeamChangeAvatarRsp_CmdId DungeonCandidateTeamChangeAvatarRsp::ENET_CHANNEL_ID;
const DungeonCandidateTeamChangeAvatarRsp_CmdId DungeonCandidateTeamChangeAvatarRsp::ENET_IS_RELIABLE;
const DungeonCandidateTeamChangeAvatarRsp_CmdId DungeonCandidateTeamChangeAvatarRsp::CmdId_MIN;
const DungeonCandidateTeamChangeAvatarRsp_CmdId DungeonCandidateTeamChangeAvatarRsp::CmdId_MAX;
const int DungeonCandidateTeamChangeAvatarRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GetDailyDungeonEntryInfoReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[43];
}
bool GetDailyDungeonEntryInfoReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 944:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GetDailyDungeonEntryInfoReq_CmdId GetDailyDungeonEntryInfoReq::NONE;
const GetDailyDungeonEntryInfoReq_CmdId GetDailyDungeonEntryInfoReq::CMD_ID;
const GetDailyDungeonEntryInfoReq_CmdId GetDailyDungeonEntryInfoReq::ENET_CHANNEL_ID;
const GetDailyDungeonEntryInfoReq_CmdId GetDailyDungeonEntryInfoReq::ENET_IS_RELIABLE;
const GetDailyDungeonEntryInfoReq_CmdId GetDailyDungeonEntryInfoReq::IS_ALLOW_CLIENT;
const GetDailyDungeonEntryInfoReq_CmdId GetDailyDungeonEntryInfoReq::CmdId_MIN;
const GetDailyDungeonEntryInfoReq_CmdId GetDailyDungeonEntryInfoReq::CmdId_MAX;
const int GetDailyDungeonEntryInfoReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GetDailyDungeonEntryInfoRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[44];
}
bool GetDailyDungeonEntryInfoRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 945:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GetDailyDungeonEntryInfoRsp_CmdId GetDailyDungeonEntryInfoRsp::NONE;
const GetDailyDungeonEntryInfoRsp_CmdId GetDailyDungeonEntryInfoRsp::CMD_ID;
const GetDailyDungeonEntryInfoRsp_CmdId GetDailyDungeonEntryInfoRsp::ENET_CHANNEL_ID;
const GetDailyDungeonEntryInfoRsp_CmdId GetDailyDungeonEntryInfoRsp::ENET_IS_RELIABLE;
const GetDailyDungeonEntryInfoRsp_CmdId GetDailyDungeonEntryInfoRsp::CmdId_MIN;
const GetDailyDungeonEntryInfoRsp_CmdId GetDailyDungeonEntryInfoRsp::CmdId_MAX;
const int GetDailyDungeonEntryInfoRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonSlipRevivePointActivateReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[45];
}
bool DungeonSlipRevivePointActivateReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 946:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonSlipRevivePointActivateReq_CmdId DungeonSlipRevivePointActivateReq::NONE;
const DungeonSlipRevivePointActivateReq_CmdId DungeonSlipRevivePointActivateReq::CMD_ID;
const DungeonSlipRevivePointActivateReq_CmdId DungeonSlipRevivePointActivateReq::ENET_CHANNEL_ID;
const DungeonSlipRevivePointActivateReq_CmdId DungeonSlipRevivePointActivateReq::ENET_IS_RELIABLE;
const DungeonSlipRevivePointActivateReq_CmdId DungeonSlipRevivePointActivateReq::IS_ALLOW_CLIENT;
const DungeonSlipRevivePointActivateReq_CmdId DungeonSlipRevivePointActivateReq::CmdId_MIN;
const DungeonSlipRevivePointActivateReq_CmdId DungeonSlipRevivePointActivateReq::CmdId_MAX;
const int DungeonSlipRevivePointActivateReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonSlipRevivePointActivateRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[46];
}
bool DungeonSlipRevivePointActivateRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 947:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DungeonSlipRevivePointActivateRsp_CmdId DungeonSlipRevivePointActivateRsp::NONE;
const DungeonSlipRevivePointActivateRsp_CmdId DungeonSlipRevivePointActivateRsp::CMD_ID;
const DungeonSlipRevivePointActivateRsp_CmdId DungeonSlipRevivePointActivateRsp::ENET_CHANNEL_ID;
const DungeonSlipRevivePointActivateRsp_CmdId DungeonSlipRevivePointActivateRsp::ENET_IS_RELIABLE;
const DungeonSlipRevivePointActivateRsp_CmdId DungeonSlipRevivePointActivateRsp::CmdId_MIN;
const DungeonSlipRevivePointActivateRsp_CmdId DungeonSlipRevivePointActivateRsp::CmdId_MAX;
const int DungeonSlipRevivePointActivateRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DungeonDataType_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[47];
}
bool DungeonDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamPlayerLeaveReason_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[48];
}
bool DungeonCandidateTeamPlayerLeaveReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamDismissReason_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[49];
}
bool DungeonCandidateTeamDismissReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonEntryInfoReq::kPointIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonEntryInfoReq::DungeonEntryInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonEntryInfoReq)
}
DungeonEntryInfoReq::DungeonEntryInfoReq(const DungeonEntryInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  point_id_ = from.point_id_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonEntryInfoReq)
}

void DungeonEntryInfoReq::SharedCtor() {
  point_id_ = 0u;
  _cached_size_ = 0;
}

DungeonEntryInfoReq::~DungeonEntryInfoReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonEntryInfoReq)
  SharedDtor();
}

void DungeonEntryInfoReq::SharedDtor() {
}

void DungeonEntryInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonEntryInfoReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonEntryInfoReq& DungeonEntryInfoReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonEntryInfoReq* DungeonEntryInfoReq::New(::google::protobuf::Arena* arena) const {
  DungeonEntryInfoReq* n = new DungeonEntryInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonEntryInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonEntryInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_id_ = 0u;
  _internal_metadata_.Clear();
}

bool DungeonEntryInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonEntryInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 point_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonEntryInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonEntryInfoReq)
  return false;
#undef DO_
}

void DungeonEntryInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonEntryInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 point_id = 1;
  if (this->point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->point_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonEntryInfoReq)
}

::google::protobuf::uint8* DungeonEntryInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonEntryInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 point_id = 1;
  if (this->point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->point_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonEntryInfoReq)
  return target;
}

size_t DungeonEntryInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonEntryInfoReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 point_id = 1;
  if (this->point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonEntryInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonEntryInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonEntryInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonEntryInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonEntryInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonEntryInfoReq)
    MergeFrom(*source);
  }
}

void DungeonEntryInfoReq::MergeFrom(const DungeonEntryInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonEntryInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.point_id() != 0) {
    set_point_id(from.point_id());
  }
}

void DungeonEntryInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonEntryInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonEntryInfoReq::CopyFrom(const DungeonEntryInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonEntryInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonEntryInfoReq::IsInitialized() const {
  return true;
}

void DungeonEntryInfoReq::Swap(DungeonEntryInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonEntryInfoReq::InternalSwap(DungeonEntryInfoReq* other) {
  using std::swap;
  swap(point_id_, other->point_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonEntryInfoReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonEntryInfoReq

// uint32 point_id = 1;
void DungeonEntryInfoReq::clear_point_id() {
  point_id_ = 0u;
}
::google::protobuf::uint32 DungeonEntryInfoReq::point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfoReq.point_id)
  return point_id_;
}
void DungeonEntryInfoReq::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfoReq.point_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonEntryInfo::kDungeonIdFieldNumber;
const int DungeonEntryInfo::kIsPassedFieldNumber;
const int DungeonEntryInfo::kLeftTimesFieldNumber;
const int DungeonEntryInfo::kStartTimeFieldNumber;
const int DungeonEntryInfo::kEndTimeFieldNumber;
const int DungeonEntryInfo::kMaxBossChestNumFieldNumber;
const int DungeonEntryInfo::kBossChestNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonEntryInfo::DungeonEntryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonEntryInfo)
}
DungeonEntryInfo::DungeonEntryInfo(const DungeonEntryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dungeon_id_, &from.dungeon_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&boss_chest_num_) -
    reinterpret_cast<char*>(&dungeon_id_)) + sizeof(boss_chest_num_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonEntryInfo)
}

void DungeonEntryInfo::SharedCtor() {
  ::memset(&dungeon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boss_chest_num_) -
      reinterpret_cast<char*>(&dungeon_id_)) + sizeof(boss_chest_num_));
  _cached_size_ = 0;
}

DungeonEntryInfo::~DungeonEntryInfo() {
  // @@protoc_insertion_point(destructor:proto.DungeonEntryInfo)
  SharedDtor();
}

void DungeonEntryInfo::SharedDtor() {
}

void DungeonEntryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonEntryInfo::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonEntryInfo& DungeonEntryInfo::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonEntryInfo* DungeonEntryInfo::New(::google::protobuf::Arena* arena) const {
  DungeonEntryInfo* n = new DungeonEntryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonEntryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonEntryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dungeon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boss_chest_num_) -
      reinterpret_cast<char*>(&dungeon_id_)) + sizeof(boss_chest_num_));
  _internal_metadata_.Clear();
}

bool DungeonEntryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonEntryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dungeon_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_passed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_passed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 left_times = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 start_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_boss_chest_num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_boss_chest_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 boss_chest_num = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_chest_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonEntryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonEntryInfo)
  return false;
#undef DO_
}

void DungeonEntryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonEntryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dungeon_id = 1;
  if (this->dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dungeon_id(), output);
  }

  // bool is_passed = 2;
  if (this->is_passed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_passed(), output);
  }

  // uint32 left_times = 3;
  if (this->left_times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->left_times(), output);
  }

  // uint32 start_time = 4;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_time(), output);
  }

  // uint32 end_time = 5;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->end_time(), output);
  }

  // uint32 max_boss_chest_num = 6;
  if (this->max_boss_chest_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_boss_chest_num(), output);
  }

  // uint32 boss_chest_num = 7;
  if (this->boss_chest_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->boss_chest_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonEntryInfo)
}

::google::protobuf::uint8* DungeonEntryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonEntryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dungeon_id = 1;
  if (this->dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dungeon_id(), target);
  }

  // bool is_passed = 2;
  if (this->is_passed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_passed(), target);
  }

  // uint32 left_times = 3;
  if (this->left_times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->left_times(), target);
  }

  // uint32 start_time = 4;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_time(), target);
  }

  // uint32 end_time = 5;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->end_time(), target);
  }

  // uint32 max_boss_chest_num = 6;
  if (this->max_boss_chest_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_boss_chest_num(), target);
  }

  // uint32 boss_chest_num = 7;
  if (this->boss_chest_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->boss_chest_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonEntryInfo)
  return target;
}

size_t DungeonEntryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonEntryInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dungeon_id = 1;
  if (this->dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_id());
  }

  // bool is_passed = 2;
  if (this->is_passed() != 0) {
    total_size += 1 + 1;
  }

  // uint32 left_times = 3;
  if (this->left_times() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->left_times());
  }

  // uint32 start_time = 4;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start_time());
  }

  // uint32 end_time = 5;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  // uint32 max_boss_chest_num = 6;
  if (this->max_boss_chest_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_boss_chest_num());
  }

  // uint32 boss_chest_num = 7;
  if (this->boss_chest_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->boss_chest_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonEntryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonEntryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonEntryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonEntryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonEntryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonEntryInfo)
    MergeFrom(*source);
  }
}

void DungeonEntryInfo::MergeFrom(const DungeonEntryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonEntryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dungeon_id() != 0) {
    set_dungeon_id(from.dungeon_id());
  }
  if (from.is_passed() != 0) {
    set_is_passed(from.is_passed());
  }
  if (from.left_times() != 0) {
    set_left_times(from.left_times());
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
  if (from.max_boss_chest_num() != 0) {
    set_max_boss_chest_num(from.max_boss_chest_num());
  }
  if (from.boss_chest_num() != 0) {
    set_boss_chest_num(from.boss_chest_num());
  }
}

void DungeonEntryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonEntryInfo::CopyFrom(const DungeonEntryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonEntryInfo::IsInitialized() const {
  return true;
}

void DungeonEntryInfo::Swap(DungeonEntryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonEntryInfo::InternalSwap(DungeonEntryInfo* other) {
  using std::swap;
  swap(dungeon_id_, other->dungeon_id_);
  swap(is_passed_, other->is_passed_);
  swap(left_times_, other->left_times_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
  swap(max_boss_chest_num_, other->max_boss_chest_num_);
  swap(boss_chest_num_, other->boss_chest_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonEntryInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonEntryInfo

// uint32 dungeon_id = 1;
void DungeonEntryInfo::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
::google::protobuf::uint32 DungeonEntryInfo::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.dungeon_id)
  return dungeon_id_;
}
void DungeonEntryInfo::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfo.dungeon_id)
}

// bool is_passed = 2;
void DungeonEntryInfo::clear_is_passed() {
  is_passed_ = false;
}
bool DungeonEntryInfo::is_passed() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.is_passed)
  return is_passed_;
}
void DungeonEntryInfo::set_is_passed(bool value) {
  
  is_passed_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfo.is_passed)
}

// uint32 left_times = 3;
void DungeonEntryInfo::clear_left_times() {
  left_times_ = 0u;
}
::google::protobuf::uint32 DungeonEntryInfo::left_times() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.left_times)
  return left_times_;
}
void DungeonEntryInfo::set_left_times(::google::protobuf::uint32 value) {
  
  left_times_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfo.left_times)
}

// uint32 start_time = 4;
void DungeonEntryInfo::clear_start_time() {
  start_time_ = 0u;
}
::google::protobuf::uint32 DungeonEntryInfo::start_time() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.start_time)
  return start_time_;
}
void DungeonEntryInfo::set_start_time(::google::protobuf::uint32 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfo.start_time)
}

// uint32 end_time = 5;
void DungeonEntryInfo::clear_end_time() {
  end_time_ = 0u;
}
::google::protobuf::uint32 DungeonEntryInfo::end_time() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.end_time)
  return end_time_;
}
void DungeonEntryInfo::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfo.end_time)
}

// uint32 max_boss_chest_num = 6;
void DungeonEntryInfo::clear_max_boss_chest_num() {
  max_boss_chest_num_ = 0u;
}
::google::protobuf::uint32 DungeonEntryInfo::max_boss_chest_num() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.max_boss_chest_num)
  return max_boss_chest_num_;
}
void DungeonEntryInfo::set_max_boss_chest_num(::google::protobuf::uint32 value) {
  
  max_boss_chest_num_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfo.max_boss_chest_num)
}

// uint32 boss_chest_num = 7;
void DungeonEntryInfo::clear_boss_chest_num() {
  boss_chest_num_ = 0u;
}
::google::protobuf::uint32 DungeonEntryInfo::boss_chest_num() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.boss_chest_num)
  return boss_chest_num_;
}
void DungeonEntryInfo::set_boss_chest_num(::google::protobuf::uint32 value) {
  
  boss_chest_num_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfo.boss_chest_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonEntryInfoRsp::kRetcodeFieldNumber;
const int DungeonEntryInfoRsp::kPointIdFieldNumber;
const int DungeonEntryInfoRsp::kDungeonEntryListFieldNumber;
const int DungeonEntryInfoRsp::kRecommendDungeonIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonEntryInfoRsp::DungeonEntryInfoRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonEntryInfoRsp)
}
DungeonEntryInfoRsp::DungeonEntryInfoRsp(const DungeonEntryInfoRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dungeon_entry_list_(from.dungeon_entry_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&recommend_dungeon_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(recommend_dungeon_id_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonEntryInfoRsp)
}

void DungeonEntryInfoRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recommend_dungeon_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(recommend_dungeon_id_));
  _cached_size_ = 0;
}

DungeonEntryInfoRsp::~DungeonEntryInfoRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonEntryInfoRsp)
  SharedDtor();
}

void DungeonEntryInfoRsp::SharedDtor() {
}

void DungeonEntryInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonEntryInfoRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonEntryInfoRsp& DungeonEntryInfoRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonEntryInfoRsp* DungeonEntryInfoRsp::New(::google::protobuf::Arena* arena) const {
  DungeonEntryInfoRsp* n = new DungeonEntryInfoRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonEntryInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonEntryInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dungeon_entry_list_.Clear();
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recommend_dungeon_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(recommend_dungeon_id_));
  _internal_metadata_.Clear();
}

bool DungeonEntryInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonEntryInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 point_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.DungeonEntryInfo dungeon_entry_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dungeon_entry_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 recommend_dungeon_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recommend_dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonEntryInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonEntryInfoRsp)
  return false;
#undef DO_
}

void DungeonEntryInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonEntryInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 point_id = 2;
  if (this->point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->point_id(), output);
  }

  // repeated .proto.DungeonEntryInfo dungeon_entry_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dungeon_entry_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dungeon_entry_list(static_cast<int>(i)), output);
  }

  // uint32 recommend_dungeon_id = 4;
  if (this->recommend_dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->recommend_dungeon_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonEntryInfoRsp)
}

::google::protobuf::uint8* DungeonEntryInfoRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonEntryInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 point_id = 2;
  if (this->point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->point_id(), target);
  }

  // repeated .proto.DungeonEntryInfo dungeon_entry_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dungeon_entry_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->dungeon_entry_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 recommend_dungeon_id = 4;
  if (this->recommend_dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->recommend_dungeon_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonEntryInfoRsp)
  return target;
}

size_t DungeonEntryInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonEntryInfoRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.DungeonEntryInfo dungeon_entry_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->dungeon_entry_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dungeon_entry_list(static_cast<int>(i)));
    }
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 point_id = 2;
  if (this->point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point_id());
  }

  // uint32 recommend_dungeon_id = 4;
  if (this->recommend_dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recommend_dungeon_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonEntryInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonEntryInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonEntryInfoRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonEntryInfoRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonEntryInfoRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonEntryInfoRsp)
    MergeFrom(*source);
  }
}

void DungeonEntryInfoRsp::MergeFrom(const DungeonEntryInfoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonEntryInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dungeon_entry_list_.MergeFrom(from.dungeon_entry_list_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.point_id() != 0) {
    set_point_id(from.point_id());
  }
  if (from.recommend_dungeon_id() != 0) {
    set_recommend_dungeon_id(from.recommend_dungeon_id());
  }
}

void DungeonEntryInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonEntryInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonEntryInfoRsp::CopyFrom(const DungeonEntryInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonEntryInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonEntryInfoRsp::IsInitialized() const {
  return true;
}

void DungeonEntryInfoRsp::Swap(DungeonEntryInfoRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonEntryInfoRsp::InternalSwap(DungeonEntryInfoRsp* other) {
  using std::swap;
  dungeon_entry_list_.InternalSwap(&other->dungeon_entry_list_);
  swap(retcode_, other->retcode_);
  swap(point_id_, other->point_id_);
  swap(recommend_dungeon_id_, other->recommend_dungeon_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonEntryInfoRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonEntryInfoRsp

// int32 retcode = 1;
void DungeonEntryInfoRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonEntryInfoRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfoRsp.retcode)
  return retcode_;
}
void DungeonEntryInfoRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfoRsp.retcode)
}

// uint32 point_id = 2;
void DungeonEntryInfoRsp::clear_point_id() {
  point_id_ = 0u;
}
::google::protobuf::uint32 DungeonEntryInfoRsp::point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfoRsp.point_id)
  return point_id_;
}
void DungeonEntryInfoRsp::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfoRsp.point_id)
}

// repeated .proto.DungeonEntryInfo dungeon_entry_list = 3;
int DungeonEntryInfoRsp::dungeon_entry_list_size() const {
  return dungeon_entry_list_.size();
}
void DungeonEntryInfoRsp::clear_dungeon_entry_list() {
  dungeon_entry_list_.Clear();
}
const ::proto::DungeonEntryInfo& DungeonEntryInfoRsp::dungeon_entry_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfoRsp.dungeon_entry_list)
  return dungeon_entry_list_.Get(index);
}
::proto::DungeonEntryInfo* DungeonEntryInfoRsp::mutable_dungeon_entry_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.DungeonEntryInfoRsp.dungeon_entry_list)
  return dungeon_entry_list_.Mutable(index);
}
::proto::DungeonEntryInfo* DungeonEntryInfoRsp::add_dungeon_entry_list() {
  // @@protoc_insertion_point(field_add:proto.DungeonEntryInfoRsp.dungeon_entry_list)
  return dungeon_entry_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::DungeonEntryInfo >*
DungeonEntryInfoRsp::mutable_dungeon_entry_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonEntryInfoRsp.dungeon_entry_list)
  return &dungeon_entry_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::DungeonEntryInfo >&
DungeonEntryInfoRsp::dungeon_entry_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonEntryInfoRsp.dungeon_entry_list)
  return dungeon_entry_list_;
}

// uint32 recommend_dungeon_id = 4;
void DungeonEntryInfoRsp::clear_recommend_dungeon_id() {
  recommend_dungeon_id_ = 0u;
}
::google::protobuf::uint32 DungeonEntryInfoRsp::recommend_dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfoRsp.recommend_dungeon_id)
  return recommend_dungeon_id_;
}
void DungeonEntryInfoRsp::set_recommend_dungeon_id(::google::protobuf::uint32 value) {
  
  recommend_dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfoRsp.recommend_dungeon_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerEnterDungeonReq::kPointIdFieldNumber;
const int PlayerEnterDungeonReq::kDungeonIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerEnterDungeonReq::PlayerEnterDungeonReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PlayerEnterDungeonReq)
}
PlayerEnterDungeonReq::PlayerEnterDungeonReq(const PlayerEnterDungeonReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&point_id_, &from.point_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dungeon_id_) -
    reinterpret_cast<char*>(&point_id_)) + sizeof(dungeon_id_));
  // @@protoc_insertion_point(copy_constructor:proto.PlayerEnterDungeonReq)
}

void PlayerEnterDungeonReq::SharedCtor() {
  ::memset(&point_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dungeon_id_) -
      reinterpret_cast<char*>(&point_id_)) + sizeof(dungeon_id_));
  _cached_size_ = 0;
}

PlayerEnterDungeonReq::~PlayerEnterDungeonReq() {
  // @@protoc_insertion_point(destructor:proto.PlayerEnterDungeonReq)
  SharedDtor();
}

void PlayerEnterDungeonReq::SharedDtor() {
}

void PlayerEnterDungeonReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEnterDungeonReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerEnterDungeonReq& PlayerEnterDungeonReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerEnterDungeonReq* PlayerEnterDungeonReq::New(::google::protobuf::Arena* arena) const {
  PlayerEnterDungeonReq* n = new PlayerEnterDungeonReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerEnterDungeonReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PlayerEnterDungeonReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&point_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dungeon_id_) -
      reinterpret_cast<char*>(&point_id_)) + sizeof(dungeon_id_));
  _internal_metadata_.Clear();
}

bool PlayerEnterDungeonReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PlayerEnterDungeonReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 point_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dungeon_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PlayerEnterDungeonReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PlayerEnterDungeonReq)
  return false;
#undef DO_
}

void PlayerEnterDungeonReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PlayerEnterDungeonReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 point_id = 1;
  if (this->point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->point_id(), output);
  }

  // uint32 dungeon_id = 2;
  if (this->dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dungeon_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PlayerEnterDungeonReq)
}

::google::protobuf::uint8* PlayerEnterDungeonReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PlayerEnterDungeonReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 point_id = 1;
  if (this->point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->point_id(), target);
  }

  // uint32 dungeon_id = 2;
  if (this->dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dungeon_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PlayerEnterDungeonReq)
  return target;
}

size_t PlayerEnterDungeonReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PlayerEnterDungeonReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 point_id = 1;
  if (this->point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point_id());
  }

  // uint32 dungeon_id = 2;
  if (this->dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEnterDungeonReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PlayerEnterDungeonReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerEnterDungeonReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerEnterDungeonReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PlayerEnterDungeonReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PlayerEnterDungeonReq)
    MergeFrom(*source);
  }
}

void PlayerEnterDungeonReq::MergeFrom(const PlayerEnterDungeonReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PlayerEnterDungeonReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.point_id() != 0) {
    set_point_id(from.point_id());
  }
  if (from.dungeon_id() != 0) {
    set_dungeon_id(from.dungeon_id());
  }
}

void PlayerEnterDungeonReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PlayerEnterDungeonReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEnterDungeonReq::CopyFrom(const PlayerEnterDungeonReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PlayerEnterDungeonReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEnterDungeonReq::IsInitialized() const {
  return true;
}

void PlayerEnterDungeonReq::Swap(PlayerEnterDungeonReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerEnterDungeonReq::InternalSwap(PlayerEnterDungeonReq* other) {
  using std::swap;
  swap(point_id_, other->point_id_);
  swap(dungeon_id_, other->dungeon_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerEnterDungeonReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerEnterDungeonReq

// uint32 point_id = 1;
void PlayerEnterDungeonReq::clear_point_id() {
  point_id_ = 0u;
}
::google::protobuf::uint32 PlayerEnterDungeonReq::point_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayerEnterDungeonReq.point_id)
  return point_id_;
}
void PlayerEnterDungeonReq::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerEnterDungeonReq.point_id)
}

// uint32 dungeon_id = 2;
void PlayerEnterDungeonReq::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
::google::protobuf::uint32 PlayerEnterDungeonReq::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayerEnterDungeonReq.dungeon_id)
  return dungeon_id_;
}
void PlayerEnterDungeonReq::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerEnterDungeonReq.dungeon_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerEnterDungeonRsp::kRetcodeFieldNumber;
const int PlayerEnterDungeonRsp::kPointIdFieldNumber;
const int PlayerEnterDungeonRsp::kDungeonIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerEnterDungeonRsp::PlayerEnterDungeonRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PlayerEnterDungeonRsp)
}
PlayerEnterDungeonRsp::PlayerEnterDungeonRsp(const PlayerEnterDungeonRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&dungeon_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(dungeon_id_));
  // @@protoc_insertion_point(copy_constructor:proto.PlayerEnterDungeonRsp)
}

void PlayerEnterDungeonRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dungeon_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(dungeon_id_));
  _cached_size_ = 0;
}

PlayerEnterDungeonRsp::~PlayerEnterDungeonRsp() {
  // @@protoc_insertion_point(destructor:proto.PlayerEnterDungeonRsp)
  SharedDtor();
}

void PlayerEnterDungeonRsp::SharedDtor() {
}

void PlayerEnterDungeonRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEnterDungeonRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerEnterDungeonRsp& PlayerEnterDungeonRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerEnterDungeonRsp* PlayerEnterDungeonRsp::New(::google::protobuf::Arena* arena) const {
  PlayerEnterDungeonRsp* n = new PlayerEnterDungeonRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerEnterDungeonRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PlayerEnterDungeonRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dungeon_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(dungeon_id_));
  _internal_metadata_.Clear();
}

bool PlayerEnterDungeonRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PlayerEnterDungeonRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 point_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dungeon_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PlayerEnterDungeonRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PlayerEnterDungeonRsp)
  return false;
#undef DO_
}

void PlayerEnterDungeonRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PlayerEnterDungeonRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 point_id = 2;
  if (this->point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->point_id(), output);
  }

  // uint32 dungeon_id = 3;
  if (this->dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dungeon_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PlayerEnterDungeonRsp)
}

::google::protobuf::uint8* PlayerEnterDungeonRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PlayerEnterDungeonRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 point_id = 2;
  if (this->point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->point_id(), target);
  }

  // uint32 dungeon_id = 3;
  if (this->dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dungeon_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PlayerEnterDungeonRsp)
  return target;
}

size_t PlayerEnterDungeonRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PlayerEnterDungeonRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 point_id = 2;
  if (this->point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point_id());
  }

  // uint32 dungeon_id = 3;
  if (this->dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEnterDungeonRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PlayerEnterDungeonRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerEnterDungeonRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerEnterDungeonRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PlayerEnterDungeonRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PlayerEnterDungeonRsp)
    MergeFrom(*source);
  }
}

void PlayerEnterDungeonRsp::MergeFrom(const PlayerEnterDungeonRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PlayerEnterDungeonRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.point_id() != 0) {
    set_point_id(from.point_id());
  }
  if (from.dungeon_id() != 0) {
    set_dungeon_id(from.dungeon_id());
  }
}

void PlayerEnterDungeonRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PlayerEnterDungeonRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEnterDungeonRsp::CopyFrom(const PlayerEnterDungeonRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PlayerEnterDungeonRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEnterDungeonRsp::IsInitialized() const {
  return true;
}

void PlayerEnterDungeonRsp::Swap(PlayerEnterDungeonRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerEnterDungeonRsp::InternalSwap(PlayerEnterDungeonRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(point_id_, other->point_id_);
  swap(dungeon_id_, other->dungeon_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerEnterDungeonRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerEnterDungeonRsp

// int32 retcode = 1;
void PlayerEnterDungeonRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 PlayerEnterDungeonRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.PlayerEnterDungeonRsp.retcode)
  return retcode_;
}
void PlayerEnterDungeonRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerEnterDungeonRsp.retcode)
}

// uint32 point_id = 2;
void PlayerEnterDungeonRsp::clear_point_id() {
  point_id_ = 0u;
}
::google::protobuf::uint32 PlayerEnterDungeonRsp::point_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayerEnterDungeonRsp.point_id)
  return point_id_;
}
void PlayerEnterDungeonRsp::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerEnterDungeonRsp.point_id)
}

// uint32 dungeon_id = 3;
void PlayerEnterDungeonRsp::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
::google::protobuf::uint32 PlayerEnterDungeonRsp::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayerEnterDungeonRsp.dungeon_id)
  return dungeon_id_;
}
void PlayerEnterDungeonRsp::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerEnterDungeonRsp.dungeon_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerQuitDungeonReq::kPointIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerQuitDungeonReq::PlayerQuitDungeonReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PlayerQuitDungeonReq)
}
PlayerQuitDungeonReq::PlayerQuitDungeonReq(const PlayerQuitDungeonReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  point_id_ = from.point_id_;
  // @@protoc_insertion_point(copy_constructor:proto.PlayerQuitDungeonReq)
}

void PlayerQuitDungeonReq::SharedCtor() {
  point_id_ = 0u;
  _cached_size_ = 0;
}

PlayerQuitDungeonReq::~PlayerQuitDungeonReq() {
  // @@protoc_insertion_point(destructor:proto.PlayerQuitDungeonReq)
  SharedDtor();
}

void PlayerQuitDungeonReq::SharedDtor() {
}

void PlayerQuitDungeonReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerQuitDungeonReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerQuitDungeonReq& PlayerQuitDungeonReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerQuitDungeonReq* PlayerQuitDungeonReq::New(::google::protobuf::Arena* arena) const {
  PlayerQuitDungeonReq* n = new PlayerQuitDungeonReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerQuitDungeonReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PlayerQuitDungeonReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_id_ = 0u;
  _internal_metadata_.Clear();
}

bool PlayerQuitDungeonReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PlayerQuitDungeonReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 point_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PlayerQuitDungeonReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PlayerQuitDungeonReq)
  return false;
#undef DO_
}

void PlayerQuitDungeonReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PlayerQuitDungeonReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 point_id = 1;
  if (this->point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->point_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PlayerQuitDungeonReq)
}

::google::protobuf::uint8* PlayerQuitDungeonReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PlayerQuitDungeonReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 point_id = 1;
  if (this->point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->point_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PlayerQuitDungeonReq)
  return target;
}

size_t PlayerQuitDungeonReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PlayerQuitDungeonReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 point_id = 1;
  if (this->point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerQuitDungeonReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PlayerQuitDungeonReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerQuitDungeonReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerQuitDungeonReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PlayerQuitDungeonReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PlayerQuitDungeonReq)
    MergeFrom(*source);
  }
}

void PlayerQuitDungeonReq::MergeFrom(const PlayerQuitDungeonReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PlayerQuitDungeonReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.point_id() != 0) {
    set_point_id(from.point_id());
  }
}

void PlayerQuitDungeonReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PlayerQuitDungeonReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerQuitDungeonReq::CopyFrom(const PlayerQuitDungeonReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PlayerQuitDungeonReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerQuitDungeonReq::IsInitialized() const {
  return true;
}

void PlayerQuitDungeonReq::Swap(PlayerQuitDungeonReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerQuitDungeonReq::InternalSwap(PlayerQuitDungeonReq* other) {
  using std::swap;
  swap(point_id_, other->point_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerQuitDungeonReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerQuitDungeonReq

// uint32 point_id = 1;
void PlayerQuitDungeonReq::clear_point_id() {
  point_id_ = 0u;
}
::google::protobuf::uint32 PlayerQuitDungeonReq::point_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayerQuitDungeonReq.point_id)
  return point_id_;
}
void PlayerQuitDungeonReq::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerQuitDungeonReq.point_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerQuitDungeonRsp::kRetcodeFieldNumber;
const int PlayerQuitDungeonRsp::kPointIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerQuitDungeonRsp::PlayerQuitDungeonRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PlayerQuitDungeonRsp)
}
PlayerQuitDungeonRsp::PlayerQuitDungeonRsp(const PlayerQuitDungeonRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&point_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(point_id_));
  // @@protoc_insertion_point(copy_constructor:proto.PlayerQuitDungeonRsp)
}

void PlayerQuitDungeonRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(point_id_));
  _cached_size_ = 0;
}

PlayerQuitDungeonRsp::~PlayerQuitDungeonRsp() {
  // @@protoc_insertion_point(destructor:proto.PlayerQuitDungeonRsp)
  SharedDtor();
}

void PlayerQuitDungeonRsp::SharedDtor() {
}

void PlayerQuitDungeonRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerQuitDungeonRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerQuitDungeonRsp& PlayerQuitDungeonRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerQuitDungeonRsp* PlayerQuitDungeonRsp::New(::google::protobuf::Arena* arena) const {
  PlayerQuitDungeonRsp* n = new PlayerQuitDungeonRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerQuitDungeonRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PlayerQuitDungeonRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(point_id_));
  _internal_metadata_.Clear();
}

bool PlayerQuitDungeonRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PlayerQuitDungeonRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 point_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PlayerQuitDungeonRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PlayerQuitDungeonRsp)
  return false;
#undef DO_
}

void PlayerQuitDungeonRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PlayerQuitDungeonRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 point_id = 2;
  if (this->point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->point_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PlayerQuitDungeonRsp)
}

::google::protobuf::uint8* PlayerQuitDungeonRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PlayerQuitDungeonRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 point_id = 2;
  if (this->point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->point_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PlayerQuitDungeonRsp)
  return target;
}

size_t PlayerQuitDungeonRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PlayerQuitDungeonRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 point_id = 2;
  if (this->point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerQuitDungeonRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PlayerQuitDungeonRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerQuitDungeonRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerQuitDungeonRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PlayerQuitDungeonRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PlayerQuitDungeonRsp)
    MergeFrom(*source);
  }
}

void PlayerQuitDungeonRsp::MergeFrom(const PlayerQuitDungeonRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PlayerQuitDungeonRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.point_id() != 0) {
    set_point_id(from.point_id());
  }
}

void PlayerQuitDungeonRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PlayerQuitDungeonRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerQuitDungeonRsp::CopyFrom(const PlayerQuitDungeonRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PlayerQuitDungeonRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerQuitDungeonRsp::IsInitialized() const {
  return true;
}

void PlayerQuitDungeonRsp::Swap(PlayerQuitDungeonRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerQuitDungeonRsp::InternalSwap(PlayerQuitDungeonRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(point_id_, other->point_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerQuitDungeonRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerQuitDungeonRsp

// int32 retcode = 1;
void PlayerQuitDungeonRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 PlayerQuitDungeonRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.PlayerQuitDungeonRsp.retcode)
  return retcode_;
}
void PlayerQuitDungeonRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerQuitDungeonRsp.retcode)
}

// uint32 point_id = 2;
void PlayerQuitDungeonRsp::clear_point_id() {
  point_id_ = 0u;
}
::google::protobuf::uint32 PlayerQuitDungeonRsp::point_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayerQuitDungeonRsp.point_id)
  return point_id_;
}
void PlayerQuitDungeonRsp::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerQuitDungeonRsp.point_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonWayPointNotify::kActiveWayPointListFieldNumber;
const int DungeonWayPointNotify::kIsAddFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonWayPointNotify::DungeonWayPointNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonWayPointNotify)
}
DungeonWayPointNotify::DungeonWayPointNotify(const DungeonWayPointNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      active_way_point_list_(from.active_way_point_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_add_ = from.is_add_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonWayPointNotify)
}

void DungeonWayPointNotify::SharedCtor() {
  is_add_ = false;
  _cached_size_ = 0;
}

DungeonWayPointNotify::~DungeonWayPointNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonWayPointNotify)
  SharedDtor();
}

void DungeonWayPointNotify::SharedDtor() {
}

void DungeonWayPointNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonWayPointNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonWayPointNotify& DungeonWayPointNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonWayPointNotify* DungeonWayPointNotify::New(::google::protobuf::Arena* arena) const {
  DungeonWayPointNotify* n = new DungeonWayPointNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonWayPointNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonWayPointNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  active_way_point_list_.Clear();
  is_add_ = false;
  _internal_metadata_.Clear();
}

bool DungeonWayPointNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonWayPointNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 active_way_point_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_active_way_point_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_active_way_point_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_add = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_add_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonWayPointNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonWayPointNotify)
  return false;
#undef DO_
}

void DungeonWayPointNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonWayPointNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 active_way_point_list = 1;
  if (this->active_way_point_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _active_way_point_list_cached_byte_size_));
  }
  for (int i = 0, n = this->active_way_point_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->active_way_point_list(i), output);
  }

  // bool is_add = 2;
  if (this->is_add() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_add(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonWayPointNotify)
}

::google::protobuf::uint8* DungeonWayPointNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonWayPointNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 active_way_point_list = 1;
  if (this->active_way_point_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _active_way_point_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->active_way_point_list_, target);
  }

  // bool is_add = 2;
  if (this->is_add() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_add(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonWayPointNotify)
  return target;
}

size_t DungeonWayPointNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonWayPointNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 active_way_point_list = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->active_way_point_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _active_way_point_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bool is_add = 2;
  if (this->is_add() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonWayPointNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonWayPointNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonWayPointNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonWayPointNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonWayPointNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonWayPointNotify)
    MergeFrom(*source);
  }
}

void DungeonWayPointNotify::MergeFrom(const DungeonWayPointNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonWayPointNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  active_way_point_list_.MergeFrom(from.active_way_point_list_);
  if (from.is_add() != 0) {
    set_is_add(from.is_add());
  }
}

void DungeonWayPointNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonWayPointNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonWayPointNotify::CopyFrom(const DungeonWayPointNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonWayPointNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonWayPointNotify::IsInitialized() const {
  return true;
}

void DungeonWayPointNotify::Swap(DungeonWayPointNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonWayPointNotify::InternalSwap(DungeonWayPointNotify* other) {
  using std::swap;
  active_way_point_list_.InternalSwap(&other->active_way_point_list_);
  swap(is_add_, other->is_add_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonWayPointNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonWayPointNotify

// repeated uint32 active_way_point_list = 1;
int DungeonWayPointNotify::active_way_point_list_size() const {
  return active_way_point_list_.size();
}
void DungeonWayPointNotify::clear_active_way_point_list() {
  active_way_point_list_.Clear();
}
::google::protobuf::uint32 DungeonWayPointNotify::active_way_point_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonWayPointNotify.active_way_point_list)
  return active_way_point_list_.Get(index);
}
void DungeonWayPointNotify::set_active_way_point_list(int index, ::google::protobuf::uint32 value) {
  active_way_point_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.DungeonWayPointNotify.active_way_point_list)
}
void DungeonWayPointNotify::add_active_way_point_list(::google::protobuf::uint32 value) {
  active_way_point_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.DungeonWayPointNotify.active_way_point_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DungeonWayPointNotify::active_way_point_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonWayPointNotify.active_way_point_list)
  return active_way_point_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DungeonWayPointNotify::mutable_active_way_point_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonWayPointNotify.active_way_point_list)
  return &active_way_point_list_;
}

// bool is_add = 2;
void DungeonWayPointNotify::clear_is_add() {
  is_add_ = false;
}
bool DungeonWayPointNotify::is_add() const {
  // @@protoc_insertion_point(field_get:proto.DungeonWayPointNotify.is_add)
  return is_add_;
}
void DungeonWayPointNotify::set_is_add(bool value) {
  
  is_add_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonWayPointNotify.is_add)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonWayPointActivateReq::kWayPointIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonWayPointActivateReq::DungeonWayPointActivateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonWayPointActivateReq)
}
DungeonWayPointActivateReq::DungeonWayPointActivateReq(const DungeonWayPointActivateReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  way_point_id_ = from.way_point_id_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonWayPointActivateReq)
}

void DungeonWayPointActivateReq::SharedCtor() {
  way_point_id_ = 0u;
  _cached_size_ = 0;
}

DungeonWayPointActivateReq::~DungeonWayPointActivateReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonWayPointActivateReq)
  SharedDtor();
}

void DungeonWayPointActivateReq::SharedDtor() {
}

void DungeonWayPointActivateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonWayPointActivateReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonWayPointActivateReq& DungeonWayPointActivateReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonWayPointActivateReq* DungeonWayPointActivateReq::New(::google::protobuf::Arena* arena) const {
  DungeonWayPointActivateReq* n = new DungeonWayPointActivateReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonWayPointActivateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonWayPointActivateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  way_point_id_ = 0u;
  _internal_metadata_.Clear();
}

bool DungeonWayPointActivateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonWayPointActivateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 way_point_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &way_point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonWayPointActivateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonWayPointActivateReq)
  return false;
#undef DO_
}

void DungeonWayPointActivateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonWayPointActivateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 way_point_id = 1;
  if (this->way_point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->way_point_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonWayPointActivateReq)
}

::google::protobuf::uint8* DungeonWayPointActivateReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonWayPointActivateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 way_point_id = 1;
  if (this->way_point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->way_point_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonWayPointActivateReq)
  return target;
}

size_t DungeonWayPointActivateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonWayPointActivateReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 way_point_id = 1;
  if (this->way_point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->way_point_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonWayPointActivateReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonWayPointActivateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonWayPointActivateReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonWayPointActivateReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonWayPointActivateReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonWayPointActivateReq)
    MergeFrom(*source);
  }
}

void DungeonWayPointActivateReq::MergeFrom(const DungeonWayPointActivateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonWayPointActivateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.way_point_id() != 0) {
    set_way_point_id(from.way_point_id());
  }
}

void DungeonWayPointActivateReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonWayPointActivateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonWayPointActivateReq::CopyFrom(const DungeonWayPointActivateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonWayPointActivateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonWayPointActivateReq::IsInitialized() const {
  return true;
}

void DungeonWayPointActivateReq::Swap(DungeonWayPointActivateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonWayPointActivateReq::InternalSwap(DungeonWayPointActivateReq* other) {
  using std::swap;
  swap(way_point_id_, other->way_point_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonWayPointActivateReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonWayPointActivateReq

// uint32 way_point_id = 1;
void DungeonWayPointActivateReq::clear_way_point_id() {
  way_point_id_ = 0u;
}
::google::protobuf::uint32 DungeonWayPointActivateReq::way_point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonWayPointActivateReq.way_point_id)
  return way_point_id_;
}
void DungeonWayPointActivateReq::set_way_point_id(::google::protobuf::uint32 value) {
  
  way_point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonWayPointActivateReq.way_point_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonWayPointActivateRsp::kRetcodeFieldNumber;
const int DungeonWayPointActivateRsp::kWayPointIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonWayPointActivateRsp::DungeonWayPointActivateRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonWayPointActivateRsp)
}
DungeonWayPointActivateRsp::DungeonWayPointActivateRsp(const DungeonWayPointActivateRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&way_point_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(way_point_id_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonWayPointActivateRsp)
}

void DungeonWayPointActivateRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&way_point_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(way_point_id_));
  _cached_size_ = 0;
}

DungeonWayPointActivateRsp::~DungeonWayPointActivateRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonWayPointActivateRsp)
  SharedDtor();
}

void DungeonWayPointActivateRsp::SharedDtor() {
}

void DungeonWayPointActivateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonWayPointActivateRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonWayPointActivateRsp& DungeonWayPointActivateRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonWayPointActivateRsp* DungeonWayPointActivateRsp::New(::google::protobuf::Arena* arena) const {
  DungeonWayPointActivateRsp* n = new DungeonWayPointActivateRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonWayPointActivateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonWayPointActivateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&way_point_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(way_point_id_));
  _internal_metadata_.Clear();
}

bool DungeonWayPointActivateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonWayPointActivateRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 way_point_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &way_point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonWayPointActivateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonWayPointActivateRsp)
  return false;
#undef DO_
}

void DungeonWayPointActivateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonWayPointActivateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 way_point_id = 2;
  if (this->way_point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->way_point_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonWayPointActivateRsp)
}

::google::protobuf::uint8* DungeonWayPointActivateRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonWayPointActivateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 way_point_id = 2;
  if (this->way_point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->way_point_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonWayPointActivateRsp)
  return target;
}

size_t DungeonWayPointActivateRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonWayPointActivateRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 way_point_id = 2;
  if (this->way_point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->way_point_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonWayPointActivateRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonWayPointActivateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonWayPointActivateRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonWayPointActivateRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonWayPointActivateRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonWayPointActivateRsp)
    MergeFrom(*source);
  }
}

void DungeonWayPointActivateRsp::MergeFrom(const DungeonWayPointActivateRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonWayPointActivateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.way_point_id() != 0) {
    set_way_point_id(from.way_point_id());
  }
}

void DungeonWayPointActivateRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonWayPointActivateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonWayPointActivateRsp::CopyFrom(const DungeonWayPointActivateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonWayPointActivateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonWayPointActivateRsp::IsInitialized() const {
  return true;
}

void DungeonWayPointActivateRsp::Swap(DungeonWayPointActivateRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonWayPointActivateRsp::InternalSwap(DungeonWayPointActivateRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(way_point_id_, other->way_point_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonWayPointActivateRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonWayPointActivateRsp

// int32 retcode = 1;
void DungeonWayPointActivateRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonWayPointActivateRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonWayPointActivateRsp.retcode)
  return retcode_;
}
void DungeonWayPointActivateRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonWayPointActivateRsp.retcode)
}

// uint32 way_point_id = 2;
void DungeonWayPointActivateRsp::clear_way_point_id() {
  way_point_id_ = 0u;
}
::google::protobuf::uint32 DungeonWayPointActivateRsp::way_point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonWayPointActivateRsp.way_point_id)
  return way_point_id_;
}
void DungeonWayPointActivateRsp::set_way_point_id(::google::protobuf::uint32 value) {
  
  way_point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonWayPointActivateRsp.way_point_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

DungeonSettleNotify::DungeonSettleNotify_SettleShowEntry::DungeonSettleNotify_SettleShowEntry() {}
DungeonSettleNotify::DungeonSettleNotify_SettleShowEntry::DungeonSettleNotify_SettleShowEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata DungeonSettleNotify::DungeonSettleNotify_SettleShowEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[10];
}
void DungeonSettleNotify::DungeonSettleNotify_SettleShowEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void DungeonSettleNotify::DungeonSettleNotify_SettleShowEntry::MergeFrom(const DungeonSettleNotify_SettleShowEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonSettleNotify::kDungeonIdFieldNumber;
const int DungeonSettleNotify::kIsSuccessFieldNumber;
const int DungeonSettleNotify::kFailCondListFieldNumber;
const int DungeonSettleNotify::kSettleShowFieldNumber;
const int DungeonSettleNotify::kCloseTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonSettleNotify::DungeonSettleNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonSettleNotify)
}
DungeonSettleNotify::DungeonSettleNotify(const DungeonSettleNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fail_cond_list_(from.fail_cond_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  settle_show_.MergeFrom(from.settle_show_);
  ::memcpy(&dungeon_id_, &from.dungeon_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&close_time_) -
    reinterpret_cast<char*>(&dungeon_id_)) + sizeof(close_time_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonSettleNotify)
}

void DungeonSettleNotify::SharedCtor() {
  ::memset(&dungeon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&close_time_) -
      reinterpret_cast<char*>(&dungeon_id_)) + sizeof(close_time_));
  _cached_size_ = 0;
}

DungeonSettleNotify::~DungeonSettleNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonSettleNotify)
  SharedDtor();
}

void DungeonSettleNotify::SharedDtor() {
}

void DungeonSettleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonSettleNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonSettleNotify& DungeonSettleNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonSettleNotify* DungeonSettleNotify::New(::google::protobuf::Arena* arena) const {
  DungeonSettleNotify* n = new DungeonSettleNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonSettleNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonSettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fail_cond_list_.Clear();
  settle_show_.Clear();
  ::memset(&dungeon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&close_time_) -
      reinterpret_cast<char*>(&dungeon_id_)) + sizeof(close_time_));
  _internal_metadata_.Clear();
}

bool DungeonSettleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonSettleNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dungeon_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 fail_cond_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fail_cond_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_fail_cond_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .proto.ParamList> settle_show = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DungeonSettleNotify_SettleShowEntry::Parser< ::google::protobuf::internal::MapField<
              DungeonSettleNotify_SettleShowEntry,
              ::google::protobuf::uint32, ::proto::ParamList,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList > > parser(&settle_show_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 close_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &close_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonSettleNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonSettleNotify)
  return false;
#undef DO_
}

void DungeonSettleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonSettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dungeon_id = 1;
  if (this->dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dungeon_id(), output);
  }

  // bool is_success = 2;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_success(), output);
  }

  // repeated uint32 fail_cond_list = 3;
  if (this->fail_cond_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _fail_cond_list_cached_byte_size_));
  }
  for (int i = 0, n = this->fail_cond_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->fail_cond_list(i), output);
  }

  // map<uint32, .proto.ParamList> settle_show = 4;
  if (!this->settle_show().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->settle_show().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->settle_show().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >::const_iterator
          it = this->settle_show().begin();
          it != this->settle_show().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<DungeonSettleNotify_SettleShowEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(settle_show_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<DungeonSettleNotify_SettleShowEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >::const_iterator
          it = this->settle_show().begin();
          it != this->settle_show().end(); ++it) {
        entry.reset(settle_show_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    }
  }

  // uint32 close_time = 5;
  if (this->close_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->close_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonSettleNotify)
}

::google::protobuf::uint8* DungeonSettleNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonSettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dungeon_id = 1;
  if (this->dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dungeon_id(), target);
  }

  // bool is_success = 2;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_success(), target);
  }

  // repeated uint32 fail_cond_list = 3;
  if (this->fail_cond_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _fail_cond_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->fail_cond_list_, target);
  }

  // map<uint32, .proto.ParamList> settle_show = 4;
  if (!this->settle_show().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->settle_show().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->settle_show().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >::const_iterator
          it = this->settle_show().begin();
          it != this->settle_show().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<DungeonSettleNotify_SettleShowEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(settle_show_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<DungeonSettleNotify_SettleShowEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >::const_iterator
          it = this->settle_show().begin();
          it != this->settle_show().end(); ++it) {
        entry.reset(settle_show_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    }
  }

  // uint32 close_time = 5;
  if (this->close_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->close_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonSettleNotify)
  return target;
}

size_t DungeonSettleNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonSettleNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 fail_cond_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->fail_cond_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fail_cond_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<uint32, .proto.ParamList> settle_show = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->settle_show_size());
  {
    ::google::protobuf::scoped_ptr<DungeonSettleNotify_SettleShowEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >::const_iterator
        it = this->settle_show().begin();
        it != this->settle_show().end(); ++it) {
      entry.reset(settle_show_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 dungeon_id = 1;
  if (this->dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_id());
  }

  // bool is_success = 2;
  if (this->is_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 close_time = 5;
  if (this->close_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->close_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonSettleNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonSettleNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonSettleNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonSettleNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonSettleNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonSettleNotify)
    MergeFrom(*source);
  }
}

void DungeonSettleNotify::MergeFrom(const DungeonSettleNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonSettleNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fail_cond_list_.MergeFrom(from.fail_cond_list_);
  settle_show_.MergeFrom(from.settle_show_);
  if (from.dungeon_id() != 0) {
    set_dungeon_id(from.dungeon_id());
  }
  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
  if (from.close_time() != 0) {
    set_close_time(from.close_time());
  }
}

void DungeonSettleNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonSettleNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonSettleNotify::CopyFrom(const DungeonSettleNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonSettleNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonSettleNotify::IsInitialized() const {
  return true;
}

void DungeonSettleNotify::Swap(DungeonSettleNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonSettleNotify::InternalSwap(DungeonSettleNotify* other) {
  using std::swap;
  fail_cond_list_.InternalSwap(&other->fail_cond_list_);
  settle_show_.Swap(&other->settle_show_);
  swap(dungeon_id_, other->dungeon_id_);
  swap(is_success_, other->is_success_);
  swap(close_time_, other->close_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonSettleNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonSettleNotify

// uint32 dungeon_id = 1;
void DungeonSettleNotify::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
::google::protobuf::uint32 DungeonSettleNotify::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.dungeon_id)
  return dungeon_id_;
}
void DungeonSettleNotify::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonSettleNotify.dungeon_id)
}

// bool is_success = 2;
void DungeonSettleNotify::clear_is_success() {
  is_success_ = false;
}
bool DungeonSettleNotify::is_success() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.is_success)
  return is_success_;
}
void DungeonSettleNotify::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonSettleNotify.is_success)
}

// repeated uint32 fail_cond_list = 3;
int DungeonSettleNotify::fail_cond_list_size() const {
  return fail_cond_list_.size();
}
void DungeonSettleNotify::clear_fail_cond_list() {
  fail_cond_list_.Clear();
}
::google::protobuf::uint32 DungeonSettleNotify::fail_cond_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.fail_cond_list)
  return fail_cond_list_.Get(index);
}
void DungeonSettleNotify::set_fail_cond_list(int index, ::google::protobuf::uint32 value) {
  fail_cond_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.DungeonSettleNotify.fail_cond_list)
}
void DungeonSettleNotify::add_fail_cond_list(::google::protobuf::uint32 value) {
  fail_cond_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.DungeonSettleNotify.fail_cond_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DungeonSettleNotify::fail_cond_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonSettleNotify.fail_cond_list)
  return fail_cond_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DungeonSettleNotify::mutable_fail_cond_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonSettleNotify.fail_cond_list)
  return &fail_cond_list_;
}

// map<uint32, .proto.ParamList> settle_show = 4;
int DungeonSettleNotify::settle_show_size() const {
  return settle_show_.size();
}
void DungeonSettleNotify::clear_settle_show() {
  settle_show_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >&
DungeonSettleNotify::settle_show() const {
  // @@protoc_insertion_point(field_map:proto.DungeonSettleNotify.settle_show)
  return settle_show_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >*
DungeonSettleNotify::mutable_settle_show() {
  // @@protoc_insertion_point(field_mutable_map:proto.DungeonSettleNotify.settle_show)
  return settle_show_.MutableMap();
}

// uint32 close_time = 5;
void DungeonSettleNotify::clear_close_time() {
  close_time_ = 0u;
}
::google::protobuf::uint32 DungeonSettleNotify::close_time() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.close_time)
  return close_time_;
}
void DungeonSettleNotify::set_close_time(::google::protobuf::uint32 value) {
  
  close_time_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonSettleNotify.close_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonPlayerDieNotify::kDungeonIdFieldNumber;
const int DungeonPlayerDieNotify::kDieTypeFieldNumber;
const int DungeonPlayerDieNotify::kReviveCountFieldNumber;
const int DungeonPlayerDieNotify::kWaitTimeFieldNumber;
const int DungeonPlayerDieNotify::kMurdererEntityIdFieldNumber;
const int DungeonPlayerDieNotify::kMonsterIdFieldNumber;
const int DungeonPlayerDieNotify::kGadgetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonPlayerDieNotify::DungeonPlayerDieNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonPlayerDieNotify)
}
DungeonPlayerDieNotify::DungeonPlayerDieNotify(const DungeonPlayerDieNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dungeon_id_, &from.dungeon_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&murderer_entity_id_) -
    reinterpret_cast<char*>(&dungeon_id_)) + sizeof(murderer_entity_id_));
  clear_has_entity();
  switch (from.entity_case()) {
    case kMonsterId: {
      set_monster_id(from.monster_id());
      break;
    }
    case kGadgetId: {
      set_gadget_id(from.gadget_id());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.DungeonPlayerDieNotify)
}

void DungeonPlayerDieNotify::SharedCtor() {
  ::memset(&dungeon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&murderer_entity_id_) -
      reinterpret_cast<char*>(&dungeon_id_)) + sizeof(murderer_entity_id_));
  clear_has_entity();
  _cached_size_ = 0;
}

DungeonPlayerDieNotify::~DungeonPlayerDieNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonPlayerDieNotify)
  SharedDtor();
}

void DungeonPlayerDieNotify::SharedDtor() {
  if (has_entity()) {
    clear_entity();
  }
}

void DungeonPlayerDieNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonPlayerDieNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonPlayerDieNotify& DungeonPlayerDieNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonPlayerDieNotify* DungeonPlayerDieNotify::New(::google::protobuf::Arena* arena) const {
  DungeonPlayerDieNotify* n = new DungeonPlayerDieNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonPlayerDieNotify::clear_entity() {
// @@protoc_insertion_point(one_of_clear_start:proto.DungeonPlayerDieNotify)
  switch (entity_case()) {
    case kMonsterId: {
      // No need to clear
      break;
    }
    case kGadgetId: {
      // No need to clear
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTITY_NOT_SET;
}


void DungeonPlayerDieNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonPlayerDieNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dungeon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&murderer_entity_id_) -
      reinterpret_cast<char*>(&dungeon_id_)) + sizeof(murderer_entity_id_));
  clear_entity();
  _internal_metadata_.Clear();
}

bool DungeonPlayerDieNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonPlayerDieNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dungeon_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.PlayerDieType die_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_die_type(static_cast< ::proto::PlayerDieType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 revive_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revive_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wait_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wait_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 murderer_entity_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &murderer_entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 monster_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          clear_entity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entity_.monster_id_)));
          set_has_monster_id();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gadget_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          clear_entity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entity_.gadget_id_)));
          set_has_gadget_id();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonPlayerDieNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonPlayerDieNotify)
  return false;
#undef DO_
}

void DungeonPlayerDieNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonPlayerDieNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dungeon_id = 1;
  if (this->dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dungeon_id(), output);
  }

  // .proto.PlayerDieType die_type = 2;
  if (this->die_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->die_type(), output);
  }

  // uint32 revive_count = 3;
  if (this->revive_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->revive_count(), output);
  }

  // uint32 wait_time = 4;
  if (this->wait_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wait_time(), output);
  }

  // uint32 murderer_entity_id = 5;
  if (this->murderer_entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->murderer_entity_id(), output);
  }

  // uint32 monster_id = 6;
  if (has_monster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->monster_id(), output);
  }

  // uint32 gadget_id = 7;
  if (has_gadget_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gadget_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonPlayerDieNotify)
}

::google::protobuf::uint8* DungeonPlayerDieNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonPlayerDieNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dungeon_id = 1;
  if (this->dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dungeon_id(), target);
  }

  // .proto.PlayerDieType die_type = 2;
  if (this->die_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->die_type(), target);
  }

  // uint32 revive_count = 3;
  if (this->revive_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->revive_count(), target);
  }

  // uint32 wait_time = 4;
  if (this->wait_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wait_time(), target);
  }

  // uint32 murderer_entity_id = 5;
  if (this->murderer_entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->murderer_entity_id(), target);
  }

  // uint32 monster_id = 6;
  if (has_monster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->monster_id(), target);
  }

  // uint32 gadget_id = 7;
  if (has_gadget_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gadget_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonPlayerDieNotify)
  return target;
}

size_t DungeonPlayerDieNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonPlayerDieNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dungeon_id = 1;
  if (this->dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_id());
  }

  // .proto.PlayerDieType die_type = 2;
  if (this->die_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->die_type());
  }

  // uint32 revive_count = 3;
  if (this->revive_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->revive_count());
  }

  // uint32 wait_time = 4;
  if (this->wait_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wait_time());
  }

  // uint32 murderer_entity_id = 5;
  if (this->murderer_entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->murderer_entity_id());
  }

  switch (entity_case()) {
    // uint32 monster_id = 6;
    case kMonsterId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_id());
      break;
    }
    // uint32 gadget_id = 7;
    case kGadgetId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gadget_id());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonPlayerDieNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonPlayerDieNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonPlayerDieNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonPlayerDieNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonPlayerDieNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonPlayerDieNotify)
    MergeFrom(*source);
  }
}

void DungeonPlayerDieNotify::MergeFrom(const DungeonPlayerDieNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonPlayerDieNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dungeon_id() != 0) {
    set_dungeon_id(from.dungeon_id());
  }
  if (from.die_type() != 0) {
    set_die_type(from.die_type());
  }
  if (from.revive_count() != 0) {
    set_revive_count(from.revive_count());
  }
  if (from.wait_time() != 0) {
    set_wait_time(from.wait_time());
  }
  if (from.murderer_entity_id() != 0) {
    set_murderer_entity_id(from.murderer_entity_id());
  }
  switch (from.entity_case()) {
    case kMonsterId: {
      set_monster_id(from.monster_id());
      break;
    }
    case kGadgetId: {
      set_gadget_id(from.gadget_id());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
}

void DungeonPlayerDieNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonPlayerDieNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonPlayerDieNotify::CopyFrom(const DungeonPlayerDieNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonPlayerDieNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonPlayerDieNotify::IsInitialized() const {
  return true;
}

void DungeonPlayerDieNotify::Swap(DungeonPlayerDieNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonPlayerDieNotify::InternalSwap(DungeonPlayerDieNotify* other) {
  using std::swap;
  swap(dungeon_id_, other->dungeon_id_);
  swap(die_type_, other->die_type_);
  swap(revive_count_, other->revive_count_);
  swap(wait_time_, other->wait_time_);
  swap(murderer_entity_id_, other->murderer_entity_id_);
  swap(entity_, other->entity_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonPlayerDieNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonPlayerDieNotify

// uint32 dungeon_id = 1;
void DungeonPlayerDieNotify::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
::google::protobuf::uint32 DungeonPlayerDieNotify::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieNotify.dungeon_id)
  return dungeon_id_;
}
void DungeonPlayerDieNotify::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieNotify.dungeon_id)
}

// .proto.PlayerDieType die_type = 2;
void DungeonPlayerDieNotify::clear_die_type() {
  die_type_ = 0;
}
::proto::PlayerDieType DungeonPlayerDieNotify::die_type() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieNotify.die_type)
  return static_cast< ::proto::PlayerDieType >(die_type_);
}
void DungeonPlayerDieNotify::set_die_type(::proto::PlayerDieType value) {
  
  die_type_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieNotify.die_type)
}

// uint32 revive_count = 3;
void DungeonPlayerDieNotify::clear_revive_count() {
  revive_count_ = 0u;
}
::google::protobuf::uint32 DungeonPlayerDieNotify::revive_count() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieNotify.revive_count)
  return revive_count_;
}
void DungeonPlayerDieNotify::set_revive_count(::google::protobuf::uint32 value) {
  
  revive_count_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieNotify.revive_count)
}

// uint32 wait_time = 4;
void DungeonPlayerDieNotify::clear_wait_time() {
  wait_time_ = 0u;
}
::google::protobuf::uint32 DungeonPlayerDieNotify::wait_time() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieNotify.wait_time)
  return wait_time_;
}
void DungeonPlayerDieNotify::set_wait_time(::google::protobuf::uint32 value) {
  
  wait_time_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieNotify.wait_time)
}

// uint32 murderer_entity_id = 5;
void DungeonPlayerDieNotify::clear_murderer_entity_id() {
  murderer_entity_id_ = 0u;
}
::google::protobuf::uint32 DungeonPlayerDieNotify::murderer_entity_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieNotify.murderer_entity_id)
  return murderer_entity_id_;
}
void DungeonPlayerDieNotify::set_murderer_entity_id(::google::protobuf::uint32 value) {
  
  murderer_entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieNotify.murderer_entity_id)
}

// uint32 monster_id = 6;
bool DungeonPlayerDieNotify::has_monster_id() const {
  return entity_case() == kMonsterId;
}
void DungeonPlayerDieNotify::set_has_monster_id() {
  _oneof_case_[0] = kMonsterId;
}
void DungeonPlayerDieNotify::clear_monster_id() {
  if (has_monster_id()) {
    entity_.monster_id_ = 0u;
    clear_has_entity();
  }
}
::google::protobuf::uint32 DungeonPlayerDieNotify::monster_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieNotify.monster_id)
  if (has_monster_id()) {
    return entity_.monster_id_;
  }
  return 0u;
}
void DungeonPlayerDieNotify::set_monster_id(::google::protobuf::uint32 value) {
  if (!has_monster_id()) {
    clear_entity();
    set_has_monster_id();
  }
  entity_.monster_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieNotify.monster_id)
}

// uint32 gadget_id = 7;
bool DungeonPlayerDieNotify::has_gadget_id() const {
  return entity_case() == kGadgetId;
}
void DungeonPlayerDieNotify::set_has_gadget_id() {
  _oneof_case_[0] = kGadgetId;
}
void DungeonPlayerDieNotify::clear_gadget_id() {
  if (has_gadget_id()) {
    entity_.gadget_id_ = 0u;
    clear_has_entity();
  }
}
::google::protobuf::uint32 DungeonPlayerDieNotify::gadget_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieNotify.gadget_id)
  if (has_gadget_id()) {
    return entity_.gadget_id_;
  }
  return 0u;
}
void DungeonPlayerDieNotify::set_gadget_id(::google::protobuf::uint32 value) {
  if (!has_gadget_id()) {
    clear_entity();
    set_has_gadget_id();
  }
  entity_.gadget_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieNotify.gadget_id)
}

bool DungeonPlayerDieNotify::has_entity() const {
  return entity_case() != ENTITY_NOT_SET;
}
void DungeonPlayerDieNotify::clear_has_entity() {
  _oneof_case_[0] = ENTITY_NOT_SET;
}
DungeonPlayerDieNotify::EntityCase DungeonPlayerDieNotify::entity_case() const {
  return DungeonPlayerDieNotify::EntityCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonDieOptionReq::kDieOptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonDieOptionReq::DungeonDieOptionReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonDieOptionReq)
}
DungeonDieOptionReq::DungeonDieOptionReq(const DungeonDieOptionReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  die_option_ = from.die_option_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonDieOptionReq)
}

void DungeonDieOptionReq::SharedCtor() {
  die_option_ = 0;
  _cached_size_ = 0;
}

DungeonDieOptionReq::~DungeonDieOptionReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonDieOptionReq)
  SharedDtor();
}

void DungeonDieOptionReq::SharedDtor() {
}

void DungeonDieOptionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonDieOptionReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonDieOptionReq& DungeonDieOptionReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonDieOptionReq* DungeonDieOptionReq::New(::google::protobuf::Arena* arena) const {
  DungeonDieOptionReq* n = new DungeonDieOptionReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonDieOptionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonDieOptionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  die_option_ = 0;
  _internal_metadata_.Clear();
}

bool DungeonDieOptionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonDieOptionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.PlayerDieOption die_option = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_die_option(static_cast< ::proto::PlayerDieOption >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonDieOptionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonDieOptionReq)
  return false;
#undef DO_
}

void DungeonDieOptionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonDieOptionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.PlayerDieOption die_option = 1;
  if (this->die_option() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->die_option(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonDieOptionReq)
}

::google::protobuf::uint8* DungeonDieOptionReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonDieOptionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.PlayerDieOption die_option = 1;
  if (this->die_option() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->die_option(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonDieOptionReq)
  return target;
}

size_t DungeonDieOptionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonDieOptionReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.PlayerDieOption die_option = 1;
  if (this->die_option() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->die_option());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonDieOptionReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonDieOptionReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonDieOptionReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonDieOptionReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonDieOptionReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonDieOptionReq)
    MergeFrom(*source);
  }
}

void DungeonDieOptionReq::MergeFrom(const DungeonDieOptionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonDieOptionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.die_option() != 0) {
    set_die_option(from.die_option());
  }
}

void DungeonDieOptionReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonDieOptionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonDieOptionReq::CopyFrom(const DungeonDieOptionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonDieOptionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonDieOptionReq::IsInitialized() const {
  return true;
}

void DungeonDieOptionReq::Swap(DungeonDieOptionReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonDieOptionReq::InternalSwap(DungeonDieOptionReq* other) {
  using std::swap;
  swap(die_option_, other->die_option_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonDieOptionReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonDieOptionReq

// .proto.PlayerDieOption die_option = 1;
void DungeonDieOptionReq::clear_die_option() {
  die_option_ = 0;
}
::proto::PlayerDieOption DungeonDieOptionReq::die_option() const {
  // @@protoc_insertion_point(field_get:proto.DungeonDieOptionReq.die_option)
  return static_cast< ::proto::PlayerDieOption >(die_option_);
}
void DungeonDieOptionReq::set_die_option(::proto::PlayerDieOption value) {
  
  die_option_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonDieOptionReq.die_option)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonDieOptionRsp::kRetcodeFieldNumber;
const int DungeonDieOptionRsp::kDieOptionFieldNumber;
const int DungeonDieOptionRsp::kReviveCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonDieOptionRsp::DungeonDieOptionRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonDieOptionRsp)
}
DungeonDieOptionRsp::DungeonDieOptionRsp(const DungeonDieOptionRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&revive_count_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(revive_count_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonDieOptionRsp)
}

void DungeonDieOptionRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revive_count_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(revive_count_));
  _cached_size_ = 0;
}

DungeonDieOptionRsp::~DungeonDieOptionRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonDieOptionRsp)
  SharedDtor();
}

void DungeonDieOptionRsp::SharedDtor() {
}

void DungeonDieOptionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonDieOptionRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonDieOptionRsp& DungeonDieOptionRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonDieOptionRsp* DungeonDieOptionRsp::New(::google::protobuf::Arena* arena) const {
  DungeonDieOptionRsp* n = new DungeonDieOptionRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonDieOptionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonDieOptionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revive_count_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(revive_count_));
  _internal_metadata_.Clear();
}

bool DungeonDieOptionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonDieOptionRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.PlayerDieOption die_option = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_die_option(static_cast< ::proto::PlayerDieOption >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 revive_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revive_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonDieOptionRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonDieOptionRsp)
  return false;
#undef DO_
}

void DungeonDieOptionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonDieOptionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // .proto.PlayerDieOption die_option = 2;
  if (this->die_option() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->die_option(), output);
  }

  // uint32 revive_count = 3;
  if (this->revive_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->revive_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonDieOptionRsp)
}

::google::protobuf::uint8* DungeonDieOptionRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonDieOptionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // .proto.PlayerDieOption die_option = 2;
  if (this->die_option() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->die_option(), target);
  }

  // uint32 revive_count = 3;
  if (this->revive_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->revive_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonDieOptionRsp)
  return target;
}

size_t DungeonDieOptionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonDieOptionRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // .proto.PlayerDieOption die_option = 2;
  if (this->die_option() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->die_option());
  }

  // uint32 revive_count = 3;
  if (this->revive_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->revive_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonDieOptionRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonDieOptionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonDieOptionRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonDieOptionRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonDieOptionRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonDieOptionRsp)
    MergeFrom(*source);
  }
}

void DungeonDieOptionRsp::MergeFrom(const DungeonDieOptionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonDieOptionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.die_option() != 0) {
    set_die_option(from.die_option());
  }
  if (from.revive_count() != 0) {
    set_revive_count(from.revive_count());
  }
}

void DungeonDieOptionRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonDieOptionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonDieOptionRsp::CopyFrom(const DungeonDieOptionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonDieOptionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonDieOptionRsp::IsInitialized() const {
  return true;
}

void DungeonDieOptionRsp::Swap(DungeonDieOptionRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonDieOptionRsp::InternalSwap(DungeonDieOptionRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(die_option_, other->die_option_);
  swap(revive_count_, other->revive_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonDieOptionRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonDieOptionRsp

// int32 retcode = 1;
void DungeonDieOptionRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonDieOptionRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonDieOptionRsp.retcode)
  return retcode_;
}
void DungeonDieOptionRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonDieOptionRsp.retcode)
}

// .proto.PlayerDieOption die_option = 2;
void DungeonDieOptionRsp::clear_die_option() {
  die_option_ = 0;
}
::proto::PlayerDieOption DungeonDieOptionRsp::die_option() const {
  // @@protoc_insertion_point(field_get:proto.DungeonDieOptionRsp.die_option)
  return static_cast< ::proto::PlayerDieOption >(die_option_);
}
void DungeonDieOptionRsp::set_die_option(::proto::PlayerDieOption value) {
  
  die_option_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonDieOptionRsp.die_option)
}

// uint32 revive_count = 3;
void DungeonDieOptionRsp::clear_revive_count() {
  revive_count_ = 0u;
}
::google::protobuf::uint32 DungeonDieOptionRsp::revive_count() const {
  // @@protoc_insertion_point(field_get:proto.DungeonDieOptionRsp.revive_count)
  return revive_count_;
}
void DungeonDieOptionRsp::set_revive_count(::google::protobuf::uint32 value) {
  
  revive_count_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonDieOptionRsp.revive_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonShowReminderNotify::kReminderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonShowReminderNotify::DungeonShowReminderNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonShowReminderNotify)
}
DungeonShowReminderNotify::DungeonShowReminderNotify(const DungeonShowReminderNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reminder_id_ = from.reminder_id_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonShowReminderNotify)
}

void DungeonShowReminderNotify::SharedCtor() {
  reminder_id_ = 0u;
  _cached_size_ = 0;
}

DungeonShowReminderNotify::~DungeonShowReminderNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonShowReminderNotify)
  SharedDtor();
}

void DungeonShowReminderNotify::SharedDtor() {
}

void DungeonShowReminderNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonShowReminderNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonShowReminderNotify& DungeonShowReminderNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonShowReminderNotify* DungeonShowReminderNotify::New(::google::protobuf::Arena* arena) const {
  DungeonShowReminderNotify* n = new DungeonShowReminderNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonShowReminderNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonShowReminderNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reminder_id_ = 0u;
  _internal_metadata_.Clear();
}

bool DungeonShowReminderNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonShowReminderNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 reminder_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reminder_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonShowReminderNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonShowReminderNotify)
  return false;
#undef DO_
}

void DungeonShowReminderNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonShowReminderNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reminder_id = 1;
  if (this->reminder_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reminder_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonShowReminderNotify)
}

::google::protobuf::uint8* DungeonShowReminderNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonShowReminderNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reminder_id = 1;
  if (this->reminder_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reminder_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonShowReminderNotify)
  return target;
}

size_t DungeonShowReminderNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonShowReminderNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 reminder_id = 1;
  if (this->reminder_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reminder_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonShowReminderNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonShowReminderNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonShowReminderNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonShowReminderNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonShowReminderNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonShowReminderNotify)
    MergeFrom(*source);
  }
}

void DungeonShowReminderNotify::MergeFrom(const DungeonShowReminderNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonShowReminderNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reminder_id() != 0) {
    set_reminder_id(from.reminder_id());
  }
}

void DungeonShowReminderNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonShowReminderNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonShowReminderNotify::CopyFrom(const DungeonShowReminderNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonShowReminderNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonShowReminderNotify::IsInitialized() const {
  return true;
}

void DungeonShowReminderNotify::Swap(DungeonShowReminderNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonShowReminderNotify::InternalSwap(DungeonShowReminderNotify* other) {
  using std::swap;
  swap(reminder_id_, other->reminder_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonShowReminderNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonShowReminderNotify

// uint32 reminder_id = 1;
void DungeonShowReminderNotify::clear_reminder_id() {
  reminder_id_ = 0u;
}
::google::protobuf::uint32 DungeonShowReminderNotify::reminder_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonShowReminderNotify.reminder_id)
  return reminder_id_;
}
void DungeonShowReminderNotify::set_reminder_id(::google::protobuf::uint32 value) {
  
  reminder_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonShowReminderNotify.reminder_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonPlayerDieReq::kDungeonIdFieldNumber;
const int DungeonPlayerDieReq::kDieTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonPlayerDieReq::DungeonPlayerDieReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonPlayerDieReq)
}
DungeonPlayerDieReq::DungeonPlayerDieReq(const DungeonPlayerDieReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dungeon_id_, &from.dungeon_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&die_type_) -
    reinterpret_cast<char*>(&dungeon_id_)) + sizeof(die_type_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonPlayerDieReq)
}

void DungeonPlayerDieReq::SharedCtor() {
  ::memset(&dungeon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&die_type_) -
      reinterpret_cast<char*>(&dungeon_id_)) + sizeof(die_type_));
  _cached_size_ = 0;
}

DungeonPlayerDieReq::~DungeonPlayerDieReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonPlayerDieReq)
  SharedDtor();
}

void DungeonPlayerDieReq::SharedDtor() {
}

void DungeonPlayerDieReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonPlayerDieReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonPlayerDieReq& DungeonPlayerDieReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonPlayerDieReq* DungeonPlayerDieReq::New(::google::protobuf::Arena* arena) const {
  DungeonPlayerDieReq* n = new DungeonPlayerDieReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonPlayerDieReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonPlayerDieReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dungeon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&die_type_) -
      reinterpret_cast<char*>(&dungeon_id_)) + sizeof(die_type_));
  _internal_metadata_.Clear();
}

bool DungeonPlayerDieReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonPlayerDieReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dungeon_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.PlayerDieType die_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_die_type(static_cast< ::proto::PlayerDieType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonPlayerDieReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonPlayerDieReq)
  return false;
#undef DO_
}

void DungeonPlayerDieReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonPlayerDieReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dungeon_id = 1;
  if (this->dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dungeon_id(), output);
  }

  // .proto.PlayerDieType die_type = 2;
  if (this->die_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->die_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonPlayerDieReq)
}

::google::protobuf::uint8* DungeonPlayerDieReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonPlayerDieReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dungeon_id = 1;
  if (this->dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dungeon_id(), target);
  }

  // .proto.PlayerDieType die_type = 2;
  if (this->die_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->die_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonPlayerDieReq)
  return target;
}

size_t DungeonPlayerDieReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonPlayerDieReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dungeon_id = 1;
  if (this->dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_id());
  }

  // .proto.PlayerDieType die_type = 2;
  if (this->die_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->die_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonPlayerDieReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonPlayerDieReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonPlayerDieReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonPlayerDieReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonPlayerDieReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonPlayerDieReq)
    MergeFrom(*source);
  }
}

void DungeonPlayerDieReq::MergeFrom(const DungeonPlayerDieReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonPlayerDieReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dungeon_id() != 0) {
    set_dungeon_id(from.dungeon_id());
  }
  if (from.die_type() != 0) {
    set_die_type(from.die_type());
  }
}

void DungeonPlayerDieReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonPlayerDieReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonPlayerDieReq::CopyFrom(const DungeonPlayerDieReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonPlayerDieReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonPlayerDieReq::IsInitialized() const {
  return true;
}

void DungeonPlayerDieReq::Swap(DungeonPlayerDieReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonPlayerDieReq::InternalSwap(DungeonPlayerDieReq* other) {
  using std::swap;
  swap(dungeon_id_, other->dungeon_id_);
  swap(die_type_, other->die_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonPlayerDieReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonPlayerDieReq

// uint32 dungeon_id = 1;
void DungeonPlayerDieReq::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
::google::protobuf::uint32 DungeonPlayerDieReq::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieReq.dungeon_id)
  return dungeon_id_;
}
void DungeonPlayerDieReq::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieReq.dungeon_id)
}

// .proto.PlayerDieType die_type = 2;
void DungeonPlayerDieReq::clear_die_type() {
  die_type_ = 0;
}
::proto::PlayerDieType DungeonPlayerDieReq::die_type() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieReq.die_type)
  return static_cast< ::proto::PlayerDieType >(die_type_);
}
void DungeonPlayerDieReq::set_die_type(::proto::PlayerDieType value) {
  
  die_type_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieReq.die_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonPlayerDieRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonPlayerDieRsp::DungeonPlayerDieRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonPlayerDieRsp)
}
DungeonPlayerDieRsp::DungeonPlayerDieRsp(const DungeonPlayerDieRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonPlayerDieRsp)
}

void DungeonPlayerDieRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

DungeonPlayerDieRsp::~DungeonPlayerDieRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonPlayerDieRsp)
  SharedDtor();
}

void DungeonPlayerDieRsp::SharedDtor() {
}

void DungeonPlayerDieRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonPlayerDieRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonPlayerDieRsp& DungeonPlayerDieRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonPlayerDieRsp* DungeonPlayerDieRsp::New(::google::protobuf::Arena* arena) const {
  DungeonPlayerDieRsp* n = new DungeonPlayerDieRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonPlayerDieRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonPlayerDieRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool DungeonPlayerDieRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonPlayerDieRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonPlayerDieRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonPlayerDieRsp)
  return false;
#undef DO_
}

void DungeonPlayerDieRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonPlayerDieRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonPlayerDieRsp)
}

::google::protobuf::uint8* DungeonPlayerDieRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonPlayerDieRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonPlayerDieRsp)
  return target;
}

size_t DungeonPlayerDieRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonPlayerDieRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonPlayerDieRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonPlayerDieRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonPlayerDieRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonPlayerDieRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonPlayerDieRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonPlayerDieRsp)
    MergeFrom(*source);
  }
}

void DungeonPlayerDieRsp::MergeFrom(const DungeonPlayerDieRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonPlayerDieRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void DungeonPlayerDieRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonPlayerDieRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonPlayerDieRsp::CopyFrom(const DungeonPlayerDieRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonPlayerDieRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonPlayerDieRsp::IsInitialized() const {
  return true;
}

void DungeonPlayerDieRsp::Swap(DungeonPlayerDieRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonPlayerDieRsp::InternalSwap(DungeonPlayerDieRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonPlayerDieRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonPlayerDieRsp

// int32 retcode = 1;
void DungeonPlayerDieRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonPlayerDieRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieRsp.retcode)
  return retcode_;
}
void DungeonPlayerDieRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

DungeonDataNotify::DungeonDataNotify_DungeonDataMapEntry::DungeonDataNotify_DungeonDataMapEntry() {}
DungeonDataNotify::DungeonDataNotify_DungeonDataMapEntry::DungeonDataNotify_DungeonDataMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata DungeonDataNotify::DungeonDataNotify_DungeonDataMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[18];
}
void DungeonDataNotify::DungeonDataNotify_DungeonDataMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void DungeonDataNotify::DungeonDataNotify_DungeonDataMapEntry::MergeFrom(const DungeonDataNotify_DungeonDataMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonDataNotify::kDungeonDataMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonDataNotify::DungeonDataNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonDataNotify)
}
DungeonDataNotify::DungeonDataNotify(const DungeonDataNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dungeon_data_map_.MergeFrom(from.dungeon_data_map_);
  // @@protoc_insertion_point(copy_constructor:proto.DungeonDataNotify)
}

void DungeonDataNotify::SharedCtor() {
  _cached_size_ = 0;
}

DungeonDataNotify::~DungeonDataNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonDataNotify)
  SharedDtor();
}

void DungeonDataNotify::SharedDtor() {
}

void DungeonDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonDataNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonDataNotify& DungeonDataNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonDataNotify* DungeonDataNotify::New(::google::protobuf::Arena* arena) const {
  DungeonDataNotify* n = new DungeonDataNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonDataNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dungeon_data_map_.Clear();
  _internal_metadata_.Clear();
}

bool DungeonDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonDataNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint32, uint32> dungeon_data_map = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DungeonDataNotify_DungeonDataMapEntry::Parser< ::google::protobuf::internal::MapField<
              DungeonDataNotify_DungeonDataMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&dungeon_data_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonDataNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonDataNotify)
  return false;
#undef DO_
}

void DungeonDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> dungeon_data_map = 1;
  if (!this->dungeon_data_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->dungeon_data_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->dungeon_data_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->dungeon_data_map().begin();
          it != this->dungeon_data_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<DungeonDataNotify_DungeonDataMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(dungeon_data_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<DungeonDataNotify_DungeonDataMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->dungeon_data_map().begin();
          it != this->dungeon_data_map().end(); ++it) {
        entry.reset(dungeon_data_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonDataNotify)
}

::google::protobuf::uint8* DungeonDataNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> dungeon_data_map = 1;
  if (!this->dungeon_data_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->dungeon_data_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->dungeon_data_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->dungeon_data_map().begin();
          it != this->dungeon_data_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<DungeonDataNotify_DungeonDataMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(dungeon_data_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<DungeonDataNotify_DungeonDataMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->dungeon_data_map().begin();
          it != this->dungeon_data_map().end(); ++it) {
        entry.reset(dungeon_data_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonDataNotify)
  return target;
}

size_t DungeonDataNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonDataNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, uint32> dungeon_data_map = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dungeon_data_map_size());
  {
    ::google::protobuf::scoped_ptr<DungeonDataNotify_DungeonDataMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->dungeon_data_map().begin();
        it != this->dungeon_data_map().end(); ++it) {
      entry.reset(dungeon_data_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonDataNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonDataNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonDataNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonDataNotify)
    MergeFrom(*source);
  }
}

void DungeonDataNotify::MergeFrom(const DungeonDataNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dungeon_data_map_.MergeFrom(from.dungeon_data_map_);
}

void DungeonDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonDataNotify::CopyFrom(const DungeonDataNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonDataNotify::IsInitialized() const {
  return true;
}

void DungeonDataNotify::Swap(DungeonDataNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonDataNotify::InternalSwap(DungeonDataNotify* other) {
  using std::swap;
  dungeon_data_map_.Swap(&other->dungeon_data_map_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonDataNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonDataNotify

// map<uint32, uint32> dungeon_data_map = 1;
int DungeonDataNotify::dungeon_data_map_size() const {
  return dungeon_data_map_.size();
}
void DungeonDataNotify::clear_dungeon_data_map() {
  dungeon_data_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
DungeonDataNotify::dungeon_data_map() const {
  // @@protoc_insertion_point(field_map:proto.DungeonDataNotify.dungeon_data_map)
  return dungeon_data_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
DungeonDataNotify::mutable_dungeon_data_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.DungeonDataNotify.dungeon_data_map)
  return dungeon_data_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonChallengeBeginNotify::kChallengeIdFieldNumber;
const int DungeonChallengeBeginNotify::kChallengeIndexFieldNumber;
const int DungeonChallengeBeginNotify::kParamListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonChallengeBeginNotify::DungeonChallengeBeginNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonChallengeBeginNotify)
}
DungeonChallengeBeginNotify::DungeonChallengeBeginNotify(const DungeonChallengeBeginNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      param_list_(from.param_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&challenge_id_, &from.challenge_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&challenge_index_) -
    reinterpret_cast<char*>(&challenge_id_)) + sizeof(challenge_index_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonChallengeBeginNotify)
}

void DungeonChallengeBeginNotify::SharedCtor() {
  ::memset(&challenge_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&challenge_index_) -
      reinterpret_cast<char*>(&challenge_id_)) + sizeof(challenge_index_));
  _cached_size_ = 0;
}

DungeonChallengeBeginNotify::~DungeonChallengeBeginNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonChallengeBeginNotify)
  SharedDtor();
}

void DungeonChallengeBeginNotify::SharedDtor() {
}

void DungeonChallengeBeginNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonChallengeBeginNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonChallengeBeginNotify& DungeonChallengeBeginNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonChallengeBeginNotify* DungeonChallengeBeginNotify::New(::google::protobuf::Arena* arena) const {
  DungeonChallengeBeginNotify* n = new DungeonChallengeBeginNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonChallengeBeginNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonChallengeBeginNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_list_.Clear();
  ::memset(&challenge_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&challenge_index_) -
      reinterpret_cast<char*>(&challenge_id_)) + sizeof(challenge_index_));
  _internal_metadata_.Clear();
}

bool DungeonChallengeBeginNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonChallengeBeginNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 challenge_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 param_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_param_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_param_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonChallengeBeginNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonChallengeBeginNotify)
  return false;
#undef DO_
}

void DungeonChallengeBeginNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonChallengeBeginNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 challenge_id = 1;
  if (this->challenge_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->challenge_id(), output);
  }

  // uint32 challenge_index = 2;
  if (this->challenge_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->challenge_index(), output);
  }

  // repeated uint32 param_list = 3;
  if (this->param_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _param_list_cached_byte_size_));
  }
  for (int i = 0, n = this->param_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->param_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonChallengeBeginNotify)
}

::google::protobuf::uint8* DungeonChallengeBeginNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonChallengeBeginNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 challenge_id = 1;
  if (this->challenge_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->challenge_id(), target);
  }

  // uint32 challenge_index = 2;
  if (this->challenge_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->challenge_index(), target);
  }

  // repeated uint32 param_list = 3;
  if (this->param_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _param_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->param_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonChallengeBeginNotify)
  return target;
}

size_t DungeonChallengeBeginNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonChallengeBeginNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 param_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->param_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _param_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 challenge_id = 1;
  if (this->challenge_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_id());
  }

  // uint32 challenge_index = 2;
  if (this->challenge_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonChallengeBeginNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonChallengeBeginNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonChallengeBeginNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonChallengeBeginNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonChallengeBeginNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonChallengeBeginNotify)
    MergeFrom(*source);
  }
}

void DungeonChallengeBeginNotify::MergeFrom(const DungeonChallengeBeginNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonChallengeBeginNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  param_list_.MergeFrom(from.param_list_);
  if (from.challenge_id() != 0) {
    set_challenge_id(from.challenge_id());
  }
  if (from.challenge_index() != 0) {
    set_challenge_index(from.challenge_index());
  }
}

void DungeonChallengeBeginNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonChallengeBeginNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonChallengeBeginNotify::CopyFrom(const DungeonChallengeBeginNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonChallengeBeginNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonChallengeBeginNotify::IsInitialized() const {
  return true;
}

void DungeonChallengeBeginNotify::Swap(DungeonChallengeBeginNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonChallengeBeginNotify::InternalSwap(DungeonChallengeBeginNotify* other) {
  using std::swap;
  param_list_.InternalSwap(&other->param_list_);
  swap(challenge_id_, other->challenge_id_);
  swap(challenge_index_, other->challenge_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonChallengeBeginNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonChallengeBeginNotify

// uint32 challenge_id = 1;
void DungeonChallengeBeginNotify::clear_challenge_id() {
  challenge_id_ = 0u;
}
::google::protobuf::uint32 DungeonChallengeBeginNotify::challenge_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeBeginNotify.challenge_id)
  return challenge_id_;
}
void DungeonChallengeBeginNotify::set_challenge_id(::google::protobuf::uint32 value) {
  
  challenge_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeBeginNotify.challenge_id)
}

// uint32 challenge_index = 2;
void DungeonChallengeBeginNotify::clear_challenge_index() {
  challenge_index_ = 0u;
}
::google::protobuf::uint32 DungeonChallengeBeginNotify::challenge_index() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeBeginNotify.challenge_index)
  return challenge_index_;
}
void DungeonChallengeBeginNotify::set_challenge_index(::google::protobuf::uint32 value) {
  
  challenge_index_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeBeginNotify.challenge_index)
}

// repeated uint32 param_list = 3;
int DungeonChallengeBeginNotify::param_list_size() const {
  return param_list_.size();
}
void DungeonChallengeBeginNotify::clear_param_list() {
  param_list_.Clear();
}
::google::protobuf::uint32 DungeonChallengeBeginNotify::param_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeBeginNotify.param_list)
  return param_list_.Get(index);
}
void DungeonChallengeBeginNotify::set_param_list(int index, ::google::protobuf::uint32 value) {
  param_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeBeginNotify.param_list)
}
void DungeonChallengeBeginNotify::add_param_list(::google::protobuf::uint32 value) {
  param_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.DungeonChallengeBeginNotify.param_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DungeonChallengeBeginNotify::param_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonChallengeBeginNotify.param_list)
  return param_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DungeonChallengeBeginNotify::mutable_param_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonChallengeBeginNotify.param_list)
  return &param_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonChallengeFinishNotify::kChallengeIndexFieldNumber;
const int DungeonChallengeFinishNotify::kIsSuccessFieldNumber;
const int DungeonChallengeFinishNotify::kIsNewRecordFieldNumber;
const int DungeonChallengeFinishNotify::kChallengeRecordTypeFieldNumber;
const int DungeonChallengeFinishNotify::kCurrentValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonChallengeFinishNotify::DungeonChallengeFinishNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonChallengeFinishNotify)
}
DungeonChallengeFinishNotify::DungeonChallengeFinishNotify(const DungeonChallengeFinishNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&challenge_index_, &from.challenge_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_value_) -
    reinterpret_cast<char*>(&challenge_index_)) + sizeof(current_value_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonChallengeFinishNotify)
}

void DungeonChallengeFinishNotify::SharedCtor() {
  ::memset(&challenge_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_value_) -
      reinterpret_cast<char*>(&challenge_index_)) + sizeof(current_value_));
  _cached_size_ = 0;
}

DungeonChallengeFinishNotify::~DungeonChallengeFinishNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonChallengeFinishNotify)
  SharedDtor();
}

void DungeonChallengeFinishNotify::SharedDtor() {
}

void DungeonChallengeFinishNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonChallengeFinishNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonChallengeFinishNotify& DungeonChallengeFinishNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonChallengeFinishNotify* DungeonChallengeFinishNotify::New(::google::protobuf::Arena* arena) const {
  DungeonChallengeFinishNotify* n = new DungeonChallengeFinishNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonChallengeFinishNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonChallengeFinishNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&challenge_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_value_) -
      reinterpret_cast<char*>(&challenge_index_)) + sizeof(current_value_));
  _internal_metadata_.Clear();
}

bool DungeonChallengeFinishNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonChallengeFinishNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 challenge_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_new_record = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_record_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_record_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_record_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 current_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonChallengeFinishNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonChallengeFinishNotify)
  return false;
#undef DO_
}

void DungeonChallengeFinishNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonChallengeFinishNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 challenge_index = 1;
  if (this->challenge_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->challenge_index(), output);
  }

  // bool is_success = 2;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_success(), output);
  }

  // bool is_new_record = 3;
  if (this->is_new_record() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_new_record(), output);
  }

  // uint32 challenge_record_type = 4;
  if (this->challenge_record_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->challenge_record_type(), output);
  }

  // uint32 current_value = 5;
  if (this->current_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->current_value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonChallengeFinishNotify)
}

::google::protobuf::uint8* DungeonChallengeFinishNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonChallengeFinishNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 challenge_index = 1;
  if (this->challenge_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->challenge_index(), target);
  }

  // bool is_success = 2;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_success(), target);
  }

  // bool is_new_record = 3;
  if (this->is_new_record() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_new_record(), target);
  }

  // uint32 challenge_record_type = 4;
  if (this->challenge_record_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->challenge_record_type(), target);
  }

  // uint32 current_value = 5;
  if (this->current_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->current_value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonChallengeFinishNotify)
  return target;
}

size_t DungeonChallengeFinishNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonChallengeFinishNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 challenge_index = 1;
  if (this->challenge_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_index());
  }

  // bool is_success = 2;
  if (this->is_success() != 0) {
    total_size += 1 + 1;
  }

  // bool is_new_record = 3;
  if (this->is_new_record() != 0) {
    total_size += 1 + 1;
  }

  // uint32 challenge_record_type = 4;
  if (this->challenge_record_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_record_type());
  }

  // uint32 current_value = 5;
  if (this->current_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->current_value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonChallengeFinishNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonChallengeFinishNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonChallengeFinishNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonChallengeFinishNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonChallengeFinishNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonChallengeFinishNotify)
    MergeFrom(*source);
  }
}

void DungeonChallengeFinishNotify::MergeFrom(const DungeonChallengeFinishNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonChallengeFinishNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.challenge_index() != 0) {
    set_challenge_index(from.challenge_index());
  }
  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
  if (from.is_new_record() != 0) {
    set_is_new_record(from.is_new_record());
  }
  if (from.challenge_record_type() != 0) {
    set_challenge_record_type(from.challenge_record_type());
  }
  if (from.current_value() != 0) {
    set_current_value(from.current_value());
  }
}

void DungeonChallengeFinishNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonChallengeFinishNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonChallengeFinishNotify::CopyFrom(const DungeonChallengeFinishNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonChallengeFinishNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonChallengeFinishNotify::IsInitialized() const {
  return true;
}

void DungeonChallengeFinishNotify::Swap(DungeonChallengeFinishNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonChallengeFinishNotify::InternalSwap(DungeonChallengeFinishNotify* other) {
  using std::swap;
  swap(challenge_index_, other->challenge_index_);
  swap(is_success_, other->is_success_);
  swap(is_new_record_, other->is_new_record_);
  swap(challenge_record_type_, other->challenge_record_type_);
  swap(current_value_, other->current_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonChallengeFinishNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonChallengeFinishNotify

// uint32 challenge_index = 1;
void DungeonChallengeFinishNotify::clear_challenge_index() {
  challenge_index_ = 0u;
}
::google::protobuf::uint32 DungeonChallengeFinishNotify::challenge_index() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.challenge_index)
  return challenge_index_;
}
void DungeonChallengeFinishNotify::set_challenge_index(::google::protobuf::uint32 value) {
  
  challenge_index_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeFinishNotify.challenge_index)
}

// bool is_success = 2;
void DungeonChallengeFinishNotify::clear_is_success() {
  is_success_ = false;
}
bool DungeonChallengeFinishNotify::is_success() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.is_success)
  return is_success_;
}
void DungeonChallengeFinishNotify::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeFinishNotify.is_success)
}

// bool is_new_record = 3;
void DungeonChallengeFinishNotify::clear_is_new_record() {
  is_new_record_ = false;
}
bool DungeonChallengeFinishNotify::is_new_record() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.is_new_record)
  return is_new_record_;
}
void DungeonChallengeFinishNotify::set_is_new_record(bool value) {
  
  is_new_record_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeFinishNotify.is_new_record)
}

// uint32 challenge_record_type = 4;
void DungeonChallengeFinishNotify::clear_challenge_record_type() {
  challenge_record_type_ = 0u;
}
::google::protobuf::uint32 DungeonChallengeFinishNotify::challenge_record_type() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.challenge_record_type)
  return challenge_record_type_;
}
void DungeonChallengeFinishNotify::set_challenge_record_type(::google::protobuf::uint32 value) {
  
  challenge_record_type_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeFinishNotify.challenge_record_type)
}

// uint32 current_value = 5;
void DungeonChallengeFinishNotify::clear_current_value() {
  current_value_ = 0u;
}
::google::protobuf::uint32 DungeonChallengeFinishNotify::current_value() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.current_value)
  return current_value_;
}
void DungeonChallengeFinishNotify::set_current_value(::google::protobuf::uint32 value) {
  
  current_value_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeFinishNotify.current_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChallengeDataNotify::kChallengeIndexFieldNumber;
const int ChallengeDataNotify::kParamIndexFieldNumber;
const int ChallengeDataNotify::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChallengeDataNotify::ChallengeDataNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChallengeDataNotify)
}
ChallengeDataNotify::ChallengeDataNotify(const ChallengeDataNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&challenge_index_, &from.challenge_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&challenge_index_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:proto.ChallengeDataNotify)
}

void ChallengeDataNotify::SharedCtor() {
  ::memset(&challenge_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&challenge_index_)) + sizeof(value_));
  _cached_size_ = 0;
}

ChallengeDataNotify::~ChallengeDataNotify() {
  // @@protoc_insertion_point(destructor:proto.ChallengeDataNotify)
  SharedDtor();
}

void ChallengeDataNotify::SharedDtor() {
}

void ChallengeDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeDataNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChallengeDataNotify& ChallengeDataNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChallengeDataNotify* ChallengeDataNotify::New(::google::protobuf::Arena* arena) const {
  ChallengeDataNotify* n = new ChallengeDataNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChallengeDataNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChallengeDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&challenge_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&challenge_index_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

bool ChallengeDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChallengeDataNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 challenge_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 param_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChallengeDataNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChallengeDataNotify)
  return false;
#undef DO_
}

void ChallengeDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChallengeDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 challenge_index = 1;
  if (this->challenge_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->challenge_index(), output);
  }

  // uint32 param_index = 2;
  if (this->param_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->param_index(), output);
  }

  // uint32 value = 3;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChallengeDataNotify)
}

::google::protobuf::uint8* ChallengeDataNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChallengeDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 challenge_index = 1;
  if (this->challenge_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->challenge_index(), target);
  }

  // uint32 param_index = 2;
  if (this->param_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->param_index(), target);
  }

  // uint32 value = 3;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChallengeDataNotify)
  return target;
}

size_t ChallengeDataNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChallengeDataNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 challenge_index = 1;
  if (this->challenge_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_index());
  }

  // uint32 param_index = 2;
  if (this->param_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->param_index());
  }

  // uint32 value = 3;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChallengeDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChallengeDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ChallengeDataNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChallengeDataNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChallengeDataNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChallengeDataNotify)
    MergeFrom(*source);
  }
}

void ChallengeDataNotify::MergeFrom(const ChallengeDataNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChallengeDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.challenge_index() != 0) {
    set_challenge_index(from.challenge_index());
  }
  if (from.param_index() != 0) {
    set_param_index(from.param_index());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void ChallengeDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChallengeDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengeDataNotify::CopyFrom(const ChallengeDataNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChallengeDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeDataNotify::IsInitialized() const {
  return true;
}

void ChallengeDataNotify::Swap(ChallengeDataNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChallengeDataNotify::InternalSwap(ChallengeDataNotify* other) {
  using std::swap;
  swap(challenge_index_, other->challenge_index_);
  swap(param_index_, other->param_index_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChallengeDataNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChallengeDataNotify

// uint32 challenge_index = 1;
void ChallengeDataNotify::clear_challenge_index() {
  challenge_index_ = 0u;
}
::google::protobuf::uint32 ChallengeDataNotify::challenge_index() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeDataNotify.challenge_index)
  return challenge_index_;
}
void ChallengeDataNotify::set_challenge_index(::google::protobuf::uint32 value) {
  
  challenge_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeDataNotify.challenge_index)
}

// uint32 param_index = 2;
void ChallengeDataNotify::clear_param_index() {
  param_index_ = 0u;
}
::google::protobuf::uint32 ChallengeDataNotify::param_index() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeDataNotify.param_index)
  return param_index_;
}
void ChallengeDataNotify::set_param_index(::google::protobuf::uint32 value) {
  
  param_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeDataNotify.param_index)
}

// uint32 value = 3;
void ChallengeDataNotify::clear_value() {
  value_ = 0u;
}
::google::protobuf::uint32 ChallengeDataNotify::value() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeDataNotify.value)
  return value_;
}
void ChallengeDataNotify::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeDataNotify.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonFollowNotify::kTargetUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonFollowNotify::DungeonFollowNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonFollowNotify)
}
DungeonFollowNotify::DungeonFollowNotify(const DungeonFollowNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_uid_ = from.target_uid_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonFollowNotify)
}

void DungeonFollowNotify::SharedCtor() {
  target_uid_ = 0u;
  _cached_size_ = 0;
}

DungeonFollowNotify::~DungeonFollowNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonFollowNotify)
  SharedDtor();
}

void DungeonFollowNotify::SharedDtor() {
}

void DungeonFollowNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonFollowNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonFollowNotify& DungeonFollowNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonFollowNotify* DungeonFollowNotify::New(::google::protobuf::Arena* arena) const {
  DungeonFollowNotify* n = new DungeonFollowNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonFollowNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonFollowNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_uid_ = 0u;
  _internal_metadata_.Clear();
}

bool DungeonFollowNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonFollowNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 target_uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonFollowNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonFollowNotify)
  return false;
#undef DO_
}

void DungeonFollowNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonFollowNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_uid = 1;
  if (this->target_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonFollowNotify)
}

::google::protobuf::uint8* DungeonFollowNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonFollowNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_uid = 1;
  if (this->target_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonFollowNotify)
  return target;
}

size_t DungeonFollowNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonFollowNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 target_uid = 1;
  if (this->target_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonFollowNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonFollowNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonFollowNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonFollowNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonFollowNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonFollowNotify)
    MergeFrom(*source);
  }
}

void DungeonFollowNotify::MergeFrom(const DungeonFollowNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonFollowNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_uid() != 0) {
    set_target_uid(from.target_uid());
  }
}

void DungeonFollowNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonFollowNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonFollowNotify::CopyFrom(const DungeonFollowNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonFollowNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonFollowNotify::IsInitialized() const {
  return true;
}

void DungeonFollowNotify::Swap(DungeonFollowNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonFollowNotify::InternalSwap(DungeonFollowNotify* other) {
  using std::swap;
  swap(target_uid_, other->target_uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonFollowNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonFollowNotify

// uint32 target_uid = 1;
void DungeonFollowNotify::clear_target_uid() {
  target_uid_ = 0u;
}
::google::protobuf::uint32 DungeonFollowNotify::target_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonFollowNotify.target_uid)
  return target_uid_;
}
void DungeonFollowNotify::set_target_uid(::google::protobuf::uint32 value) {
  
  target_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonFollowNotify.target_uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonGetStatueDropReq::DungeonGetStatueDropReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonGetStatueDropReq)
}
DungeonGetStatueDropReq::DungeonGetStatueDropReq(const DungeonGetStatueDropReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.DungeonGetStatueDropReq)
}

void DungeonGetStatueDropReq::SharedCtor() {
  _cached_size_ = 0;
}

DungeonGetStatueDropReq::~DungeonGetStatueDropReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonGetStatueDropReq)
  SharedDtor();
}

void DungeonGetStatueDropReq::SharedDtor() {
}

void DungeonGetStatueDropReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonGetStatueDropReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonGetStatueDropReq& DungeonGetStatueDropReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonGetStatueDropReq* DungeonGetStatueDropReq::New(::google::protobuf::Arena* arena) const {
  DungeonGetStatueDropReq* n = new DungeonGetStatueDropReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonGetStatueDropReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonGetStatueDropReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DungeonGetStatueDropReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonGetStatueDropReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonGetStatueDropReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonGetStatueDropReq)
  return false;
#undef DO_
}

void DungeonGetStatueDropReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonGetStatueDropReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonGetStatueDropReq)
}

::google::protobuf::uint8* DungeonGetStatueDropReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonGetStatueDropReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonGetStatueDropReq)
  return target;
}

size_t DungeonGetStatueDropReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonGetStatueDropReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonGetStatueDropReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonGetStatueDropReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonGetStatueDropReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonGetStatueDropReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonGetStatueDropReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonGetStatueDropReq)
    MergeFrom(*source);
  }
}

void DungeonGetStatueDropReq::MergeFrom(const DungeonGetStatueDropReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonGetStatueDropReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DungeonGetStatueDropReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonGetStatueDropReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonGetStatueDropReq::CopyFrom(const DungeonGetStatueDropReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonGetStatueDropReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonGetStatueDropReq::IsInitialized() const {
  return true;
}

void DungeonGetStatueDropReq::Swap(DungeonGetStatueDropReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonGetStatueDropReq::InternalSwap(DungeonGetStatueDropReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonGetStatueDropReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonGetStatueDropReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonGetStatueDropRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonGetStatueDropRsp::DungeonGetStatueDropRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonGetStatueDropRsp)
}
DungeonGetStatueDropRsp::DungeonGetStatueDropRsp(const DungeonGetStatueDropRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonGetStatueDropRsp)
}

void DungeonGetStatueDropRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

DungeonGetStatueDropRsp::~DungeonGetStatueDropRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonGetStatueDropRsp)
  SharedDtor();
}

void DungeonGetStatueDropRsp::SharedDtor() {
}

void DungeonGetStatueDropRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonGetStatueDropRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonGetStatueDropRsp& DungeonGetStatueDropRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonGetStatueDropRsp* DungeonGetStatueDropRsp::New(::google::protobuf::Arena* arena) const {
  DungeonGetStatueDropRsp* n = new DungeonGetStatueDropRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonGetStatueDropRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonGetStatueDropRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool DungeonGetStatueDropRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonGetStatueDropRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonGetStatueDropRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonGetStatueDropRsp)
  return false;
#undef DO_
}

void DungeonGetStatueDropRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonGetStatueDropRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonGetStatueDropRsp)
}

::google::protobuf::uint8* DungeonGetStatueDropRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonGetStatueDropRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonGetStatueDropRsp)
  return target;
}

size_t DungeonGetStatueDropRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonGetStatueDropRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonGetStatueDropRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonGetStatueDropRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonGetStatueDropRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonGetStatueDropRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonGetStatueDropRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonGetStatueDropRsp)
    MergeFrom(*source);
  }
}

void DungeonGetStatueDropRsp::MergeFrom(const DungeonGetStatueDropRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonGetStatueDropRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void DungeonGetStatueDropRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonGetStatueDropRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonGetStatueDropRsp::CopyFrom(const DungeonGetStatueDropRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonGetStatueDropRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonGetStatueDropRsp::IsInitialized() const {
  return true;
}

void DungeonGetStatueDropRsp::Swap(DungeonGetStatueDropRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonGetStatueDropRsp::InternalSwap(DungeonGetStatueDropRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonGetStatueDropRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonGetStatueDropRsp

// int32 retcode = 1;
void DungeonGetStatueDropRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonGetStatueDropRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonGetStatueDropRsp.retcode)
  return retcode_;
}
void DungeonGetStatueDropRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonGetStatueDropRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChallengeRecord::kChallengeIndexFieldNumber;
const int ChallengeRecord::kChallengeIdFieldNumber;
const int ChallengeRecord::kChallengeRecordTypeFieldNumber;
const int ChallengeRecord::kBestValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChallengeRecord::ChallengeRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChallengeRecord)
}
ChallengeRecord::ChallengeRecord(const ChallengeRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&challenge_index_, &from.challenge_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&best_value_) -
    reinterpret_cast<char*>(&challenge_index_)) + sizeof(best_value_));
  // @@protoc_insertion_point(copy_constructor:proto.ChallengeRecord)
}

void ChallengeRecord::SharedCtor() {
  ::memset(&challenge_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&best_value_) -
      reinterpret_cast<char*>(&challenge_index_)) + sizeof(best_value_));
  _cached_size_ = 0;
}

ChallengeRecord::~ChallengeRecord() {
  // @@protoc_insertion_point(destructor:proto.ChallengeRecord)
  SharedDtor();
}

void ChallengeRecord::SharedDtor() {
}

void ChallengeRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeRecord::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChallengeRecord& ChallengeRecord::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChallengeRecord* ChallengeRecord::New(::google::protobuf::Arena* arena) const {
  ChallengeRecord* n = new ChallengeRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChallengeRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChallengeRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&challenge_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&best_value_) -
      reinterpret_cast<char*>(&challenge_index_)) + sizeof(best_value_));
  _internal_metadata_.Clear();
}

bool ChallengeRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChallengeRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 challenge_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_record_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_record_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 best_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChallengeRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChallengeRecord)
  return false;
#undef DO_
}

void ChallengeRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChallengeRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 challenge_index = 1;
  if (this->challenge_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->challenge_index(), output);
  }

  // uint32 challenge_id = 2;
  if (this->challenge_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->challenge_id(), output);
  }

  // uint32 challenge_record_type = 3;
  if (this->challenge_record_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->challenge_record_type(), output);
  }

  // uint32 best_value = 4;
  if (this->best_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->best_value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChallengeRecord)
}

::google::protobuf::uint8* ChallengeRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChallengeRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 challenge_index = 1;
  if (this->challenge_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->challenge_index(), target);
  }

  // uint32 challenge_id = 2;
  if (this->challenge_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->challenge_id(), target);
  }

  // uint32 challenge_record_type = 3;
  if (this->challenge_record_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->challenge_record_type(), target);
  }

  // uint32 best_value = 4;
  if (this->best_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->best_value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChallengeRecord)
  return target;
}

size_t ChallengeRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChallengeRecord)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 challenge_index = 1;
  if (this->challenge_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_index());
  }

  // uint32 challenge_id = 2;
  if (this->challenge_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_id());
  }

  // uint32 challenge_record_type = 3;
  if (this->challenge_record_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_record_type());
  }

  // uint32 best_value = 4;
  if (this->best_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->best_value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChallengeRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChallengeRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const ChallengeRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChallengeRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChallengeRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChallengeRecord)
    MergeFrom(*source);
  }
}

void ChallengeRecord::MergeFrom(const ChallengeRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChallengeRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.challenge_index() != 0) {
    set_challenge_index(from.challenge_index());
  }
  if (from.challenge_id() != 0) {
    set_challenge_id(from.challenge_id());
  }
  if (from.challenge_record_type() != 0) {
    set_challenge_record_type(from.challenge_record_type());
  }
  if (from.best_value() != 0) {
    set_best_value(from.best_value());
  }
}

void ChallengeRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChallengeRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengeRecord::CopyFrom(const ChallengeRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChallengeRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeRecord::IsInitialized() const {
  return true;
}

void ChallengeRecord::Swap(ChallengeRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChallengeRecord::InternalSwap(ChallengeRecord* other) {
  using std::swap;
  swap(challenge_index_, other->challenge_index_);
  swap(challenge_id_, other->challenge_id_);
  swap(challenge_record_type_, other->challenge_record_type_);
  swap(best_value_, other->best_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChallengeRecord::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChallengeRecord

// uint32 challenge_index = 1;
void ChallengeRecord::clear_challenge_index() {
  challenge_index_ = 0u;
}
::google::protobuf::uint32 ChallengeRecord::challenge_index() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeRecord.challenge_index)
  return challenge_index_;
}
void ChallengeRecord::set_challenge_index(::google::protobuf::uint32 value) {
  
  challenge_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeRecord.challenge_index)
}

// uint32 challenge_id = 2;
void ChallengeRecord::clear_challenge_id() {
  challenge_id_ = 0u;
}
::google::protobuf::uint32 ChallengeRecord::challenge_id() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeRecord.challenge_id)
  return challenge_id_;
}
void ChallengeRecord::set_challenge_id(::google::protobuf::uint32 value) {
  
  challenge_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeRecord.challenge_id)
}

// uint32 challenge_record_type = 3;
void ChallengeRecord::clear_challenge_record_type() {
  challenge_record_type_ = 0u;
}
::google::protobuf::uint32 ChallengeRecord::challenge_record_type() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeRecord.challenge_record_type)
  return challenge_record_type_;
}
void ChallengeRecord::set_challenge_record_type(::google::protobuf::uint32 value) {
  
  challenge_record_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeRecord.challenge_record_type)
}

// uint32 best_value = 4;
void ChallengeRecord::clear_best_value() {
  best_value_ = 0u;
}
::google::protobuf::uint32 ChallengeRecord::best_value() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeRecord.best_value)
  return best_value_;
}
void ChallengeRecord::set_best_value(::google::protobuf::uint32 value) {
  
  best_value_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeRecord.best_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChallengeRecordNotify::kGroupIdFieldNumber;
const int ChallengeRecordNotify::kChallengeRecordListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChallengeRecordNotify::ChallengeRecordNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChallengeRecordNotify)
}
ChallengeRecordNotify::ChallengeRecordNotify(const ChallengeRecordNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      challenge_record_list_(from.challenge_record_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_ = from.group_id_;
  // @@protoc_insertion_point(copy_constructor:proto.ChallengeRecordNotify)
}

void ChallengeRecordNotify::SharedCtor() {
  group_id_ = 0u;
  _cached_size_ = 0;
}

ChallengeRecordNotify::~ChallengeRecordNotify() {
  // @@protoc_insertion_point(destructor:proto.ChallengeRecordNotify)
  SharedDtor();
}

void ChallengeRecordNotify::SharedDtor() {
}

void ChallengeRecordNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeRecordNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChallengeRecordNotify& ChallengeRecordNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChallengeRecordNotify* ChallengeRecordNotify::New(::google::protobuf::Arena* arena) const {
  ChallengeRecordNotify* n = new ChallengeRecordNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChallengeRecordNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChallengeRecordNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  challenge_record_list_.Clear();
  group_id_ = 0u;
  _internal_metadata_.Clear();
}

bool ChallengeRecordNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChallengeRecordNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ChallengeRecord challenge_record_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_challenge_record_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChallengeRecordNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChallengeRecordNotify)
  return false;
#undef DO_
}

void ChallengeRecordNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChallengeRecordNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_id = 1;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // repeated .proto.ChallengeRecord challenge_record_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->challenge_record_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->challenge_record_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChallengeRecordNotify)
}

::google::protobuf::uint8* ChallengeRecordNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChallengeRecordNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_id = 1;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // repeated .proto.ChallengeRecord challenge_record_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->challenge_record_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->challenge_record_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChallengeRecordNotify)
  return target;
}

size_t ChallengeRecordNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChallengeRecordNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ChallengeRecord challenge_record_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->challenge_record_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->challenge_record_list(static_cast<int>(i)));
    }
  }

  // uint32 group_id = 1;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChallengeRecordNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChallengeRecordNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ChallengeRecordNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChallengeRecordNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChallengeRecordNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChallengeRecordNotify)
    MergeFrom(*source);
  }
}

void ChallengeRecordNotify::MergeFrom(const ChallengeRecordNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChallengeRecordNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  challenge_record_list_.MergeFrom(from.challenge_record_list_);
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
}

void ChallengeRecordNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChallengeRecordNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengeRecordNotify::CopyFrom(const ChallengeRecordNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChallengeRecordNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeRecordNotify::IsInitialized() const {
  return true;
}

void ChallengeRecordNotify::Swap(ChallengeRecordNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChallengeRecordNotify::InternalSwap(ChallengeRecordNotify* other) {
  using std::swap;
  challenge_record_list_.InternalSwap(&other->challenge_record_list_);
  swap(group_id_, other->group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChallengeRecordNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChallengeRecordNotify

// uint32 group_id = 1;
void ChallengeRecordNotify::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 ChallengeRecordNotify::group_id() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeRecordNotify.group_id)
  return group_id_;
}
void ChallengeRecordNotify::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeRecordNotify.group_id)
}

// repeated .proto.ChallengeRecord challenge_record_list = 2;
int ChallengeRecordNotify::challenge_record_list_size() const {
  return challenge_record_list_.size();
}
void ChallengeRecordNotify::clear_challenge_record_list() {
  challenge_record_list_.Clear();
}
const ::proto::ChallengeRecord& ChallengeRecordNotify::challenge_record_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ChallengeRecordNotify.challenge_record_list)
  return challenge_record_list_.Get(index);
}
::proto::ChallengeRecord* ChallengeRecordNotify::mutable_challenge_record_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ChallengeRecordNotify.challenge_record_list)
  return challenge_record_list_.Mutable(index);
}
::proto::ChallengeRecord* ChallengeRecordNotify::add_challenge_record_list() {
  // @@protoc_insertion_point(field_add:proto.ChallengeRecordNotify.challenge_record_list)
  return challenge_record_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ChallengeRecord >*
ChallengeRecordNotify::mutable_challenge_record_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ChallengeRecordNotify.challenge_record_list)
  return &challenge_record_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ChallengeRecord >&
ChallengeRecordNotify::challenge_record_list() const {
  // @@protoc_insertion_point(field_list:proto.ChallengeRecordNotify.challenge_record_list)
  return challenge_record_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamAvatar::kPlayerUidFieldNumber;
const int DungeonCandidateTeamAvatar::kAvatarInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamAvatar::DungeonCandidateTeamAvatar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamAvatar)
}
DungeonCandidateTeamAvatar::DungeonCandidateTeamAvatar(const DungeonCandidateTeamAvatar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_avatar_info()) {
    avatar_info_ = new ::proto::AvatarInfo(*from.avatar_info_);
  } else {
    avatar_info_ = NULL;
  }
  player_uid_ = from.player_uid_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamAvatar)
}

void DungeonCandidateTeamAvatar::SharedCtor() {
  ::memset(&avatar_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_uid_) -
      reinterpret_cast<char*>(&avatar_info_)) + sizeof(player_uid_));
  _cached_size_ = 0;
}

DungeonCandidateTeamAvatar::~DungeonCandidateTeamAvatar() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamAvatar)
  SharedDtor();
}

void DungeonCandidateTeamAvatar::SharedDtor() {
  if (this != internal_default_instance()) delete avatar_info_;
}

void DungeonCandidateTeamAvatar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamAvatar::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamAvatar& DungeonCandidateTeamAvatar::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamAvatar* DungeonCandidateTeamAvatar::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamAvatar* n = new DungeonCandidateTeamAvatar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamAvatar::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamAvatar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && avatar_info_ != NULL) {
    delete avatar_info_;
  }
  avatar_info_ = NULL;
  player_uid_ = 0u;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamAvatar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamAvatar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 player_uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AvatarInfo avatar_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatar_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamAvatar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamAvatar)
  return false;
#undef DO_
}

void DungeonCandidateTeamAvatar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamAvatar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 1;
  if (this->player_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_uid(), output);
  }

  // .proto.AvatarInfo avatar_info = 2;
  if (this->has_avatar_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->avatar_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamAvatar)
}

::google::protobuf::uint8* DungeonCandidateTeamAvatar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamAvatar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 1;
  if (this->player_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_uid(), target);
  }

  // .proto.AvatarInfo avatar_info = 2;
  if (this->has_avatar_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->avatar_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamAvatar)
  return target;
}

size_t DungeonCandidateTeamAvatar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamAvatar)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.AvatarInfo avatar_info = 2;
  if (this->has_avatar_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->avatar_info_);
  }

  // uint32 player_uid = 1;
  if (this->player_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamAvatar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamAvatar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamAvatar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamAvatar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamAvatar)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamAvatar::MergeFrom(const DungeonCandidateTeamAvatar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_avatar_info()) {
    mutable_avatar_info()->::proto::AvatarInfo::MergeFrom(from.avatar_info());
  }
  if (from.player_uid() != 0) {
    set_player_uid(from.player_uid());
  }
}

void DungeonCandidateTeamAvatar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamAvatar::CopyFrom(const DungeonCandidateTeamAvatar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamAvatar::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamAvatar::Swap(DungeonCandidateTeamAvatar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamAvatar::InternalSwap(DungeonCandidateTeamAvatar* other) {
  using std::swap;
  swap(avatar_info_, other->avatar_info_);
  swap(player_uid_, other->player_uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamAvatar::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamAvatar

// uint32 player_uid = 1;
void DungeonCandidateTeamAvatar::clear_player_uid() {
  player_uid_ = 0u;
}
::google::protobuf::uint32 DungeonCandidateTeamAvatar::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamAvatar.player_uid)
  return player_uid_;
}
void DungeonCandidateTeamAvatar::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamAvatar.player_uid)
}

// .proto.AvatarInfo avatar_info = 2;
bool DungeonCandidateTeamAvatar::has_avatar_info() const {
  return this != internal_default_instance() && avatar_info_ != NULL;
}
void DungeonCandidateTeamAvatar::clear_avatar_info() {
  if (GetArenaNoVirtual() == NULL && avatar_info_ != NULL) delete avatar_info_;
  avatar_info_ = NULL;
}
const ::proto::AvatarInfo& DungeonCandidateTeamAvatar::avatar_info() const {
  const ::proto::AvatarInfo* p = avatar_info_;
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamAvatar.avatar_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::AvatarInfo*>(
      &::proto::_AvatarInfo_default_instance_);
}
::proto::AvatarInfo* DungeonCandidateTeamAvatar::mutable_avatar_info() {
  
  if (avatar_info_ == NULL) {
    avatar_info_ = new ::proto::AvatarInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonCandidateTeamAvatar.avatar_info)
  return avatar_info_;
}
::proto::AvatarInfo* DungeonCandidateTeamAvatar::release_avatar_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonCandidateTeamAvatar.avatar_info)
  
  ::proto::AvatarInfo* temp = avatar_info_;
  avatar_info_ = NULL;
  return temp;
}
void DungeonCandidateTeamAvatar::set_allocated_avatar_info(::proto::AvatarInfo* avatar_info) {
  delete avatar_info_;
  avatar_info_ = avatar_info;
  if (avatar_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonCandidateTeamAvatar.avatar_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamInfoNotify::kDungeonIdFieldNumber;
const int DungeonCandidateTeamInfoNotify::kAvatarListFieldNumber;
const int DungeonCandidateTeamInfoNotify::kReadyPlayerUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamInfoNotify::DungeonCandidateTeamInfoNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamInfoNotify)
}
DungeonCandidateTeamInfoNotify::DungeonCandidateTeamInfoNotify(const DungeonCandidateTeamInfoNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      avatar_list_(from.avatar_list_),
      ready_player_uid_(from.ready_player_uid_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dungeon_id_ = from.dungeon_id_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamInfoNotify)
}

void DungeonCandidateTeamInfoNotify::SharedCtor() {
  dungeon_id_ = 0u;
  _cached_size_ = 0;
}

DungeonCandidateTeamInfoNotify::~DungeonCandidateTeamInfoNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamInfoNotify)
  SharedDtor();
}

void DungeonCandidateTeamInfoNotify::SharedDtor() {
}

void DungeonCandidateTeamInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamInfoNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamInfoNotify& DungeonCandidateTeamInfoNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamInfoNotify* DungeonCandidateTeamInfoNotify::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamInfoNotify* n = new DungeonCandidateTeamInfoNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_list_.Clear();
  ready_player_uid_.Clear();
  dungeon_id_ = 0u;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dungeon_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.DungeonCandidateTeamAvatar avatar_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_avatar_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ready_player_uid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ready_player_uid())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_ready_player_uid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamInfoNotify)
  return false;
#undef DO_
}

void DungeonCandidateTeamInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dungeon_id = 1;
  if (this->dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dungeon_id(), output);
  }

  // repeated .proto.DungeonCandidateTeamAvatar avatar_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->avatar_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->avatar_list(static_cast<int>(i)), output);
  }

  // repeated uint32 ready_player_uid = 3;
  if (this->ready_player_uid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _ready_player_uid_cached_byte_size_));
  }
  for (int i = 0, n = this->ready_player_uid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->ready_player_uid(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamInfoNotify)
}

::google::protobuf::uint8* DungeonCandidateTeamInfoNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dungeon_id = 1;
  if (this->dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dungeon_id(), target);
  }

  // repeated .proto.DungeonCandidateTeamAvatar avatar_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->avatar_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->avatar_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 ready_player_uid = 3;
  if (this->ready_player_uid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _ready_player_uid_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->ready_player_uid_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamInfoNotify)
  return target;
}

size_t DungeonCandidateTeamInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamInfoNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.DungeonCandidateTeamAvatar avatar_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->avatar_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatar_list(static_cast<int>(i)));
    }
  }

  // repeated uint32 ready_player_uid = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ready_player_uid_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ready_player_uid_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 dungeon_id = 1;
  if (this->dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamInfoNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamInfoNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamInfoNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamInfoNotify)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamInfoNotify::MergeFrom(const DungeonCandidateTeamInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatar_list_.MergeFrom(from.avatar_list_);
  ready_player_uid_.MergeFrom(from.ready_player_uid_);
  if (from.dungeon_id() != 0) {
    set_dungeon_id(from.dungeon_id());
  }
}

void DungeonCandidateTeamInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamInfoNotify::CopyFrom(const DungeonCandidateTeamInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamInfoNotify::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamInfoNotify::Swap(DungeonCandidateTeamInfoNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamInfoNotify::InternalSwap(DungeonCandidateTeamInfoNotify* other) {
  using std::swap;
  avatar_list_.InternalSwap(&other->avatar_list_);
  ready_player_uid_.InternalSwap(&other->ready_player_uid_);
  swap(dungeon_id_, other->dungeon_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamInfoNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamInfoNotify

// uint32 dungeon_id = 1;
void DungeonCandidateTeamInfoNotify::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
::google::protobuf::uint32 DungeonCandidateTeamInfoNotify::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInfoNotify.dungeon_id)
  return dungeon_id_;
}
void DungeonCandidateTeamInfoNotify::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInfoNotify.dungeon_id)
}

// repeated .proto.DungeonCandidateTeamAvatar avatar_list = 2;
int DungeonCandidateTeamInfoNotify::avatar_list_size() const {
  return avatar_list_.size();
}
void DungeonCandidateTeamInfoNotify::clear_avatar_list() {
  avatar_list_.Clear();
}
const ::proto::DungeonCandidateTeamAvatar& DungeonCandidateTeamInfoNotify::avatar_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInfoNotify.avatar_list)
  return avatar_list_.Get(index);
}
::proto::DungeonCandidateTeamAvatar* DungeonCandidateTeamInfoNotify::mutable_avatar_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.DungeonCandidateTeamInfoNotify.avatar_list)
  return avatar_list_.Mutable(index);
}
::proto::DungeonCandidateTeamAvatar* DungeonCandidateTeamInfoNotify::add_avatar_list() {
  // @@protoc_insertion_point(field_add:proto.DungeonCandidateTeamInfoNotify.avatar_list)
  return avatar_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::DungeonCandidateTeamAvatar >*
DungeonCandidateTeamInfoNotify::mutable_avatar_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonCandidateTeamInfoNotify.avatar_list)
  return &avatar_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::DungeonCandidateTeamAvatar >&
DungeonCandidateTeamInfoNotify::avatar_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonCandidateTeamInfoNotify.avatar_list)
  return avatar_list_;
}

// repeated uint32 ready_player_uid = 3;
int DungeonCandidateTeamInfoNotify::ready_player_uid_size() const {
  return ready_player_uid_.size();
}
void DungeonCandidateTeamInfoNotify::clear_ready_player_uid() {
  ready_player_uid_.Clear();
}
::google::protobuf::uint32 DungeonCandidateTeamInfoNotify::ready_player_uid(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInfoNotify.ready_player_uid)
  return ready_player_uid_.Get(index);
}
void DungeonCandidateTeamInfoNotify::set_ready_player_uid(int index, ::google::protobuf::uint32 value) {
  ready_player_uid_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInfoNotify.ready_player_uid)
}
void DungeonCandidateTeamInfoNotify::add_ready_player_uid(::google::protobuf::uint32 value) {
  ready_player_uid_.Add(value);
  // @@protoc_insertion_point(field_add:proto.DungeonCandidateTeamInfoNotify.ready_player_uid)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DungeonCandidateTeamInfoNotify::ready_player_uid() const {
  // @@protoc_insertion_point(field_list:proto.DungeonCandidateTeamInfoNotify.ready_player_uid)
  return ready_player_uid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DungeonCandidateTeamInfoNotify::mutable_ready_player_uid() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonCandidateTeamInfoNotify.ready_player_uid)
  return &ready_player_uid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamInviteNotify::kPlayerUidFieldNumber;
const int DungeonCandidateTeamInviteNotify::kDungeonIdFieldNumber;
const int DungeonCandidateTeamInviteNotify::kVaildDeadlineTimeSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamInviteNotify::DungeonCandidateTeamInviteNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamInviteNotify)
}
DungeonCandidateTeamInviteNotify::DungeonCandidateTeamInviteNotify(const DungeonCandidateTeamInviteNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_uid_, &from.player_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&vaild_deadline_time_sec_) -
    reinterpret_cast<char*>(&player_uid_)) + sizeof(vaild_deadline_time_sec_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamInviteNotify)
}

void DungeonCandidateTeamInviteNotify::SharedCtor() {
  ::memset(&player_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vaild_deadline_time_sec_) -
      reinterpret_cast<char*>(&player_uid_)) + sizeof(vaild_deadline_time_sec_));
  _cached_size_ = 0;
}

DungeonCandidateTeamInviteNotify::~DungeonCandidateTeamInviteNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamInviteNotify)
  SharedDtor();
}

void DungeonCandidateTeamInviteNotify::SharedDtor() {
}

void DungeonCandidateTeamInviteNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamInviteNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamInviteNotify& DungeonCandidateTeamInviteNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamInviteNotify* DungeonCandidateTeamInviteNotify::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamInviteNotify* n = new DungeonCandidateTeamInviteNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamInviteNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamInviteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vaild_deadline_time_sec_) -
      reinterpret_cast<char*>(&player_uid_)) + sizeof(vaild_deadline_time_sec_));
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamInviteNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamInviteNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 player_uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dungeon_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vaild_deadline_time_sec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vaild_deadline_time_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamInviteNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamInviteNotify)
  return false;
#undef DO_
}

void DungeonCandidateTeamInviteNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamInviteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 1;
  if (this->player_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_uid(), output);
  }

  // uint32 dungeon_id = 2;
  if (this->dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dungeon_id(), output);
  }

  // uint32 vaild_deadline_time_sec = 3;
  if (this->vaild_deadline_time_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vaild_deadline_time_sec(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamInviteNotify)
}

::google::protobuf::uint8* DungeonCandidateTeamInviteNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamInviteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 1;
  if (this->player_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_uid(), target);
  }

  // uint32 dungeon_id = 2;
  if (this->dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dungeon_id(), target);
  }

  // uint32 vaild_deadline_time_sec = 3;
  if (this->vaild_deadline_time_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vaild_deadline_time_sec(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamInviteNotify)
  return target;
}

size_t DungeonCandidateTeamInviteNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamInviteNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 player_uid = 1;
  if (this->player_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_uid());
  }

  // uint32 dungeon_id = 2;
  if (this->dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_id());
  }

  // uint32 vaild_deadline_time_sec = 3;
  if (this->vaild_deadline_time_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vaild_deadline_time_sec());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamInviteNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamInviteNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamInviteNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamInviteNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamInviteNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamInviteNotify)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamInviteNotify::MergeFrom(const DungeonCandidateTeamInviteNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamInviteNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_uid() != 0) {
    set_player_uid(from.player_uid());
  }
  if (from.dungeon_id() != 0) {
    set_dungeon_id(from.dungeon_id());
  }
  if (from.vaild_deadline_time_sec() != 0) {
    set_vaild_deadline_time_sec(from.vaild_deadline_time_sec());
  }
}

void DungeonCandidateTeamInviteNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamInviteNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamInviteNotify::CopyFrom(const DungeonCandidateTeamInviteNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamInviteNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamInviteNotify::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamInviteNotify::Swap(DungeonCandidateTeamInviteNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamInviteNotify::InternalSwap(DungeonCandidateTeamInviteNotify* other) {
  using std::swap;
  swap(player_uid_, other->player_uid_);
  swap(dungeon_id_, other->dungeon_id_);
  swap(vaild_deadline_time_sec_, other->vaild_deadline_time_sec_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamInviteNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamInviteNotify

// uint32 player_uid = 1;
void DungeonCandidateTeamInviteNotify::clear_player_uid() {
  player_uid_ = 0u;
}
::google::protobuf::uint32 DungeonCandidateTeamInviteNotify::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInviteNotify.player_uid)
  return player_uid_;
}
void DungeonCandidateTeamInviteNotify::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInviteNotify.player_uid)
}

// uint32 dungeon_id = 2;
void DungeonCandidateTeamInviteNotify::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
::google::protobuf::uint32 DungeonCandidateTeamInviteNotify::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInviteNotify.dungeon_id)
  return dungeon_id_;
}
void DungeonCandidateTeamInviteNotify::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInviteNotify.dungeon_id)
}

// uint32 vaild_deadline_time_sec = 3;
void DungeonCandidateTeamInviteNotify::clear_vaild_deadline_time_sec() {
  vaild_deadline_time_sec_ = 0u;
}
::google::protobuf::uint32 DungeonCandidateTeamInviteNotify::vaild_deadline_time_sec() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInviteNotify.vaild_deadline_time_sec)
  return vaild_deadline_time_sec_;
}
void DungeonCandidateTeamInviteNotify::set_vaild_deadline_time_sec(::google::protobuf::uint32 value) {
  
  vaild_deadline_time_sec_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInviteNotify.vaild_deadline_time_sec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamRefuseNotify::kPlayerUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamRefuseNotify::DungeonCandidateTeamRefuseNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamRefuseNotify)
}
DungeonCandidateTeamRefuseNotify::DungeonCandidateTeamRefuseNotify(const DungeonCandidateTeamRefuseNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_uid_ = from.player_uid_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamRefuseNotify)
}

void DungeonCandidateTeamRefuseNotify::SharedCtor() {
  player_uid_ = 0u;
  _cached_size_ = 0;
}

DungeonCandidateTeamRefuseNotify::~DungeonCandidateTeamRefuseNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamRefuseNotify)
  SharedDtor();
}

void DungeonCandidateTeamRefuseNotify::SharedDtor() {
}

void DungeonCandidateTeamRefuseNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamRefuseNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamRefuseNotify& DungeonCandidateTeamRefuseNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamRefuseNotify* DungeonCandidateTeamRefuseNotify::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamRefuseNotify* n = new DungeonCandidateTeamRefuseNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamRefuseNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamRefuseNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_uid_ = 0u;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamRefuseNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamRefuseNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 player_uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamRefuseNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamRefuseNotify)
  return false;
#undef DO_
}

void DungeonCandidateTeamRefuseNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamRefuseNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 1;
  if (this->player_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamRefuseNotify)
}

::google::protobuf::uint8* DungeonCandidateTeamRefuseNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamRefuseNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 1;
  if (this->player_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamRefuseNotify)
  return target;
}

size_t DungeonCandidateTeamRefuseNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamRefuseNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 player_uid = 1;
  if (this->player_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamRefuseNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamRefuseNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamRefuseNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamRefuseNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamRefuseNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamRefuseNotify)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamRefuseNotify::MergeFrom(const DungeonCandidateTeamRefuseNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamRefuseNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_uid() != 0) {
    set_player_uid(from.player_uid());
  }
}

void DungeonCandidateTeamRefuseNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamRefuseNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamRefuseNotify::CopyFrom(const DungeonCandidateTeamRefuseNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamRefuseNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamRefuseNotify::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamRefuseNotify::Swap(DungeonCandidateTeamRefuseNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamRefuseNotify::InternalSwap(DungeonCandidateTeamRefuseNotify* other) {
  using std::swap;
  swap(player_uid_, other->player_uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamRefuseNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamRefuseNotify

// uint32 player_uid = 1;
void DungeonCandidateTeamRefuseNotify::clear_player_uid() {
  player_uid_ = 0u;
}
::google::protobuf::uint32 DungeonCandidateTeamRefuseNotify::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamRefuseNotify.player_uid)
  return player_uid_;
}
void DungeonCandidateTeamRefuseNotify::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamRefuseNotify.player_uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamPlayerLeaveNotify::kPlayerUidFieldNumber;
const int DungeonCandidateTeamPlayerLeaveNotify::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamPlayerLeaveNotify::DungeonCandidateTeamPlayerLeaveNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamPlayerLeaveNotify)
}
DungeonCandidateTeamPlayerLeaveNotify::DungeonCandidateTeamPlayerLeaveNotify(const DungeonCandidateTeamPlayerLeaveNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_uid_, &from.player_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&player_uid_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamPlayerLeaveNotify)
}

void DungeonCandidateTeamPlayerLeaveNotify::SharedCtor() {
  ::memset(&player_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&player_uid_)) + sizeof(reason_));
  _cached_size_ = 0;
}

DungeonCandidateTeamPlayerLeaveNotify::~DungeonCandidateTeamPlayerLeaveNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamPlayerLeaveNotify)
  SharedDtor();
}

void DungeonCandidateTeamPlayerLeaveNotify::SharedDtor() {
}

void DungeonCandidateTeamPlayerLeaveNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamPlayerLeaveNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamPlayerLeaveNotify& DungeonCandidateTeamPlayerLeaveNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamPlayerLeaveNotify* DungeonCandidateTeamPlayerLeaveNotify::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamPlayerLeaveNotify* n = new DungeonCandidateTeamPlayerLeaveNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamPlayerLeaveNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamPlayerLeaveNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&player_uid_)) + sizeof(reason_));
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamPlayerLeaveNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamPlayerLeaveNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 player_uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.DungeonCandidateTeamPlayerLeaveReason reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::DungeonCandidateTeamPlayerLeaveReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamPlayerLeaveNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamPlayerLeaveNotify)
  return false;
#undef DO_
}

void DungeonCandidateTeamPlayerLeaveNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamPlayerLeaveNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 1;
  if (this->player_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_uid(), output);
  }

  // .proto.DungeonCandidateTeamPlayerLeaveReason reason = 2;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reason(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamPlayerLeaveNotify)
}

::google::protobuf::uint8* DungeonCandidateTeamPlayerLeaveNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamPlayerLeaveNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 1;
  if (this->player_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_uid(), target);
  }

  // .proto.DungeonCandidateTeamPlayerLeaveReason reason = 2;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reason(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamPlayerLeaveNotify)
  return target;
}

size_t DungeonCandidateTeamPlayerLeaveNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamPlayerLeaveNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 player_uid = 1;
  if (this->player_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_uid());
  }

  // .proto.DungeonCandidateTeamPlayerLeaveReason reason = 2;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamPlayerLeaveNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamPlayerLeaveNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamPlayerLeaveNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamPlayerLeaveNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamPlayerLeaveNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamPlayerLeaveNotify)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamPlayerLeaveNotify::MergeFrom(const DungeonCandidateTeamPlayerLeaveNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamPlayerLeaveNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_uid() != 0) {
    set_player_uid(from.player_uid());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void DungeonCandidateTeamPlayerLeaveNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamPlayerLeaveNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamPlayerLeaveNotify::CopyFrom(const DungeonCandidateTeamPlayerLeaveNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamPlayerLeaveNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamPlayerLeaveNotify::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamPlayerLeaveNotify::Swap(DungeonCandidateTeamPlayerLeaveNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamPlayerLeaveNotify::InternalSwap(DungeonCandidateTeamPlayerLeaveNotify* other) {
  using std::swap;
  swap(player_uid_, other->player_uid_);
  swap(reason_, other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamPlayerLeaveNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamPlayerLeaveNotify

// uint32 player_uid = 1;
void DungeonCandidateTeamPlayerLeaveNotify::clear_player_uid() {
  player_uid_ = 0u;
}
::google::protobuf::uint32 DungeonCandidateTeamPlayerLeaveNotify::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamPlayerLeaveNotify.player_uid)
  return player_uid_;
}
void DungeonCandidateTeamPlayerLeaveNotify::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamPlayerLeaveNotify.player_uid)
}

// .proto.DungeonCandidateTeamPlayerLeaveReason reason = 2;
void DungeonCandidateTeamPlayerLeaveNotify::clear_reason() {
  reason_ = 0;
}
::proto::DungeonCandidateTeamPlayerLeaveReason DungeonCandidateTeamPlayerLeaveNotify::reason() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamPlayerLeaveNotify.reason)
  return static_cast< ::proto::DungeonCandidateTeamPlayerLeaveReason >(reason_);
}
void DungeonCandidateTeamPlayerLeaveNotify::set_reason(::proto::DungeonCandidateTeamPlayerLeaveReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamPlayerLeaveNotify.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamDismissNotify::kPlayerUidFieldNumber;
const int DungeonCandidateTeamDismissNotify::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamDismissNotify::DungeonCandidateTeamDismissNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamDismissNotify)
}
DungeonCandidateTeamDismissNotify::DungeonCandidateTeamDismissNotify(const DungeonCandidateTeamDismissNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_uid_, &from.player_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&player_uid_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamDismissNotify)
}

void DungeonCandidateTeamDismissNotify::SharedCtor() {
  ::memset(&player_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&player_uid_)) + sizeof(reason_));
  _cached_size_ = 0;
}

DungeonCandidateTeamDismissNotify::~DungeonCandidateTeamDismissNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamDismissNotify)
  SharedDtor();
}

void DungeonCandidateTeamDismissNotify::SharedDtor() {
}

void DungeonCandidateTeamDismissNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamDismissNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamDismissNotify& DungeonCandidateTeamDismissNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamDismissNotify* DungeonCandidateTeamDismissNotify::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamDismissNotify* n = new DungeonCandidateTeamDismissNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamDismissNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamDismissNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&player_uid_)) + sizeof(reason_));
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamDismissNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamDismissNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 player_uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.DungeonCandidateTeamDismissReason reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::DungeonCandidateTeamDismissReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamDismissNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamDismissNotify)
  return false;
#undef DO_
}

void DungeonCandidateTeamDismissNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamDismissNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 1;
  if (this->player_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_uid(), output);
  }

  // .proto.DungeonCandidateTeamDismissReason reason = 2;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reason(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamDismissNotify)
}

::google::protobuf::uint8* DungeonCandidateTeamDismissNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamDismissNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 1;
  if (this->player_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_uid(), target);
  }

  // .proto.DungeonCandidateTeamDismissReason reason = 2;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reason(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamDismissNotify)
  return target;
}

size_t DungeonCandidateTeamDismissNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamDismissNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 player_uid = 1;
  if (this->player_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_uid());
  }

  // .proto.DungeonCandidateTeamDismissReason reason = 2;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamDismissNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamDismissNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamDismissNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamDismissNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamDismissNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamDismissNotify)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamDismissNotify::MergeFrom(const DungeonCandidateTeamDismissNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamDismissNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_uid() != 0) {
    set_player_uid(from.player_uid());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void DungeonCandidateTeamDismissNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamDismissNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamDismissNotify::CopyFrom(const DungeonCandidateTeamDismissNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamDismissNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamDismissNotify::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamDismissNotify::Swap(DungeonCandidateTeamDismissNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamDismissNotify::InternalSwap(DungeonCandidateTeamDismissNotify* other) {
  using std::swap;
  swap(player_uid_, other->player_uid_);
  swap(reason_, other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamDismissNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamDismissNotify

// uint32 player_uid = 1;
void DungeonCandidateTeamDismissNotify::clear_player_uid() {
  player_uid_ = 0u;
}
::google::protobuf::uint32 DungeonCandidateTeamDismissNotify::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamDismissNotify.player_uid)
  return player_uid_;
}
void DungeonCandidateTeamDismissNotify::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamDismissNotify.player_uid)
}

// .proto.DungeonCandidateTeamDismissReason reason = 2;
void DungeonCandidateTeamDismissNotify::clear_reason() {
  reason_ = 0;
}
::proto::DungeonCandidateTeamDismissReason DungeonCandidateTeamDismissNotify::reason() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamDismissNotify.reason)
  return static_cast< ::proto::DungeonCandidateTeamDismissReason >(reason_);
}
void DungeonCandidateTeamDismissNotify::set_reason(::proto::DungeonCandidateTeamDismissReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamDismissNotify.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamCreateReq::kDungeonIdFieldNumber;
const int DungeonCandidateTeamCreateReq::kPointIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamCreateReq::DungeonCandidateTeamCreateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamCreateReq)
}
DungeonCandidateTeamCreateReq::DungeonCandidateTeamCreateReq(const DungeonCandidateTeamCreateReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dungeon_id_, &from.dungeon_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&point_id_) -
    reinterpret_cast<char*>(&dungeon_id_)) + sizeof(point_id_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamCreateReq)
}

void DungeonCandidateTeamCreateReq::SharedCtor() {
  ::memset(&dungeon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_id_) -
      reinterpret_cast<char*>(&dungeon_id_)) + sizeof(point_id_));
  _cached_size_ = 0;
}

DungeonCandidateTeamCreateReq::~DungeonCandidateTeamCreateReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamCreateReq)
  SharedDtor();
}

void DungeonCandidateTeamCreateReq::SharedDtor() {
}

void DungeonCandidateTeamCreateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamCreateReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamCreateReq& DungeonCandidateTeamCreateReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamCreateReq* DungeonCandidateTeamCreateReq::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamCreateReq* n = new DungeonCandidateTeamCreateReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamCreateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamCreateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dungeon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_id_) -
      reinterpret_cast<char*>(&dungeon_id_)) + sizeof(point_id_));
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamCreateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamCreateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dungeon_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 point_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamCreateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamCreateReq)
  return false;
#undef DO_
}

void DungeonCandidateTeamCreateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamCreateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dungeon_id = 1;
  if (this->dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dungeon_id(), output);
  }

  // uint32 point_id = 2;
  if (this->point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->point_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamCreateReq)
}

::google::protobuf::uint8* DungeonCandidateTeamCreateReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamCreateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dungeon_id = 1;
  if (this->dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dungeon_id(), target);
  }

  // uint32 point_id = 2;
  if (this->point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->point_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamCreateReq)
  return target;
}

size_t DungeonCandidateTeamCreateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamCreateReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dungeon_id = 1;
  if (this->dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_id());
  }

  // uint32 point_id = 2;
  if (this->point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamCreateReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamCreateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamCreateReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamCreateReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamCreateReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamCreateReq)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamCreateReq::MergeFrom(const DungeonCandidateTeamCreateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamCreateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dungeon_id() != 0) {
    set_dungeon_id(from.dungeon_id());
  }
  if (from.point_id() != 0) {
    set_point_id(from.point_id());
  }
}

void DungeonCandidateTeamCreateReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamCreateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamCreateReq::CopyFrom(const DungeonCandidateTeamCreateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamCreateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamCreateReq::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamCreateReq::Swap(DungeonCandidateTeamCreateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamCreateReq::InternalSwap(DungeonCandidateTeamCreateReq* other) {
  using std::swap;
  swap(dungeon_id_, other->dungeon_id_);
  swap(point_id_, other->point_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamCreateReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamCreateReq

// uint32 dungeon_id = 1;
void DungeonCandidateTeamCreateReq::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
::google::protobuf::uint32 DungeonCandidateTeamCreateReq::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamCreateReq.dungeon_id)
  return dungeon_id_;
}
void DungeonCandidateTeamCreateReq::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamCreateReq.dungeon_id)
}

// uint32 point_id = 2;
void DungeonCandidateTeamCreateReq::clear_point_id() {
  point_id_ = 0u;
}
::google::protobuf::uint32 DungeonCandidateTeamCreateReq::point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamCreateReq.point_id)
  return point_id_;
}
void DungeonCandidateTeamCreateReq::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamCreateReq.point_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamCreateRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamCreateRsp::DungeonCandidateTeamCreateRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamCreateRsp)
}
DungeonCandidateTeamCreateRsp::DungeonCandidateTeamCreateRsp(const DungeonCandidateTeamCreateRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamCreateRsp)
}

void DungeonCandidateTeamCreateRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

DungeonCandidateTeamCreateRsp::~DungeonCandidateTeamCreateRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamCreateRsp)
  SharedDtor();
}

void DungeonCandidateTeamCreateRsp::SharedDtor() {
}

void DungeonCandidateTeamCreateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamCreateRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamCreateRsp& DungeonCandidateTeamCreateRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamCreateRsp* DungeonCandidateTeamCreateRsp::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamCreateRsp* n = new DungeonCandidateTeamCreateRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamCreateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamCreateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamCreateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamCreateRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamCreateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamCreateRsp)
  return false;
#undef DO_
}

void DungeonCandidateTeamCreateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamCreateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamCreateRsp)
}

::google::protobuf::uint8* DungeonCandidateTeamCreateRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamCreateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamCreateRsp)
  return target;
}

size_t DungeonCandidateTeamCreateRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamCreateRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamCreateRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamCreateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamCreateRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamCreateRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamCreateRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamCreateRsp)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamCreateRsp::MergeFrom(const DungeonCandidateTeamCreateRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamCreateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void DungeonCandidateTeamCreateRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamCreateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamCreateRsp::CopyFrom(const DungeonCandidateTeamCreateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamCreateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamCreateRsp::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamCreateRsp::Swap(DungeonCandidateTeamCreateRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamCreateRsp::InternalSwap(DungeonCandidateTeamCreateRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamCreateRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamCreateRsp

// int32 retcode = 1;
void DungeonCandidateTeamCreateRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonCandidateTeamCreateRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamCreateRsp.retcode)
  return retcode_;
}
void DungeonCandidateTeamCreateRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamCreateRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamInviteReq::kPlayerUidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamInviteReq::DungeonCandidateTeamInviteReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamInviteReq)
}
DungeonCandidateTeamInviteReq::DungeonCandidateTeamInviteReq(const DungeonCandidateTeamInviteReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      player_uids_(from.player_uids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamInviteReq)
}

void DungeonCandidateTeamInviteReq::SharedCtor() {
  _cached_size_ = 0;
}

DungeonCandidateTeamInviteReq::~DungeonCandidateTeamInviteReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamInviteReq)
  SharedDtor();
}

void DungeonCandidateTeamInviteReq::SharedDtor() {
}

void DungeonCandidateTeamInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamInviteReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamInviteReq& DungeonCandidateTeamInviteReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamInviteReq* DungeonCandidateTeamInviteReq::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamInviteReq* n = new DungeonCandidateTeamInviteReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamInviteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_uids_.Clear();
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamInviteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 player_uids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_uids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_player_uids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamInviteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamInviteReq)
  return false;
#undef DO_
}

void DungeonCandidateTeamInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 player_uids = 1;
  if (this->player_uids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _player_uids_cached_byte_size_));
  }
  for (int i = 0, n = this->player_uids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->player_uids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamInviteReq)
}

::google::protobuf::uint8* DungeonCandidateTeamInviteReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 player_uids = 1;
  if (this->player_uids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _player_uids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->player_uids_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamInviteReq)
  return target;
}

size_t DungeonCandidateTeamInviteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamInviteReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 player_uids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->player_uids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _player_uids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamInviteReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamInviteReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamInviteReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamInviteReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamInviteReq)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamInviteReq::MergeFrom(const DungeonCandidateTeamInviteReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamInviteReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_uids_.MergeFrom(from.player_uids_);
}

void DungeonCandidateTeamInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamInviteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamInviteReq::CopyFrom(const DungeonCandidateTeamInviteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamInviteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamInviteReq::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamInviteReq::Swap(DungeonCandidateTeamInviteReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamInviteReq::InternalSwap(DungeonCandidateTeamInviteReq* other) {
  using std::swap;
  player_uids_.InternalSwap(&other->player_uids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamInviteReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamInviteReq

// repeated uint32 player_uids = 1;
int DungeonCandidateTeamInviteReq::player_uids_size() const {
  return player_uids_.size();
}
void DungeonCandidateTeamInviteReq::clear_player_uids() {
  player_uids_.Clear();
}
::google::protobuf::uint32 DungeonCandidateTeamInviteReq::player_uids(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInviteReq.player_uids)
  return player_uids_.Get(index);
}
void DungeonCandidateTeamInviteReq::set_player_uids(int index, ::google::protobuf::uint32 value) {
  player_uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInviteReq.player_uids)
}
void DungeonCandidateTeamInviteReq::add_player_uids(::google::protobuf::uint32 value) {
  player_uids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.DungeonCandidateTeamInviteReq.player_uids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DungeonCandidateTeamInviteReq::player_uids() const {
  // @@protoc_insertion_point(field_list:proto.DungeonCandidateTeamInviteReq.player_uids)
  return player_uids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DungeonCandidateTeamInviteReq::mutable_player_uids() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonCandidateTeamInviteReq.player_uids)
  return &player_uids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamInviteRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamInviteRsp::DungeonCandidateTeamInviteRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamInviteRsp)
}
DungeonCandidateTeamInviteRsp::DungeonCandidateTeamInviteRsp(const DungeonCandidateTeamInviteRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamInviteRsp)
}

void DungeonCandidateTeamInviteRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

DungeonCandidateTeamInviteRsp::~DungeonCandidateTeamInviteRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamInviteRsp)
  SharedDtor();
}

void DungeonCandidateTeamInviteRsp::SharedDtor() {
}

void DungeonCandidateTeamInviteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamInviteRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamInviteRsp& DungeonCandidateTeamInviteRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamInviteRsp* DungeonCandidateTeamInviteRsp::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamInviteRsp* n = new DungeonCandidateTeamInviteRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamInviteRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamInviteRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamInviteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamInviteRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamInviteRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamInviteRsp)
  return false;
#undef DO_
}

void DungeonCandidateTeamInviteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamInviteRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamInviteRsp)
}

::google::protobuf::uint8* DungeonCandidateTeamInviteRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamInviteRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamInviteRsp)
  return target;
}

size_t DungeonCandidateTeamInviteRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamInviteRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamInviteRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamInviteRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamInviteRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamInviteRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamInviteRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamInviteRsp)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamInviteRsp::MergeFrom(const DungeonCandidateTeamInviteRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamInviteRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void DungeonCandidateTeamInviteRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamInviteRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamInviteRsp::CopyFrom(const DungeonCandidateTeamInviteRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamInviteRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamInviteRsp::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamInviteRsp::Swap(DungeonCandidateTeamInviteRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamInviteRsp::InternalSwap(DungeonCandidateTeamInviteRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamInviteRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamInviteRsp

// int32 retcode = 1;
void DungeonCandidateTeamInviteRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonCandidateTeamInviteRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInviteRsp.retcode)
  return retcode_;
}
void DungeonCandidateTeamInviteRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInviteRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamKickReq::kPlayerUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamKickReq::DungeonCandidateTeamKickReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamKickReq)
}
DungeonCandidateTeamKickReq::DungeonCandidateTeamKickReq(const DungeonCandidateTeamKickReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_uid_ = from.player_uid_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamKickReq)
}

void DungeonCandidateTeamKickReq::SharedCtor() {
  player_uid_ = 0u;
  _cached_size_ = 0;
}

DungeonCandidateTeamKickReq::~DungeonCandidateTeamKickReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamKickReq)
  SharedDtor();
}

void DungeonCandidateTeamKickReq::SharedDtor() {
}

void DungeonCandidateTeamKickReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamKickReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamKickReq& DungeonCandidateTeamKickReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamKickReq* DungeonCandidateTeamKickReq::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamKickReq* n = new DungeonCandidateTeamKickReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamKickReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamKickReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_uid_ = 0u;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamKickReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamKickReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 player_uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamKickReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamKickReq)
  return false;
#undef DO_
}

void DungeonCandidateTeamKickReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamKickReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 1;
  if (this->player_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamKickReq)
}

::google::protobuf::uint8* DungeonCandidateTeamKickReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamKickReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 1;
  if (this->player_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamKickReq)
  return target;
}

size_t DungeonCandidateTeamKickReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamKickReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 player_uid = 1;
  if (this->player_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamKickReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamKickReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamKickReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamKickReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamKickReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamKickReq)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamKickReq::MergeFrom(const DungeonCandidateTeamKickReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamKickReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_uid() != 0) {
    set_player_uid(from.player_uid());
  }
}

void DungeonCandidateTeamKickReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamKickReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamKickReq::CopyFrom(const DungeonCandidateTeamKickReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamKickReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamKickReq::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamKickReq::Swap(DungeonCandidateTeamKickReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamKickReq::InternalSwap(DungeonCandidateTeamKickReq* other) {
  using std::swap;
  swap(player_uid_, other->player_uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamKickReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamKickReq

// uint32 player_uid = 1;
void DungeonCandidateTeamKickReq::clear_player_uid() {
  player_uid_ = 0u;
}
::google::protobuf::uint32 DungeonCandidateTeamKickReq::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamKickReq.player_uid)
  return player_uid_;
}
void DungeonCandidateTeamKickReq::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamKickReq.player_uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamKickRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamKickRsp::DungeonCandidateTeamKickRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamKickRsp)
}
DungeonCandidateTeamKickRsp::DungeonCandidateTeamKickRsp(const DungeonCandidateTeamKickRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamKickRsp)
}

void DungeonCandidateTeamKickRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

DungeonCandidateTeamKickRsp::~DungeonCandidateTeamKickRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamKickRsp)
  SharedDtor();
}

void DungeonCandidateTeamKickRsp::SharedDtor() {
}

void DungeonCandidateTeamKickRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamKickRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamKickRsp& DungeonCandidateTeamKickRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamKickRsp* DungeonCandidateTeamKickRsp::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamKickRsp* n = new DungeonCandidateTeamKickRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamKickRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamKickRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamKickRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamKickRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamKickRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamKickRsp)
  return false;
#undef DO_
}

void DungeonCandidateTeamKickRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamKickRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamKickRsp)
}

::google::protobuf::uint8* DungeonCandidateTeamKickRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamKickRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamKickRsp)
  return target;
}

size_t DungeonCandidateTeamKickRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamKickRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamKickRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamKickRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamKickRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamKickRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamKickRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamKickRsp)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamKickRsp::MergeFrom(const DungeonCandidateTeamKickRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamKickRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void DungeonCandidateTeamKickRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamKickRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamKickRsp::CopyFrom(const DungeonCandidateTeamKickRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamKickRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamKickRsp::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamKickRsp::Swap(DungeonCandidateTeamKickRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamKickRsp::InternalSwap(DungeonCandidateTeamKickRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamKickRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamKickRsp

// int32 retcode = 1;
void DungeonCandidateTeamKickRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonCandidateTeamKickRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamKickRsp.retcode)
  return retcode_;
}
void DungeonCandidateTeamKickRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamKickRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamLeaveReq::DungeonCandidateTeamLeaveReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamLeaveReq)
}
DungeonCandidateTeamLeaveReq::DungeonCandidateTeamLeaveReq(const DungeonCandidateTeamLeaveReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamLeaveReq)
}

void DungeonCandidateTeamLeaveReq::SharedCtor() {
  _cached_size_ = 0;
}

DungeonCandidateTeamLeaveReq::~DungeonCandidateTeamLeaveReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamLeaveReq)
  SharedDtor();
}

void DungeonCandidateTeamLeaveReq::SharedDtor() {
}

void DungeonCandidateTeamLeaveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamLeaveReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamLeaveReq& DungeonCandidateTeamLeaveReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamLeaveReq* DungeonCandidateTeamLeaveReq::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamLeaveReq* n = new DungeonCandidateTeamLeaveReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamLeaveReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamLeaveReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamLeaveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamLeaveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamLeaveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamLeaveReq)
  return false;
#undef DO_
}

void DungeonCandidateTeamLeaveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamLeaveReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamLeaveReq)
}

::google::protobuf::uint8* DungeonCandidateTeamLeaveReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamLeaveReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamLeaveReq)
  return target;
}

size_t DungeonCandidateTeamLeaveReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamLeaveReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamLeaveReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamLeaveReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamLeaveReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamLeaveReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamLeaveReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamLeaveReq)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamLeaveReq::MergeFrom(const DungeonCandidateTeamLeaveReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamLeaveReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DungeonCandidateTeamLeaveReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamLeaveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamLeaveReq::CopyFrom(const DungeonCandidateTeamLeaveReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamLeaveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamLeaveReq::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamLeaveReq::Swap(DungeonCandidateTeamLeaveReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamLeaveReq::InternalSwap(DungeonCandidateTeamLeaveReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamLeaveReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamLeaveReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamLeaveRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamLeaveRsp::DungeonCandidateTeamLeaveRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamLeaveRsp)
}
DungeonCandidateTeamLeaveRsp::DungeonCandidateTeamLeaveRsp(const DungeonCandidateTeamLeaveRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamLeaveRsp)
}

void DungeonCandidateTeamLeaveRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

DungeonCandidateTeamLeaveRsp::~DungeonCandidateTeamLeaveRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamLeaveRsp)
  SharedDtor();
}

void DungeonCandidateTeamLeaveRsp::SharedDtor() {
}

void DungeonCandidateTeamLeaveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamLeaveRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamLeaveRsp& DungeonCandidateTeamLeaveRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamLeaveRsp* DungeonCandidateTeamLeaveRsp::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamLeaveRsp* n = new DungeonCandidateTeamLeaveRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamLeaveRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamLeaveRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamLeaveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamLeaveRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamLeaveRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamLeaveRsp)
  return false;
#undef DO_
}

void DungeonCandidateTeamLeaveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamLeaveRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamLeaveRsp)
}

::google::protobuf::uint8* DungeonCandidateTeamLeaveRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamLeaveRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamLeaveRsp)
  return target;
}

size_t DungeonCandidateTeamLeaveRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamLeaveRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamLeaveRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamLeaveRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamLeaveRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamLeaveRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamLeaveRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamLeaveRsp)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamLeaveRsp::MergeFrom(const DungeonCandidateTeamLeaveRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamLeaveRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void DungeonCandidateTeamLeaveRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamLeaveRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamLeaveRsp::CopyFrom(const DungeonCandidateTeamLeaveRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamLeaveRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamLeaveRsp::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamLeaveRsp::Swap(DungeonCandidateTeamLeaveRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamLeaveRsp::InternalSwap(DungeonCandidateTeamLeaveRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamLeaveRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamLeaveRsp

// int32 retcode = 1;
void DungeonCandidateTeamLeaveRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonCandidateTeamLeaveRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamLeaveRsp.retcode)
  return retcode_;
}
void DungeonCandidateTeamLeaveRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamLeaveRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamReplyInviteReq::kIsAcceptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamReplyInviteReq::DungeonCandidateTeamReplyInviteReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamReplyInviteReq)
}
DungeonCandidateTeamReplyInviteReq::DungeonCandidateTeamReplyInviteReq(const DungeonCandidateTeamReplyInviteReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_accept_ = from.is_accept_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamReplyInviteReq)
}

void DungeonCandidateTeamReplyInviteReq::SharedCtor() {
  is_accept_ = false;
  _cached_size_ = 0;
}

DungeonCandidateTeamReplyInviteReq::~DungeonCandidateTeamReplyInviteReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamReplyInviteReq)
  SharedDtor();
}

void DungeonCandidateTeamReplyInviteReq::SharedDtor() {
}

void DungeonCandidateTeamReplyInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamReplyInviteReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamReplyInviteReq& DungeonCandidateTeamReplyInviteReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamReplyInviteReq* DungeonCandidateTeamReplyInviteReq::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamReplyInviteReq* n = new DungeonCandidateTeamReplyInviteReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamReplyInviteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamReplyInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_accept_ = false;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamReplyInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamReplyInviteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_accept = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_accept_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamReplyInviteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamReplyInviteReq)
  return false;
#undef DO_
}

void DungeonCandidateTeamReplyInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamReplyInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_accept = 1;
  if (this->is_accept() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_accept(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamReplyInviteReq)
}

::google::protobuf::uint8* DungeonCandidateTeamReplyInviteReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamReplyInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_accept = 1;
  if (this->is_accept() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_accept(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamReplyInviteReq)
  return target;
}

size_t DungeonCandidateTeamReplyInviteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamReplyInviteReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_accept = 1;
  if (this->is_accept() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamReplyInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamReplyInviteReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamReplyInviteReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamReplyInviteReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamReplyInviteReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamReplyInviteReq)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamReplyInviteReq::MergeFrom(const DungeonCandidateTeamReplyInviteReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamReplyInviteReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_accept() != 0) {
    set_is_accept(from.is_accept());
  }
}

void DungeonCandidateTeamReplyInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamReplyInviteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamReplyInviteReq::CopyFrom(const DungeonCandidateTeamReplyInviteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamReplyInviteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamReplyInviteReq::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamReplyInviteReq::Swap(DungeonCandidateTeamReplyInviteReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamReplyInviteReq::InternalSwap(DungeonCandidateTeamReplyInviteReq* other) {
  using std::swap;
  swap(is_accept_, other->is_accept_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamReplyInviteReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamReplyInviteReq

// bool is_accept = 1;
void DungeonCandidateTeamReplyInviteReq::clear_is_accept() {
  is_accept_ = false;
}
bool DungeonCandidateTeamReplyInviteReq::is_accept() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamReplyInviteReq.is_accept)
  return is_accept_;
}
void DungeonCandidateTeamReplyInviteReq::set_is_accept(bool value) {
  
  is_accept_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamReplyInviteReq.is_accept)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamReplyInviteRsp::kRetcodeFieldNumber;
const int DungeonCandidateTeamReplyInviteRsp::kIsTransPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamReplyInviteRsp::DungeonCandidateTeamReplyInviteRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamReplyInviteRsp)
}
DungeonCandidateTeamReplyInviteRsp::DungeonCandidateTeamReplyInviteRsp(const DungeonCandidateTeamReplyInviteRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_trans_point_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(is_trans_point_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamReplyInviteRsp)
}

void DungeonCandidateTeamReplyInviteRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_trans_point_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(is_trans_point_));
  _cached_size_ = 0;
}

DungeonCandidateTeamReplyInviteRsp::~DungeonCandidateTeamReplyInviteRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamReplyInviteRsp)
  SharedDtor();
}

void DungeonCandidateTeamReplyInviteRsp::SharedDtor() {
}

void DungeonCandidateTeamReplyInviteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamReplyInviteRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamReplyInviteRsp& DungeonCandidateTeamReplyInviteRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamReplyInviteRsp* DungeonCandidateTeamReplyInviteRsp::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamReplyInviteRsp* n = new DungeonCandidateTeamReplyInviteRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamReplyInviteRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamReplyInviteRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_trans_point_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(is_trans_point_));
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamReplyInviteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamReplyInviteRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_trans_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trans_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamReplyInviteRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamReplyInviteRsp)
  return false;
#undef DO_
}

void DungeonCandidateTeamReplyInviteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamReplyInviteRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // bool is_trans_point = 2;
  if (this->is_trans_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_trans_point(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamReplyInviteRsp)
}

::google::protobuf::uint8* DungeonCandidateTeamReplyInviteRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamReplyInviteRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // bool is_trans_point = 2;
  if (this->is_trans_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_trans_point(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamReplyInviteRsp)
  return target;
}

size_t DungeonCandidateTeamReplyInviteRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamReplyInviteRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // bool is_trans_point = 2;
  if (this->is_trans_point() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamReplyInviteRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamReplyInviteRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamReplyInviteRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamReplyInviteRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamReplyInviteRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamReplyInviteRsp)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamReplyInviteRsp::MergeFrom(const DungeonCandidateTeamReplyInviteRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamReplyInviteRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.is_trans_point() != 0) {
    set_is_trans_point(from.is_trans_point());
  }
}

void DungeonCandidateTeamReplyInviteRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamReplyInviteRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamReplyInviteRsp::CopyFrom(const DungeonCandidateTeamReplyInviteRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamReplyInviteRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamReplyInviteRsp::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamReplyInviteRsp::Swap(DungeonCandidateTeamReplyInviteRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamReplyInviteRsp::InternalSwap(DungeonCandidateTeamReplyInviteRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(is_trans_point_, other->is_trans_point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamReplyInviteRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamReplyInviteRsp

// int32 retcode = 1;
void DungeonCandidateTeamReplyInviteRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonCandidateTeamReplyInviteRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamReplyInviteRsp.retcode)
  return retcode_;
}
void DungeonCandidateTeamReplyInviteRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamReplyInviteRsp.retcode)
}

// bool is_trans_point = 2;
void DungeonCandidateTeamReplyInviteRsp::clear_is_trans_point() {
  is_trans_point_ = false;
}
bool DungeonCandidateTeamReplyInviteRsp::is_trans_point() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamReplyInviteRsp.is_trans_point)
  return is_trans_point_;
}
void DungeonCandidateTeamReplyInviteRsp::set_is_trans_point(bool value) {
  
  is_trans_point_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamReplyInviteRsp.is_trans_point)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamSetReadyReq::kIsReadyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamSetReadyReq::DungeonCandidateTeamSetReadyReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamSetReadyReq)
}
DungeonCandidateTeamSetReadyReq::DungeonCandidateTeamSetReadyReq(const DungeonCandidateTeamSetReadyReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_ready_ = from.is_ready_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamSetReadyReq)
}

void DungeonCandidateTeamSetReadyReq::SharedCtor() {
  is_ready_ = false;
  _cached_size_ = 0;
}

DungeonCandidateTeamSetReadyReq::~DungeonCandidateTeamSetReadyReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamSetReadyReq)
  SharedDtor();
}

void DungeonCandidateTeamSetReadyReq::SharedDtor() {
}

void DungeonCandidateTeamSetReadyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamSetReadyReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamSetReadyReq& DungeonCandidateTeamSetReadyReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamSetReadyReq* DungeonCandidateTeamSetReadyReq::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamSetReadyReq* n = new DungeonCandidateTeamSetReadyReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamSetReadyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamSetReadyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_ready_ = false;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamSetReadyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamSetReadyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_ready = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamSetReadyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamSetReadyReq)
  return false;
#undef DO_
}

void DungeonCandidateTeamSetReadyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamSetReadyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_ready = 1;
  if (this->is_ready() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_ready(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamSetReadyReq)
}

::google::protobuf::uint8* DungeonCandidateTeamSetReadyReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamSetReadyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_ready = 1;
  if (this->is_ready() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_ready(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamSetReadyReq)
  return target;
}

size_t DungeonCandidateTeamSetReadyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamSetReadyReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_ready = 1;
  if (this->is_ready() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamSetReadyReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamSetReadyReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamSetReadyReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamSetReadyReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamSetReadyReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamSetReadyReq)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamSetReadyReq::MergeFrom(const DungeonCandidateTeamSetReadyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamSetReadyReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_ready() != 0) {
    set_is_ready(from.is_ready());
  }
}

void DungeonCandidateTeamSetReadyReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamSetReadyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamSetReadyReq::CopyFrom(const DungeonCandidateTeamSetReadyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamSetReadyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamSetReadyReq::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamSetReadyReq::Swap(DungeonCandidateTeamSetReadyReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamSetReadyReq::InternalSwap(DungeonCandidateTeamSetReadyReq* other) {
  using std::swap;
  swap(is_ready_, other->is_ready_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamSetReadyReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamSetReadyReq

// bool is_ready = 1;
void DungeonCandidateTeamSetReadyReq::clear_is_ready() {
  is_ready_ = false;
}
bool DungeonCandidateTeamSetReadyReq::is_ready() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamSetReadyReq.is_ready)
  return is_ready_;
}
void DungeonCandidateTeamSetReadyReq::set_is_ready(bool value) {
  
  is_ready_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamSetReadyReq.is_ready)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamSetReadyRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamSetReadyRsp::DungeonCandidateTeamSetReadyRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamSetReadyRsp)
}
DungeonCandidateTeamSetReadyRsp::DungeonCandidateTeamSetReadyRsp(const DungeonCandidateTeamSetReadyRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamSetReadyRsp)
}

void DungeonCandidateTeamSetReadyRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

DungeonCandidateTeamSetReadyRsp::~DungeonCandidateTeamSetReadyRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamSetReadyRsp)
  SharedDtor();
}

void DungeonCandidateTeamSetReadyRsp::SharedDtor() {
}

void DungeonCandidateTeamSetReadyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamSetReadyRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamSetReadyRsp& DungeonCandidateTeamSetReadyRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamSetReadyRsp* DungeonCandidateTeamSetReadyRsp::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamSetReadyRsp* n = new DungeonCandidateTeamSetReadyRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamSetReadyRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamSetReadyRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamSetReadyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamSetReadyRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamSetReadyRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamSetReadyRsp)
  return false;
#undef DO_
}

void DungeonCandidateTeamSetReadyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamSetReadyRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamSetReadyRsp)
}

::google::protobuf::uint8* DungeonCandidateTeamSetReadyRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamSetReadyRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamSetReadyRsp)
  return target;
}

size_t DungeonCandidateTeamSetReadyRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamSetReadyRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamSetReadyRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamSetReadyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamSetReadyRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamSetReadyRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamSetReadyRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamSetReadyRsp)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamSetReadyRsp::MergeFrom(const DungeonCandidateTeamSetReadyRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamSetReadyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void DungeonCandidateTeamSetReadyRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamSetReadyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamSetReadyRsp::CopyFrom(const DungeonCandidateTeamSetReadyRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamSetReadyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamSetReadyRsp::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamSetReadyRsp::Swap(DungeonCandidateTeamSetReadyRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamSetReadyRsp::InternalSwap(DungeonCandidateTeamSetReadyRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamSetReadyRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamSetReadyRsp

// int32 retcode = 1;
void DungeonCandidateTeamSetReadyRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonCandidateTeamSetReadyRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamSetReadyRsp.retcode)
  return retcode_;
}
void DungeonCandidateTeamSetReadyRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamSetReadyRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamChangeAvatarReq::kAvatarGuidListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamChangeAvatarReq::DungeonCandidateTeamChangeAvatarReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamChangeAvatarReq)
}
DungeonCandidateTeamChangeAvatarReq::DungeonCandidateTeamChangeAvatarReq(const DungeonCandidateTeamChangeAvatarReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      avatar_guid_list_(from.avatar_guid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamChangeAvatarReq)
}

void DungeonCandidateTeamChangeAvatarReq::SharedCtor() {
  _cached_size_ = 0;
}

DungeonCandidateTeamChangeAvatarReq::~DungeonCandidateTeamChangeAvatarReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamChangeAvatarReq)
  SharedDtor();
}

void DungeonCandidateTeamChangeAvatarReq::SharedDtor() {
}

void DungeonCandidateTeamChangeAvatarReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamChangeAvatarReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamChangeAvatarReq& DungeonCandidateTeamChangeAvatarReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamChangeAvatarReq* DungeonCandidateTeamChangeAvatarReq::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamChangeAvatarReq* n = new DungeonCandidateTeamChangeAvatarReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamChangeAvatarReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamChangeAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_guid_list_.Clear();
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamChangeAvatarReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamChangeAvatarReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 avatar_guid_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_avatar_guid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10u, input, this->mutable_avatar_guid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamChangeAvatarReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamChangeAvatarReq)
  return false;
#undef DO_
}

void DungeonCandidateTeamChangeAvatarReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamChangeAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 avatar_guid_list = 1;
  if (this->avatar_guid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _avatar_guid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->avatar_guid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->avatar_guid_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamChangeAvatarReq)
}

::google::protobuf::uint8* DungeonCandidateTeamChangeAvatarReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamChangeAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 avatar_guid_list = 1;
  if (this->avatar_guid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _avatar_guid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->avatar_guid_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamChangeAvatarReq)
  return target;
}

size_t DungeonCandidateTeamChangeAvatarReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamChangeAvatarReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 avatar_guid_list = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->avatar_guid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _avatar_guid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamChangeAvatarReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamChangeAvatarReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamChangeAvatarReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamChangeAvatarReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamChangeAvatarReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamChangeAvatarReq)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamChangeAvatarReq::MergeFrom(const DungeonCandidateTeamChangeAvatarReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamChangeAvatarReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatar_guid_list_.MergeFrom(from.avatar_guid_list_);
}

void DungeonCandidateTeamChangeAvatarReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamChangeAvatarReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamChangeAvatarReq::CopyFrom(const DungeonCandidateTeamChangeAvatarReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamChangeAvatarReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamChangeAvatarReq::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamChangeAvatarReq::Swap(DungeonCandidateTeamChangeAvatarReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamChangeAvatarReq::InternalSwap(DungeonCandidateTeamChangeAvatarReq* other) {
  using std::swap;
  avatar_guid_list_.InternalSwap(&other->avatar_guid_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamChangeAvatarReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamChangeAvatarReq

// repeated uint64 avatar_guid_list = 1;
int DungeonCandidateTeamChangeAvatarReq::avatar_guid_list_size() const {
  return avatar_guid_list_.size();
}
void DungeonCandidateTeamChangeAvatarReq::clear_avatar_guid_list() {
  avatar_guid_list_.Clear();
}
::google::protobuf::uint64 DungeonCandidateTeamChangeAvatarReq::avatar_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamChangeAvatarReq.avatar_guid_list)
  return avatar_guid_list_.Get(index);
}
void DungeonCandidateTeamChangeAvatarReq::set_avatar_guid_list(int index, ::google::protobuf::uint64 value) {
  avatar_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamChangeAvatarReq.avatar_guid_list)
}
void DungeonCandidateTeamChangeAvatarReq::add_avatar_guid_list(::google::protobuf::uint64 value) {
  avatar_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.DungeonCandidateTeamChangeAvatarReq.avatar_guid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
DungeonCandidateTeamChangeAvatarReq::avatar_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonCandidateTeamChangeAvatarReq.avatar_guid_list)
  return avatar_guid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
DungeonCandidateTeamChangeAvatarReq::mutable_avatar_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonCandidateTeamChangeAvatarReq.avatar_guid_list)
  return &avatar_guid_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamChangeAvatarRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamChangeAvatarRsp::DungeonCandidateTeamChangeAvatarRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamChangeAvatarRsp)
}
DungeonCandidateTeamChangeAvatarRsp::DungeonCandidateTeamChangeAvatarRsp(const DungeonCandidateTeamChangeAvatarRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamChangeAvatarRsp)
}

void DungeonCandidateTeamChangeAvatarRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

DungeonCandidateTeamChangeAvatarRsp::~DungeonCandidateTeamChangeAvatarRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamChangeAvatarRsp)
  SharedDtor();
}

void DungeonCandidateTeamChangeAvatarRsp::SharedDtor() {
}

void DungeonCandidateTeamChangeAvatarRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamChangeAvatarRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamChangeAvatarRsp& DungeonCandidateTeamChangeAvatarRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamChangeAvatarRsp* DungeonCandidateTeamChangeAvatarRsp::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamChangeAvatarRsp* n = new DungeonCandidateTeamChangeAvatarRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamChangeAvatarRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamChangeAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamChangeAvatarRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamChangeAvatarRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamChangeAvatarRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamChangeAvatarRsp)
  return false;
#undef DO_
}

void DungeonCandidateTeamChangeAvatarRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamChangeAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamChangeAvatarRsp)
}

::google::protobuf::uint8* DungeonCandidateTeamChangeAvatarRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamChangeAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamChangeAvatarRsp)
  return target;
}

size_t DungeonCandidateTeamChangeAvatarRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamChangeAvatarRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamChangeAvatarRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamChangeAvatarRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamChangeAvatarRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamChangeAvatarRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamChangeAvatarRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamChangeAvatarRsp)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamChangeAvatarRsp::MergeFrom(const DungeonCandidateTeamChangeAvatarRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamChangeAvatarRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void DungeonCandidateTeamChangeAvatarRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamChangeAvatarRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamChangeAvatarRsp::CopyFrom(const DungeonCandidateTeamChangeAvatarRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamChangeAvatarRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamChangeAvatarRsp::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamChangeAvatarRsp::Swap(DungeonCandidateTeamChangeAvatarRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamChangeAvatarRsp::InternalSwap(DungeonCandidateTeamChangeAvatarRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamChangeAvatarRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamChangeAvatarRsp

// int32 retcode = 1;
void DungeonCandidateTeamChangeAvatarRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonCandidateTeamChangeAvatarRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamChangeAvatarRsp.retcode)
  return retcode_;
}
void DungeonCandidateTeamChangeAvatarRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamChangeAvatarRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DailyDungeonEntryInfo::kDungeonEntryIdFieldNumber;
const int DailyDungeonEntryInfo::kDungeonEntryConfigIdFieldNumber;
const int DailyDungeonEntryInfo::kRecommendDungeonIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DailyDungeonEntryInfo::DailyDungeonEntryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DailyDungeonEntryInfo)
}
DailyDungeonEntryInfo::DailyDungeonEntryInfo(const DailyDungeonEntryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dungeon_entry_id_, &from.dungeon_entry_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&recommend_dungeon_id_) -
    reinterpret_cast<char*>(&dungeon_entry_id_)) + sizeof(recommend_dungeon_id_));
  // @@protoc_insertion_point(copy_constructor:proto.DailyDungeonEntryInfo)
}

void DailyDungeonEntryInfo::SharedCtor() {
  ::memset(&dungeon_entry_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recommend_dungeon_id_) -
      reinterpret_cast<char*>(&dungeon_entry_id_)) + sizeof(recommend_dungeon_id_));
  _cached_size_ = 0;
}

DailyDungeonEntryInfo::~DailyDungeonEntryInfo() {
  // @@protoc_insertion_point(destructor:proto.DailyDungeonEntryInfo)
  SharedDtor();
}

void DailyDungeonEntryInfo::SharedDtor() {
}

void DailyDungeonEntryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyDungeonEntryInfo::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DailyDungeonEntryInfo& DailyDungeonEntryInfo::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DailyDungeonEntryInfo* DailyDungeonEntryInfo::New(::google::protobuf::Arena* arena) const {
  DailyDungeonEntryInfo* n = new DailyDungeonEntryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DailyDungeonEntryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DailyDungeonEntryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dungeon_entry_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recommend_dungeon_id_) -
      reinterpret_cast<char*>(&dungeon_entry_id_)) + sizeof(recommend_dungeon_id_));
  _internal_metadata_.Clear();
}

bool DailyDungeonEntryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DailyDungeonEntryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dungeon_entry_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_entry_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dungeon_entry_config_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_entry_config_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 recommend_dungeon_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recommend_dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DailyDungeonEntryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DailyDungeonEntryInfo)
  return false;
#undef DO_
}

void DailyDungeonEntryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DailyDungeonEntryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dungeon_entry_id = 1;
  if (this->dungeon_entry_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dungeon_entry_id(), output);
  }

  // uint32 dungeon_entry_config_id = 2;
  if (this->dungeon_entry_config_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dungeon_entry_config_id(), output);
  }

  // uint32 recommend_dungeon_id = 3;
  if (this->recommend_dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->recommend_dungeon_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DailyDungeonEntryInfo)
}

::google::protobuf::uint8* DailyDungeonEntryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DailyDungeonEntryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dungeon_entry_id = 1;
  if (this->dungeon_entry_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dungeon_entry_id(), target);
  }

  // uint32 dungeon_entry_config_id = 2;
  if (this->dungeon_entry_config_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dungeon_entry_config_id(), target);
  }

  // uint32 recommend_dungeon_id = 3;
  if (this->recommend_dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->recommend_dungeon_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DailyDungeonEntryInfo)
  return target;
}

size_t DailyDungeonEntryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DailyDungeonEntryInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dungeon_entry_id = 1;
  if (this->dungeon_entry_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_entry_id());
  }

  // uint32 dungeon_entry_config_id = 2;
  if (this->dungeon_entry_config_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_entry_config_id());
  }

  // uint32 recommend_dungeon_id = 3;
  if (this->recommend_dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recommend_dungeon_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyDungeonEntryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DailyDungeonEntryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DailyDungeonEntryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DailyDungeonEntryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DailyDungeonEntryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DailyDungeonEntryInfo)
    MergeFrom(*source);
  }
}

void DailyDungeonEntryInfo::MergeFrom(const DailyDungeonEntryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DailyDungeonEntryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dungeon_entry_id() != 0) {
    set_dungeon_entry_id(from.dungeon_entry_id());
  }
  if (from.dungeon_entry_config_id() != 0) {
    set_dungeon_entry_config_id(from.dungeon_entry_config_id());
  }
  if (from.recommend_dungeon_id() != 0) {
    set_recommend_dungeon_id(from.recommend_dungeon_id());
  }
}

void DailyDungeonEntryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DailyDungeonEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyDungeonEntryInfo::CopyFrom(const DailyDungeonEntryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DailyDungeonEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyDungeonEntryInfo::IsInitialized() const {
  return true;
}

void DailyDungeonEntryInfo::Swap(DailyDungeonEntryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DailyDungeonEntryInfo::InternalSwap(DailyDungeonEntryInfo* other) {
  using std::swap;
  swap(dungeon_entry_id_, other->dungeon_entry_id_);
  swap(dungeon_entry_config_id_, other->dungeon_entry_config_id_);
  swap(recommend_dungeon_id_, other->recommend_dungeon_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DailyDungeonEntryInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DailyDungeonEntryInfo

// uint32 dungeon_entry_id = 1;
void DailyDungeonEntryInfo::clear_dungeon_entry_id() {
  dungeon_entry_id_ = 0u;
}
::google::protobuf::uint32 DailyDungeonEntryInfo::dungeon_entry_id() const {
  // @@protoc_insertion_point(field_get:proto.DailyDungeonEntryInfo.dungeon_entry_id)
  return dungeon_entry_id_;
}
void DailyDungeonEntryInfo::set_dungeon_entry_id(::google::protobuf::uint32 value) {
  
  dungeon_entry_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DailyDungeonEntryInfo.dungeon_entry_id)
}

// uint32 dungeon_entry_config_id = 2;
void DailyDungeonEntryInfo::clear_dungeon_entry_config_id() {
  dungeon_entry_config_id_ = 0u;
}
::google::protobuf::uint32 DailyDungeonEntryInfo::dungeon_entry_config_id() const {
  // @@protoc_insertion_point(field_get:proto.DailyDungeonEntryInfo.dungeon_entry_config_id)
  return dungeon_entry_config_id_;
}
void DailyDungeonEntryInfo::set_dungeon_entry_config_id(::google::protobuf::uint32 value) {
  
  dungeon_entry_config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DailyDungeonEntryInfo.dungeon_entry_config_id)
}

// uint32 recommend_dungeon_id = 3;
void DailyDungeonEntryInfo::clear_recommend_dungeon_id() {
  recommend_dungeon_id_ = 0u;
}
::google::protobuf::uint32 DailyDungeonEntryInfo::recommend_dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DailyDungeonEntryInfo.recommend_dungeon_id)
  return recommend_dungeon_id_;
}
void DailyDungeonEntryInfo::set_recommend_dungeon_id(::google::protobuf::uint32 value) {
  
  recommend_dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DailyDungeonEntryInfo.recommend_dungeon_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDailyDungeonEntryInfoReq::kSceneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDailyDungeonEntryInfoReq::GetDailyDungeonEntryInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetDailyDungeonEntryInfoReq)
}
GetDailyDungeonEntryInfoReq::GetDailyDungeonEntryInfoReq(const GetDailyDungeonEntryInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scene_id_ = from.scene_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GetDailyDungeonEntryInfoReq)
}

void GetDailyDungeonEntryInfoReq::SharedCtor() {
  scene_id_ = 0u;
  _cached_size_ = 0;
}

GetDailyDungeonEntryInfoReq::~GetDailyDungeonEntryInfoReq() {
  // @@protoc_insertion_point(destructor:proto.GetDailyDungeonEntryInfoReq)
  SharedDtor();
}

void GetDailyDungeonEntryInfoReq::SharedDtor() {
}

void GetDailyDungeonEntryInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDailyDungeonEntryInfoReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetDailyDungeonEntryInfoReq& GetDailyDungeonEntryInfoReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetDailyDungeonEntryInfoReq* GetDailyDungeonEntryInfoReq::New(::google::protobuf::Arena* arena) const {
  GetDailyDungeonEntryInfoReq* n = new GetDailyDungeonEntryInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDailyDungeonEntryInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetDailyDungeonEntryInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scene_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GetDailyDungeonEntryInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetDailyDungeonEntryInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 scene_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetDailyDungeonEntryInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetDailyDungeonEntryInfoReq)
  return false;
#undef DO_
}

void GetDailyDungeonEntryInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetDailyDungeonEntryInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 scene_id = 1;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scene_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetDailyDungeonEntryInfoReq)
}

::google::protobuf::uint8* GetDailyDungeonEntryInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetDailyDungeonEntryInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 scene_id = 1;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scene_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetDailyDungeonEntryInfoReq)
  return target;
}

size_t GetDailyDungeonEntryInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetDailyDungeonEntryInfoReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 scene_id = 1;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDailyDungeonEntryInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetDailyDungeonEntryInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDailyDungeonEntryInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDailyDungeonEntryInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetDailyDungeonEntryInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetDailyDungeonEntryInfoReq)
    MergeFrom(*source);
  }
}

void GetDailyDungeonEntryInfoReq::MergeFrom(const GetDailyDungeonEntryInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetDailyDungeonEntryInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
}

void GetDailyDungeonEntryInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetDailyDungeonEntryInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDailyDungeonEntryInfoReq::CopyFrom(const GetDailyDungeonEntryInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetDailyDungeonEntryInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDailyDungeonEntryInfoReq::IsInitialized() const {
  return true;
}

void GetDailyDungeonEntryInfoReq::Swap(GetDailyDungeonEntryInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDailyDungeonEntryInfoReq::InternalSwap(GetDailyDungeonEntryInfoReq* other) {
  using std::swap;
  swap(scene_id_, other->scene_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDailyDungeonEntryInfoReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDailyDungeonEntryInfoReq

// uint32 scene_id = 1;
void GetDailyDungeonEntryInfoReq::clear_scene_id() {
  scene_id_ = 0u;
}
::google::protobuf::uint32 GetDailyDungeonEntryInfoReq::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.GetDailyDungeonEntryInfoReq.scene_id)
  return scene_id_;
}
void GetDailyDungeonEntryInfoReq::set_scene_id(::google::protobuf::uint32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetDailyDungeonEntryInfoReq.scene_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDailyDungeonEntryInfoRsp::kRetcodeFieldNumber;
const int GetDailyDungeonEntryInfoRsp::kDailyDungeonInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDailyDungeonEntryInfoRsp::GetDailyDungeonEntryInfoRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetDailyDungeonEntryInfoRsp)
}
GetDailyDungeonEntryInfoRsp::GetDailyDungeonEntryInfoRsp(const GetDailyDungeonEntryInfoRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      daily_dungeon_info_list_(from.daily_dungeon_info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.GetDailyDungeonEntryInfoRsp)
}

void GetDailyDungeonEntryInfoRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

GetDailyDungeonEntryInfoRsp::~GetDailyDungeonEntryInfoRsp() {
  // @@protoc_insertion_point(destructor:proto.GetDailyDungeonEntryInfoRsp)
  SharedDtor();
}

void GetDailyDungeonEntryInfoRsp::SharedDtor() {
}

void GetDailyDungeonEntryInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDailyDungeonEntryInfoRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetDailyDungeonEntryInfoRsp& GetDailyDungeonEntryInfoRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetDailyDungeonEntryInfoRsp* GetDailyDungeonEntryInfoRsp::New(::google::protobuf::Arena* arena) const {
  GetDailyDungeonEntryInfoRsp* n = new GetDailyDungeonEntryInfoRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDailyDungeonEntryInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetDailyDungeonEntryInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  daily_dungeon_info_list_.Clear();
  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool GetDailyDungeonEntryInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetDailyDungeonEntryInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.DailyDungeonEntryInfo daily_dungeon_info_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daily_dungeon_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetDailyDungeonEntryInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetDailyDungeonEntryInfoRsp)
  return false;
#undef DO_
}

void GetDailyDungeonEntryInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetDailyDungeonEntryInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // repeated .proto.DailyDungeonEntryInfo daily_dungeon_info_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->daily_dungeon_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->daily_dungeon_info_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetDailyDungeonEntryInfoRsp)
}

::google::protobuf::uint8* GetDailyDungeonEntryInfoRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetDailyDungeonEntryInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // repeated .proto.DailyDungeonEntryInfo daily_dungeon_info_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->daily_dungeon_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->daily_dungeon_info_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetDailyDungeonEntryInfoRsp)
  return target;
}

size_t GetDailyDungeonEntryInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetDailyDungeonEntryInfoRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.DailyDungeonEntryInfo daily_dungeon_info_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->daily_dungeon_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->daily_dungeon_info_list(static_cast<int>(i)));
    }
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDailyDungeonEntryInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetDailyDungeonEntryInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDailyDungeonEntryInfoRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDailyDungeonEntryInfoRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetDailyDungeonEntryInfoRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetDailyDungeonEntryInfoRsp)
    MergeFrom(*source);
  }
}

void GetDailyDungeonEntryInfoRsp::MergeFrom(const GetDailyDungeonEntryInfoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetDailyDungeonEntryInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  daily_dungeon_info_list_.MergeFrom(from.daily_dungeon_info_list_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void GetDailyDungeonEntryInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetDailyDungeonEntryInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDailyDungeonEntryInfoRsp::CopyFrom(const GetDailyDungeonEntryInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetDailyDungeonEntryInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDailyDungeonEntryInfoRsp::IsInitialized() const {
  return true;
}

void GetDailyDungeonEntryInfoRsp::Swap(GetDailyDungeonEntryInfoRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDailyDungeonEntryInfoRsp::InternalSwap(GetDailyDungeonEntryInfoRsp* other) {
  using std::swap;
  daily_dungeon_info_list_.InternalSwap(&other->daily_dungeon_info_list_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDailyDungeonEntryInfoRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDailyDungeonEntryInfoRsp

// int32 retcode = 1;
void GetDailyDungeonEntryInfoRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GetDailyDungeonEntryInfoRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetDailyDungeonEntryInfoRsp.retcode)
  return retcode_;
}
void GetDailyDungeonEntryInfoRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetDailyDungeonEntryInfoRsp.retcode)
}

// repeated .proto.DailyDungeonEntryInfo daily_dungeon_info_list = 2;
int GetDailyDungeonEntryInfoRsp::daily_dungeon_info_list_size() const {
  return daily_dungeon_info_list_.size();
}
void GetDailyDungeonEntryInfoRsp::clear_daily_dungeon_info_list() {
  daily_dungeon_info_list_.Clear();
}
const ::proto::DailyDungeonEntryInfo& GetDailyDungeonEntryInfoRsp::daily_dungeon_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetDailyDungeonEntryInfoRsp.daily_dungeon_info_list)
  return daily_dungeon_info_list_.Get(index);
}
::proto::DailyDungeonEntryInfo* GetDailyDungeonEntryInfoRsp::mutable_daily_dungeon_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetDailyDungeonEntryInfoRsp.daily_dungeon_info_list)
  return daily_dungeon_info_list_.Mutable(index);
}
::proto::DailyDungeonEntryInfo* GetDailyDungeonEntryInfoRsp::add_daily_dungeon_info_list() {
  // @@protoc_insertion_point(field_add:proto.GetDailyDungeonEntryInfoRsp.daily_dungeon_info_list)
  return daily_dungeon_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::DailyDungeonEntryInfo >*
GetDailyDungeonEntryInfoRsp::mutable_daily_dungeon_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetDailyDungeonEntryInfoRsp.daily_dungeon_info_list)
  return &daily_dungeon_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::DailyDungeonEntryInfo >&
GetDailyDungeonEntryInfoRsp::daily_dungeon_info_list() const {
  // @@protoc_insertion_point(field_list:proto.GetDailyDungeonEntryInfoRsp.daily_dungeon_info_list)
  return daily_dungeon_info_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonSlipRevivePointActivateReq::kSlipRevivePointIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonSlipRevivePointActivateReq::DungeonSlipRevivePointActivateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonSlipRevivePointActivateReq)
}
DungeonSlipRevivePointActivateReq::DungeonSlipRevivePointActivateReq(const DungeonSlipRevivePointActivateReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slip_revive_point_id_ = from.slip_revive_point_id_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonSlipRevivePointActivateReq)
}

void DungeonSlipRevivePointActivateReq::SharedCtor() {
  slip_revive_point_id_ = 0u;
  _cached_size_ = 0;
}

DungeonSlipRevivePointActivateReq::~DungeonSlipRevivePointActivateReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonSlipRevivePointActivateReq)
  SharedDtor();
}

void DungeonSlipRevivePointActivateReq::SharedDtor() {
}

void DungeonSlipRevivePointActivateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonSlipRevivePointActivateReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonSlipRevivePointActivateReq& DungeonSlipRevivePointActivateReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonSlipRevivePointActivateReq* DungeonSlipRevivePointActivateReq::New(::google::protobuf::Arena* arena) const {
  DungeonSlipRevivePointActivateReq* n = new DungeonSlipRevivePointActivateReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonSlipRevivePointActivateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonSlipRevivePointActivateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slip_revive_point_id_ = 0u;
  _internal_metadata_.Clear();
}

bool DungeonSlipRevivePointActivateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonSlipRevivePointActivateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 slip_revive_point_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slip_revive_point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonSlipRevivePointActivateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonSlipRevivePointActivateReq)
  return false;
#undef DO_
}

void DungeonSlipRevivePointActivateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonSlipRevivePointActivateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 slip_revive_point_id = 1;
  if (this->slip_revive_point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slip_revive_point_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonSlipRevivePointActivateReq)
}

::google::protobuf::uint8* DungeonSlipRevivePointActivateReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonSlipRevivePointActivateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 slip_revive_point_id = 1;
  if (this->slip_revive_point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slip_revive_point_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonSlipRevivePointActivateReq)
  return target;
}

size_t DungeonSlipRevivePointActivateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonSlipRevivePointActivateReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 slip_revive_point_id = 1;
  if (this->slip_revive_point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slip_revive_point_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonSlipRevivePointActivateReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonSlipRevivePointActivateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonSlipRevivePointActivateReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonSlipRevivePointActivateReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonSlipRevivePointActivateReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonSlipRevivePointActivateReq)
    MergeFrom(*source);
  }
}

void DungeonSlipRevivePointActivateReq::MergeFrom(const DungeonSlipRevivePointActivateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonSlipRevivePointActivateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.slip_revive_point_id() != 0) {
    set_slip_revive_point_id(from.slip_revive_point_id());
  }
}

void DungeonSlipRevivePointActivateReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonSlipRevivePointActivateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonSlipRevivePointActivateReq::CopyFrom(const DungeonSlipRevivePointActivateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonSlipRevivePointActivateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonSlipRevivePointActivateReq::IsInitialized() const {
  return true;
}

void DungeonSlipRevivePointActivateReq::Swap(DungeonSlipRevivePointActivateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonSlipRevivePointActivateReq::InternalSwap(DungeonSlipRevivePointActivateReq* other) {
  using std::swap;
  swap(slip_revive_point_id_, other->slip_revive_point_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonSlipRevivePointActivateReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonSlipRevivePointActivateReq

// uint32 slip_revive_point_id = 1;
void DungeonSlipRevivePointActivateReq::clear_slip_revive_point_id() {
  slip_revive_point_id_ = 0u;
}
::google::protobuf::uint32 DungeonSlipRevivePointActivateReq::slip_revive_point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSlipRevivePointActivateReq.slip_revive_point_id)
  return slip_revive_point_id_;
}
void DungeonSlipRevivePointActivateReq::set_slip_revive_point_id(::google::protobuf::uint32 value) {
  
  slip_revive_point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonSlipRevivePointActivateReq.slip_revive_point_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonSlipRevivePointActivateRsp::kRetcodeFieldNumber;
const int DungeonSlipRevivePointActivateRsp::kSlipRevivePointIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonSlipRevivePointActivateRsp::DungeonSlipRevivePointActivateRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonSlipRevivePointActivateRsp)
}
DungeonSlipRevivePointActivateRsp::DungeonSlipRevivePointActivateRsp(const DungeonSlipRevivePointActivateRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&slip_revive_point_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(slip_revive_point_id_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonSlipRevivePointActivateRsp)
}

void DungeonSlipRevivePointActivateRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slip_revive_point_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(slip_revive_point_id_));
  _cached_size_ = 0;
}

DungeonSlipRevivePointActivateRsp::~DungeonSlipRevivePointActivateRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonSlipRevivePointActivateRsp)
  SharedDtor();
}

void DungeonSlipRevivePointActivateRsp::SharedDtor() {
}

void DungeonSlipRevivePointActivateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonSlipRevivePointActivateRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonSlipRevivePointActivateRsp& DungeonSlipRevivePointActivateRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonSlipRevivePointActivateRsp* DungeonSlipRevivePointActivateRsp::New(::google::protobuf::Arena* arena) const {
  DungeonSlipRevivePointActivateRsp* n = new DungeonSlipRevivePointActivateRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonSlipRevivePointActivateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonSlipRevivePointActivateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slip_revive_point_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(slip_revive_point_id_));
  _internal_metadata_.Clear();
}

bool DungeonSlipRevivePointActivateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonSlipRevivePointActivateRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 slip_revive_point_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slip_revive_point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonSlipRevivePointActivateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonSlipRevivePointActivateRsp)
  return false;
#undef DO_
}

void DungeonSlipRevivePointActivateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonSlipRevivePointActivateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 slip_revive_point_id = 2;
  if (this->slip_revive_point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slip_revive_point_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonSlipRevivePointActivateRsp)
}

::google::protobuf::uint8* DungeonSlipRevivePointActivateRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonSlipRevivePointActivateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 slip_revive_point_id = 2;
  if (this->slip_revive_point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slip_revive_point_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonSlipRevivePointActivateRsp)
  return target;
}

size_t DungeonSlipRevivePointActivateRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonSlipRevivePointActivateRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 slip_revive_point_id = 2;
  if (this->slip_revive_point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slip_revive_point_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonSlipRevivePointActivateRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonSlipRevivePointActivateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonSlipRevivePointActivateRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonSlipRevivePointActivateRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonSlipRevivePointActivateRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonSlipRevivePointActivateRsp)
    MergeFrom(*source);
  }
}

void DungeonSlipRevivePointActivateRsp::MergeFrom(const DungeonSlipRevivePointActivateRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonSlipRevivePointActivateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.slip_revive_point_id() != 0) {
    set_slip_revive_point_id(from.slip_revive_point_id());
  }
}

void DungeonSlipRevivePointActivateRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonSlipRevivePointActivateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonSlipRevivePointActivateRsp::CopyFrom(const DungeonSlipRevivePointActivateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonSlipRevivePointActivateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonSlipRevivePointActivateRsp::IsInitialized() const {
  return true;
}

void DungeonSlipRevivePointActivateRsp::Swap(DungeonSlipRevivePointActivateRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonSlipRevivePointActivateRsp::InternalSwap(DungeonSlipRevivePointActivateRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(slip_revive_point_id_, other->slip_revive_point_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonSlipRevivePointActivateRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonSlipRevivePointActivateRsp

// int32 retcode = 1;
void DungeonSlipRevivePointActivateRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonSlipRevivePointActivateRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSlipRevivePointActivateRsp.retcode)
  return retcode_;
}
void DungeonSlipRevivePointActivateRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonSlipRevivePointActivateRsp.retcode)
}

// uint32 slip_revive_point_id = 2;
void DungeonSlipRevivePointActivateRsp::clear_slip_revive_point_id() {
  slip_revive_point_id_ = 0u;
}
::google::protobuf::uint32 DungeonSlipRevivePointActivateRsp::slip_revive_point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSlipRevivePointActivateRsp.slip_revive_point_id)
  return slip_revive_point_id_;
}
void DungeonSlipRevivePointActivateRsp::set_slip_revive_point_id(::google::protobuf::uint32 value) {
  
  slip_revive_point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonSlipRevivePointActivateRsp.slip_revive_point_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
