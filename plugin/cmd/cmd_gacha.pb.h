// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_gacha.proto

#ifndef PROTOBUF_cmd_2fcmd_5fgacha_2eproto__INCLUDED
#define PROTOBUF_cmd_2fcmd_5fgacha_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "define.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
class DoGachaReq;
class DoGachaReqDefaultTypeInternal;
extern DoGachaReqDefaultTypeInternal _DoGachaReq_default_instance_;
class DoGachaRsp;
class DoGachaRspDefaultTypeInternal;
extern DoGachaRspDefaultTypeInternal _DoGachaRsp_default_instance_;
class GachaInfo;
class GachaInfoDefaultTypeInternal;
extern GachaInfoDefaultTypeInternal _GachaInfo_default_instance_;
class GachaItem;
class GachaItemDefaultTypeInternal;
extern GachaItemDefaultTypeInternal _GachaItem_default_instance_;
class GachaTransferItem;
class GachaTransferItemDefaultTypeInternal;
extern GachaTransferItemDefaultTypeInternal _GachaTransferItem_default_instance_;
class GetGachaInfoReq;
class GetGachaInfoReqDefaultTypeInternal;
extern GetGachaInfoReqDefaultTypeInternal _GetGachaInfoReq_default_instance_;
class GetGachaInfoRsp;
class GetGachaInfoRspDefaultTypeInternal;
extern GetGachaInfoRspDefaultTypeInternal _GetGachaInfoRsp_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_cmd_2fcmd_5fgacha_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cmd_2fcmd_5fgacha_2eproto

enum GetGachaInfoReq_CmdId {
  GetGachaInfoReq_CmdId_NONE = 0,
  GetGachaInfoReq_CmdId_CMD_ID = 1501,
  GetGachaInfoReq_CmdId_ENET_CHANNEL_ID = 0,
  GetGachaInfoReq_CmdId_ENET_IS_RELIABLE = 1,
  GetGachaInfoReq_CmdId_IS_ALLOW_CLIENT = 1,
  GetGachaInfoReq_CmdId_GetGachaInfoReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GetGachaInfoReq_CmdId_GetGachaInfoReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GetGachaInfoReq_CmdId_IsValid(int value);
const GetGachaInfoReq_CmdId GetGachaInfoReq_CmdId_CmdId_MIN = GetGachaInfoReq_CmdId_NONE;
const GetGachaInfoReq_CmdId GetGachaInfoReq_CmdId_CmdId_MAX = GetGachaInfoReq_CmdId_CMD_ID;
const int GetGachaInfoReq_CmdId_CmdId_ARRAYSIZE = GetGachaInfoReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetGachaInfoReq_CmdId_descriptor();
inline const ::std::string& GetGachaInfoReq_CmdId_Name(GetGachaInfoReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetGachaInfoReq_CmdId_descriptor(), value);
}
inline bool GetGachaInfoReq_CmdId_Parse(
    const ::std::string& name, GetGachaInfoReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetGachaInfoReq_CmdId>(
    GetGachaInfoReq_CmdId_descriptor(), name, value);
}
enum GetGachaInfoRsp_CmdId {
  GetGachaInfoRsp_CmdId_NONE = 0,
  GetGachaInfoRsp_CmdId_CMD_ID = 1502,
  GetGachaInfoRsp_CmdId_ENET_CHANNEL_ID = 0,
  GetGachaInfoRsp_CmdId_ENET_IS_RELIABLE = 1,
  GetGachaInfoRsp_CmdId_GetGachaInfoRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GetGachaInfoRsp_CmdId_GetGachaInfoRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GetGachaInfoRsp_CmdId_IsValid(int value);
const GetGachaInfoRsp_CmdId GetGachaInfoRsp_CmdId_CmdId_MIN = GetGachaInfoRsp_CmdId_NONE;
const GetGachaInfoRsp_CmdId GetGachaInfoRsp_CmdId_CmdId_MAX = GetGachaInfoRsp_CmdId_CMD_ID;
const int GetGachaInfoRsp_CmdId_CmdId_ARRAYSIZE = GetGachaInfoRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetGachaInfoRsp_CmdId_descriptor();
inline const ::std::string& GetGachaInfoRsp_CmdId_Name(GetGachaInfoRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetGachaInfoRsp_CmdId_descriptor(), value);
}
inline bool GetGachaInfoRsp_CmdId_Parse(
    const ::std::string& name, GetGachaInfoRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetGachaInfoRsp_CmdId>(
    GetGachaInfoRsp_CmdId_descriptor(), name, value);
}
enum DoGachaReq_CmdId {
  DoGachaReq_CmdId_NONE = 0,
  DoGachaReq_CmdId_CMD_ID = 1503,
  DoGachaReq_CmdId_ENET_CHANNEL_ID = 0,
  DoGachaReq_CmdId_ENET_IS_RELIABLE = 1,
  DoGachaReq_CmdId_IS_ALLOW_CLIENT = 1,
  DoGachaReq_CmdId_DoGachaReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DoGachaReq_CmdId_DoGachaReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DoGachaReq_CmdId_IsValid(int value);
const DoGachaReq_CmdId DoGachaReq_CmdId_CmdId_MIN = DoGachaReq_CmdId_NONE;
const DoGachaReq_CmdId DoGachaReq_CmdId_CmdId_MAX = DoGachaReq_CmdId_CMD_ID;
const int DoGachaReq_CmdId_CmdId_ARRAYSIZE = DoGachaReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* DoGachaReq_CmdId_descriptor();
inline const ::std::string& DoGachaReq_CmdId_Name(DoGachaReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    DoGachaReq_CmdId_descriptor(), value);
}
inline bool DoGachaReq_CmdId_Parse(
    const ::std::string& name, DoGachaReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DoGachaReq_CmdId>(
    DoGachaReq_CmdId_descriptor(), name, value);
}
enum DoGachaRsp_CmdId {
  DoGachaRsp_CmdId_NONE = 0,
  DoGachaRsp_CmdId_CMD_ID = 1504,
  DoGachaRsp_CmdId_ENET_CHANNEL_ID = 0,
  DoGachaRsp_CmdId_ENET_IS_RELIABLE = 1,
  DoGachaRsp_CmdId_DoGachaRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DoGachaRsp_CmdId_DoGachaRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DoGachaRsp_CmdId_IsValid(int value);
const DoGachaRsp_CmdId DoGachaRsp_CmdId_CmdId_MIN = DoGachaRsp_CmdId_NONE;
const DoGachaRsp_CmdId DoGachaRsp_CmdId_CmdId_MAX = DoGachaRsp_CmdId_CMD_ID;
const int DoGachaRsp_CmdId_CmdId_ARRAYSIZE = DoGachaRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* DoGachaRsp_CmdId_descriptor();
inline const ::std::string& DoGachaRsp_CmdId_Name(DoGachaRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    DoGachaRsp_CmdId_descriptor(), value);
}
inline bool DoGachaRsp_CmdId_Parse(
    const ::std::string& name, DoGachaRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DoGachaRsp_CmdId>(
    DoGachaRsp_CmdId_descriptor(), name, value);
}
// ===================================================================

class GetGachaInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetGachaInfoReq) */ {
 public:
  GetGachaInfoReq();
  virtual ~GetGachaInfoReq();

  GetGachaInfoReq(const GetGachaInfoReq& from);

  inline GetGachaInfoReq& operator=(const GetGachaInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetGachaInfoReq(GetGachaInfoReq&& from) noexcept
    : GetGachaInfoReq() {
    *this = ::std::move(from);
  }

  inline GetGachaInfoReq& operator=(GetGachaInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGachaInfoReq& default_instance();

  static inline const GetGachaInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetGachaInfoReq*>(
               &_GetGachaInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GetGachaInfoReq* other);
  friend void swap(GetGachaInfoReq& a, GetGachaInfoReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetGachaInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetGachaInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetGachaInfoReq& from);
  void MergeFrom(const GetGachaInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetGachaInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GetGachaInfoReq_CmdId CmdId;
  static const CmdId NONE =
    GetGachaInfoReq_CmdId_NONE;
  static const CmdId CMD_ID =
    GetGachaInfoReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    GetGachaInfoReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    GetGachaInfoReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    GetGachaInfoReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return GetGachaInfoReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    GetGachaInfoReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    GetGachaInfoReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    GetGachaInfoReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return GetGachaInfoReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return GetGachaInfoReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return GetGachaInfoReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.GetGachaInfoReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgacha_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GachaInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GachaInfo) */ {
 public:
  GachaInfo();
  virtual ~GachaInfo();

  GachaInfo(const GachaInfo& from);

  inline GachaInfo& operator=(const GachaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GachaInfo(GachaInfo&& from) noexcept
    : GachaInfo() {
    *this = ::std::move(from);
  }

  inline GachaInfo& operator=(GachaInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GachaInfo& default_instance();

  static inline const GachaInfo* internal_default_instance() {
    return reinterpret_cast<const GachaInfo*>(
               &_GachaInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(GachaInfo* other);
  friend void swap(GachaInfo& a, GachaInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GachaInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GachaInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GachaInfo& from);
  void MergeFrom(const GachaInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GachaInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string gacha_prefab_path = 7;
  void clear_gacha_prefab_path();
  static const int kGachaPrefabPathFieldNumber = 7;
  const ::std::string& gacha_prefab_path() const;
  void set_gacha_prefab_path(const ::std::string& value);
  #if LANG_CXX11
  void set_gacha_prefab_path(::std::string&& value);
  #endif
  void set_gacha_prefab_path(const char* value);
  void set_gacha_prefab_path(const char* value, size_t size);
  ::std::string* mutable_gacha_prefab_path();
  ::std::string* release_gacha_prefab_path();
  void set_allocated_gacha_prefab_path(::std::string* gacha_prefab_path);

  // string gacha_prob_url = 8;
  void clear_gacha_prob_url();
  static const int kGachaProbUrlFieldNumber = 8;
  const ::std::string& gacha_prob_url() const;
  void set_gacha_prob_url(const ::std::string& value);
  #if LANG_CXX11
  void set_gacha_prob_url(::std::string&& value);
  #endif
  void set_gacha_prob_url(const char* value);
  void set_gacha_prob_url(const char* value, size_t size);
  ::std::string* mutable_gacha_prob_url();
  ::std::string* release_gacha_prob_url();
  void set_allocated_gacha_prob_url(::std::string* gacha_prob_url);

  // string gacha_record_url = 9;
  void clear_gacha_record_url();
  static const int kGachaRecordUrlFieldNumber = 9;
  const ::std::string& gacha_record_url() const;
  void set_gacha_record_url(const ::std::string& value);
  #if LANG_CXX11
  void set_gacha_record_url(::std::string&& value);
  #endif
  void set_gacha_record_url(const char* value);
  void set_gacha_record_url(const char* value, size_t size);
  ::std::string* mutable_gacha_record_url();
  ::std::string* release_gacha_record_url();
  void set_allocated_gacha_record_url(::std::string* gacha_record_url);

  // string gacha_preview_prefab_path = 10;
  void clear_gacha_preview_prefab_path();
  static const int kGachaPreviewPrefabPathFieldNumber = 10;
  const ::std::string& gacha_preview_prefab_path() const;
  void set_gacha_preview_prefab_path(const ::std::string& value);
  #if LANG_CXX11
  void set_gacha_preview_prefab_path(::std::string&& value);
  #endif
  void set_gacha_preview_prefab_path(const char* value);
  void set_gacha_preview_prefab_path(const char* value, size_t size);
  ::std::string* mutable_gacha_preview_prefab_path();
  ::std::string* release_gacha_preview_prefab_path();
  void set_allocated_gacha_preview_prefab_path(::std::string* gacha_preview_prefab_path);

  // uint32 gacha_type = 1;
  void clear_gacha_type();
  static const int kGachaTypeFieldNumber = 1;
  ::google::protobuf::uint32 gacha_type() const;
  void set_gacha_type(::google::protobuf::uint32 value);

  // uint32 schedule_id = 2;
  void clear_schedule_id();
  static const int kScheduleIdFieldNumber = 2;
  ::google::protobuf::uint32 schedule_id() const;
  void set_schedule_id(::google::protobuf::uint32 value);

  // uint32 begin_time = 3;
  void clear_begin_time();
  static const int kBeginTimeFieldNumber = 3;
  ::google::protobuf::uint32 begin_time() const;
  void set_begin_time(::google::protobuf::uint32 value);

  // uint32 end_time = 4;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 4;
  ::google::protobuf::uint32 end_time() const;
  void set_end_time(::google::protobuf::uint32 value);

  // uint32 cost_item_id = 5;
  void clear_cost_item_id();
  static const int kCostItemIdFieldNumber = 5;
  ::google::protobuf::uint32 cost_item_id() const;
  void set_cost_item_id(::google::protobuf::uint32 value);

  // uint32 cost_item_num = 6;
  void clear_cost_item_num();
  static const int kCostItemNumFieldNumber = 6;
  ::google::protobuf::uint32 cost_item_num() const;
  void set_cost_item_num(::google::protobuf::uint32 value);

  // uint32 ten_cost_item_id = 11;
  void clear_ten_cost_item_id();
  static const int kTenCostItemIdFieldNumber = 11;
  ::google::protobuf::uint32 ten_cost_item_id() const;
  void set_ten_cost_item_id(::google::protobuf::uint32 value);

  // uint32 ten_cost_item_num = 12;
  void clear_ten_cost_item_num();
  static const int kTenCostItemNumFieldNumber = 12;
  ::google::protobuf::uint32 ten_cost_item_num() const;
  void set_ten_cost_item_num(::google::protobuf::uint32 value);

  // uint32 left_gacha_times = 13;
  void clear_left_gacha_times();
  static const int kLeftGachaTimesFieldNumber = 13;
  ::google::protobuf::uint32 left_gacha_times() const;
  void set_left_gacha_times(::google::protobuf::uint32 value);

  // uint32 gacha_times_limit = 14;
  void clear_gacha_times_limit();
  static const int kGachaTimesLimitFieldNumber = 14;
  ::google::protobuf::uint32 gacha_times_limit() const;
  void set_gacha_times_limit(::google::protobuf::uint32 value);

  // uint32 gacha_sort_id = 15;
  void clear_gacha_sort_id();
  static const int kGachaSortIdFieldNumber = 15;
  ::google::protobuf::uint32 gacha_sort_id() const;
  void set_gacha_sort_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GachaInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gacha_prefab_path_;
  ::google::protobuf::internal::ArenaStringPtr gacha_prob_url_;
  ::google::protobuf::internal::ArenaStringPtr gacha_record_url_;
  ::google::protobuf::internal::ArenaStringPtr gacha_preview_prefab_path_;
  ::google::protobuf::uint32 gacha_type_;
  ::google::protobuf::uint32 schedule_id_;
  ::google::protobuf::uint32 begin_time_;
  ::google::protobuf::uint32 end_time_;
  ::google::protobuf::uint32 cost_item_id_;
  ::google::protobuf::uint32 cost_item_num_;
  ::google::protobuf::uint32 ten_cost_item_id_;
  ::google::protobuf::uint32 ten_cost_item_num_;
  ::google::protobuf::uint32 left_gacha_times_;
  ::google::protobuf::uint32 gacha_times_limit_;
  ::google::protobuf::uint32 gacha_sort_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgacha_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetGachaInfoRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetGachaInfoRsp) */ {
 public:
  GetGachaInfoRsp();
  virtual ~GetGachaInfoRsp();

  GetGachaInfoRsp(const GetGachaInfoRsp& from);

  inline GetGachaInfoRsp& operator=(const GetGachaInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetGachaInfoRsp(GetGachaInfoRsp&& from) noexcept
    : GetGachaInfoRsp() {
    *this = ::std::move(from);
  }

  inline GetGachaInfoRsp& operator=(GetGachaInfoRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGachaInfoRsp& default_instance();

  static inline const GetGachaInfoRsp* internal_default_instance() {
    return reinterpret_cast<const GetGachaInfoRsp*>(
               &_GetGachaInfoRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GetGachaInfoRsp* other);
  friend void swap(GetGachaInfoRsp& a, GetGachaInfoRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetGachaInfoRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetGachaInfoRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetGachaInfoRsp& from);
  void MergeFrom(const GetGachaInfoRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetGachaInfoRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GetGachaInfoRsp_CmdId CmdId;
  static const CmdId NONE =
    GetGachaInfoRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    GetGachaInfoRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    GetGachaInfoRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    GetGachaInfoRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return GetGachaInfoRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    GetGachaInfoRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    GetGachaInfoRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    GetGachaInfoRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return GetGachaInfoRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return GetGachaInfoRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return GetGachaInfoRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.GachaInfo gacha_info_list = 2;
  int gacha_info_list_size() const;
  void clear_gacha_info_list();
  static const int kGachaInfoListFieldNumber = 2;
  const ::proto::GachaInfo& gacha_info_list(int index) const;
  ::proto::GachaInfo* mutable_gacha_info_list(int index);
  ::proto::GachaInfo* add_gacha_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GachaInfo >*
      mutable_gacha_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GachaInfo >&
      gacha_info_list() const;

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 gacha_random = 3;
  void clear_gacha_random();
  static const int kGachaRandomFieldNumber = 3;
  ::google::protobuf::uint32 gacha_random() const;
  void set_gacha_random(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GetGachaInfoRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GachaInfo > gacha_info_list_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 gacha_random_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgacha_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DoGachaReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DoGachaReq) */ {
 public:
  DoGachaReq();
  virtual ~DoGachaReq();

  DoGachaReq(const DoGachaReq& from);

  inline DoGachaReq& operator=(const DoGachaReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DoGachaReq(DoGachaReq&& from) noexcept
    : DoGachaReq() {
    *this = ::std::move(from);
  }

  inline DoGachaReq& operator=(DoGachaReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DoGachaReq& default_instance();

  static inline const DoGachaReq* internal_default_instance() {
    return reinterpret_cast<const DoGachaReq*>(
               &_DoGachaReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DoGachaReq* other);
  friend void swap(DoGachaReq& a, DoGachaReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoGachaReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DoGachaReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DoGachaReq& from);
  void MergeFrom(const DoGachaReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DoGachaReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DoGachaReq_CmdId CmdId;
  static const CmdId NONE =
    DoGachaReq_CmdId_NONE;
  static const CmdId CMD_ID =
    DoGachaReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    DoGachaReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    DoGachaReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    DoGachaReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return DoGachaReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    DoGachaReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    DoGachaReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    DoGachaReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return DoGachaReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return DoGachaReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return DoGachaReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string gacha_tag = 5;
  void clear_gacha_tag();
  static const int kGachaTagFieldNumber = 5;
  const ::std::string& gacha_tag() const;
  void set_gacha_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_gacha_tag(::std::string&& value);
  #endif
  void set_gacha_tag(const char* value);
  void set_gacha_tag(const char* value, size_t size);
  ::std::string* mutable_gacha_tag();
  ::std::string* release_gacha_tag();
  void set_allocated_gacha_tag(::std::string* gacha_tag);

  // uint32 gacha_type = 1;
  void clear_gacha_type();
  static const int kGachaTypeFieldNumber = 1;
  ::google::protobuf::uint32 gacha_type() const;
  void set_gacha_type(::google::protobuf::uint32 value);

  // uint32 gacha_times = 2;
  void clear_gacha_times();
  static const int kGachaTimesFieldNumber = 2;
  ::google::protobuf::uint32 gacha_times() const;
  void set_gacha_times(::google::protobuf::uint32 value);

  // uint32 gacha_random = 3;
  void clear_gacha_random();
  static const int kGachaRandomFieldNumber = 3;
  ::google::protobuf::uint32 gacha_random() const;
  void set_gacha_random(::google::protobuf::uint32 value);

  // uint32 gacha_schedule_id = 4;
  void clear_gacha_schedule_id();
  static const int kGachaScheduleIdFieldNumber = 4;
  ::google::protobuf::uint32 gacha_schedule_id() const;
  void set_gacha_schedule_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DoGachaReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gacha_tag_;
  ::google::protobuf::uint32 gacha_type_;
  ::google::protobuf::uint32 gacha_times_;
  ::google::protobuf::uint32 gacha_random_;
  ::google::protobuf::uint32 gacha_schedule_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgacha_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GachaTransferItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GachaTransferItem) */ {
 public:
  GachaTransferItem();
  virtual ~GachaTransferItem();

  GachaTransferItem(const GachaTransferItem& from);

  inline GachaTransferItem& operator=(const GachaTransferItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GachaTransferItem(GachaTransferItem&& from) noexcept
    : GachaTransferItem() {
    *this = ::std::move(from);
  }

  inline GachaTransferItem& operator=(GachaTransferItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GachaTransferItem& default_instance();

  static inline const GachaTransferItem* internal_default_instance() {
    return reinterpret_cast<const GachaTransferItem*>(
               &_GachaTransferItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(GachaTransferItem* other);
  friend void swap(GachaTransferItem& a, GachaTransferItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GachaTransferItem* New() const PROTOBUF_FINAL { return New(NULL); }

  GachaTransferItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GachaTransferItem& from);
  void MergeFrom(const GachaTransferItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GachaTransferItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.ItemParam item = 1;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::proto::ItemParam& item() const;
  ::proto::ItemParam* mutable_item();
  ::proto::ItemParam* release_item();
  void set_allocated_item(::proto::ItemParam* item);

  // bool is_transfer_item_new = 2;
  void clear_is_transfer_item_new();
  static const int kIsTransferItemNewFieldNumber = 2;
  bool is_transfer_item_new() const;
  void set_is_transfer_item_new(bool value);

  // @@protoc_insertion_point(class_scope:proto.GachaTransferItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::ItemParam* item_;
  bool is_transfer_item_new_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgacha_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GachaItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GachaItem) */ {
 public:
  GachaItem();
  virtual ~GachaItem();

  GachaItem(const GachaItem& from);

  inline GachaItem& operator=(const GachaItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GachaItem(GachaItem&& from) noexcept
    : GachaItem() {
    *this = ::std::move(from);
  }

  inline GachaItem& operator=(GachaItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GachaItem& default_instance();

  static inline const GachaItem* internal_default_instance() {
    return reinterpret_cast<const GachaItem*>(
               &_GachaItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(GachaItem* other);
  friend void swap(GachaItem& a, GachaItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GachaItem* New() const PROTOBUF_FINAL { return New(NULL); }

  GachaItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GachaItem& from);
  void MergeFrom(const GachaItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GachaItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.GachaTransferItem transfer_items = 2;
  int transfer_items_size() const;
  void clear_transfer_items();
  static const int kTransferItemsFieldNumber = 2;
  const ::proto::GachaTransferItem& transfer_items(int index) const;
  ::proto::GachaTransferItem* mutable_transfer_items(int index);
  ::proto::GachaTransferItem* add_transfer_items();
  ::google::protobuf::RepeatedPtrField< ::proto::GachaTransferItem >*
      mutable_transfer_items();
  const ::google::protobuf::RepeatedPtrField< ::proto::GachaTransferItem >&
      transfer_items() const;

  // repeated .proto.ItemParam token_item_list = 5;
  int token_item_list_size() const;
  void clear_token_item_list();
  static const int kTokenItemListFieldNumber = 5;
  const ::proto::ItemParam& token_item_list(int index) const;
  ::proto::ItemParam* mutable_token_item_list(int index);
  ::proto::ItemParam* add_token_item_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
      mutable_token_item_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
      token_item_list() const;

  // .proto.ItemParam gacha_item = 1;
  bool has_gacha_item() const;
  void clear_gacha_item();
  static const int kGachaItemFieldNumber = 1;
  const ::proto::ItemParam& gacha_item() const;
  ::proto::ItemParam* mutable_gacha_item();
  ::proto::ItemParam* release_gacha_item();
  void set_allocated_gacha_item(::proto::ItemParam* gacha_item);

  // bool is_flash_card = 3;
  void clear_is_flash_card();
  static const int kIsFlashCardFieldNumber = 3;
  bool is_flash_card() const;
  void set_is_flash_card(bool value);

  // bool is_gacha_item_new = 4;
  void clear_is_gacha_item_new();
  static const int kIsGachaItemNewFieldNumber = 4;
  bool is_gacha_item_new() const;
  void set_is_gacha_item_new(bool value);

  // @@protoc_insertion_point(class_scope:proto.GachaItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GachaTransferItem > transfer_items_;
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam > token_item_list_;
  ::proto::ItemParam* gacha_item_;
  bool is_flash_card_;
  bool is_gacha_item_new_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgacha_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DoGachaRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DoGachaRsp) */ {
 public:
  DoGachaRsp();
  virtual ~DoGachaRsp();

  DoGachaRsp(const DoGachaRsp& from);

  inline DoGachaRsp& operator=(const DoGachaRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DoGachaRsp(DoGachaRsp&& from) noexcept
    : DoGachaRsp() {
    *this = ::std::move(from);
  }

  inline DoGachaRsp& operator=(DoGachaRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DoGachaRsp& default_instance();

  static inline const DoGachaRsp* internal_default_instance() {
    return reinterpret_cast<const DoGachaRsp*>(
               &_DoGachaRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(DoGachaRsp* other);
  friend void swap(DoGachaRsp& a, DoGachaRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoGachaRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  DoGachaRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DoGachaRsp& from);
  void MergeFrom(const DoGachaRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DoGachaRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DoGachaRsp_CmdId CmdId;
  static const CmdId NONE =
    DoGachaRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    DoGachaRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    DoGachaRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    DoGachaRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return DoGachaRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    DoGachaRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    DoGachaRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    DoGachaRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return DoGachaRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return DoGachaRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return DoGachaRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.GachaItem gacha_item_list = 5;
  int gacha_item_list_size() const;
  void clear_gacha_item_list();
  static const int kGachaItemListFieldNumber = 5;
  const ::proto::GachaItem& gacha_item_list(int index) const;
  ::proto::GachaItem* mutable_gacha_item_list(int index);
  ::proto::GachaItem* add_gacha_item_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GachaItem >*
      mutable_gacha_item_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GachaItem >&
      gacha_item_list() const;

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 gacha_type = 2;
  void clear_gacha_type();
  static const int kGachaTypeFieldNumber = 2;
  ::google::protobuf::uint32 gacha_type() const;
  void set_gacha_type(::google::protobuf::uint32 value);

  // uint32 gacha_times = 3;
  void clear_gacha_times();
  static const int kGachaTimesFieldNumber = 3;
  ::google::protobuf::uint32 gacha_times() const;
  void set_gacha_times(::google::protobuf::uint32 value);

  // uint32 gacha_schedule_id = 4;
  void clear_gacha_schedule_id();
  static const int kGachaScheduleIdFieldNumber = 4;
  ::google::protobuf::uint32 gacha_schedule_id() const;
  void set_gacha_schedule_id(::google::protobuf::uint32 value);

  // uint32 new_gacha_random = 6;
  void clear_new_gacha_random();
  static const int kNewGachaRandomFieldNumber = 6;
  ::google::protobuf::uint32 new_gacha_random() const;
  void set_new_gacha_random(::google::protobuf::uint32 value);

  // uint32 cost_item_id = 7;
  void clear_cost_item_id();
  static const int kCostItemIdFieldNumber = 7;
  ::google::protobuf::uint32 cost_item_id() const;
  void set_cost_item_id(::google::protobuf::uint32 value);

  // uint32 cost_item_num = 8;
  void clear_cost_item_num();
  static const int kCostItemNumFieldNumber = 8;
  ::google::protobuf::uint32 cost_item_num() const;
  void set_cost_item_num(::google::protobuf::uint32 value);

  // uint32 ten_cost_item_id = 9;
  void clear_ten_cost_item_id();
  static const int kTenCostItemIdFieldNumber = 9;
  ::google::protobuf::uint32 ten_cost_item_id() const;
  void set_ten_cost_item_id(::google::protobuf::uint32 value);

  // uint32 ten_cost_item_num = 10;
  void clear_ten_cost_item_num();
  static const int kTenCostItemNumFieldNumber = 10;
  ::google::protobuf::uint32 ten_cost_item_num() const;
  void set_ten_cost_item_num(::google::protobuf::uint32 value);

  // uint32 left_gacha_times = 11;
  void clear_left_gacha_times();
  static const int kLeftGachaTimesFieldNumber = 11;
  ::google::protobuf::uint32 left_gacha_times() const;
  void set_left_gacha_times(::google::protobuf::uint32 value);

  // uint32 gacha_times_limit = 12;
  void clear_gacha_times_limit();
  static const int kGachaTimesLimitFieldNumber = 12;
  ::google::protobuf::uint32 gacha_times_limit() const;
  void set_gacha_times_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DoGachaRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GachaItem > gacha_item_list_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 gacha_type_;
  ::google::protobuf::uint32 gacha_times_;
  ::google::protobuf::uint32 gacha_schedule_id_;
  ::google::protobuf::uint32 new_gacha_random_;
  ::google::protobuf::uint32 cost_item_id_;
  ::google::protobuf::uint32 cost_item_num_;
  ::google::protobuf::uint32 ten_cost_item_id_;
  ::google::protobuf::uint32 ten_cost_item_num_;
  ::google::protobuf::uint32 left_gacha_times_;
  ::google::protobuf::uint32 gacha_times_limit_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgacha_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetGachaInfoReq

// -------------------------------------------------------------------

// GachaInfo

// uint32 gacha_type = 1;
inline void GachaInfo::clear_gacha_type() {
  gacha_type_ = 0u;
}
inline ::google::protobuf::uint32 GachaInfo::gacha_type() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.gacha_type)
  return gacha_type_;
}
inline void GachaInfo::set_gacha_type(::google::protobuf::uint32 value) {
  
  gacha_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaInfo.gacha_type)
}

// uint32 schedule_id = 2;
inline void GachaInfo::clear_schedule_id() {
  schedule_id_ = 0u;
}
inline ::google::protobuf::uint32 GachaInfo::schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.schedule_id)
  return schedule_id_;
}
inline void GachaInfo::set_schedule_id(::google::protobuf::uint32 value) {
  
  schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaInfo.schedule_id)
}

// uint32 begin_time = 3;
inline void GachaInfo::clear_begin_time() {
  begin_time_ = 0u;
}
inline ::google::protobuf::uint32 GachaInfo::begin_time() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.begin_time)
  return begin_time_;
}
inline void GachaInfo::set_begin_time(::google::protobuf::uint32 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaInfo.begin_time)
}

// uint32 end_time = 4;
inline void GachaInfo::clear_end_time() {
  end_time_ = 0u;
}
inline ::google::protobuf::uint32 GachaInfo::end_time() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.end_time)
  return end_time_;
}
inline void GachaInfo::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaInfo.end_time)
}

// uint32 cost_item_id = 5;
inline void GachaInfo::clear_cost_item_id() {
  cost_item_id_ = 0u;
}
inline ::google::protobuf::uint32 GachaInfo::cost_item_id() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.cost_item_id)
  return cost_item_id_;
}
inline void GachaInfo::set_cost_item_id(::google::protobuf::uint32 value) {
  
  cost_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaInfo.cost_item_id)
}

// uint32 cost_item_num = 6;
inline void GachaInfo::clear_cost_item_num() {
  cost_item_num_ = 0u;
}
inline ::google::protobuf::uint32 GachaInfo::cost_item_num() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.cost_item_num)
  return cost_item_num_;
}
inline void GachaInfo::set_cost_item_num(::google::protobuf::uint32 value) {
  
  cost_item_num_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaInfo.cost_item_num)
}

// string gacha_prefab_path = 7;
inline void GachaInfo::clear_gacha_prefab_path() {
  gacha_prefab_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GachaInfo::gacha_prefab_path() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.gacha_prefab_path)
  return gacha_prefab_path_.GetNoArena();
}
inline void GachaInfo::set_gacha_prefab_path(const ::std::string& value) {
  
  gacha_prefab_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GachaInfo.gacha_prefab_path)
}
#if LANG_CXX11
inline void GachaInfo::set_gacha_prefab_path(::std::string&& value) {
  
  gacha_prefab_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GachaInfo.gacha_prefab_path)
}
#endif
inline void GachaInfo::set_gacha_prefab_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gacha_prefab_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GachaInfo.gacha_prefab_path)
}
inline void GachaInfo::set_gacha_prefab_path(const char* value, size_t size) {
  
  gacha_prefab_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GachaInfo.gacha_prefab_path)
}
inline ::std::string* GachaInfo::mutable_gacha_prefab_path() {
  
  // @@protoc_insertion_point(field_mutable:proto.GachaInfo.gacha_prefab_path)
  return gacha_prefab_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GachaInfo::release_gacha_prefab_path() {
  // @@protoc_insertion_point(field_release:proto.GachaInfo.gacha_prefab_path)
  
  return gacha_prefab_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GachaInfo::set_allocated_gacha_prefab_path(::std::string* gacha_prefab_path) {
  if (gacha_prefab_path != NULL) {
    
  } else {
    
  }
  gacha_prefab_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gacha_prefab_path);
  // @@protoc_insertion_point(field_set_allocated:proto.GachaInfo.gacha_prefab_path)
}

// string gacha_prob_url = 8;
inline void GachaInfo::clear_gacha_prob_url() {
  gacha_prob_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GachaInfo::gacha_prob_url() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.gacha_prob_url)
  return gacha_prob_url_.GetNoArena();
}
inline void GachaInfo::set_gacha_prob_url(const ::std::string& value) {
  
  gacha_prob_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GachaInfo.gacha_prob_url)
}
#if LANG_CXX11
inline void GachaInfo::set_gacha_prob_url(::std::string&& value) {
  
  gacha_prob_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GachaInfo.gacha_prob_url)
}
#endif
inline void GachaInfo::set_gacha_prob_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gacha_prob_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GachaInfo.gacha_prob_url)
}
inline void GachaInfo::set_gacha_prob_url(const char* value, size_t size) {
  
  gacha_prob_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GachaInfo.gacha_prob_url)
}
inline ::std::string* GachaInfo::mutable_gacha_prob_url() {
  
  // @@protoc_insertion_point(field_mutable:proto.GachaInfo.gacha_prob_url)
  return gacha_prob_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GachaInfo::release_gacha_prob_url() {
  // @@protoc_insertion_point(field_release:proto.GachaInfo.gacha_prob_url)
  
  return gacha_prob_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GachaInfo::set_allocated_gacha_prob_url(::std::string* gacha_prob_url) {
  if (gacha_prob_url != NULL) {
    
  } else {
    
  }
  gacha_prob_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gacha_prob_url);
  // @@protoc_insertion_point(field_set_allocated:proto.GachaInfo.gacha_prob_url)
}

// string gacha_record_url = 9;
inline void GachaInfo::clear_gacha_record_url() {
  gacha_record_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GachaInfo::gacha_record_url() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.gacha_record_url)
  return gacha_record_url_.GetNoArena();
}
inline void GachaInfo::set_gacha_record_url(const ::std::string& value) {
  
  gacha_record_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GachaInfo.gacha_record_url)
}
#if LANG_CXX11
inline void GachaInfo::set_gacha_record_url(::std::string&& value) {
  
  gacha_record_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GachaInfo.gacha_record_url)
}
#endif
inline void GachaInfo::set_gacha_record_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gacha_record_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GachaInfo.gacha_record_url)
}
inline void GachaInfo::set_gacha_record_url(const char* value, size_t size) {
  
  gacha_record_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GachaInfo.gacha_record_url)
}
inline ::std::string* GachaInfo::mutable_gacha_record_url() {
  
  // @@protoc_insertion_point(field_mutable:proto.GachaInfo.gacha_record_url)
  return gacha_record_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GachaInfo::release_gacha_record_url() {
  // @@protoc_insertion_point(field_release:proto.GachaInfo.gacha_record_url)
  
  return gacha_record_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GachaInfo::set_allocated_gacha_record_url(::std::string* gacha_record_url) {
  if (gacha_record_url != NULL) {
    
  } else {
    
  }
  gacha_record_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gacha_record_url);
  // @@protoc_insertion_point(field_set_allocated:proto.GachaInfo.gacha_record_url)
}

// string gacha_preview_prefab_path = 10;
inline void GachaInfo::clear_gacha_preview_prefab_path() {
  gacha_preview_prefab_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GachaInfo::gacha_preview_prefab_path() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.gacha_preview_prefab_path)
  return gacha_preview_prefab_path_.GetNoArena();
}
inline void GachaInfo::set_gacha_preview_prefab_path(const ::std::string& value) {
  
  gacha_preview_prefab_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GachaInfo.gacha_preview_prefab_path)
}
#if LANG_CXX11
inline void GachaInfo::set_gacha_preview_prefab_path(::std::string&& value) {
  
  gacha_preview_prefab_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GachaInfo.gacha_preview_prefab_path)
}
#endif
inline void GachaInfo::set_gacha_preview_prefab_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gacha_preview_prefab_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GachaInfo.gacha_preview_prefab_path)
}
inline void GachaInfo::set_gacha_preview_prefab_path(const char* value, size_t size) {
  
  gacha_preview_prefab_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GachaInfo.gacha_preview_prefab_path)
}
inline ::std::string* GachaInfo::mutable_gacha_preview_prefab_path() {
  
  // @@protoc_insertion_point(field_mutable:proto.GachaInfo.gacha_preview_prefab_path)
  return gacha_preview_prefab_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GachaInfo::release_gacha_preview_prefab_path() {
  // @@protoc_insertion_point(field_release:proto.GachaInfo.gacha_preview_prefab_path)
  
  return gacha_preview_prefab_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GachaInfo::set_allocated_gacha_preview_prefab_path(::std::string* gacha_preview_prefab_path) {
  if (gacha_preview_prefab_path != NULL) {
    
  } else {
    
  }
  gacha_preview_prefab_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gacha_preview_prefab_path);
  // @@protoc_insertion_point(field_set_allocated:proto.GachaInfo.gacha_preview_prefab_path)
}

// uint32 ten_cost_item_id = 11;
inline void GachaInfo::clear_ten_cost_item_id() {
  ten_cost_item_id_ = 0u;
}
inline ::google::protobuf::uint32 GachaInfo::ten_cost_item_id() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.ten_cost_item_id)
  return ten_cost_item_id_;
}
inline void GachaInfo::set_ten_cost_item_id(::google::protobuf::uint32 value) {
  
  ten_cost_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaInfo.ten_cost_item_id)
}

// uint32 ten_cost_item_num = 12;
inline void GachaInfo::clear_ten_cost_item_num() {
  ten_cost_item_num_ = 0u;
}
inline ::google::protobuf::uint32 GachaInfo::ten_cost_item_num() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.ten_cost_item_num)
  return ten_cost_item_num_;
}
inline void GachaInfo::set_ten_cost_item_num(::google::protobuf::uint32 value) {
  
  ten_cost_item_num_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaInfo.ten_cost_item_num)
}

// uint32 left_gacha_times = 13;
inline void GachaInfo::clear_left_gacha_times() {
  left_gacha_times_ = 0u;
}
inline ::google::protobuf::uint32 GachaInfo::left_gacha_times() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.left_gacha_times)
  return left_gacha_times_;
}
inline void GachaInfo::set_left_gacha_times(::google::protobuf::uint32 value) {
  
  left_gacha_times_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaInfo.left_gacha_times)
}

// uint32 gacha_times_limit = 14;
inline void GachaInfo::clear_gacha_times_limit() {
  gacha_times_limit_ = 0u;
}
inline ::google::protobuf::uint32 GachaInfo::gacha_times_limit() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.gacha_times_limit)
  return gacha_times_limit_;
}
inline void GachaInfo::set_gacha_times_limit(::google::protobuf::uint32 value) {
  
  gacha_times_limit_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaInfo.gacha_times_limit)
}

// uint32 gacha_sort_id = 15;
inline void GachaInfo::clear_gacha_sort_id() {
  gacha_sort_id_ = 0u;
}
inline ::google::protobuf::uint32 GachaInfo::gacha_sort_id() const {
  // @@protoc_insertion_point(field_get:proto.GachaInfo.gacha_sort_id)
  return gacha_sort_id_;
}
inline void GachaInfo::set_gacha_sort_id(::google::protobuf::uint32 value) {
  
  gacha_sort_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaInfo.gacha_sort_id)
}

// -------------------------------------------------------------------

// GetGachaInfoRsp

// int32 retcode = 1;
inline void GetGachaInfoRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GetGachaInfoRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetGachaInfoRsp.retcode)
  return retcode_;
}
inline void GetGachaInfoRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetGachaInfoRsp.retcode)
}

// repeated .proto.GachaInfo gacha_info_list = 2;
inline int GetGachaInfoRsp::gacha_info_list_size() const {
  return gacha_info_list_.size();
}
inline void GetGachaInfoRsp::clear_gacha_info_list() {
  gacha_info_list_.Clear();
}
inline const ::proto::GachaInfo& GetGachaInfoRsp::gacha_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetGachaInfoRsp.gacha_info_list)
  return gacha_info_list_.Get(index);
}
inline ::proto::GachaInfo* GetGachaInfoRsp::mutable_gacha_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetGachaInfoRsp.gacha_info_list)
  return gacha_info_list_.Mutable(index);
}
inline ::proto::GachaInfo* GetGachaInfoRsp::add_gacha_info_list() {
  // @@protoc_insertion_point(field_add:proto.GetGachaInfoRsp.gacha_info_list)
  return gacha_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GachaInfo >*
GetGachaInfoRsp::mutable_gacha_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetGachaInfoRsp.gacha_info_list)
  return &gacha_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GachaInfo >&
GetGachaInfoRsp::gacha_info_list() const {
  // @@protoc_insertion_point(field_list:proto.GetGachaInfoRsp.gacha_info_list)
  return gacha_info_list_;
}

// uint32 gacha_random = 3;
inline void GetGachaInfoRsp::clear_gacha_random() {
  gacha_random_ = 0u;
}
inline ::google::protobuf::uint32 GetGachaInfoRsp::gacha_random() const {
  // @@protoc_insertion_point(field_get:proto.GetGachaInfoRsp.gacha_random)
  return gacha_random_;
}
inline void GetGachaInfoRsp::set_gacha_random(::google::protobuf::uint32 value) {
  
  gacha_random_ = value;
  // @@protoc_insertion_point(field_set:proto.GetGachaInfoRsp.gacha_random)
}

// -------------------------------------------------------------------

// DoGachaReq

// uint32 gacha_type = 1;
inline void DoGachaReq::clear_gacha_type() {
  gacha_type_ = 0u;
}
inline ::google::protobuf::uint32 DoGachaReq::gacha_type() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaReq.gacha_type)
  return gacha_type_;
}
inline void DoGachaReq::set_gacha_type(::google::protobuf::uint32 value) {
  
  gacha_type_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaReq.gacha_type)
}

// uint32 gacha_times = 2;
inline void DoGachaReq::clear_gacha_times() {
  gacha_times_ = 0u;
}
inline ::google::protobuf::uint32 DoGachaReq::gacha_times() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaReq.gacha_times)
  return gacha_times_;
}
inline void DoGachaReq::set_gacha_times(::google::protobuf::uint32 value) {
  
  gacha_times_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaReq.gacha_times)
}

// uint32 gacha_random = 3;
inline void DoGachaReq::clear_gacha_random() {
  gacha_random_ = 0u;
}
inline ::google::protobuf::uint32 DoGachaReq::gacha_random() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaReq.gacha_random)
  return gacha_random_;
}
inline void DoGachaReq::set_gacha_random(::google::protobuf::uint32 value) {
  
  gacha_random_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaReq.gacha_random)
}

// uint32 gacha_schedule_id = 4;
inline void DoGachaReq::clear_gacha_schedule_id() {
  gacha_schedule_id_ = 0u;
}
inline ::google::protobuf::uint32 DoGachaReq::gacha_schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaReq.gacha_schedule_id)
  return gacha_schedule_id_;
}
inline void DoGachaReq::set_gacha_schedule_id(::google::protobuf::uint32 value) {
  
  gacha_schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaReq.gacha_schedule_id)
}

// string gacha_tag = 5;
inline void DoGachaReq::clear_gacha_tag() {
  gacha_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DoGachaReq::gacha_tag() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaReq.gacha_tag)
  return gacha_tag_.GetNoArena();
}
inline void DoGachaReq::set_gacha_tag(const ::std::string& value) {
  
  gacha_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.DoGachaReq.gacha_tag)
}
#if LANG_CXX11
inline void DoGachaReq::set_gacha_tag(::std::string&& value) {
  
  gacha_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.DoGachaReq.gacha_tag)
}
#endif
inline void DoGachaReq::set_gacha_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gacha_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.DoGachaReq.gacha_tag)
}
inline void DoGachaReq::set_gacha_tag(const char* value, size_t size) {
  
  gacha_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.DoGachaReq.gacha_tag)
}
inline ::std::string* DoGachaReq::mutable_gacha_tag() {
  
  // @@protoc_insertion_point(field_mutable:proto.DoGachaReq.gacha_tag)
  return gacha_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DoGachaReq::release_gacha_tag() {
  // @@protoc_insertion_point(field_release:proto.DoGachaReq.gacha_tag)
  
  return gacha_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DoGachaReq::set_allocated_gacha_tag(::std::string* gacha_tag) {
  if (gacha_tag != NULL) {
    
  } else {
    
  }
  gacha_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gacha_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.DoGachaReq.gacha_tag)
}

// -------------------------------------------------------------------

// GachaTransferItem

// .proto.ItemParam item = 1;
inline bool GachaTransferItem::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline void GachaTransferItem::clear_item() {
  if (GetArenaNoVirtual() == NULL && item_ != NULL) delete item_;
  item_ = NULL;
}
inline const ::proto::ItemParam& GachaTransferItem::item() const {
  const ::proto::ItemParam* p = item_;
  // @@protoc_insertion_point(field_get:proto.GachaTransferItem.item)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ItemParam*>(
      &::proto::_ItemParam_default_instance_);
}
inline ::proto::ItemParam* GachaTransferItem::mutable_item() {
  
  if (item_ == NULL) {
    item_ = new ::proto::ItemParam;
  }
  // @@protoc_insertion_point(field_mutable:proto.GachaTransferItem.item)
  return item_;
}
inline ::proto::ItemParam* GachaTransferItem::release_item() {
  // @@protoc_insertion_point(field_release:proto.GachaTransferItem.item)
  
  ::proto::ItemParam* temp = item_;
  item_ = NULL;
  return temp;
}
inline void GachaTransferItem::set_allocated_item(::proto::ItemParam* item) {
  delete item_;
  item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GachaTransferItem.item)
}

// bool is_transfer_item_new = 2;
inline void GachaTransferItem::clear_is_transfer_item_new() {
  is_transfer_item_new_ = false;
}
inline bool GachaTransferItem::is_transfer_item_new() const {
  // @@protoc_insertion_point(field_get:proto.GachaTransferItem.is_transfer_item_new)
  return is_transfer_item_new_;
}
inline void GachaTransferItem::set_is_transfer_item_new(bool value) {
  
  is_transfer_item_new_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaTransferItem.is_transfer_item_new)
}

// -------------------------------------------------------------------

// GachaItem

// .proto.ItemParam gacha_item = 1;
inline bool GachaItem::has_gacha_item() const {
  return this != internal_default_instance() && gacha_item_ != NULL;
}
inline void GachaItem::clear_gacha_item() {
  if (GetArenaNoVirtual() == NULL && gacha_item_ != NULL) delete gacha_item_;
  gacha_item_ = NULL;
}
inline const ::proto::ItemParam& GachaItem::gacha_item() const {
  const ::proto::ItemParam* p = gacha_item_;
  // @@protoc_insertion_point(field_get:proto.GachaItem.gacha_item)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ItemParam*>(
      &::proto::_ItemParam_default_instance_);
}
inline ::proto::ItemParam* GachaItem::mutable_gacha_item() {
  
  if (gacha_item_ == NULL) {
    gacha_item_ = new ::proto::ItemParam;
  }
  // @@protoc_insertion_point(field_mutable:proto.GachaItem.gacha_item)
  return gacha_item_;
}
inline ::proto::ItemParam* GachaItem::release_gacha_item() {
  // @@protoc_insertion_point(field_release:proto.GachaItem.gacha_item)
  
  ::proto::ItemParam* temp = gacha_item_;
  gacha_item_ = NULL;
  return temp;
}
inline void GachaItem::set_allocated_gacha_item(::proto::ItemParam* gacha_item) {
  delete gacha_item_;
  gacha_item_ = gacha_item;
  if (gacha_item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GachaItem.gacha_item)
}

// repeated .proto.GachaTransferItem transfer_items = 2;
inline int GachaItem::transfer_items_size() const {
  return transfer_items_.size();
}
inline void GachaItem::clear_transfer_items() {
  transfer_items_.Clear();
}
inline const ::proto::GachaTransferItem& GachaItem::transfer_items(int index) const {
  // @@protoc_insertion_point(field_get:proto.GachaItem.transfer_items)
  return transfer_items_.Get(index);
}
inline ::proto::GachaTransferItem* GachaItem::mutable_transfer_items(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GachaItem.transfer_items)
  return transfer_items_.Mutable(index);
}
inline ::proto::GachaTransferItem* GachaItem::add_transfer_items() {
  // @@protoc_insertion_point(field_add:proto.GachaItem.transfer_items)
  return transfer_items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GachaTransferItem >*
GachaItem::mutable_transfer_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.GachaItem.transfer_items)
  return &transfer_items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GachaTransferItem >&
GachaItem::transfer_items() const {
  // @@protoc_insertion_point(field_list:proto.GachaItem.transfer_items)
  return transfer_items_;
}

// bool is_flash_card = 3;
inline void GachaItem::clear_is_flash_card() {
  is_flash_card_ = false;
}
inline bool GachaItem::is_flash_card() const {
  // @@protoc_insertion_point(field_get:proto.GachaItem.is_flash_card)
  return is_flash_card_;
}
inline void GachaItem::set_is_flash_card(bool value) {
  
  is_flash_card_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaItem.is_flash_card)
}

// bool is_gacha_item_new = 4;
inline void GachaItem::clear_is_gacha_item_new() {
  is_gacha_item_new_ = false;
}
inline bool GachaItem::is_gacha_item_new() const {
  // @@protoc_insertion_point(field_get:proto.GachaItem.is_gacha_item_new)
  return is_gacha_item_new_;
}
inline void GachaItem::set_is_gacha_item_new(bool value) {
  
  is_gacha_item_new_ = value;
  // @@protoc_insertion_point(field_set:proto.GachaItem.is_gacha_item_new)
}

// repeated .proto.ItemParam token_item_list = 5;
inline int GachaItem::token_item_list_size() const {
  return token_item_list_.size();
}
inline void GachaItem::clear_token_item_list() {
  token_item_list_.Clear();
}
inline const ::proto::ItemParam& GachaItem::token_item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GachaItem.token_item_list)
  return token_item_list_.Get(index);
}
inline ::proto::ItemParam* GachaItem::mutable_token_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GachaItem.token_item_list)
  return token_item_list_.Mutable(index);
}
inline ::proto::ItemParam* GachaItem::add_token_item_list() {
  // @@protoc_insertion_point(field_add:proto.GachaItem.token_item_list)
  return token_item_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
GachaItem::mutable_token_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GachaItem.token_item_list)
  return &token_item_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
GachaItem::token_item_list() const {
  // @@protoc_insertion_point(field_list:proto.GachaItem.token_item_list)
  return token_item_list_;
}

// -------------------------------------------------------------------

// DoGachaRsp

// int32 retcode = 1;
inline void DoGachaRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 DoGachaRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaRsp.retcode)
  return retcode_;
}
inline void DoGachaRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaRsp.retcode)
}

// uint32 gacha_type = 2;
inline void DoGachaRsp::clear_gacha_type() {
  gacha_type_ = 0u;
}
inline ::google::protobuf::uint32 DoGachaRsp::gacha_type() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaRsp.gacha_type)
  return gacha_type_;
}
inline void DoGachaRsp::set_gacha_type(::google::protobuf::uint32 value) {
  
  gacha_type_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaRsp.gacha_type)
}

// uint32 gacha_times = 3;
inline void DoGachaRsp::clear_gacha_times() {
  gacha_times_ = 0u;
}
inline ::google::protobuf::uint32 DoGachaRsp::gacha_times() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaRsp.gacha_times)
  return gacha_times_;
}
inline void DoGachaRsp::set_gacha_times(::google::protobuf::uint32 value) {
  
  gacha_times_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaRsp.gacha_times)
}

// uint32 gacha_schedule_id = 4;
inline void DoGachaRsp::clear_gacha_schedule_id() {
  gacha_schedule_id_ = 0u;
}
inline ::google::protobuf::uint32 DoGachaRsp::gacha_schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaRsp.gacha_schedule_id)
  return gacha_schedule_id_;
}
inline void DoGachaRsp::set_gacha_schedule_id(::google::protobuf::uint32 value) {
  
  gacha_schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaRsp.gacha_schedule_id)
}

// repeated .proto.GachaItem gacha_item_list = 5;
inline int DoGachaRsp::gacha_item_list_size() const {
  return gacha_item_list_.size();
}
inline void DoGachaRsp::clear_gacha_item_list() {
  gacha_item_list_.Clear();
}
inline const ::proto::GachaItem& DoGachaRsp::gacha_item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DoGachaRsp.gacha_item_list)
  return gacha_item_list_.Get(index);
}
inline ::proto::GachaItem* DoGachaRsp::mutable_gacha_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.DoGachaRsp.gacha_item_list)
  return gacha_item_list_.Mutable(index);
}
inline ::proto::GachaItem* DoGachaRsp::add_gacha_item_list() {
  // @@protoc_insertion_point(field_add:proto.DoGachaRsp.gacha_item_list)
  return gacha_item_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GachaItem >*
DoGachaRsp::mutable_gacha_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DoGachaRsp.gacha_item_list)
  return &gacha_item_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GachaItem >&
DoGachaRsp::gacha_item_list() const {
  // @@protoc_insertion_point(field_list:proto.DoGachaRsp.gacha_item_list)
  return gacha_item_list_;
}

// uint32 new_gacha_random = 6;
inline void DoGachaRsp::clear_new_gacha_random() {
  new_gacha_random_ = 0u;
}
inline ::google::protobuf::uint32 DoGachaRsp::new_gacha_random() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaRsp.new_gacha_random)
  return new_gacha_random_;
}
inline void DoGachaRsp::set_new_gacha_random(::google::protobuf::uint32 value) {
  
  new_gacha_random_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaRsp.new_gacha_random)
}

// uint32 cost_item_id = 7;
inline void DoGachaRsp::clear_cost_item_id() {
  cost_item_id_ = 0u;
}
inline ::google::protobuf::uint32 DoGachaRsp::cost_item_id() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaRsp.cost_item_id)
  return cost_item_id_;
}
inline void DoGachaRsp::set_cost_item_id(::google::protobuf::uint32 value) {
  
  cost_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaRsp.cost_item_id)
}

// uint32 cost_item_num = 8;
inline void DoGachaRsp::clear_cost_item_num() {
  cost_item_num_ = 0u;
}
inline ::google::protobuf::uint32 DoGachaRsp::cost_item_num() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaRsp.cost_item_num)
  return cost_item_num_;
}
inline void DoGachaRsp::set_cost_item_num(::google::protobuf::uint32 value) {
  
  cost_item_num_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaRsp.cost_item_num)
}

// uint32 ten_cost_item_id = 9;
inline void DoGachaRsp::clear_ten_cost_item_id() {
  ten_cost_item_id_ = 0u;
}
inline ::google::protobuf::uint32 DoGachaRsp::ten_cost_item_id() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaRsp.ten_cost_item_id)
  return ten_cost_item_id_;
}
inline void DoGachaRsp::set_ten_cost_item_id(::google::protobuf::uint32 value) {
  
  ten_cost_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaRsp.ten_cost_item_id)
}

// uint32 ten_cost_item_num = 10;
inline void DoGachaRsp::clear_ten_cost_item_num() {
  ten_cost_item_num_ = 0u;
}
inline ::google::protobuf::uint32 DoGachaRsp::ten_cost_item_num() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaRsp.ten_cost_item_num)
  return ten_cost_item_num_;
}
inline void DoGachaRsp::set_ten_cost_item_num(::google::protobuf::uint32 value) {
  
  ten_cost_item_num_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaRsp.ten_cost_item_num)
}

// uint32 left_gacha_times = 11;
inline void DoGachaRsp::clear_left_gacha_times() {
  left_gacha_times_ = 0u;
}
inline ::google::protobuf::uint32 DoGachaRsp::left_gacha_times() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaRsp.left_gacha_times)
  return left_gacha_times_;
}
inline void DoGachaRsp::set_left_gacha_times(::google::protobuf::uint32 value) {
  
  left_gacha_times_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaRsp.left_gacha_times)
}

// uint32 gacha_times_limit = 12;
inline void DoGachaRsp::clear_gacha_times_limit() {
  gacha_times_limit_ = 0u;
}
inline ::google::protobuf::uint32 DoGachaRsp::gacha_times_limit() const {
  // @@protoc_insertion_point(field_get:proto.DoGachaRsp.gacha_times_limit)
  return gacha_times_limit_;
}
inline void DoGachaRsp::set_gacha_times_limit(::google::protobuf::uint32 value) {
  
  gacha_times_limit_ = value;
  // @@protoc_insertion_point(field_set:proto.DoGachaRsp.gacha_times_limit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::GetGachaInfoReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GetGachaInfoReq_CmdId>() {
  return ::proto::GetGachaInfoReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::GetGachaInfoRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GetGachaInfoRsp_CmdId>() {
  return ::proto::GetGachaInfoRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::DoGachaReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::DoGachaReq_CmdId>() {
  return ::proto::DoGachaReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::DoGachaRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::DoGachaRsp_CmdId>() {
  return ::proto::DoGachaRsp_CmdId_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cmd_2fcmd_5fgacha_2eproto__INCLUDED
