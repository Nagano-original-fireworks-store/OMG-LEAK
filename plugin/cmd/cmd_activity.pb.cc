// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_activity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cmd/cmd_activity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
class GetActivityScheduleReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetActivityScheduleReq>
     _instance;
} _GetActivityScheduleReq_default_instance_;
class ActivityScheduleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ActivityScheduleInfo>
     _instance;
} _ActivityScheduleInfo_default_instance_;
class GetActivityScheduleRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetActivityScheduleRsp>
     _instance;
} _GetActivityScheduleRsp_default_instance_;
class GetActivityInfoReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetActivityInfoReq>
     _instance;
} _GetActivityInfoReq_default_instance_;
class ActivityInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ActivityInfo>
     _instance;
  const ::proto::SeaLampActivityDetailInfo* sam_lamp_info_;
} _ActivityInfo_default_instance_;
class GetActivityInfoRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetActivityInfoRsp>
     _instance;
} _GetActivityInfoRsp_default_instance_;
class ActivityPlayOpenAnimNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ActivityPlayOpenAnimNotify>
     _instance;
} _ActivityPlayOpenAnimNotify_default_instance_;
class ActivityInfoNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ActivityInfoNotify>
     _instance;
} _ActivityInfoNotify_default_instance_;
class ActivityScheduleInfoNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ActivityScheduleInfoNotify>
     _instance;
} _ActivityScheduleInfoNotify_default_instance_;
class SeaLampActivityDetailInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SeaLampActivityDetailInfo>
     _instance;
} _SeaLampActivityDetailInfo_default_instance_;
class SeaLampFlyLampReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SeaLampFlyLampReq>
     _instance;
} _SeaLampFlyLampReq_default_instance_;
class SeaLampFlyLampRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SeaLampFlyLampRsp>
     _instance;
} _SeaLampFlyLampRsp_default_instance_;
class SeaLampTakeContributionRewardReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SeaLampTakeContributionRewardReq>
     _instance;
} _SeaLampTakeContributionRewardReq_default_instance_;
class SeaLampTakeContributionRewardRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SeaLampTakeContributionRewardRsp>
     _instance;
} _SeaLampTakeContributionRewardRsp_default_instance_;
class SeaLampTakePhaseRewardReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SeaLampTakePhaseRewardReq>
     _instance;
} _SeaLampTakePhaseRewardReq_default_instance_;
class SeaLampTakePhaseRewardRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SeaLampTakePhaseRewardRsp>
     _instance;
} _SeaLampTakePhaseRewardRsp_default_instance_;
class SeaLampContributeItemReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SeaLampContributeItemReq>
     _instance;
} _SeaLampContributeItemReq_default_instance_;
class SeaLampContributeItemRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SeaLampContributeItemRsp>
     _instance;
} _SeaLampContributeItemRsp_default_instance_;
class AnnounceDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AnnounceData>
     _instance;
} _AnnounceData_default_instance_;
class LoadActivityTerrainNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LoadActivityTerrainNotify>
     _instance;
} _LoadActivityTerrainNotify_default_instance_;
class ServerAnnounceNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerAnnounceNotify>
     _instance;
} _ServerAnnounceNotify_default_instance_;
class ServerAnnounceRevokeNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerAnnounceRevokeNotify>
     _instance;
} _ServerAnnounceRevokeNotify_default_instance_;

namespace protobuf_cmd_2fcmd_5factivity_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[22];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[18];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityScheduleReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityScheduleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityScheduleInfo, activity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityScheduleInfo, is_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityScheduleInfo, schedule_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityScheduleInfo, begin_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityScheduleInfo, end_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityScheduleRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityScheduleRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityScheduleRsp, activity_schedule_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityScheduleRsp, remain_fly_sea_lamp_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityInfoReq, activity_id_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInfo, activity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInfo, schedule_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInfo, begin_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInfo, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInfo, activity_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInfo, is_play_open_anim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInfo, is_finished_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInfo, is_starting_),
  offsetof(ActivityInfoDefaultTypeInternal, sam_lamp_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInfo, detail_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityInfoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityInfoRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityInfoRsp, activity_info_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPlayOpenAnimNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPlayOpenAnimNotify, activity_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInfoNotify, activity_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityScheduleInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityScheduleInfoNotify, activity_schedule_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityScheduleInfoNotify, remain_fly_sea_lamp_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampActivityDetailInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampActivityDetailInfo, phase_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampActivityDetailInfo, progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampActivityDetailInfo, days_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampActivityDetailInfo, contribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampActivityDetailInfo, taken_contribution_reward_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampActivityDetailInfo, taken_phase_reward_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampActivityDetailInfo, factor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampFlyLampReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampFlyLampReq, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampFlyLampReq, wish_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampFlyLampReq, item_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampFlyLampRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampFlyLampRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampFlyLampRsp, total_contribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampFlyLampRsp, remain_fly_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampFlyLampRsp, add_contribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampFlyLampRsp, add_progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampFlyLampRsp, item_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampTakeContributionRewardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampTakeContributionRewardReq, config_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampTakeContributionRewardRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampTakeContributionRewardRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampTakeContributionRewardRsp, config_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampTakePhaseRewardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampTakePhaseRewardReq, phase_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampTakePhaseRewardRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampTakePhaseRewardRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampTakePhaseRewardRsp, phase_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampContributeItemReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampContributeItemReq, item_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampContributeItemRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampContributeItemRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampContributeItemRsp, total_contribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampContributeItemRsp, add_contribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeaLampContributeItemRsp, add_progress_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceData, config_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceData, begin_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceData, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceData, center_system_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceData, count_down_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceData, dungeon_confirm_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceData, center_system_frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceData, count_down_frequency_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadActivityTerrainNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadActivityTerrainNotify, activity_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerAnnounceNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerAnnounceNotify, announce_data_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerAnnounceRevokeNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerAnnounceRevokeNotify, config_id_list_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(GetActivityScheduleReq)},
  { 5, -1, sizeof(ActivityScheduleInfo)},
  { 15, -1, sizeof(GetActivityScheduleRsp)},
  { 23, -1, sizeof(GetActivityInfoReq)},
  { 29, -1, sizeof(ActivityInfo)},
  { 44, -1, sizeof(GetActivityInfoRsp)},
  { 51, -1, sizeof(ActivityPlayOpenAnimNotify)},
  { 57, -1, sizeof(ActivityInfoNotify)},
  { 63, -1, sizeof(ActivityScheduleInfoNotify)},
  { 70, -1, sizeof(SeaLampActivityDetailInfo)},
  { 82, -1, sizeof(SeaLampFlyLampReq)},
  { 90, -1, sizeof(SeaLampFlyLampRsp)},
  { 101, -1, sizeof(SeaLampTakeContributionRewardReq)},
  { 107, -1, sizeof(SeaLampTakeContributionRewardRsp)},
  { 114, -1, sizeof(SeaLampTakePhaseRewardReq)},
  { 120, -1, sizeof(SeaLampTakePhaseRewardRsp)},
  { 127, -1, sizeof(SeaLampContributeItemReq)},
  { 133, -1, sizeof(SeaLampContributeItemRsp)},
  { 142, -1, sizeof(AnnounceData)},
  { 155, -1, sizeof(LoadActivityTerrainNotify)},
  { 161, -1, sizeof(ServerAnnounceNotify)},
  { 167, -1, sizeof(ServerAnnounceRevokeNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetActivityScheduleReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ActivityScheduleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetActivityScheduleRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetActivityInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ActivityInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetActivityInfoRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ActivityPlayOpenAnimNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ActivityInfoNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ActivityScheduleInfoNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SeaLampActivityDetailInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SeaLampFlyLampReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SeaLampFlyLampRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SeaLampTakeContributionRewardReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SeaLampTakeContributionRewardRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SeaLampTakePhaseRewardReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SeaLampTakePhaseRewardRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SeaLampContributeItemReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SeaLampContributeItemRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnnounceData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoadActivityTerrainNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerAnnounceNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerAnnounceRevokeNotify_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cmd/cmd_activity.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 22);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::protobuf_define_2eproto::InitDefaults();
  _GetActivityScheduleReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetActivityScheduleReq_default_instance_);_ActivityScheduleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ActivityScheduleInfo_default_instance_);_GetActivityScheduleRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetActivityScheduleRsp_default_instance_);_GetActivityInfoReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetActivityInfoReq_default_instance_);_ActivityInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ActivityInfo_default_instance_);_GetActivityInfoRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetActivityInfoRsp_default_instance_);_ActivityPlayOpenAnimNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ActivityPlayOpenAnimNotify_default_instance_);_ActivityInfoNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ActivityInfoNotify_default_instance_);_ActivityScheduleInfoNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ActivityScheduleInfoNotify_default_instance_);_SeaLampActivityDetailInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SeaLampActivityDetailInfo_default_instance_);_SeaLampFlyLampReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SeaLampFlyLampReq_default_instance_);_SeaLampFlyLampRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SeaLampFlyLampRsp_default_instance_);_SeaLampTakeContributionRewardReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SeaLampTakeContributionRewardReq_default_instance_);_SeaLampTakeContributionRewardRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SeaLampTakeContributionRewardRsp_default_instance_);_SeaLampTakePhaseRewardReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SeaLampTakePhaseRewardReq_default_instance_);_SeaLampTakePhaseRewardRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SeaLampTakePhaseRewardRsp_default_instance_);_SeaLampContributeItemReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SeaLampContributeItemReq_default_instance_);_SeaLampContributeItemRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SeaLampContributeItemRsp_default_instance_);_AnnounceData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AnnounceData_default_instance_);_LoadActivityTerrainNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LoadActivityTerrainNotify_default_instance_);_ServerAnnounceNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerAnnounceNotify_default_instance_);_ServerAnnounceRevokeNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerAnnounceRevokeNotify_default_instance_);_ActivityInfo_default_instance_.sam_lamp_info_ = const_cast< ::proto::SeaLampActivityDetailInfo*>(
      ::proto::SeaLampActivityDetailInfo::internal_default_instance());
  _ActivityInfoNotify_default_instance_._instance.get_mutable()->activity_info_ = const_cast< ::proto::ActivityInfo*>(
      ::proto::ActivityInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026cmd/cmd_activity.proto\022\005proto\032\014define."
      "proto\"|\n\026GetActivityScheduleReq\"b\n\005CmdId"
      "\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\321\017\022\023\n\017ENET_CHANNEL_"
      "ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\022\023\n\017IS_ALLOW_C"
      "LIENT\020\001\032\002\020\001\"w\n\024ActivityScheduleInfo\022\023\n\013a"
      "ctivity_id\030\001 \001(\r\022\017\n\007is_open\030\002 \001(\010\022\023\n\013sch"
      "edule_id\030\003 \001(\r\022\022\n\nbegin_time\030\004 \001(\r\022\020\n\010en"
      "d_time\030\005 \001(\r\"\326\001\n\026GetActivityScheduleRsp\022"
      "\017\n\007retcode\030\001 \001(\005\022;\n\026activity_schedule_li"
      "st\030\002 \003(\0132\033.proto.ActivityScheduleInfo\022\037\n"
      "\027remain_fly_sea_lamp_num\030\003 \001(\r\"M\n\005CmdId\022"
      "\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\322\017\022\023\n\017ENET_CHANNEL_I"
      "D\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"\222\001\n\022GetAct"
      "ivityInfoReq\022\030\n\020activity_id_list\030\001 \003(\r\"b"
      "\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\323\017\022\023\n\017ENET_C"
      "HANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\022\023\n\017IS_"
      "ALLOW_CLIENT\020\001\032\002\020\001\"\377\001\n\014ActivityInfo\022\023\n\013a"
      "ctivity_id\030\001 \001(\r\022\023\n\013schedule_id\030\002 \001(\r\022\022\n"
      "\nbegin_time\030\003 \001(\r\022\020\n\010end_time\030\004 \001(\r\022\025\n\ra"
      "ctivity_type\030\005 \001(\r\022\031\n\021is_play_open_anim\030"
      "\006 \001(\010\022\023\n\013is_finished\030\007 \001(\010\022\023\n\013is_startin"
      "g\030\010 \001(\010\0229\n\rsam_lamp_info\030\013 \001(\0132 .proto.S"
      "eaLampActivityDetailInfoH\000B\010\n\006detail\"\245\001\n"
      "\022GetActivityInfoRsp\022\017\n\007retcode\030\001 \001(\005\022/\n\022"
      "activity_info_list\030\002 \003(\0132\023.proto.Activit"
      "yInfo\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\324\017\022\023\n"
      "\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001"
      "\032\002\020\001\"\225\001\n\032ActivityPlayOpenAnimNotify\022\023\n\013a"
      "ctivity_id\030\001 \001(\r\"b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006C"
      "MD_ID\020\325\017\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS"
      "_RELIABLE\020\001\022\023\n\017IS_ALLOW_CLIENT\020\001\032\002\020\001\"\244\001\n"
      "\022ActivityInfoNotify\022*\n\ractivity_info\030\001 \001"
      "(\0132\023.proto.ActivityInfo\"b\n\005CmdId\022\010\n\004NONE"
      "\020\000\022\013\n\006CMD_ID\020\326\017\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020"
      "ENET_IS_RELIABLE\020\001\022\023\n\017IS_ALLOW_CLIENT\020\001\032"
      "\002\020\001\"\336\001\n\032ActivityScheduleInfoNotify\022;\n\026ac"
      "tivity_schedule_list\030\001 \003(\0132\033.proto.Activ"
      "ityScheduleInfo\022\037\n\027remain_fly_sea_lamp_n"
      "um\030\002 \001(\r\"b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\327\017"
      "\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABL"
      "E\020\001\022\023\n\017IS_ALLOW_CLIENT\020\001\032\002\020\001\"\274\001\n\031SeaLamp"
      "ActivityDetailInfo\022\020\n\010phase_id\030\001 \001(\r\022\020\n\010"
      "progress\030\002 \001(\r\022\014\n\004days\030\003 \001(\r\022\024\n\014contribu"
      "tion\030\004 \001(\r\022&\n\036taken_contribution_reward_"
      "list\030\005 \003(\r\022\037\n\027taken_phase_reward_list\030\006 "
      "\003(\r\022\016\n\006factor\030\007 \001(\r\"\255\001\n\021SeaLampFlyLampRe"
      "q\022\017\n\007item_id\030\001 \001(\r\022\021\n\twish_text\030\002 \001(\t\022\020\n"
      "\010item_num\030\003 \001(\r\"b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CM"
      "D_ID\020\336\017\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_"
      "RELIABLE\020\001\022\023\n\017IS_ALLOW_CLIENT\020\001\032\002\020\001\"\351\001\n\021"
      "SeaLampFlyLampRsp\022\017\n\007retcode\030\001 \001(\005\022\032\n\022to"
      "tal_contribution\030\002 \001(\r\022\026\n\016remain_fly_num"
      "\030\003 \001(\r\022\030\n\020add_contribution\030\004 \001(\r\022\024\n\014add_"
      "progress\030\005 \001(\r\022\020\n\010item_num\030\006 \001(\r\"M\n\005CmdI"
      "d\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\337\017\022\023\n\017ENET_CHANNEL"
      "_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"\231\001\n SeaL"
      "ampTakeContributionRewardReq\022\021\n\tconfig_i"
      "d\030\001 \001(\r\"b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\340\017\022"
      "\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE"
      "\020\001\022\023\n\017IS_ALLOW_CLIENT\020\001\032\002\020\001\"\225\001\n SeaLampT"
      "akeContributionRewardRsp\022\017\n\007retcode\030\001 \001("
      "\005\022\021\n\tconfig_id\030\002 \001(\r\"M\n\005CmdId\022\010\n\004NONE\020\000\022"
      "\013\n\006CMD_ID\020\341\017\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENE"
      "T_IS_RELIABLE\020\001\032\002\020\001\"\221\001\n\031SeaLampTakePhase"
      "RewardReq\022\020\n\010phase_id\030\001 \001(\r\"b\n\005CmdId\022\010\n\004"
      "NONE\020\000\022\013\n\006CMD_ID\020\342\017\022\023\n\017ENET_CHANNEL_ID\020\000"
      "\022\024\n\020ENET_IS_RELIABLE\020\001\022\023\n\017IS_ALLOW_CLIEN"
      "T\020\001\032\002\020\001\"\215\001\n\031SeaLampTakePhaseRewardRsp\022\017\n"
      "\007retcode\030\001 \001(\005\022\020\n\010phase_id\030\002 \001(\r\"M\n\005CmdI"
      "d\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\343\017\022\023\n\017ENET_CHANNEL"
      "_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"\243\001\n\030SeaL"
      "ampContributeItemReq\022#\n\titem_list\030\001 \003(\0132"
      "\020.proto.ItemParam\"b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006"
      "CMD_ID\020\344\017\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_I"
      "S_RELIABLE\020\001\022\023\n\017IS_ALLOW_CLIENT\020\001\032\002\020\001\"\306\001"
      "\n\030SeaLampContributeItemRsp\022\017\n\007retcode\030\001 "
      "\001(\005\022\032\n\022total_contribution\030\002 \001(\r\022\030\n\020add_c"
      "ontribution\030\003 \001(\r\022\024\n\014add_progress\030\004 \001(\r\""
      "M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\345\017\022\023\n\017ENET_"
      "CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"\331"
      "\001\n\014AnnounceData\022\021\n\tconfig_id\030\001 \001(\r\022\022\n\nbe"
      "gin_time\030\002 \001(\r\022\020\n\010end_time\030\003 \001(\r\022\032\n\022cent"
      "er_system_text\030\004 \001(\t\022\027\n\017count_down_text\030"
      "\005 \001(\t\022\034\n\024dungeon_confirm_text\030\006 \001(\t\022\037\n\027c"
      "enter_system_frequency\030\007 \001(\r\022\034\n\024count_do"
      "wn_frequency\030\010 \001(\r\"\224\001\n\031LoadActivityTerra"
      "inNotify\022\023\n\013activity_id\030\001 \001(\r\"b\n\005CmdId\022\010"
      "\n\004NONE\020\000\022\013\n\006CMD_ID\020\350\017\022\023\n\017ENET_CHANNEL_ID"
      "\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\022\023\n\017IS_ALLOW_CLI"
      "ENT\020\001\032\002\020\001\"\226\001\n\024ServerAnnounceNotify\022/\n\022an"
      "nounce_data_list\030\001 \003(\0132\023.proto.AnnounceD"
      "ata\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD_ID\020\346\017\022\023\n\017E"
      "NET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002"
      "\020\001\"\203\001\n\032ServerAnnounceRevokeNotify\022\026\n\016con"
      "fig_id_list\030\001 \003(\r\"M\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006"
      "CMD_ID\020\347\017\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_I"
      "S_RELIABLE\020\001\032\002\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3864);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cmd/cmd_activity.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_define_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cmd_2fcmd_5factivity_2eproto

const ::google::protobuf::EnumDescriptor* GetActivityScheduleReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_enum_descriptors[0];
}
bool GetActivityScheduleReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2001:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GetActivityScheduleReq_CmdId GetActivityScheduleReq::NONE;
const GetActivityScheduleReq_CmdId GetActivityScheduleReq::CMD_ID;
const GetActivityScheduleReq_CmdId GetActivityScheduleReq::ENET_CHANNEL_ID;
const GetActivityScheduleReq_CmdId GetActivityScheduleReq::ENET_IS_RELIABLE;
const GetActivityScheduleReq_CmdId GetActivityScheduleReq::IS_ALLOW_CLIENT;
const GetActivityScheduleReq_CmdId GetActivityScheduleReq::CmdId_MIN;
const GetActivityScheduleReq_CmdId GetActivityScheduleReq::CmdId_MAX;
const int GetActivityScheduleReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GetActivityScheduleRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_enum_descriptors[1];
}
bool GetActivityScheduleRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2002:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GetActivityScheduleRsp_CmdId GetActivityScheduleRsp::NONE;
const GetActivityScheduleRsp_CmdId GetActivityScheduleRsp::CMD_ID;
const GetActivityScheduleRsp_CmdId GetActivityScheduleRsp::ENET_CHANNEL_ID;
const GetActivityScheduleRsp_CmdId GetActivityScheduleRsp::ENET_IS_RELIABLE;
const GetActivityScheduleRsp_CmdId GetActivityScheduleRsp::CmdId_MIN;
const GetActivityScheduleRsp_CmdId GetActivityScheduleRsp::CmdId_MAX;
const int GetActivityScheduleRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GetActivityInfoReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_enum_descriptors[2];
}
bool GetActivityInfoReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2003:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GetActivityInfoReq_CmdId GetActivityInfoReq::NONE;
const GetActivityInfoReq_CmdId GetActivityInfoReq::CMD_ID;
const GetActivityInfoReq_CmdId GetActivityInfoReq::ENET_CHANNEL_ID;
const GetActivityInfoReq_CmdId GetActivityInfoReq::ENET_IS_RELIABLE;
const GetActivityInfoReq_CmdId GetActivityInfoReq::IS_ALLOW_CLIENT;
const GetActivityInfoReq_CmdId GetActivityInfoReq::CmdId_MIN;
const GetActivityInfoReq_CmdId GetActivityInfoReq::CmdId_MAX;
const int GetActivityInfoReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GetActivityInfoRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_enum_descriptors[3];
}
bool GetActivityInfoRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2004:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GetActivityInfoRsp_CmdId GetActivityInfoRsp::NONE;
const GetActivityInfoRsp_CmdId GetActivityInfoRsp::CMD_ID;
const GetActivityInfoRsp_CmdId GetActivityInfoRsp::ENET_CHANNEL_ID;
const GetActivityInfoRsp_CmdId GetActivityInfoRsp::ENET_IS_RELIABLE;
const GetActivityInfoRsp_CmdId GetActivityInfoRsp::CmdId_MIN;
const GetActivityInfoRsp_CmdId GetActivityInfoRsp::CmdId_MAX;
const int GetActivityInfoRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ActivityPlayOpenAnimNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_enum_descriptors[4];
}
bool ActivityPlayOpenAnimNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2005:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ActivityPlayOpenAnimNotify_CmdId ActivityPlayOpenAnimNotify::NONE;
const ActivityPlayOpenAnimNotify_CmdId ActivityPlayOpenAnimNotify::CMD_ID;
const ActivityPlayOpenAnimNotify_CmdId ActivityPlayOpenAnimNotify::ENET_CHANNEL_ID;
const ActivityPlayOpenAnimNotify_CmdId ActivityPlayOpenAnimNotify::ENET_IS_RELIABLE;
const ActivityPlayOpenAnimNotify_CmdId ActivityPlayOpenAnimNotify::IS_ALLOW_CLIENT;
const ActivityPlayOpenAnimNotify_CmdId ActivityPlayOpenAnimNotify::CmdId_MIN;
const ActivityPlayOpenAnimNotify_CmdId ActivityPlayOpenAnimNotify::CmdId_MAX;
const int ActivityPlayOpenAnimNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ActivityInfoNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_enum_descriptors[5];
}
bool ActivityInfoNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2006:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ActivityInfoNotify_CmdId ActivityInfoNotify::NONE;
const ActivityInfoNotify_CmdId ActivityInfoNotify::CMD_ID;
const ActivityInfoNotify_CmdId ActivityInfoNotify::ENET_CHANNEL_ID;
const ActivityInfoNotify_CmdId ActivityInfoNotify::ENET_IS_RELIABLE;
const ActivityInfoNotify_CmdId ActivityInfoNotify::IS_ALLOW_CLIENT;
const ActivityInfoNotify_CmdId ActivityInfoNotify::CmdId_MIN;
const ActivityInfoNotify_CmdId ActivityInfoNotify::CmdId_MAX;
const int ActivityInfoNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ActivityScheduleInfoNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_enum_descriptors[6];
}
bool ActivityScheduleInfoNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2007:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ActivityScheduleInfoNotify_CmdId ActivityScheduleInfoNotify::NONE;
const ActivityScheduleInfoNotify_CmdId ActivityScheduleInfoNotify::CMD_ID;
const ActivityScheduleInfoNotify_CmdId ActivityScheduleInfoNotify::ENET_CHANNEL_ID;
const ActivityScheduleInfoNotify_CmdId ActivityScheduleInfoNotify::ENET_IS_RELIABLE;
const ActivityScheduleInfoNotify_CmdId ActivityScheduleInfoNotify::IS_ALLOW_CLIENT;
const ActivityScheduleInfoNotify_CmdId ActivityScheduleInfoNotify::CmdId_MIN;
const ActivityScheduleInfoNotify_CmdId ActivityScheduleInfoNotify::CmdId_MAX;
const int ActivityScheduleInfoNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SeaLampFlyLampReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_enum_descriptors[7];
}
bool SeaLampFlyLampReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2014:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SeaLampFlyLampReq_CmdId SeaLampFlyLampReq::NONE;
const SeaLampFlyLampReq_CmdId SeaLampFlyLampReq::CMD_ID;
const SeaLampFlyLampReq_CmdId SeaLampFlyLampReq::ENET_CHANNEL_ID;
const SeaLampFlyLampReq_CmdId SeaLampFlyLampReq::ENET_IS_RELIABLE;
const SeaLampFlyLampReq_CmdId SeaLampFlyLampReq::IS_ALLOW_CLIENT;
const SeaLampFlyLampReq_CmdId SeaLampFlyLampReq::CmdId_MIN;
const SeaLampFlyLampReq_CmdId SeaLampFlyLampReq::CmdId_MAX;
const int SeaLampFlyLampReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SeaLampFlyLampRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_enum_descriptors[8];
}
bool SeaLampFlyLampRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2015:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SeaLampFlyLampRsp_CmdId SeaLampFlyLampRsp::NONE;
const SeaLampFlyLampRsp_CmdId SeaLampFlyLampRsp::CMD_ID;
const SeaLampFlyLampRsp_CmdId SeaLampFlyLampRsp::ENET_CHANNEL_ID;
const SeaLampFlyLampRsp_CmdId SeaLampFlyLampRsp::ENET_IS_RELIABLE;
const SeaLampFlyLampRsp_CmdId SeaLampFlyLampRsp::CmdId_MIN;
const SeaLampFlyLampRsp_CmdId SeaLampFlyLampRsp::CmdId_MAX;
const int SeaLampFlyLampRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SeaLampTakeContributionRewardReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_enum_descriptors[9];
}
bool SeaLampTakeContributionRewardReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2016:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SeaLampTakeContributionRewardReq_CmdId SeaLampTakeContributionRewardReq::NONE;
const SeaLampTakeContributionRewardReq_CmdId SeaLampTakeContributionRewardReq::CMD_ID;
const SeaLampTakeContributionRewardReq_CmdId SeaLampTakeContributionRewardReq::ENET_CHANNEL_ID;
const SeaLampTakeContributionRewardReq_CmdId SeaLampTakeContributionRewardReq::ENET_IS_RELIABLE;
const SeaLampTakeContributionRewardReq_CmdId SeaLampTakeContributionRewardReq::IS_ALLOW_CLIENT;
const SeaLampTakeContributionRewardReq_CmdId SeaLampTakeContributionRewardReq::CmdId_MIN;
const SeaLampTakeContributionRewardReq_CmdId SeaLampTakeContributionRewardReq::CmdId_MAX;
const int SeaLampTakeContributionRewardReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SeaLampTakeContributionRewardRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_enum_descriptors[10];
}
bool SeaLampTakeContributionRewardRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2017:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SeaLampTakeContributionRewardRsp_CmdId SeaLampTakeContributionRewardRsp::NONE;
const SeaLampTakeContributionRewardRsp_CmdId SeaLampTakeContributionRewardRsp::CMD_ID;
const SeaLampTakeContributionRewardRsp_CmdId SeaLampTakeContributionRewardRsp::ENET_CHANNEL_ID;
const SeaLampTakeContributionRewardRsp_CmdId SeaLampTakeContributionRewardRsp::ENET_IS_RELIABLE;
const SeaLampTakeContributionRewardRsp_CmdId SeaLampTakeContributionRewardRsp::CmdId_MIN;
const SeaLampTakeContributionRewardRsp_CmdId SeaLampTakeContributionRewardRsp::CmdId_MAX;
const int SeaLampTakeContributionRewardRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SeaLampTakePhaseRewardReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_enum_descriptors[11];
}
bool SeaLampTakePhaseRewardReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2018:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SeaLampTakePhaseRewardReq_CmdId SeaLampTakePhaseRewardReq::NONE;
const SeaLampTakePhaseRewardReq_CmdId SeaLampTakePhaseRewardReq::CMD_ID;
const SeaLampTakePhaseRewardReq_CmdId SeaLampTakePhaseRewardReq::ENET_CHANNEL_ID;
const SeaLampTakePhaseRewardReq_CmdId SeaLampTakePhaseRewardReq::ENET_IS_RELIABLE;
const SeaLampTakePhaseRewardReq_CmdId SeaLampTakePhaseRewardReq::IS_ALLOW_CLIENT;
const SeaLampTakePhaseRewardReq_CmdId SeaLampTakePhaseRewardReq::CmdId_MIN;
const SeaLampTakePhaseRewardReq_CmdId SeaLampTakePhaseRewardReq::CmdId_MAX;
const int SeaLampTakePhaseRewardReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SeaLampTakePhaseRewardRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_enum_descriptors[12];
}
bool SeaLampTakePhaseRewardRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2019:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SeaLampTakePhaseRewardRsp_CmdId SeaLampTakePhaseRewardRsp::NONE;
const SeaLampTakePhaseRewardRsp_CmdId SeaLampTakePhaseRewardRsp::CMD_ID;
const SeaLampTakePhaseRewardRsp_CmdId SeaLampTakePhaseRewardRsp::ENET_CHANNEL_ID;
const SeaLampTakePhaseRewardRsp_CmdId SeaLampTakePhaseRewardRsp::ENET_IS_RELIABLE;
const SeaLampTakePhaseRewardRsp_CmdId SeaLampTakePhaseRewardRsp::CmdId_MIN;
const SeaLampTakePhaseRewardRsp_CmdId SeaLampTakePhaseRewardRsp::CmdId_MAX;
const int SeaLampTakePhaseRewardRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SeaLampContributeItemReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_enum_descriptors[13];
}
bool SeaLampContributeItemReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2020:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SeaLampContributeItemReq_CmdId SeaLampContributeItemReq::NONE;
const SeaLampContributeItemReq_CmdId SeaLampContributeItemReq::CMD_ID;
const SeaLampContributeItemReq_CmdId SeaLampContributeItemReq::ENET_CHANNEL_ID;
const SeaLampContributeItemReq_CmdId SeaLampContributeItemReq::ENET_IS_RELIABLE;
const SeaLampContributeItemReq_CmdId SeaLampContributeItemReq::IS_ALLOW_CLIENT;
const SeaLampContributeItemReq_CmdId SeaLampContributeItemReq::CmdId_MIN;
const SeaLampContributeItemReq_CmdId SeaLampContributeItemReq::CmdId_MAX;
const int SeaLampContributeItemReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SeaLampContributeItemRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_enum_descriptors[14];
}
bool SeaLampContributeItemRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2021:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SeaLampContributeItemRsp_CmdId SeaLampContributeItemRsp::NONE;
const SeaLampContributeItemRsp_CmdId SeaLampContributeItemRsp::CMD_ID;
const SeaLampContributeItemRsp_CmdId SeaLampContributeItemRsp::ENET_CHANNEL_ID;
const SeaLampContributeItemRsp_CmdId SeaLampContributeItemRsp::ENET_IS_RELIABLE;
const SeaLampContributeItemRsp_CmdId SeaLampContributeItemRsp::CmdId_MIN;
const SeaLampContributeItemRsp_CmdId SeaLampContributeItemRsp::CmdId_MAX;
const int SeaLampContributeItemRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LoadActivityTerrainNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_enum_descriptors[15];
}
bool LoadActivityTerrainNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2024:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LoadActivityTerrainNotify_CmdId LoadActivityTerrainNotify::NONE;
const LoadActivityTerrainNotify_CmdId LoadActivityTerrainNotify::CMD_ID;
const LoadActivityTerrainNotify_CmdId LoadActivityTerrainNotify::ENET_CHANNEL_ID;
const LoadActivityTerrainNotify_CmdId LoadActivityTerrainNotify::ENET_IS_RELIABLE;
const LoadActivityTerrainNotify_CmdId LoadActivityTerrainNotify::IS_ALLOW_CLIENT;
const LoadActivityTerrainNotify_CmdId LoadActivityTerrainNotify::CmdId_MIN;
const LoadActivityTerrainNotify_CmdId LoadActivityTerrainNotify::CmdId_MAX;
const int LoadActivityTerrainNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ServerAnnounceNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_enum_descriptors[16];
}
bool ServerAnnounceNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2022:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ServerAnnounceNotify_CmdId ServerAnnounceNotify::NONE;
const ServerAnnounceNotify_CmdId ServerAnnounceNotify::CMD_ID;
const ServerAnnounceNotify_CmdId ServerAnnounceNotify::ENET_CHANNEL_ID;
const ServerAnnounceNotify_CmdId ServerAnnounceNotify::ENET_IS_RELIABLE;
const ServerAnnounceNotify_CmdId ServerAnnounceNotify::CmdId_MIN;
const ServerAnnounceNotify_CmdId ServerAnnounceNotify::CmdId_MAX;
const int ServerAnnounceNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ServerAnnounceRevokeNotify_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_enum_descriptors[17];
}
bool ServerAnnounceRevokeNotify_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2023:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ServerAnnounceRevokeNotify_CmdId ServerAnnounceRevokeNotify::NONE;
const ServerAnnounceRevokeNotify_CmdId ServerAnnounceRevokeNotify::CMD_ID;
const ServerAnnounceRevokeNotify_CmdId ServerAnnounceRevokeNotify::ENET_CHANNEL_ID;
const ServerAnnounceRevokeNotify_CmdId ServerAnnounceRevokeNotify::ENET_IS_RELIABLE;
const ServerAnnounceRevokeNotify_CmdId ServerAnnounceRevokeNotify::CmdId_MIN;
const ServerAnnounceRevokeNotify_CmdId ServerAnnounceRevokeNotify::CmdId_MAX;
const int ServerAnnounceRevokeNotify::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetActivityScheduleReq::GetActivityScheduleReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetActivityScheduleReq)
}
GetActivityScheduleReq::GetActivityScheduleReq(const GetActivityScheduleReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GetActivityScheduleReq)
}

void GetActivityScheduleReq::SharedCtor() {
  _cached_size_ = 0;
}

GetActivityScheduleReq::~GetActivityScheduleReq() {
  // @@protoc_insertion_point(destructor:proto.GetActivityScheduleReq)
  SharedDtor();
}

void GetActivityScheduleReq::SharedDtor() {
}

void GetActivityScheduleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetActivityScheduleReq::descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetActivityScheduleReq& GetActivityScheduleReq::default_instance() {
  protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetActivityScheduleReq* GetActivityScheduleReq::New(::google::protobuf::Arena* arena) const {
  GetActivityScheduleReq* n = new GetActivityScheduleReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetActivityScheduleReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetActivityScheduleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GetActivityScheduleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetActivityScheduleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetActivityScheduleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetActivityScheduleReq)
  return false;
#undef DO_
}

void GetActivityScheduleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetActivityScheduleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetActivityScheduleReq)
}

::google::protobuf::uint8* GetActivityScheduleReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetActivityScheduleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetActivityScheduleReq)
  return target;
}

size_t GetActivityScheduleReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetActivityScheduleReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetActivityScheduleReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetActivityScheduleReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetActivityScheduleReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetActivityScheduleReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetActivityScheduleReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetActivityScheduleReq)
    MergeFrom(*source);
  }
}

void GetActivityScheduleReq::MergeFrom(const GetActivityScheduleReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetActivityScheduleReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetActivityScheduleReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetActivityScheduleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetActivityScheduleReq::CopyFrom(const GetActivityScheduleReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetActivityScheduleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetActivityScheduleReq::IsInitialized() const {
  return true;
}

void GetActivityScheduleReq::Swap(GetActivityScheduleReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetActivityScheduleReq::InternalSwap(GetActivityScheduleReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetActivityScheduleReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetActivityScheduleReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivityScheduleInfo::kActivityIdFieldNumber;
const int ActivityScheduleInfo::kIsOpenFieldNumber;
const int ActivityScheduleInfo::kScheduleIdFieldNumber;
const int ActivityScheduleInfo::kBeginTimeFieldNumber;
const int ActivityScheduleInfo::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivityScheduleInfo::ActivityScheduleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ActivityScheduleInfo)
}
ActivityScheduleInfo::ActivityScheduleInfo(const ActivityScheduleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&activity_id_, &from.activity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&activity_id_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:proto.ActivityScheduleInfo)
}

void ActivityScheduleInfo::SharedCtor() {
  ::memset(&activity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&activity_id_)) + sizeof(end_time_));
  _cached_size_ = 0;
}

ActivityScheduleInfo::~ActivityScheduleInfo() {
  // @@protoc_insertion_point(destructor:proto.ActivityScheduleInfo)
  SharedDtor();
}

void ActivityScheduleInfo::SharedDtor() {
}

void ActivityScheduleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityScheduleInfo::descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActivityScheduleInfo& ActivityScheduleInfo::default_instance() {
  protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActivityScheduleInfo* ActivityScheduleInfo::New(::google::protobuf::Arena* arena) const {
  ActivityScheduleInfo* n = new ActivityScheduleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivityScheduleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ActivityScheduleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&activity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&activity_id_)) + sizeof(end_time_));
  _internal_metadata_.Clear();
}

bool ActivityScheduleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ActivityScheduleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 activity_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_open = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 schedule_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schedule_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 begin_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ActivityScheduleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ActivityScheduleInfo)
  return false;
#undef DO_
}

void ActivityScheduleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ActivityScheduleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 activity_id = 1;
  if (this->activity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }

  // bool is_open = 2;
  if (this->is_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_open(), output);
  }

  // uint32 schedule_id = 3;
  if (this->schedule_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->schedule_id(), output);
  }

  // uint32 begin_time = 4;
  if (this->begin_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->begin_time(), output);
  }

  // uint32 end_time = 5;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->end_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ActivityScheduleInfo)
}

::google::protobuf::uint8* ActivityScheduleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ActivityScheduleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 activity_id = 1;
  if (this->activity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }

  // bool is_open = 2;
  if (this->is_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_open(), target);
  }

  // uint32 schedule_id = 3;
  if (this->schedule_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->schedule_id(), target);
  }

  // uint32 begin_time = 4;
  if (this->begin_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->begin_time(), target);
  }

  // uint32 end_time = 5;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->end_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ActivityScheduleInfo)
  return target;
}

size_t ActivityScheduleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ActivityScheduleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 activity_id = 1;
  if (this->activity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->activity_id());
  }

  // bool is_open = 2;
  if (this->is_open() != 0) {
    total_size += 1 + 1;
  }

  // uint32 schedule_id = 3;
  if (this->schedule_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->schedule_id());
  }

  // uint32 begin_time = 4;
  if (this->begin_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->begin_time());
  }

  // uint32 end_time = 5;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityScheduleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ActivityScheduleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityScheduleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivityScheduleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ActivityScheduleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ActivityScheduleInfo)
    MergeFrom(*source);
  }
}

void ActivityScheduleInfo::MergeFrom(const ActivityScheduleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ActivityScheduleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.activity_id() != 0) {
    set_activity_id(from.activity_id());
  }
  if (from.is_open() != 0) {
    set_is_open(from.is_open());
  }
  if (from.schedule_id() != 0) {
    set_schedule_id(from.schedule_id());
  }
  if (from.begin_time() != 0) {
    set_begin_time(from.begin_time());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
}

void ActivityScheduleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ActivityScheduleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityScheduleInfo::CopyFrom(const ActivityScheduleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ActivityScheduleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityScheduleInfo::IsInitialized() const {
  return true;
}

void ActivityScheduleInfo::Swap(ActivityScheduleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivityScheduleInfo::InternalSwap(ActivityScheduleInfo* other) {
  using std::swap;
  swap(activity_id_, other->activity_id_);
  swap(is_open_, other->is_open_);
  swap(schedule_id_, other->schedule_id_);
  swap(begin_time_, other->begin_time_);
  swap(end_time_, other->end_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivityScheduleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActivityScheduleInfo

// uint32 activity_id = 1;
void ActivityScheduleInfo::clear_activity_id() {
  activity_id_ = 0u;
}
::google::protobuf::uint32 ActivityScheduleInfo::activity_id() const {
  // @@protoc_insertion_point(field_get:proto.ActivityScheduleInfo.activity_id)
  return activity_id_;
}
void ActivityScheduleInfo::set_activity_id(::google::protobuf::uint32 value) {
  
  activity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityScheduleInfo.activity_id)
}

// bool is_open = 2;
void ActivityScheduleInfo::clear_is_open() {
  is_open_ = false;
}
bool ActivityScheduleInfo::is_open() const {
  // @@protoc_insertion_point(field_get:proto.ActivityScheduleInfo.is_open)
  return is_open_;
}
void ActivityScheduleInfo::set_is_open(bool value) {
  
  is_open_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityScheduleInfo.is_open)
}

// uint32 schedule_id = 3;
void ActivityScheduleInfo::clear_schedule_id() {
  schedule_id_ = 0u;
}
::google::protobuf::uint32 ActivityScheduleInfo::schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.ActivityScheduleInfo.schedule_id)
  return schedule_id_;
}
void ActivityScheduleInfo::set_schedule_id(::google::protobuf::uint32 value) {
  
  schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityScheduleInfo.schedule_id)
}

// uint32 begin_time = 4;
void ActivityScheduleInfo::clear_begin_time() {
  begin_time_ = 0u;
}
::google::protobuf::uint32 ActivityScheduleInfo::begin_time() const {
  // @@protoc_insertion_point(field_get:proto.ActivityScheduleInfo.begin_time)
  return begin_time_;
}
void ActivityScheduleInfo::set_begin_time(::google::protobuf::uint32 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityScheduleInfo.begin_time)
}

// uint32 end_time = 5;
void ActivityScheduleInfo::clear_end_time() {
  end_time_ = 0u;
}
::google::protobuf::uint32 ActivityScheduleInfo::end_time() const {
  // @@protoc_insertion_point(field_get:proto.ActivityScheduleInfo.end_time)
  return end_time_;
}
void ActivityScheduleInfo::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityScheduleInfo.end_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetActivityScheduleRsp::kRetcodeFieldNumber;
const int GetActivityScheduleRsp::kActivityScheduleListFieldNumber;
const int GetActivityScheduleRsp::kRemainFlySeaLampNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetActivityScheduleRsp::GetActivityScheduleRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetActivityScheduleRsp)
}
GetActivityScheduleRsp::GetActivityScheduleRsp(const GetActivityScheduleRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      activity_schedule_list_(from.activity_schedule_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&remain_fly_sea_lamp_num_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(remain_fly_sea_lamp_num_));
  // @@protoc_insertion_point(copy_constructor:proto.GetActivityScheduleRsp)
}

void GetActivityScheduleRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remain_fly_sea_lamp_num_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(remain_fly_sea_lamp_num_));
  _cached_size_ = 0;
}

GetActivityScheduleRsp::~GetActivityScheduleRsp() {
  // @@protoc_insertion_point(destructor:proto.GetActivityScheduleRsp)
  SharedDtor();
}

void GetActivityScheduleRsp::SharedDtor() {
}

void GetActivityScheduleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetActivityScheduleRsp::descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetActivityScheduleRsp& GetActivityScheduleRsp::default_instance() {
  protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetActivityScheduleRsp* GetActivityScheduleRsp::New(::google::protobuf::Arena* arena) const {
  GetActivityScheduleRsp* n = new GetActivityScheduleRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetActivityScheduleRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetActivityScheduleRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activity_schedule_list_.Clear();
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remain_fly_sea_lamp_num_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(remain_fly_sea_lamp_num_));
  _internal_metadata_.Clear();
}

bool GetActivityScheduleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetActivityScheduleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ActivityScheduleInfo activity_schedule_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activity_schedule_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 remain_fly_sea_lamp_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remain_fly_sea_lamp_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetActivityScheduleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetActivityScheduleRsp)
  return false;
#undef DO_
}

void GetActivityScheduleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetActivityScheduleRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // repeated .proto.ActivityScheduleInfo activity_schedule_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->activity_schedule_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->activity_schedule_list(static_cast<int>(i)), output);
  }

  // uint32 remain_fly_sea_lamp_num = 3;
  if (this->remain_fly_sea_lamp_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->remain_fly_sea_lamp_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetActivityScheduleRsp)
}

::google::protobuf::uint8* GetActivityScheduleRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetActivityScheduleRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // repeated .proto.ActivityScheduleInfo activity_schedule_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->activity_schedule_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->activity_schedule_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 remain_fly_sea_lamp_num = 3;
  if (this->remain_fly_sea_lamp_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->remain_fly_sea_lamp_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetActivityScheduleRsp)
  return target;
}

size_t GetActivityScheduleRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetActivityScheduleRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ActivityScheduleInfo activity_schedule_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->activity_schedule_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity_schedule_list(static_cast<int>(i)));
    }
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 remain_fly_sea_lamp_num = 3;
  if (this->remain_fly_sea_lamp_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remain_fly_sea_lamp_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetActivityScheduleRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetActivityScheduleRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetActivityScheduleRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetActivityScheduleRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetActivityScheduleRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetActivityScheduleRsp)
    MergeFrom(*source);
  }
}

void GetActivityScheduleRsp::MergeFrom(const GetActivityScheduleRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetActivityScheduleRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activity_schedule_list_.MergeFrom(from.activity_schedule_list_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.remain_fly_sea_lamp_num() != 0) {
    set_remain_fly_sea_lamp_num(from.remain_fly_sea_lamp_num());
  }
}

void GetActivityScheduleRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetActivityScheduleRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetActivityScheduleRsp::CopyFrom(const GetActivityScheduleRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetActivityScheduleRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetActivityScheduleRsp::IsInitialized() const {
  return true;
}

void GetActivityScheduleRsp::Swap(GetActivityScheduleRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetActivityScheduleRsp::InternalSwap(GetActivityScheduleRsp* other) {
  using std::swap;
  activity_schedule_list_.InternalSwap(&other->activity_schedule_list_);
  swap(retcode_, other->retcode_);
  swap(remain_fly_sea_lamp_num_, other->remain_fly_sea_lamp_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetActivityScheduleRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetActivityScheduleRsp

// int32 retcode = 1;
void GetActivityScheduleRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GetActivityScheduleRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetActivityScheduleRsp.retcode)
  return retcode_;
}
void GetActivityScheduleRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetActivityScheduleRsp.retcode)
}

// repeated .proto.ActivityScheduleInfo activity_schedule_list = 2;
int GetActivityScheduleRsp::activity_schedule_list_size() const {
  return activity_schedule_list_.size();
}
void GetActivityScheduleRsp::clear_activity_schedule_list() {
  activity_schedule_list_.Clear();
}
const ::proto::ActivityScheduleInfo& GetActivityScheduleRsp::activity_schedule_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetActivityScheduleRsp.activity_schedule_list)
  return activity_schedule_list_.Get(index);
}
::proto::ActivityScheduleInfo* GetActivityScheduleRsp::mutable_activity_schedule_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetActivityScheduleRsp.activity_schedule_list)
  return activity_schedule_list_.Mutable(index);
}
::proto::ActivityScheduleInfo* GetActivityScheduleRsp::add_activity_schedule_list() {
  // @@protoc_insertion_point(field_add:proto.GetActivityScheduleRsp.activity_schedule_list)
  return activity_schedule_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ActivityScheduleInfo >*
GetActivityScheduleRsp::mutable_activity_schedule_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetActivityScheduleRsp.activity_schedule_list)
  return &activity_schedule_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ActivityScheduleInfo >&
GetActivityScheduleRsp::activity_schedule_list() const {
  // @@protoc_insertion_point(field_list:proto.GetActivityScheduleRsp.activity_schedule_list)
  return activity_schedule_list_;
}

// uint32 remain_fly_sea_lamp_num = 3;
void GetActivityScheduleRsp::clear_remain_fly_sea_lamp_num() {
  remain_fly_sea_lamp_num_ = 0u;
}
::google::protobuf::uint32 GetActivityScheduleRsp::remain_fly_sea_lamp_num() const {
  // @@protoc_insertion_point(field_get:proto.GetActivityScheduleRsp.remain_fly_sea_lamp_num)
  return remain_fly_sea_lamp_num_;
}
void GetActivityScheduleRsp::set_remain_fly_sea_lamp_num(::google::protobuf::uint32 value) {
  
  remain_fly_sea_lamp_num_ = value;
  // @@protoc_insertion_point(field_set:proto.GetActivityScheduleRsp.remain_fly_sea_lamp_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetActivityInfoReq::kActivityIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetActivityInfoReq::GetActivityInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetActivityInfoReq)
}
GetActivityInfoReq::GetActivityInfoReq(const GetActivityInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      activity_id_list_(from.activity_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GetActivityInfoReq)
}

void GetActivityInfoReq::SharedCtor() {
  _cached_size_ = 0;
}

GetActivityInfoReq::~GetActivityInfoReq() {
  // @@protoc_insertion_point(destructor:proto.GetActivityInfoReq)
  SharedDtor();
}

void GetActivityInfoReq::SharedDtor() {
}

void GetActivityInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetActivityInfoReq::descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetActivityInfoReq& GetActivityInfoReq::default_instance() {
  protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetActivityInfoReq* GetActivityInfoReq::New(::google::protobuf::Arena* arena) const {
  GetActivityInfoReq* n = new GetActivityInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetActivityInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetActivityInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activity_id_list_.Clear();
  _internal_metadata_.Clear();
}

bool GetActivityInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetActivityInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 activity_id_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_activity_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_activity_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetActivityInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetActivityInfoReq)
  return false;
#undef DO_
}

void GetActivityInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetActivityInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 activity_id_list = 1;
  if (this->activity_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _activity_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->activity_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->activity_id_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetActivityInfoReq)
}

::google::protobuf::uint8* GetActivityInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetActivityInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 activity_id_list = 1;
  if (this->activity_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _activity_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->activity_id_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetActivityInfoReq)
  return target;
}

size_t GetActivityInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetActivityInfoReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 activity_id_list = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->activity_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _activity_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetActivityInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetActivityInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetActivityInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetActivityInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetActivityInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetActivityInfoReq)
    MergeFrom(*source);
  }
}

void GetActivityInfoReq::MergeFrom(const GetActivityInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetActivityInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activity_id_list_.MergeFrom(from.activity_id_list_);
}

void GetActivityInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetActivityInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetActivityInfoReq::CopyFrom(const GetActivityInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetActivityInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetActivityInfoReq::IsInitialized() const {
  return true;
}

void GetActivityInfoReq::Swap(GetActivityInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetActivityInfoReq::InternalSwap(GetActivityInfoReq* other) {
  using std::swap;
  activity_id_list_.InternalSwap(&other->activity_id_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetActivityInfoReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetActivityInfoReq

// repeated uint32 activity_id_list = 1;
int GetActivityInfoReq::activity_id_list_size() const {
  return activity_id_list_.size();
}
void GetActivityInfoReq::clear_activity_id_list() {
  activity_id_list_.Clear();
}
::google::protobuf::uint32 GetActivityInfoReq::activity_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetActivityInfoReq.activity_id_list)
  return activity_id_list_.Get(index);
}
void GetActivityInfoReq::set_activity_id_list(int index, ::google::protobuf::uint32 value) {
  activity_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GetActivityInfoReq.activity_id_list)
}
void GetActivityInfoReq::add_activity_id_list(::google::protobuf::uint32 value) {
  activity_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GetActivityInfoReq.activity_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GetActivityInfoReq::activity_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GetActivityInfoReq.activity_id_list)
  return activity_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GetActivityInfoReq::mutable_activity_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetActivityInfoReq.activity_id_list)
  return &activity_id_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivityInfo::kActivityIdFieldNumber;
const int ActivityInfo::kScheduleIdFieldNumber;
const int ActivityInfo::kBeginTimeFieldNumber;
const int ActivityInfo::kEndTimeFieldNumber;
const int ActivityInfo::kActivityTypeFieldNumber;
const int ActivityInfo::kIsPlayOpenAnimFieldNumber;
const int ActivityInfo::kIsFinishedFieldNumber;
const int ActivityInfo::kIsStartingFieldNumber;
const int ActivityInfo::kSamLampInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivityInfo::ActivityInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ActivityInfo)
}
ActivityInfo::ActivityInfo(const ActivityInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&activity_id_, &from.activity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_starting_) -
    reinterpret_cast<char*>(&activity_id_)) + sizeof(is_starting_));
  clear_has_detail();
  switch (from.detail_case()) {
    case kSamLampInfo: {
      mutable_sam_lamp_info()->::proto::SeaLampActivityDetailInfo::MergeFrom(from.sam_lamp_info());
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.ActivityInfo)
}

void ActivityInfo::SharedCtor() {
  ::memset(&activity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_starting_) -
      reinterpret_cast<char*>(&activity_id_)) + sizeof(is_starting_));
  clear_has_detail();
  _cached_size_ = 0;
}

ActivityInfo::~ActivityInfo() {
  // @@protoc_insertion_point(destructor:proto.ActivityInfo)
  SharedDtor();
}

void ActivityInfo::SharedDtor() {
  if (has_detail()) {
    clear_detail();
  }
}

void ActivityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityInfo::descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActivityInfo& ActivityInfo::default_instance() {
  protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActivityInfo* ActivityInfo::New(::google::protobuf::Arena* arena) const {
  ActivityInfo* n = new ActivityInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivityInfo::clear_detail() {
// @@protoc_insertion_point(one_of_clear_start:proto.ActivityInfo)
  switch (detail_case()) {
    case kSamLampInfo: {
      delete detail_.sam_lamp_info_;
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DETAIL_NOT_SET;
}


void ActivityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ActivityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&activity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_starting_) -
      reinterpret_cast<char*>(&activity_id_)) + sizeof(is_starting_));
  clear_detail();
  _internal_metadata_.Clear();
}

bool ActivityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ActivityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 activity_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 schedule_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schedule_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 begin_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 activity_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_play_open_anim = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_play_open_anim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_finished = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_finished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_starting = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_starting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SeaLampActivityDetailInfo sam_lamp_info = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sam_lamp_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ActivityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ActivityInfo)
  return false;
#undef DO_
}

void ActivityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ActivityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 activity_id = 1;
  if (this->activity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }

  // uint32 schedule_id = 2;
  if (this->schedule_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->schedule_id(), output);
  }

  // uint32 begin_time = 3;
  if (this->begin_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->begin_time(), output);
  }

  // uint32 end_time = 4;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end_time(), output);
  }

  // uint32 activity_type = 5;
  if (this->activity_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->activity_type(), output);
  }

  // bool is_play_open_anim = 6;
  if (this->is_play_open_anim() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_play_open_anim(), output);
  }

  // bool is_finished = 7;
  if (this->is_finished() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_finished(), output);
  }

  // bool is_starting = 8;
  if (this->is_starting() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_starting(), output);
  }

  // .proto.SeaLampActivityDetailInfo sam_lamp_info = 11;
  if (has_sam_lamp_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *detail_.sam_lamp_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ActivityInfo)
}

::google::protobuf::uint8* ActivityInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ActivityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 activity_id = 1;
  if (this->activity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }

  // uint32 schedule_id = 2;
  if (this->schedule_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->schedule_id(), target);
  }

  // uint32 begin_time = 3;
  if (this->begin_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->begin_time(), target);
  }

  // uint32 end_time = 4;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end_time(), target);
  }

  // uint32 activity_type = 5;
  if (this->activity_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->activity_type(), target);
  }

  // bool is_play_open_anim = 6;
  if (this->is_play_open_anim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_play_open_anim(), target);
  }

  // bool is_finished = 7;
  if (this->is_finished() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_finished(), target);
  }

  // bool is_starting = 8;
  if (this->is_starting() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_starting(), target);
  }

  // .proto.SeaLampActivityDetailInfo sam_lamp_info = 11;
  if (has_sam_lamp_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *detail_.sam_lamp_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ActivityInfo)
  return target;
}

size_t ActivityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ActivityInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 activity_id = 1;
  if (this->activity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->activity_id());
  }

  // uint32 schedule_id = 2;
  if (this->schedule_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->schedule_id());
  }

  // uint32 begin_time = 3;
  if (this->begin_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->begin_time());
  }

  // uint32 end_time = 4;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  // uint32 activity_type = 5;
  if (this->activity_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->activity_type());
  }

  // bool is_play_open_anim = 6;
  if (this->is_play_open_anim() != 0) {
    total_size += 1 + 1;
  }

  // bool is_finished = 7;
  if (this->is_finished() != 0) {
    total_size += 1 + 1;
  }

  // bool is_starting = 8;
  if (this->is_starting() != 0) {
    total_size += 1 + 1;
  }

  switch (detail_case()) {
    // .proto.SeaLampActivityDetailInfo sam_lamp_info = 11;
    case kSamLampInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.sam_lamp_info_);
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ActivityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivityInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ActivityInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ActivityInfo)
    MergeFrom(*source);
  }
}

void ActivityInfo::MergeFrom(const ActivityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ActivityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.activity_id() != 0) {
    set_activity_id(from.activity_id());
  }
  if (from.schedule_id() != 0) {
    set_schedule_id(from.schedule_id());
  }
  if (from.begin_time() != 0) {
    set_begin_time(from.begin_time());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
  if (from.activity_type() != 0) {
    set_activity_type(from.activity_type());
  }
  if (from.is_play_open_anim() != 0) {
    set_is_play_open_anim(from.is_play_open_anim());
  }
  if (from.is_finished() != 0) {
    set_is_finished(from.is_finished());
  }
  if (from.is_starting() != 0) {
    set_is_starting(from.is_starting());
  }
  switch (from.detail_case()) {
    case kSamLampInfo: {
      mutable_sam_lamp_info()->::proto::SeaLampActivityDetailInfo::MergeFrom(from.sam_lamp_info());
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
}

void ActivityInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityInfo::CopyFrom(const ActivityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityInfo::IsInitialized() const {
  return true;
}

void ActivityInfo::Swap(ActivityInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivityInfo::InternalSwap(ActivityInfo* other) {
  using std::swap;
  swap(activity_id_, other->activity_id_);
  swap(schedule_id_, other->schedule_id_);
  swap(begin_time_, other->begin_time_);
  swap(end_time_, other->end_time_);
  swap(activity_type_, other->activity_type_);
  swap(is_play_open_anim_, other->is_play_open_anim_);
  swap(is_finished_, other->is_finished_);
  swap(is_starting_, other->is_starting_);
  swap(detail_, other->detail_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivityInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActivityInfo

// uint32 activity_id = 1;
void ActivityInfo::clear_activity_id() {
  activity_id_ = 0u;
}
::google::protobuf::uint32 ActivityInfo::activity_id() const {
  // @@protoc_insertion_point(field_get:proto.ActivityInfo.activity_id)
  return activity_id_;
}
void ActivityInfo::set_activity_id(::google::protobuf::uint32 value) {
  
  activity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityInfo.activity_id)
}

// uint32 schedule_id = 2;
void ActivityInfo::clear_schedule_id() {
  schedule_id_ = 0u;
}
::google::protobuf::uint32 ActivityInfo::schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.ActivityInfo.schedule_id)
  return schedule_id_;
}
void ActivityInfo::set_schedule_id(::google::protobuf::uint32 value) {
  
  schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityInfo.schedule_id)
}

// uint32 begin_time = 3;
void ActivityInfo::clear_begin_time() {
  begin_time_ = 0u;
}
::google::protobuf::uint32 ActivityInfo::begin_time() const {
  // @@protoc_insertion_point(field_get:proto.ActivityInfo.begin_time)
  return begin_time_;
}
void ActivityInfo::set_begin_time(::google::protobuf::uint32 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityInfo.begin_time)
}

// uint32 end_time = 4;
void ActivityInfo::clear_end_time() {
  end_time_ = 0u;
}
::google::protobuf::uint32 ActivityInfo::end_time() const {
  // @@protoc_insertion_point(field_get:proto.ActivityInfo.end_time)
  return end_time_;
}
void ActivityInfo::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityInfo.end_time)
}

// uint32 activity_type = 5;
void ActivityInfo::clear_activity_type() {
  activity_type_ = 0u;
}
::google::protobuf::uint32 ActivityInfo::activity_type() const {
  // @@protoc_insertion_point(field_get:proto.ActivityInfo.activity_type)
  return activity_type_;
}
void ActivityInfo::set_activity_type(::google::protobuf::uint32 value) {
  
  activity_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityInfo.activity_type)
}

// bool is_play_open_anim = 6;
void ActivityInfo::clear_is_play_open_anim() {
  is_play_open_anim_ = false;
}
bool ActivityInfo::is_play_open_anim() const {
  // @@protoc_insertion_point(field_get:proto.ActivityInfo.is_play_open_anim)
  return is_play_open_anim_;
}
void ActivityInfo::set_is_play_open_anim(bool value) {
  
  is_play_open_anim_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityInfo.is_play_open_anim)
}

// bool is_finished = 7;
void ActivityInfo::clear_is_finished() {
  is_finished_ = false;
}
bool ActivityInfo::is_finished() const {
  // @@protoc_insertion_point(field_get:proto.ActivityInfo.is_finished)
  return is_finished_;
}
void ActivityInfo::set_is_finished(bool value) {
  
  is_finished_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityInfo.is_finished)
}

// bool is_starting = 8;
void ActivityInfo::clear_is_starting() {
  is_starting_ = false;
}
bool ActivityInfo::is_starting() const {
  // @@protoc_insertion_point(field_get:proto.ActivityInfo.is_starting)
  return is_starting_;
}
void ActivityInfo::set_is_starting(bool value) {
  
  is_starting_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityInfo.is_starting)
}

// .proto.SeaLampActivityDetailInfo sam_lamp_info = 11;
bool ActivityInfo::has_sam_lamp_info() const {
  return detail_case() == kSamLampInfo;
}
void ActivityInfo::set_has_sam_lamp_info() {
  _oneof_case_[0] = kSamLampInfo;
}
void ActivityInfo::clear_sam_lamp_info() {
  if (has_sam_lamp_info()) {
    delete detail_.sam_lamp_info_;
    clear_has_detail();
  }
}
 const ::proto::SeaLampActivityDetailInfo& ActivityInfo::sam_lamp_info() const {
  // @@protoc_insertion_point(field_get:proto.ActivityInfo.sam_lamp_info)
  return has_sam_lamp_info()
      ? *detail_.sam_lamp_info_
      : ::proto::SeaLampActivityDetailInfo::default_instance();
}
::proto::SeaLampActivityDetailInfo* ActivityInfo::mutable_sam_lamp_info() {
  if (!has_sam_lamp_info()) {
    clear_detail();
    set_has_sam_lamp_info();
    detail_.sam_lamp_info_ = new ::proto::SeaLampActivityDetailInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.ActivityInfo.sam_lamp_info)
  return detail_.sam_lamp_info_;
}
::proto::SeaLampActivityDetailInfo* ActivityInfo::release_sam_lamp_info() {
  // @@protoc_insertion_point(field_release:proto.ActivityInfo.sam_lamp_info)
  if (has_sam_lamp_info()) {
    clear_has_detail();
    ::proto::SeaLampActivityDetailInfo* temp = detail_.sam_lamp_info_;
    detail_.sam_lamp_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ActivityInfo::set_allocated_sam_lamp_info(::proto::SeaLampActivityDetailInfo* sam_lamp_info) {
  clear_detail();
  if (sam_lamp_info) {
    set_has_sam_lamp_info();
    detail_.sam_lamp_info_ = sam_lamp_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ActivityInfo.sam_lamp_info)
}

bool ActivityInfo::has_detail() const {
  return detail_case() != DETAIL_NOT_SET;
}
void ActivityInfo::clear_has_detail() {
  _oneof_case_[0] = DETAIL_NOT_SET;
}
ActivityInfo::DetailCase ActivityInfo::detail_case() const {
  return ActivityInfo::DetailCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetActivityInfoRsp::kRetcodeFieldNumber;
const int GetActivityInfoRsp::kActivityInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetActivityInfoRsp::GetActivityInfoRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetActivityInfoRsp)
}
GetActivityInfoRsp::GetActivityInfoRsp(const GetActivityInfoRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      activity_info_list_(from.activity_info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.GetActivityInfoRsp)
}

void GetActivityInfoRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

GetActivityInfoRsp::~GetActivityInfoRsp() {
  // @@protoc_insertion_point(destructor:proto.GetActivityInfoRsp)
  SharedDtor();
}

void GetActivityInfoRsp::SharedDtor() {
}

void GetActivityInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetActivityInfoRsp::descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetActivityInfoRsp& GetActivityInfoRsp::default_instance() {
  protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetActivityInfoRsp* GetActivityInfoRsp::New(::google::protobuf::Arena* arena) const {
  GetActivityInfoRsp* n = new GetActivityInfoRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetActivityInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetActivityInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activity_info_list_.Clear();
  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool GetActivityInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetActivityInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ActivityInfo activity_info_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activity_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetActivityInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetActivityInfoRsp)
  return false;
#undef DO_
}

void GetActivityInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetActivityInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // repeated .proto.ActivityInfo activity_info_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->activity_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->activity_info_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetActivityInfoRsp)
}

::google::protobuf::uint8* GetActivityInfoRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetActivityInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // repeated .proto.ActivityInfo activity_info_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->activity_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->activity_info_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetActivityInfoRsp)
  return target;
}

size_t GetActivityInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetActivityInfoRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ActivityInfo activity_info_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->activity_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity_info_list(static_cast<int>(i)));
    }
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetActivityInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetActivityInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetActivityInfoRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetActivityInfoRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetActivityInfoRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetActivityInfoRsp)
    MergeFrom(*source);
  }
}

void GetActivityInfoRsp::MergeFrom(const GetActivityInfoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetActivityInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activity_info_list_.MergeFrom(from.activity_info_list_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void GetActivityInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetActivityInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetActivityInfoRsp::CopyFrom(const GetActivityInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetActivityInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetActivityInfoRsp::IsInitialized() const {
  return true;
}

void GetActivityInfoRsp::Swap(GetActivityInfoRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetActivityInfoRsp::InternalSwap(GetActivityInfoRsp* other) {
  using std::swap;
  activity_info_list_.InternalSwap(&other->activity_info_list_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetActivityInfoRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetActivityInfoRsp

// int32 retcode = 1;
void GetActivityInfoRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GetActivityInfoRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetActivityInfoRsp.retcode)
  return retcode_;
}
void GetActivityInfoRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetActivityInfoRsp.retcode)
}

// repeated .proto.ActivityInfo activity_info_list = 2;
int GetActivityInfoRsp::activity_info_list_size() const {
  return activity_info_list_.size();
}
void GetActivityInfoRsp::clear_activity_info_list() {
  activity_info_list_.Clear();
}
const ::proto::ActivityInfo& GetActivityInfoRsp::activity_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetActivityInfoRsp.activity_info_list)
  return activity_info_list_.Get(index);
}
::proto::ActivityInfo* GetActivityInfoRsp::mutable_activity_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetActivityInfoRsp.activity_info_list)
  return activity_info_list_.Mutable(index);
}
::proto::ActivityInfo* GetActivityInfoRsp::add_activity_info_list() {
  // @@protoc_insertion_point(field_add:proto.GetActivityInfoRsp.activity_info_list)
  return activity_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ActivityInfo >*
GetActivityInfoRsp::mutable_activity_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetActivityInfoRsp.activity_info_list)
  return &activity_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ActivityInfo >&
GetActivityInfoRsp::activity_info_list() const {
  // @@protoc_insertion_point(field_list:proto.GetActivityInfoRsp.activity_info_list)
  return activity_info_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivityPlayOpenAnimNotify::kActivityIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivityPlayOpenAnimNotify::ActivityPlayOpenAnimNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ActivityPlayOpenAnimNotify)
}
ActivityPlayOpenAnimNotify::ActivityPlayOpenAnimNotify(const ActivityPlayOpenAnimNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  activity_id_ = from.activity_id_;
  // @@protoc_insertion_point(copy_constructor:proto.ActivityPlayOpenAnimNotify)
}

void ActivityPlayOpenAnimNotify::SharedCtor() {
  activity_id_ = 0u;
  _cached_size_ = 0;
}

ActivityPlayOpenAnimNotify::~ActivityPlayOpenAnimNotify() {
  // @@protoc_insertion_point(destructor:proto.ActivityPlayOpenAnimNotify)
  SharedDtor();
}

void ActivityPlayOpenAnimNotify::SharedDtor() {
}

void ActivityPlayOpenAnimNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityPlayOpenAnimNotify::descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActivityPlayOpenAnimNotify& ActivityPlayOpenAnimNotify::default_instance() {
  protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActivityPlayOpenAnimNotify* ActivityPlayOpenAnimNotify::New(::google::protobuf::Arena* arena) const {
  ActivityPlayOpenAnimNotify* n = new ActivityPlayOpenAnimNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivityPlayOpenAnimNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ActivityPlayOpenAnimNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activity_id_ = 0u;
  _internal_metadata_.Clear();
}

bool ActivityPlayOpenAnimNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ActivityPlayOpenAnimNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 activity_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ActivityPlayOpenAnimNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ActivityPlayOpenAnimNotify)
  return false;
#undef DO_
}

void ActivityPlayOpenAnimNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ActivityPlayOpenAnimNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 activity_id = 1;
  if (this->activity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ActivityPlayOpenAnimNotify)
}

::google::protobuf::uint8* ActivityPlayOpenAnimNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ActivityPlayOpenAnimNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 activity_id = 1;
  if (this->activity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ActivityPlayOpenAnimNotify)
  return target;
}

size_t ActivityPlayOpenAnimNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ActivityPlayOpenAnimNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 activity_id = 1;
  if (this->activity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->activity_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityPlayOpenAnimNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ActivityPlayOpenAnimNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityPlayOpenAnimNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivityPlayOpenAnimNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ActivityPlayOpenAnimNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ActivityPlayOpenAnimNotify)
    MergeFrom(*source);
  }
}

void ActivityPlayOpenAnimNotify::MergeFrom(const ActivityPlayOpenAnimNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ActivityPlayOpenAnimNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.activity_id() != 0) {
    set_activity_id(from.activity_id());
  }
}

void ActivityPlayOpenAnimNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ActivityPlayOpenAnimNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityPlayOpenAnimNotify::CopyFrom(const ActivityPlayOpenAnimNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ActivityPlayOpenAnimNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityPlayOpenAnimNotify::IsInitialized() const {
  return true;
}

void ActivityPlayOpenAnimNotify::Swap(ActivityPlayOpenAnimNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivityPlayOpenAnimNotify::InternalSwap(ActivityPlayOpenAnimNotify* other) {
  using std::swap;
  swap(activity_id_, other->activity_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivityPlayOpenAnimNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActivityPlayOpenAnimNotify

// uint32 activity_id = 1;
void ActivityPlayOpenAnimNotify::clear_activity_id() {
  activity_id_ = 0u;
}
::google::protobuf::uint32 ActivityPlayOpenAnimNotify::activity_id() const {
  // @@protoc_insertion_point(field_get:proto.ActivityPlayOpenAnimNotify.activity_id)
  return activity_id_;
}
void ActivityPlayOpenAnimNotify::set_activity_id(::google::protobuf::uint32 value) {
  
  activity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityPlayOpenAnimNotify.activity_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivityInfoNotify::kActivityInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivityInfoNotify::ActivityInfoNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ActivityInfoNotify)
}
ActivityInfoNotify::ActivityInfoNotify(const ActivityInfoNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_activity_info()) {
    activity_info_ = new ::proto::ActivityInfo(*from.activity_info_);
  } else {
    activity_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.ActivityInfoNotify)
}

void ActivityInfoNotify::SharedCtor() {
  activity_info_ = NULL;
  _cached_size_ = 0;
}

ActivityInfoNotify::~ActivityInfoNotify() {
  // @@protoc_insertion_point(destructor:proto.ActivityInfoNotify)
  SharedDtor();
}

void ActivityInfoNotify::SharedDtor() {
  if (this != internal_default_instance()) delete activity_info_;
}

void ActivityInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityInfoNotify::descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActivityInfoNotify& ActivityInfoNotify::default_instance() {
  protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActivityInfoNotify* ActivityInfoNotify::New(::google::protobuf::Arena* arena) const {
  ActivityInfoNotify* n = new ActivityInfoNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivityInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ActivityInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && activity_info_ != NULL) {
    delete activity_info_;
  }
  activity_info_ = NULL;
  _internal_metadata_.Clear();
}

bool ActivityInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ActivityInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.ActivityInfo activity_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ActivityInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ActivityInfoNotify)
  return false;
#undef DO_
}

void ActivityInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ActivityInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ActivityInfo activity_info = 1;
  if (this->has_activity_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->activity_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ActivityInfoNotify)
}

::google::protobuf::uint8* ActivityInfoNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ActivityInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ActivityInfo activity_info = 1;
  if (this->has_activity_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->activity_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ActivityInfoNotify)
  return target;
}

size_t ActivityInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ActivityInfoNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.ActivityInfo activity_info = 1;
  if (this->has_activity_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->activity_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ActivityInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityInfoNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivityInfoNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ActivityInfoNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ActivityInfoNotify)
    MergeFrom(*source);
  }
}

void ActivityInfoNotify::MergeFrom(const ActivityInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ActivityInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_activity_info()) {
    mutable_activity_info()->::proto::ActivityInfo::MergeFrom(from.activity_info());
  }
}

void ActivityInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ActivityInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityInfoNotify::CopyFrom(const ActivityInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ActivityInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityInfoNotify::IsInitialized() const {
  return true;
}

void ActivityInfoNotify::Swap(ActivityInfoNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivityInfoNotify::InternalSwap(ActivityInfoNotify* other) {
  using std::swap;
  swap(activity_info_, other->activity_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivityInfoNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActivityInfoNotify

// .proto.ActivityInfo activity_info = 1;
bool ActivityInfoNotify::has_activity_info() const {
  return this != internal_default_instance() && activity_info_ != NULL;
}
void ActivityInfoNotify::clear_activity_info() {
  if (GetArenaNoVirtual() == NULL && activity_info_ != NULL) delete activity_info_;
  activity_info_ = NULL;
}
const ::proto::ActivityInfo& ActivityInfoNotify::activity_info() const {
  const ::proto::ActivityInfo* p = activity_info_;
  // @@protoc_insertion_point(field_get:proto.ActivityInfoNotify.activity_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ActivityInfo*>(
      &::proto::_ActivityInfo_default_instance_);
}
::proto::ActivityInfo* ActivityInfoNotify::mutable_activity_info() {
  
  if (activity_info_ == NULL) {
    activity_info_ = new ::proto::ActivityInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.ActivityInfoNotify.activity_info)
  return activity_info_;
}
::proto::ActivityInfo* ActivityInfoNotify::release_activity_info() {
  // @@protoc_insertion_point(field_release:proto.ActivityInfoNotify.activity_info)
  
  ::proto::ActivityInfo* temp = activity_info_;
  activity_info_ = NULL;
  return temp;
}
void ActivityInfoNotify::set_allocated_activity_info(::proto::ActivityInfo* activity_info) {
  delete activity_info_;
  activity_info_ = activity_info;
  if (activity_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ActivityInfoNotify.activity_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivityScheduleInfoNotify::kActivityScheduleListFieldNumber;
const int ActivityScheduleInfoNotify::kRemainFlySeaLampNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivityScheduleInfoNotify::ActivityScheduleInfoNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ActivityScheduleInfoNotify)
}
ActivityScheduleInfoNotify::ActivityScheduleInfoNotify(const ActivityScheduleInfoNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      activity_schedule_list_(from.activity_schedule_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remain_fly_sea_lamp_num_ = from.remain_fly_sea_lamp_num_;
  // @@protoc_insertion_point(copy_constructor:proto.ActivityScheduleInfoNotify)
}

void ActivityScheduleInfoNotify::SharedCtor() {
  remain_fly_sea_lamp_num_ = 0u;
  _cached_size_ = 0;
}

ActivityScheduleInfoNotify::~ActivityScheduleInfoNotify() {
  // @@protoc_insertion_point(destructor:proto.ActivityScheduleInfoNotify)
  SharedDtor();
}

void ActivityScheduleInfoNotify::SharedDtor() {
}

void ActivityScheduleInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityScheduleInfoNotify::descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActivityScheduleInfoNotify& ActivityScheduleInfoNotify::default_instance() {
  protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActivityScheduleInfoNotify* ActivityScheduleInfoNotify::New(::google::protobuf::Arena* arena) const {
  ActivityScheduleInfoNotify* n = new ActivityScheduleInfoNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivityScheduleInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ActivityScheduleInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activity_schedule_list_.Clear();
  remain_fly_sea_lamp_num_ = 0u;
  _internal_metadata_.Clear();
}

bool ActivityScheduleInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ActivityScheduleInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.ActivityScheduleInfo activity_schedule_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activity_schedule_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 remain_fly_sea_lamp_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remain_fly_sea_lamp_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ActivityScheduleInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ActivityScheduleInfoNotify)
  return false;
#undef DO_
}

void ActivityScheduleInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ActivityScheduleInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ActivityScheduleInfo activity_schedule_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->activity_schedule_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activity_schedule_list(static_cast<int>(i)), output);
  }

  // uint32 remain_fly_sea_lamp_num = 2;
  if (this->remain_fly_sea_lamp_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remain_fly_sea_lamp_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ActivityScheduleInfoNotify)
}

::google::protobuf::uint8* ActivityScheduleInfoNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ActivityScheduleInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ActivityScheduleInfo activity_schedule_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->activity_schedule_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->activity_schedule_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 remain_fly_sea_lamp_num = 2;
  if (this->remain_fly_sea_lamp_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->remain_fly_sea_lamp_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ActivityScheduleInfoNotify)
  return target;
}

size_t ActivityScheduleInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ActivityScheduleInfoNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ActivityScheduleInfo activity_schedule_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->activity_schedule_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity_schedule_list(static_cast<int>(i)));
    }
  }

  // uint32 remain_fly_sea_lamp_num = 2;
  if (this->remain_fly_sea_lamp_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remain_fly_sea_lamp_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityScheduleInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ActivityScheduleInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityScheduleInfoNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivityScheduleInfoNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ActivityScheduleInfoNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ActivityScheduleInfoNotify)
    MergeFrom(*source);
  }
}

void ActivityScheduleInfoNotify::MergeFrom(const ActivityScheduleInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ActivityScheduleInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activity_schedule_list_.MergeFrom(from.activity_schedule_list_);
  if (from.remain_fly_sea_lamp_num() != 0) {
    set_remain_fly_sea_lamp_num(from.remain_fly_sea_lamp_num());
  }
}

void ActivityScheduleInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ActivityScheduleInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityScheduleInfoNotify::CopyFrom(const ActivityScheduleInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ActivityScheduleInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityScheduleInfoNotify::IsInitialized() const {
  return true;
}

void ActivityScheduleInfoNotify::Swap(ActivityScheduleInfoNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivityScheduleInfoNotify::InternalSwap(ActivityScheduleInfoNotify* other) {
  using std::swap;
  activity_schedule_list_.InternalSwap(&other->activity_schedule_list_);
  swap(remain_fly_sea_lamp_num_, other->remain_fly_sea_lamp_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivityScheduleInfoNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActivityScheduleInfoNotify

// repeated .proto.ActivityScheduleInfo activity_schedule_list = 1;
int ActivityScheduleInfoNotify::activity_schedule_list_size() const {
  return activity_schedule_list_.size();
}
void ActivityScheduleInfoNotify::clear_activity_schedule_list() {
  activity_schedule_list_.Clear();
}
const ::proto::ActivityScheduleInfo& ActivityScheduleInfoNotify::activity_schedule_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ActivityScheduleInfoNotify.activity_schedule_list)
  return activity_schedule_list_.Get(index);
}
::proto::ActivityScheduleInfo* ActivityScheduleInfoNotify::mutable_activity_schedule_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ActivityScheduleInfoNotify.activity_schedule_list)
  return activity_schedule_list_.Mutable(index);
}
::proto::ActivityScheduleInfo* ActivityScheduleInfoNotify::add_activity_schedule_list() {
  // @@protoc_insertion_point(field_add:proto.ActivityScheduleInfoNotify.activity_schedule_list)
  return activity_schedule_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ActivityScheduleInfo >*
ActivityScheduleInfoNotify::mutable_activity_schedule_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ActivityScheduleInfoNotify.activity_schedule_list)
  return &activity_schedule_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ActivityScheduleInfo >&
ActivityScheduleInfoNotify::activity_schedule_list() const {
  // @@protoc_insertion_point(field_list:proto.ActivityScheduleInfoNotify.activity_schedule_list)
  return activity_schedule_list_;
}

// uint32 remain_fly_sea_lamp_num = 2;
void ActivityScheduleInfoNotify::clear_remain_fly_sea_lamp_num() {
  remain_fly_sea_lamp_num_ = 0u;
}
::google::protobuf::uint32 ActivityScheduleInfoNotify::remain_fly_sea_lamp_num() const {
  // @@protoc_insertion_point(field_get:proto.ActivityScheduleInfoNotify.remain_fly_sea_lamp_num)
  return remain_fly_sea_lamp_num_;
}
void ActivityScheduleInfoNotify::set_remain_fly_sea_lamp_num(::google::protobuf::uint32 value) {
  
  remain_fly_sea_lamp_num_ = value;
  // @@protoc_insertion_point(field_set:proto.ActivityScheduleInfoNotify.remain_fly_sea_lamp_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeaLampActivityDetailInfo::kPhaseIdFieldNumber;
const int SeaLampActivityDetailInfo::kProgressFieldNumber;
const int SeaLampActivityDetailInfo::kDaysFieldNumber;
const int SeaLampActivityDetailInfo::kContributionFieldNumber;
const int SeaLampActivityDetailInfo::kTakenContributionRewardListFieldNumber;
const int SeaLampActivityDetailInfo::kTakenPhaseRewardListFieldNumber;
const int SeaLampActivityDetailInfo::kFactorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeaLampActivityDetailInfo::SeaLampActivityDetailInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SeaLampActivityDetailInfo)
}
SeaLampActivityDetailInfo::SeaLampActivityDetailInfo(const SeaLampActivityDetailInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      taken_contribution_reward_list_(from.taken_contribution_reward_list_),
      taken_phase_reward_list_(from.taken_phase_reward_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&phase_id_, &from.phase_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&factor_) -
    reinterpret_cast<char*>(&phase_id_)) + sizeof(factor_));
  // @@protoc_insertion_point(copy_constructor:proto.SeaLampActivityDetailInfo)
}

void SeaLampActivityDetailInfo::SharedCtor() {
  ::memset(&phase_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&factor_) -
      reinterpret_cast<char*>(&phase_id_)) + sizeof(factor_));
  _cached_size_ = 0;
}

SeaLampActivityDetailInfo::~SeaLampActivityDetailInfo() {
  // @@protoc_insertion_point(destructor:proto.SeaLampActivityDetailInfo)
  SharedDtor();
}

void SeaLampActivityDetailInfo::SharedDtor() {
}

void SeaLampActivityDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeaLampActivityDetailInfo::descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeaLampActivityDetailInfo& SeaLampActivityDetailInfo::default_instance() {
  protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  return *internal_default_instance();
}

SeaLampActivityDetailInfo* SeaLampActivityDetailInfo::New(::google::protobuf::Arena* arena) const {
  SeaLampActivityDetailInfo* n = new SeaLampActivityDetailInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeaLampActivityDetailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SeaLampActivityDetailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taken_contribution_reward_list_.Clear();
  taken_phase_reward_list_.Clear();
  ::memset(&phase_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&factor_) -
      reinterpret_cast<char*>(&phase_id_)) + sizeof(factor_));
  _internal_metadata_.Clear();
}

bool SeaLampActivityDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SeaLampActivityDetailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 phase_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phase_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 progress = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 days = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &days_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 contribution = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 taken_contribution_reward_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_taken_contribution_reward_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_taken_contribution_reward_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 taken_phase_reward_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_taken_phase_reward_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50u, input, this->mutable_taken_phase_reward_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 factor = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SeaLampActivityDetailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SeaLampActivityDetailInfo)
  return false;
#undef DO_
}

void SeaLampActivityDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SeaLampActivityDetailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 phase_id = 1;
  if (this->phase_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phase_id(), output);
  }

  // uint32 progress = 2;
  if (this->progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->progress(), output);
  }

  // uint32 days = 3;
  if (this->days() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->days(), output);
  }

  // uint32 contribution = 4;
  if (this->contribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->contribution(), output);
  }

  // repeated uint32 taken_contribution_reward_list = 5;
  if (this->taken_contribution_reward_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _taken_contribution_reward_list_cached_byte_size_));
  }
  for (int i = 0, n = this->taken_contribution_reward_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->taken_contribution_reward_list(i), output);
  }

  // repeated uint32 taken_phase_reward_list = 6;
  if (this->taken_phase_reward_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _taken_phase_reward_list_cached_byte_size_));
  }
  for (int i = 0, n = this->taken_phase_reward_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->taken_phase_reward_list(i), output);
  }

  // uint32 factor = 7;
  if (this->factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->factor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SeaLampActivityDetailInfo)
}

::google::protobuf::uint8* SeaLampActivityDetailInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SeaLampActivityDetailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 phase_id = 1;
  if (this->phase_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phase_id(), target);
  }

  // uint32 progress = 2;
  if (this->progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->progress(), target);
  }

  // uint32 days = 3;
  if (this->days() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->days(), target);
  }

  // uint32 contribution = 4;
  if (this->contribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->contribution(), target);
  }

  // repeated uint32 taken_contribution_reward_list = 5;
  if (this->taken_contribution_reward_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _taken_contribution_reward_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->taken_contribution_reward_list_, target);
  }

  // repeated uint32 taken_phase_reward_list = 6;
  if (this->taken_phase_reward_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _taken_phase_reward_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->taken_phase_reward_list_, target);
  }

  // uint32 factor = 7;
  if (this->factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->factor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SeaLampActivityDetailInfo)
  return target;
}

size_t SeaLampActivityDetailInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SeaLampActivityDetailInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 taken_contribution_reward_list = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->taken_contribution_reward_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _taken_contribution_reward_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 taken_phase_reward_list = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->taken_phase_reward_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _taken_phase_reward_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 phase_id = 1;
  if (this->phase_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->phase_id());
  }

  // uint32 progress = 2;
  if (this->progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->progress());
  }

  // uint32 days = 3;
  if (this->days() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->days());
  }

  // uint32 contribution = 4;
  if (this->contribution() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contribution());
  }

  // uint32 factor = 7;
  if (this->factor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->factor());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeaLampActivityDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SeaLampActivityDetailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SeaLampActivityDetailInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeaLampActivityDetailInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SeaLampActivityDetailInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SeaLampActivityDetailInfo)
    MergeFrom(*source);
  }
}

void SeaLampActivityDetailInfo::MergeFrom(const SeaLampActivityDetailInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SeaLampActivityDetailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  taken_contribution_reward_list_.MergeFrom(from.taken_contribution_reward_list_);
  taken_phase_reward_list_.MergeFrom(from.taken_phase_reward_list_);
  if (from.phase_id() != 0) {
    set_phase_id(from.phase_id());
  }
  if (from.progress() != 0) {
    set_progress(from.progress());
  }
  if (from.days() != 0) {
    set_days(from.days());
  }
  if (from.contribution() != 0) {
    set_contribution(from.contribution());
  }
  if (from.factor() != 0) {
    set_factor(from.factor());
  }
}

void SeaLampActivityDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SeaLampActivityDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeaLampActivityDetailInfo::CopyFrom(const SeaLampActivityDetailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SeaLampActivityDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeaLampActivityDetailInfo::IsInitialized() const {
  return true;
}

void SeaLampActivityDetailInfo::Swap(SeaLampActivityDetailInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeaLampActivityDetailInfo::InternalSwap(SeaLampActivityDetailInfo* other) {
  using std::swap;
  taken_contribution_reward_list_.InternalSwap(&other->taken_contribution_reward_list_);
  taken_phase_reward_list_.InternalSwap(&other->taken_phase_reward_list_);
  swap(phase_id_, other->phase_id_);
  swap(progress_, other->progress_);
  swap(days_, other->days_);
  swap(contribution_, other->contribution_);
  swap(factor_, other->factor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeaLampActivityDetailInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeaLampActivityDetailInfo

// uint32 phase_id = 1;
void SeaLampActivityDetailInfo::clear_phase_id() {
  phase_id_ = 0u;
}
::google::protobuf::uint32 SeaLampActivityDetailInfo::phase_id() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampActivityDetailInfo.phase_id)
  return phase_id_;
}
void SeaLampActivityDetailInfo::set_phase_id(::google::protobuf::uint32 value) {
  
  phase_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampActivityDetailInfo.phase_id)
}

// uint32 progress = 2;
void SeaLampActivityDetailInfo::clear_progress() {
  progress_ = 0u;
}
::google::protobuf::uint32 SeaLampActivityDetailInfo::progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampActivityDetailInfo.progress)
  return progress_;
}
void SeaLampActivityDetailInfo::set_progress(::google::protobuf::uint32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampActivityDetailInfo.progress)
}

// uint32 days = 3;
void SeaLampActivityDetailInfo::clear_days() {
  days_ = 0u;
}
::google::protobuf::uint32 SeaLampActivityDetailInfo::days() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampActivityDetailInfo.days)
  return days_;
}
void SeaLampActivityDetailInfo::set_days(::google::protobuf::uint32 value) {
  
  days_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampActivityDetailInfo.days)
}

// uint32 contribution = 4;
void SeaLampActivityDetailInfo::clear_contribution() {
  contribution_ = 0u;
}
::google::protobuf::uint32 SeaLampActivityDetailInfo::contribution() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampActivityDetailInfo.contribution)
  return contribution_;
}
void SeaLampActivityDetailInfo::set_contribution(::google::protobuf::uint32 value) {
  
  contribution_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampActivityDetailInfo.contribution)
}

// repeated uint32 taken_contribution_reward_list = 5;
int SeaLampActivityDetailInfo::taken_contribution_reward_list_size() const {
  return taken_contribution_reward_list_.size();
}
void SeaLampActivityDetailInfo::clear_taken_contribution_reward_list() {
  taken_contribution_reward_list_.Clear();
}
::google::protobuf::uint32 SeaLampActivityDetailInfo::taken_contribution_reward_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SeaLampActivityDetailInfo.taken_contribution_reward_list)
  return taken_contribution_reward_list_.Get(index);
}
void SeaLampActivityDetailInfo::set_taken_contribution_reward_list(int index, ::google::protobuf::uint32 value) {
  taken_contribution_reward_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.SeaLampActivityDetailInfo.taken_contribution_reward_list)
}
void SeaLampActivityDetailInfo::add_taken_contribution_reward_list(::google::protobuf::uint32 value) {
  taken_contribution_reward_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.SeaLampActivityDetailInfo.taken_contribution_reward_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SeaLampActivityDetailInfo::taken_contribution_reward_list() const {
  // @@protoc_insertion_point(field_list:proto.SeaLampActivityDetailInfo.taken_contribution_reward_list)
  return taken_contribution_reward_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SeaLampActivityDetailInfo::mutable_taken_contribution_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SeaLampActivityDetailInfo.taken_contribution_reward_list)
  return &taken_contribution_reward_list_;
}

// repeated uint32 taken_phase_reward_list = 6;
int SeaLampActivityDetailInfo::taken_phase_reward_list_size() const {
  return taken_phase_reward_list_.size();
}
void SeaLampActivityDetailInfo::clear_taken_phase_reward_list() {
  taken_phase_reward_list_.Clear();
}
::google::protobuf::uint32 SeaLampActivityDetailInfo::taken_phase_reward_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SeaLampActivityDetailInfo.taken_phase_reward_list)
  return taken_phase_reward_list_.Get(index);
}
void SeaLampActivityDetailInfo::set_taken_phase_reward_list(int index, ::google::protobuf::uint32 value) {
  taken_phase_reward_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.SeaLampActivityDetailInfo.taken_phase_reward_list)
}
void SeaLampActivityDetailInfo::add_taken_phase_reward_list(::google::protobuf::uint32 value) {
  taken_phase_reward_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.SeaLampActivityDetailInfo.taken_phase_reward_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SeaLampActivityDetailInfo::taken_phase_reward_list() const {
  // @@protoc_insertion_point(field_list:proto.SeaLampActivityDetailInfo.taken_phase_reward_list)
  return taken_phase_reward_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SeaLampActivityDetailInfo::mutable_taken_phase_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SeaLampActivityDetailInfo.taken_phase_reward_list)
  return &taken_phase_reward_list_;
}

// uint32 factor = 7;
void SeaLampActivityDetailInfo::clear_factor() {
  factor_ = 0u;
}
::google::protobuf::uint32 SeaLampActivityDetailInfo::factor() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampActivityDetailInfo.factor)
  return factor_;
}
void SeaLampActivityDetailInfo::set_factor(::google::protobuf::uint32 value) {
  
  factor_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampActivityDetailInfo.factor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeaLampFlyLampReq::kItemIdFieldNumber;
const int SeaLampFlyLampReq::kWishTextFieldNumber;
const int SeaLampFlyLampReq::kItemNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeaLampFlyLampReq::SeaLampFlyLampReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SeaLampFlyLampReq)
}
SeaLampFlyLampReq::SeaLampFlyLampReq(const SeaLampFlyLampReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wish_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.wish_text().size() > 0) {
    wish_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wish_text_);
  }
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_num_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(item_num_));
  // @@protoc_insertion_point(copy_constructor:proto.SeaLampFlyLampReq)
}

void SeaLampFlyLampReq::SharedCtor() {
  wish_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_num_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(item_num_));
  _cached_size_ = 0;
}

SeaLampFlyLampReq::~SeaLampFlyLampReq() {
  // @@protoc_insertion_point(destructor:proto.SeaLampFlyLampReq)
  SharedDtor();
}

void SeaLampFlyLampReq::SharedDtor() {
  wish_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SeaLampFlyLampReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeaLampFlyLampReq::descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeaLampFlyLampReq& SeaLampFlyLampReq::default_instance() {
  protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  return *internal_default_instance();
}

SeaLampFlyLampReq* SeaLampFlyLampReq::New(::google::protobuf::Arena* arena) const {
  SeaLampFlyLampReq* n = new SeaLampFlyLampReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeaLampFlyLampReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SeaLampFlyLampReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wish_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_num_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(item_num_));
  _internal_metadata_.Clear();
}

bool SeaLampFlyLampReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SeaLampFlyLampReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string wish_text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wish_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->wish_text().data(), static_cast<int>(this->wish_text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.SeaLampFlyLampReq.wish_text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 item_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SeaLampFlyLampReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SeaLampFlyLampReq)
  return false;
#undef DO_
}

void SeaLampFlyLampReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SeaLampFlyLampReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // string wish_text = 2;
  if (this->wish_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wish_text().data(), static_cast<int>(this->wish_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.SeaLampFlyLampReq.wish_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->wish_text(), output);
  }

  // uint32 item_num = 3;
  if (this->item_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SeaLampFlyLampReq)
}

::google::protobuf::uint8* SeaLampFlyLampReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SeaLampFlyLampReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // string wish_text = 2;
  if (this->wish_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wish_text().data(), static_cast<int>(this->wish_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.SeaLampFlyLampReq.wish_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->wish_text(), target);
  }

  // uint32 item_num = 3;
  if (this->item_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SeaLampFlyLampReq)
  return target;
}

size_t SeaLampFlyLampReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SeaLampFlyLampReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string wish_text = 2;
  if (this->wish_text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->wish_text());
  }

  // uint32 item_id = 1;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_id());
  }

  // uint32 item_num = 3;
  if (this->item_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeaLampFlyLampReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SeaLampFlyLampReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SeaLampFlyLampReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeaLampFlyLampReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SeaLampFlyLampReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SeaLampFlyLampReq)
    MergeFrom(*source);
  }
}

void SeaLampFlyLampReq::MergeFrom(const SeaLampFlyLampReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SeaLampFlyLampReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wish_text().size() > 0) {

    wish_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wish_text_);
  }
  if (from.item_id() != 0) {
    set_item_id(from.item_id());
  }
  if (from.item_num() != 0) {
    set_item_num(from.item_num());
  }
}

void SeaLampFlyLampReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SeaLampFlyLampReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeaLampFlyLampReq::CopyFrom(const SeaLampFlyLampReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SeaLampFlyLampReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeaLampFlyLampReq::IsInitialized() const {
  return true;
}

void SeaLampFlyLampReq::Swap(SeaLampFlyLampReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeaLampFlyLampReq::InternalSwap(SeaLampFlyLampReq* other) {
  using std::swap;
  wish_text_.Swap(&other->wish_text_);
  swap(item_id_, other->item_id_);
  swap(item_num_, other->item_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeaLampFlyLampReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeaLampFlyLampReq

// uint32 item_id = 1;
void SeaLampFlyLampReq::clear_item_id() {
  item_id_ = 0u;
}
::google::protobuf::uint32 SeaLampFlyLampReq::item_id() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampFlyLampReq.item_id)
  return item_id_;
}
void SeaLampFlyLampReq::set_item_id(::google::protobuf::uint32 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampFlyLampReq.item_id)
}

// string wish_text = 2;
void SeaLampFlyLampReq::clear_wish_text() {
  wish_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SeaLampFlyLampReq::wish_text() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampFlyLampReq.wish_text)
  return wish_text_.GetNoArena();
}
void SeaLampFlyLampReq::set_wish_text(const ::std::string& value) {
  
  wish_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SeaLampFlyLampReq.wish_text)
}
#if LANG_CXX11
void SeaLampFlyLampReq::set_wish_text(::std::string&& value) {
  
  wish_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SeaLampFlyLampReq.wish_text)
}
#endif
void SeaLampFlyLampReq::set_wish_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wish_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SeaLampFlyLampReq.wish_text)
}
void SeaLampFlyLampReq::set_wish_text(const char* value, size_t size) {
  
  wish_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SeaLampFlyLampReq.wish_text)
}
::std::string* SeaLampFlyLampReq::mutable_wish_text() {
  
  // @@protoc_insertion_point(field_mutable:proto.SeaLampFlyLampReq.wish_text)
  return wish_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SeaLampFlyLampReq::release_wish_text() {
  // @@protoc_insertion_point(field_release:proto.SeaLampFlyLampReq.wish_text)
  
  return wish_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SeaLampFlyLampReq::set_allocated_wish_text(::std::string* wish_text) {
  if (wish_text != NULL) {
    
  } else {
    
  }
  wish_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wish_text);
  // @@protoc_insertion_point(field_set_allocated:proto.SeaLampFlyLampReq.wish_text)
}

// uint32 item_num = 3;
void SeaLampFlyLampReq::clear_item_num() {
  item_num_ = 0u;
}
::google::protobuf::uint32 SeaLampFlyLampReq::item_num() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampFlyLampReq.item_num)
  return item_num_;
}
void SeaLampFlyLampReq::set_item_num(::google::protobuf::uint32 value) {
  
  item_num_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampFlyLampReq.item_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeaLampFlyLampRsp::kRetcodeFieldNumber;
const int SeaLampFlyLampRsp::kTotalContributionFieldNumber;
const int SeaLampFlyLampRsp::kRemainFlyNumFieldNumber;
const int SeaLampFlyLampRsp::kAddContributionFieldNumber;
const int SeaLampFlyLampRsp::kAddProgressFieldNumber;
const int SeaLampFlyLampRsp::kItemNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeaLampFlyLampRsp::SeaLampFlyLampRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SeaLampFlyLampRsp)
}
SeaLampFlyLampRsp::SeaLampFlyLampRsp(const SeaLampFlyLampRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_num_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(item_num_));
  // @@protoc_insertion_point(copy_constructor:proto.SeaLampFlyLampRsp)
}

void SeaLampFlyLampRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_num_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(item_num_));
  _cached_size_ = 0;
}

SeaLampFlyLampRsp::~SeaLampFlyLampRsp() {
  // @@protoc_insertion_point(destructor:proto.SeaLampFlyLampRsp)
  SharedDtor();
}

void SeaLampFlyLampRsp::SharedDtor() {
}

void SeaLampFlyLampRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeaLampFlyLampRsp::descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeaLampFlyLampRsp& SeaLampFlyLampRsp::default_instance() {
  protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  return *internal_default_instance();
}

SeaLampFlyLampRsp* SeaLampFlyLampRsp::New(::google::protobuf::Arena* arena) const {
  SeaLampFlyLampRsp* n = new SeaLampFlyLampRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeaLampFlyLampRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SeaLampFlyLampRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_num_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(item_num_));
  _internal_metadata_.Clear();
}

bool SeaLampFlyLampRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SeaLampFlyLampRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_contribution = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_contribution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 remain_fly_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remain_fly_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 add_contribution = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_contribution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 add_progress = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 item_num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SeaLampFlyLampRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SeaLampFlyLampRsp)
  return false;
#undef DO_
}

void SeaLampFlyLampRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SeaLampFlyLampRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 total_contribution = 2;
  if (this->total_contribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_contribution(), output);
  }

  // uint32 remain_fly_num = 3;
  if (this->remain_fly_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->remain_fly_num(), output);
  }

  // uint32 add_contribution = 4;
  if (this->add_contribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->add_contribution(), output);
  }

  // uint32 add_progress = 5;
  if (this->add_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->add_progress(), output);
  }

  // uint32 item_num = 6;
  if (this->item_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->item_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SeaLampFlyLampRsp)
}

::google::protobuf::uint8* SeaLampFlyLampRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SeaLampFlyLampRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 total_contribution = 2;
  if (this->total_contribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_contribution(), target);
  }

  // uint32 remain_fly_num = 3;
  if (this->remain_fly_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->remain_fly_num(), target);
  }

  // uint32 add_contribution = 4;
  if (this->add_contribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->add_contribution(), target);
  }

  // uint32 add_progress = 5;
  if (this->add_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->add_progress(), target);
  }

  // uint32 item_num = 6;
  if (this->item_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->item_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SeaLampFlyLampRsp)
  return target;
}

size_t SeaLampFlyLampRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SeaLampFlyLampRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 total_contribution = 2;
  if (this->total_contribution() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_contribution());
  }

  // uint32 remain_fly_num = 3;
  if (this->remain_fly_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remain_fly_num());
  }

  // uint32 add_contribution = 4;
  if (this->add_contribution() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->add_contribution());
  }

  // uint32 add_progress = 5;
  if (this->add_progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->add_progress());
  }

  // uint32 item_num = 6;
  if (this->item_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeaLampFlyLampRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SeaLampFlyLampRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SeaLampFlyLampRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeaLampFlyLampRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SeaLampFlyLampRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SeaLampFlyLampRsp)
    MergeFrom(*source);
  }
}

void SeaLampFlyLampRsp::MergeFrom(const SeaLampFlyLampRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SeaLampFlyLampRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.total_contribution() != 0) {
    set_total_contribution(from.total_contribution());
  }
  if (from.remain_fly_num() != 0) {
    set_remain_fly_num(from.remain_fly_num());
  }
  if (from.add_contribution() != 0) {
    set_add_contribution(from.add_contribution());
  }
  if (from.add_progress() != 0) {
    set_add_progress(from.add_progress());
  }
  if (from.item_num() != 0) {
    set_item_num(from.item_num());
  }
}

void SeaLampFlyLampRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SeaLampFlyLampRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeaLampFlyLampRsp::CopyFrom(const SeaLampFlyLampRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SeaLampFlyLampRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeaLampFlyLampRsp::IsInitialized() const {
  return true;
}

void SeaLampFlyLampRsp::Swap(SeaLampFlyLampRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeaLampFlyLampRsp::InternalSwap(SeaLampFlyLampRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(total_contribution_, other->total_contribution_);
  swap(remain_fly_num_, other->remain_fly_num_);
  swap(add_contribution_, other->add_contribution_);
  swap(add_progress_, other->add_progress_);
  swap(item_num_, other->item_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeaLampFlyLampRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeaLampFlyLampRsp

// int32 retcode = 1;
void SeaLampFlyLampRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 SeaLampFlyLampRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampFlyLampRsp.retcode)
  return retcode_;
}
void SeaLampFlyLampRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampFlyLampRsp.retcode)
}

// uint32 total_contribution = 2;
void SeaLampFlyLampRsp::clear_total_contribution() {
  total_contribution_ = 0u;
}
::google::protobuf::uint32 SeaLampFlyLampRsp::total_contribution() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampFlyLampRsp.total_contribution)
  return total_contribution_;
}
void SeaLampFlyLampRsp::set_total_contribution(::google::protobuf::uint32 value) {
  
  total_contribution_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampFlyLampRsp.total_contribution)
}

// uint32 remain_fly_num = 3;
void SeaLampFlyLampRsp::clear_remain_fly_num() {
  remain_fly_num_ = 0u;
}
::google::protobuf::uint32 SeaLampFlyLampRsp::remain_fly_num() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampFlyLampRsp.remain_fly_num)
  return remain_fly_num_;
}
void SeaLampFlyLampRsp::set_remain_fly_num(::google::protobuf::uint32 value) {
  
  remain_fly_num_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampFlyLampRsp.remain_fly_num)
}

// uint32 add_contribution = 4;
void SeaLampFlyLampRsp::clear_add_contribution() {
  add_contribution_ = 0u;
}
::google::protobuf::uint32 SeaLampFlyLampRsp::add_contribution() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampFlyLampRsp.add_contribution)
  return add_contribution_;
}
void SeaLampFlyLampRsp::set_add_contribution(::google::protobuf::uint32 value) {
  
  add_contribution_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampFlyLampRsp.add_contribution)
}

// uint32 add_progress = 5;
void SeaLampFlyLampRsp::clear_add_progress() {
  add_progress_ = 0u;
}
::google::protobuf::uint32 SeaLampFlyLampRsp::add_progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampFlyLampRsp.add_progress)
  return add_progress_;
}
void SeaLampFlyLampRsp::set_add_progress(::google::protobuf::uint32 value) {
  
  add_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampFlyLampRsp.add_progress)
}

// uint32 item_num = 6;
void SeaLampFlyLampRsp::clear_item_num() {
  item_num_ = 0u;
}
::google::protobuf::uint32 SeaLampFlyLampRsp::item_num() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampFlyLampRsp.item_num)
  return item_num_;
}
void SeaLampFlyLampRsp::set_item_num(::google::protobuf::uint32 value) {
  
  item_num_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampFlyLampRsp.item_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeaLampTakeContributionRewardReq::kConfigIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeaLampTakeContributionRewardReq::SeaLampTakeContributionRewardReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SeaLampTakeContributionRewardReq)
}
SeaLampTakeContributionRewardReq::SeaLampTakeContributionRewardReq(const SeaLampTakeContributionRewardReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  config_id_ = from.config_id_;
  // @@protoc_insertion_point(copy_constructor:proto.SeaLampTakeContributionRewardReq)
}

void SeaLampTakeContributionRewardReq::SharedCtor() {
  config_id_ = 0u;
  _cached_size_ = 0;
}

SeaLampTakeContributionRewardReq::~SeaLampTakeContributionRewardReq() {
  // @@protoc_insertion_point(destructor:proto.SeaLampTakeContributionRewardReq)
  SharedDtor();
}

void SeaLampTakeContributionRewardReq::SharedDtor() {
}

void SeaLampTakeContributionRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeaLampTakeContributionRewardReq::descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeaLampTakeContributionRewardReq& SeaLampTakeContributionRewardReq::default_instance() {
  protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  return *internal_default_instance();
}

SeaLampTakeContributionRewardReq* SeaLampTakeContributionRewardReq::New(::google::protobuf::Arena* arena) const {
  SeaLampTakeContributionRewardReq* n = new SeaLampTakeContributionRewardReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeaLampTakeContributionRewardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SeaLampTakeContributionRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_id_ = 0u;
  _internal_metadata_.Clear();
}

bool SeaLampTakeContributionRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SeaLampTakeContributionRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 config_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SeaLampTakeContributionRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SeaLampTakeContributionRewardReq)
  return false;
#undef DO_
}

void SeaLampTakeContributionRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SeaLampTakeContributionRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 config_id = 1;
  if (this->config_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->config_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SeaLampTakeContributionRewardReq)
}

::google::protobuf::uint8* SeaLampTakeContributionRewardReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SeaLampTakeContributionRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 config_id = 1;
  if (this->config_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->config_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SeaLampTakeContributionRewardReq)
  return target;
}

size_t SeaLampTakeContributionRewardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SeaLampTakeContributionRewardReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 config_id = 1;
  if (this->config_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->config_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeaLampTakeContributionRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SeaLampTakeContributionRewardReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SeaLampTakeContributionRewardReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeaLampTakeContributionRewardReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SeaLampTakeContributionRewardReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SeaLampTakeContributionRewardReq)
    MergeFrom(*source);
  }
}

void SeaLampTakeContributionRewardReq::MergeFrom(const SeaLampTakeContributionRewardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SeaLampTakeContributionRewardReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.config_id() != 0) {
    set_config_id(from.config_id());
  }
}

void SeaLampTakeContributionRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SeaLampTakeContributionRewardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeaLampTakeContributionRewardReq::CopyFrom(const SeaLampTakeContributionRewardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SeaLampTakeContributionRewardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeaLampTakeContributionRewardReq::IsInitialized() const {
  return true;
}

void SeaLampTakeContributionRewardReq::Swap(SeaLampTakeContributionRewardReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeaLampTakeContributionRewardReq::InternalSwap(SeaLampTakeContributionRewardReq* other) {
  using std::swap;
  swap(config_id_, other->config_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeaLampTakeContributionRewardReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeaLampTakeContributionRewardReq

// uint32 config_id = 1;
void SeaLampTakeContributionRewardReq::clear_config_id() {
  config_id_ = 0u;
}
::google::protobuf::uint32 SeaLampTakeContributionRewardReq::config_id() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampTakeContributionRewardReq.config_id)
  return config_id_;
}
void SeaLampTakeContributionRewardReq::set_config_id(::google::protobuf::uint32 value) {
  
  config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampTakeContributionRewardReq.config_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeaLampTakeContributionRewardRsp::kRetcodeFieldNumber;
const int SeaLampTakeContributionRewardRsp::kConfigIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeaLampTakeContributionRewardRsp::SeaLampTakeContributionRewardRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SeaLampTakeContributionRewardRsp)
}
SeaLampTakeContributionRewardRsp::SeaLampTakeContributionRewardRsp(const SeaLampTakeContributionRewardRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&config_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(config_id_));
  // @@protoc_insertion_point(copy_constructor:proto.SeaLampTakeContributionRewardRsp)
}

void SeaLampTakeContributionRewardRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(config_id_));
  _cached_size_ = 0;
}

SeaLampTakeContributionRewardRsp::~SeaLampTakeContributionRewardRsp() {
  // @@protoc_insertion_point(destructor:proto.SeaLampTakeContributionRewardRsp)
  SharedDtor();
}

void SeaLampTakeContributionRewardRsp::SharedDtor() {
}

void SeaLampTakeContributionRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeaLampTakeContributionRewardRsp::descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeaLampTakeContributionRewardRsp& SeaLampTakeContributionRewardRsp::default_instance() {
  protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  return *internal_default_instance();
}

SeaLampTakeContributionRewardRsp* SeaLampTakeContributionRewardRsp::New(::google::protobuf::Arena* arena) const {
  SeaLampTakeContributionRewardRsp* n = new SeaLampTakeContributionRewardRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeaLampTakeContributionRewardRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SeaLampTakeContributionRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(config_id_));
  _internal_metadata_.Clear();
}

bool SeaLampTakeContributionRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SeaLampTakeContributionRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 config_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SeaLampTakeContributionRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SeaLampTakeContributionRewardRsp)
  return false;
#undef DO_
}

void SeaLampTakeContributionRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SeaLampTakeContributionRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 config_id = 2;
  if (this->config_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->config_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SeaLampTakeContributionRewardRsp)
}

::google::protobuf::uint8* SeaLampTakeContributionRewardRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SeaLampTakeContributionRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 config_id = 2;
  if (this->config_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->config_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SeaLampTakeContributionRewardRsp)
  return target;
}

size_t SeaLampTakeContributionRewardRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SeaLampTakeContributionRewardRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 config_id = 2;
  if (this->config_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->config_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeaLampTakeContributionRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SeaLampTakeContributionRewardRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SeaLampTakeContributionRewardRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeaLampTakeContributionRewardRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SeaLampTakeContributionRewardRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SeaLampTakeContributionRewardRsp)
    MergeFrom(*source);
  }
}

void SeaLampTakeContributionRewardRsp::MergeFrom(const SeaLampTakeContributionRewardRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SeaLampTakeContributionRewardRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.config_id() != 0) {
    set_config_id(from.config_id());
  }
}

void SeaLampTakeContributionRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SeaLampTakeContributionRewardRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeaLampTakeContributionRewardRsp::CopyFrom(const SeaLampTakeContributionRewardRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SeaLampTakeContributionRewardRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeaLampTakeContributionRewardRsp::IsInitialized() const {
  return true;
}

void SeaLampTakeContributionRewardRsp::Swap(SeaLampTakeContributionRewardRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeaLampTakeContributionRewardRsp::InternalSwap(SeaLampTakeContributionRewardRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(config_id_, other->config_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeaLampTakeContributionRewardRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeaLampTakeContributionRewardRsp

// int32 retcode = 1;
void SeaLampTakeContributionRewardRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 SeaLampTakeContributionRewardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampTakeContributionRewardRsp.retcode)
  return retcode_;
}
void SeaLampTakeContributionRewardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampTakeContributionRewardRsp.retcode)
}

// uint32 config_id = 2;
void SeaLampTakeContributionRewardRsp::clear_config_id() {
  config_id_ = 0u;
}
::google::protobuf::uint32 SeaLampTakeContributionRewardRsp::config_id() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampTakeContributionRewardRsp.config_id)
  return config_id_;
}
void SeaLampTakeContributionRewardRsp::set_config_id(::google::protobuf::uint32 value) {
  
  config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampTakeContributionRewardRsp.config_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeaLampTakePhaseRewardReq::kPhaseIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeaLampTakePhaseRewardReq::SeaLampTakePhaseRewardReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SeaLampTakePhaseRewardReq)
}
SeaLampTakePhaseRewardReq::SeaLampTakePhaseRewardReq(const SeaLampTakePhaseRewardReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  phase_id_ = from.phase_id_;
  // @@protoc_insertion_point(copy_constructor:proto.SeaLampTakePhaseRewardReq)
}

void SeaLampTakePhaseRewardReq::SharedCtor() {
  phase_id_ = 0u;
  _cached_size_ = 0;
}

SeaLampTakePhaseRewardReq::~SeaLampTakePhaseRewardReq() {
  // @@protoc_insertion_point(destructor:proto.SeaLampTakePhaseRewardReq)
  SharedDtor();
}

void SeaLampTakePhaseRewardReq::SharedDtor() {
}

void SeaLampTakePhaseRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeaLampTakePhaseRewardReq::descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeaLampTakePhaseRewardReq& SeaLampTakePhaseRewardReq::default_instance() {
  protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  return *internal_default_instance();
}

SeaLampTakePhaseRewardReq* SeaLampTakePhaseRewardReq::New(::google::protobuf::Arena* arena) const {
  SeaLampTakePhaseRewardReq* n = new SeaLampTakePhaseRewardReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeaLampTakePhaseRewardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SeaLampTakePhaseRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phase_id_ = 0u;
  _internal_metadata_.Clear();
}

bool SeaLampTakePhaseRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SeaLampTakePhaseRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 phase_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phase_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SeaLampTakePhaseRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SeaLampTakePhaseRewardReq)
  return false;
#undef DO_
}

void SeaLampTakePhaseRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SeaLampTakePhaseRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 phase_id = 1;
  if (this->phase_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phase_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SeaLampTakePhaseRewardReq)
}

::google::protobuf::uint8* SeaLampTakePhaseRewardReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SeaLampTakePhaseRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 phase_id = 1;
  if (this->phase_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phase_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SeaLampTakePhaseRewardReq)
  return target;
}

size_t SeaLampTakePhaseRewardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SeaLampTakePhaseRewardReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 phase_id = 1;
  if (this->phase_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->phase_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeaLampTakePhaseRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SeaLampTakePhaseRewardReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SeaLampTakePhaseRewardReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeaLampTakePhaseRewardReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SeaLampTakePhaseRewardReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SeaLampTakePhaseRewardReq)
    MergeFrom(*source);
  }
}

void SeaLampTakePhaseRewardReq::MergeFrom(const SeaLampTakePhaseRewardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SeaLampTakePhaseRewardReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phase_id() != 0) {
    set_phase_id(from.phase_id());
  }
}

void SeaLampTakePhaseRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SeaLampTakePhaseRewardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeaLampTakePhaseRewardReq::CopyFrom(const SeaLampTakePhaseRewardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SeaLampTakePhaseRewardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeaLampTakePhaseRewardReq::IsInitialized() const {
  return true;
}

void SeaLampTakePhaseRewardReq::Swap(SeaLampTakePhaseRewardReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeaLampTakePhaseRewardReq::InternalSwap(SeaLampTakePhaseRewardReq* other) {
  using std::swap;
  swap(phase_id_, other->phase_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeaLampTakePhaseRewardReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeaLampTakePhaseRewardReq

// uint32 phase_id = 1;
void SeaLampTakePhaseRewardReq::clear_phase_id() {
  phase_id_ = 0u;
}
::google::protobuf::uint32 SeaLampTakePhaseRewardReq::phase_id() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampTakePhaseRewardReq.phase_id)
  return phase_id_;
}
void SeaLampTakePhaseRewardReq::set_phase_id(::google::protobuf::uint32 value) {
  
  phase_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampTakePhaseRewardReq.phase_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeaLampTakePhaseRewardRsp::kRetcodeFieldNumber;
const int SeaLampTakePhaseRewardRsp::kPhaseIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeaLampTakePhaseRewardRsp::SeaLampTakePhaseRewardRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SeaLampTakePhaseRewardRsp)
}
SeaLampTakePhaseRewardRsp::SeaLampTakePhaseRewardRsp(const SeaLampTakePhaseRewardRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&phase_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(phase_id_));
  // @@protoc_insertion_point(copy_constructor:proto.SeaLampTakePhaseRewardRsp)
}

void SeaLampTakePhaseRewardRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(phase_id_));
  _cached_size_ = 0;
}

SeaLampTakePhaseRewardRsp::~SeaLampTakePhaseRewardRsp() {
  // @@protoc_insertion_point(destructor:proto.SeaLampTakePhaseRewardRsp)
  SharedDtor();
}

void SeaLampTakePhaseRewardRsp::SharedDtor() {
}

void SeaLampTakePhaseRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeaLampTakePhaseRewardRsp::descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeaLampTakePhaseRewardRsp& SeaLampTakePhaseRewardRsp::default_instance() {
  protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  return *internal_default_instance();
}

SeaLampTakePhaseRewardRsp* SeaLampTakePhaseRewardRsp::New(::google::protobuf::Arena* arena) const {
  SeaLampTakePhaseRewardRsp* n = new SeaLampTakePhaseRewardRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeaLampTakePhaseRewardRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SeaLampTakePhaseRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(phase_id_));
  _internal_metadata_.Clear();
}

bool SeaLampTakePhaseRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SeaLampTakePhaseRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 phase_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phase_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SeaLampTakePhaseRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SeaLampTakePhaseRewardRsp)
  return false;
#undef DO_
}

void SeaLampTakePhaseRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SeaLampTakePhaseRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 phase_id = 2;
  if (this->phase_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->phase_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SeaLampTakePhaseRewardRsp)
}

::google::protobuf::uint8* SeaLampTakePhaseRewardRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SeaLampTakePhaseRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 phase_id = 2;
  if (this->phase_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->phase_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SeaLampTakePhaseRewardRsp)
  return target;
}

size_t SeaLampTakePhaseRewardRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SeaLampTakePhaseRewardRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 phase_id = 2;
  if (this->phase_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->phase_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeaLampTakePhaseRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SeaLampTakePhaseRewardRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SeaLampTakePhaseRewardRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeaLampTakePhaseRewardRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SeaLampTakePhaseRewardRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SeaLampTakePhaseRewardRsp)
    MergeFrom(*source);
  }
}

void SeaLampTakePhaseRewardRsp::MergeFrom(const SeaLampTakePhaseRewardRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SeaLampTakePhaseRewardRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.phase_id() != 0) {
    set_phase_id(from.phase_id());
  }
}

void SeaLampTakePhaseRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SeaLampTakePhaseRewardRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeaLampTakePhaseRewardRsp::CopyFrom(const SeaLampTakePhaseRewardRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SeaLampTakePhaseRewardRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeaLampTakePhaseRewardRsp::IsInitialized() const {
  return true;
}

void SeaLampTakePhaseRewardRsp::Swap(SeaLampTakePhaseRewardRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeaLampTakePhaseRewardRsp::InternalSwap(SeaLampTakePhaseRewardRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(phase_id_, other->phase_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeaLampTakePhaseRewardRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeaLampTakePhaseRewardRsp

// int32 retcode = 1;
void SeaLampTakePhaseRewardRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 SeaLampTakePhaseRewardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampTakePhaseRewardRsp.retcode)
  return retcode_;
}
void SeaLampTakePhaseRewardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampTakePhaseRewardRsp.retcode)
}

// uint32 phase_id = 2;
void SeaLampTakePhaseRewardRsp::clear_phase_id() {
  phase_id_ = 0u;
}
::google::protobuf::uint32 SeaLampTakePhaseRewardRsp::phase_id() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampTakePhaseRewardRsp.phase_id)
  return phase_id_;
}
void SeaLampTakePhaseRewardRsp::set_phase_id(::google::protobuf::uint32 value) {
  
  phase_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampTakePhaseRewardRsp.phase_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeaLampContributeItemReq::kItemListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeaLampContributeItemReq::SeaLampContributeItemReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SeaLampContributeItemReq)
}
SeaLampContributeItemReq::SeaLampContributeItemReq(const SeaLampContributeItemReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      item_list_(from.item_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.SeaLampContributeItemReq)
}

void SeaLampContributeItemReq::SharedCtor() {
  _cached_size_ = 0;
}

SeaLampContributeItemReq::~SeaLampContributeItemReq() {
  // @@protoc_insertion_point(destructor:proto.SeaLampContributeItemReq)
  SharedDtor();
}

void SeaLampContributeItemReq::SharedDtor() {
}

void SeaLampContributeItemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeaLampContributeItemReq::descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeaLampContributeItemReq& SeaLampContributeItemReq::default_instance() {
  protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  return *internal_default_instance();
}

SeaLampContributeItemReq* SeaLampContributeItemReq::New(::google::protobuf::Arena* arena) const {
  SeaLampContributeItemReq* n = new SeaLampContributeItemReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeaLampContributeItemReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SeaLampContributeItemReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_list_.Clear();
  _internal_metadata_.Clear();
}

bool SeaLampContributeItemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SeaLampContributeItemReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.ItemParam item_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SeaLampContributeItemReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SeaLampContributeItemReq)
  return false;
#undef DO_
}

void SeaLampContributeItemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SeaLampContributeItemReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ItemParam item_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SeaLampContributeItemReq)
}

::google::protobuf::uint8* SeaLampContributeItemReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SeaLampContributeItemReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ItemParam item_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->item_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SeaLampContributeItemReq)
  return target;
}

size_t SeaLampContributeItemReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SeaLampContributeItemReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ItemParam item_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeaLampContributeItemReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SeaLampContributeItemReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SeaLampContributeItemReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeaLampContributeItemReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SeaLampContributeItemReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SeaLampContributeItemReq)
    MergeFrom(*source);
  }
}

void SeaLampContributeItemReq::MergeFrom(const SeaLampContributeItemReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SeaLampContributeItemReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_list_.MergeFrom(from.item_list_);
}

void SeaLampContributeItemReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SeaLampContributeItemReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeaLampContributeItemReq::CopyFrom(const SeaLampContributeItemReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SeaLampContributeItemReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeaLampContributeItemReq::IsInitialized() const {
  return true;
}

void SeaLampContributeItemReq::Swap(SeaLampContributeItemReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeaLampContributeItemReq::InternalSwap(SeaLampContributeItemReq* other) {
  using std::swap;
  item_list_.InternalSwap(&other->item_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeaLampContributeItemReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeaLampContributeItemReq

// repeated .proto.ItemParam item_list = 1;
int SeaLampContributeItemReq::item_list_size() const {
  return item_list_.size();
}
void SeaLampContributeItemReq::clear_item_list() {
  item_list_.Clear();
}
const ::proto::ItemParam& SeaLampContributeItemReq::item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SeaLampContributeItemReq.item_list)
  return item_list_.Get(index);
}
::proto::ItemParam* SeaLampContributeItemReq::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.SeaLampContributeItemReq.item_list)
  return item_list_.Mutable(index);
}
::proto::ItemParam* SeaLampContributeItemReq::add_item_list() {
  // @@protoc_insertion_point(field_add:proto.SeaLampContributeItemReq.item_list)
  return item_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
SeaLampContributeItemReq::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SeaLampContributeItemReq.item_list)
  return &item_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
SeaLampContributeItemReq::item_list() const {
  // @@protoc_insertion_point(field_list:proto.SeaLampContributeItemReq.item_list)
  return item_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeaLampContributeItemRsp::kRetcodeFieldNumber;
const int SeaLampContributeItemRsp::kTotalContributionFieldNumber;
const int SeaLampContributeItemRsp::kAddContributionFieldNumber;
const int SeaLampContributeItemRsp::kAddProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeaLampContributeItemRsp::SeaLampContributeItemRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SeaLampContributeItemRsp)
}
SeaLampContributeItemRsp::SeaLampContributeItemRsp(const SeaLampContributeItemRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&add_progress_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(add_progress_));
  // @@protoc_insertion_point(copy_constructor:proto.SeaLampContributeItemRsp)
}

void SeaLampContributeItemRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&add_progress_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(add_progress_));
  _cached_size_ = 0;
}

SeaLampContributeItemRsp::~SeaLampContributeItemRsp() {
  // @@protoc_insertion_point(destructor:proto.SeaLampContributeItemRsp)
  SharedDtor();
}

void SeaLampContributeItemRsp::SharedDtor() {
}

void SeaLampContributeItemRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeaLampContributeItemRsp::descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeaLampContributeItemRsp& SeaLampContributeItemRsp::default_instance() {
  protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  return *internal_default_instance();
}

SeaLampContributeItemRsp* SeaLampContributeItemRsp::New(::google::protobuf::Arena* arena) const {
  SeaLampContributeItemRsp* n = new SeaLampContributeItemRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeaLampContributeItemRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SeaLampContributeItemRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&add_progress_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(add_progress_));
  _internal_metadata_.Clear();
}

bool SeaLampContributeItemRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SeaLampContributeItemRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_contribution = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_contribution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 add_contribution = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_contribution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 add_progress = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SeaLampContributeItemRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SeaLampContributeItemRsp)
  return false;
#undef DO_
}

void SeaLampContributeItemRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SeaLampContributeItemRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 total_contribution = 2;
  if (this->total_contribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_contribution(), output);
  }

  // uint32 add_contribution = 3;
  if (this->add_contribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->add_contribution(), output);
  }

  // uint32 add_progress = 4;
  if (this->add_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->add_progress(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SeaLampContributeItemRsp)
}

::google::protobuf::uint8* SeaLampContributeItemRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SeaLampContributeItemRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 total_contribution = 2;
  if (this->total_contribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_contribution(), target);
  }

  // uint32 add_contribution = 3;
  if (this->add_contribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->add_contribution(), target);
  }

  // uint32 add_progress = 4;
  if (this->add_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->add_progress(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SeaLampContributeItemRsp)
  return target;
}

size_t SeaLampContributeItemRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SeaLampContributeItemRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 total_contribution = 2;
  if (this->total_contribution() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_contribution());
  }

  // uint32 add_contribution = 3;
  if (this->add_contribution() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->add_contribution());
  }

  // uint32 add_progress = 4;
  if (this->add_progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->add_progress());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeaLampContributeItemRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SeaLampContributeItemRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SeaLampContributeItemRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeaLampContributeItemRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SeaLampContributeItemRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SeaLampContributeItemRsp)
    MergeFrom(*source);
  }
}

void SeaLampContributeItemRsp::MergeFrom(const SeaLampContributeItemRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SeaLampContributeItemRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.total_contribution() != 0) {
    set_total_contribution(from.total_contribution());
  }
  if (from.add_contribution() != 0) {
    set_add_contribution(from.add_contribution());
  }
  if (from.add_progress() != 0) {
    set_add_progress(from.add_progress());
  }
}

void SeaLampContributeItemRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SeaLampContributeItemRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeaLampContributeItemRsp::CopyFrom(const SeaLampContributeItemRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SeaLampContributeItemRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeaLampContributeItemRsp::IsInitialized() const {
  return true;
}

void SeaLampContributeItemRsp::Swap(SeaLampContributeItemRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeaLampContributeItemRsp::InternalSwap(SeaLampContributeItemRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(total_contribution_, other->total_contribution_);
  swap(add_contribution_, other->add_contribution_);
  swap(add_progress_, other->add_progress_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeaLampContributeItemRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeaLampContributeItemRsp

// int32 retcode = 1;
void SeaLampContributeItemRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 SeaLampContributeItemRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampContributeItemRsp.retcode)
  return retcode_;
}
void SeaLampContributeItemRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampContributeItemRsp.retcode)
}

// uint32 total_contribution = 2;
void SeaLampContributeItemRsp::clear_total_contribution() {
  total_contribution_ = 0u;
}
::google::protobuf::uint32 SeaLampContributeItemRsp::total_contribution() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampContributeItemRsp.total_contribution)
  return total_contribution_;
}
void SeaLampContributeItemRsp::set_total_contribution(::google::protobuf::uint32 value) {
  
  total_contribution_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampContributeItemRsp.total_contribution)
}

// uint32 add_contribution = 3;
void SeaLampContributeItemRsp::clear_add_contribution() {
  add_contribution_ = 0u;
}
::google::protobuf::uint32 SeaLampContributeItemRsp::add_contribution() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampContributeItemRsp.add_contribution)
  return add_contribution_;
}
void SeaLampContributeItemRsp::set_add_contribution(::google::protobuf::uint32 value) {
  
  add_contribution_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampContributeItemRsp.add_contribution)
}

// uint32 add_progress = 4;
void SeaLampContributeItemRsp::clear_add_progress() {
  add_progress_ = 0u;
}
::google::protobuf::uint32 SeaLampContributeItemRsp::add_progress() const {
  // @@protoc_insertion_point(field_get:proto.SeaLampContributeItemRsp.add_progress)
  return add_progress_;
}
void SeaLampContributeItemRsp::set_add_progress(::google::protobuf::uint32 value) {
  
  add_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SeaLampContributeItemRsp.add_progress)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnounceData::kConfigIdFieldNumber;
const int AnnounceData::kBeginTimeFieldNumber;
const int AnnounceData::kEndTimeFieldNumber;
const int AnnounceData::kCenterSystemTextFieldNumber;
const int AnnounceData::kCountDownTextFieldNumber;
const int AnnounceData::kDungeonConfirmTextFieldNumber;
const int AnnounceData::kCenterSystemFrequencyFieldNumber;
const int AnnounceData::kCountDownFrequencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnnounceData::AnnounceData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AnnounceData)
}
AnnounceData::AnnounceData(const AnnounceData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  center_system_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.center_system_text().size() > 0) {
    center_system_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.center_system_text_);
  }
  count_down_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.count_down_text().size() > 0) {
    count_down_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.count_down_text_);
  }
  dungeon_confirm_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dungeon_confirm_text().size() > 0) {
    dungeon_confirm_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dungeon_confirm_text_);
  }
  ::memcpy(&config_id_, &from.config_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_down_frequency_) -
    reinterpret_cast<char*>(&config_id_)) + sizeof(count_down_frequency_));
  // @@protoc_insertion_point(copy_constructor:proto.AnnounceData)
}

void AnnounceData::SharedCtor() {
  center_system_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_down_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dungeon_confirm_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_down_frequency_) -
      reinterpret_cast<char*>(&config_id_)) + sizeof(count_down_frequency_));
  _cached_size_ = 0;
}

AnnounceData::~AnnounceData() {
  // @@protoc_insertion_point(destructor:proto.AnnounceData)
  SharedDtor();
}

void AnnounceData::SharedDtor() {
  center_system_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_down_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dungeon_confirm_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AnnounceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnnounceData::descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnnounceData& AnnounceData::default_instance() {
  protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnnounceData* AnnounceData::New(::google::protobuf::Arena* arena) const {
  AnnounceData* n = new AnnounceData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnnounceData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AnnounceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  center_system_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_down_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dungeon_confirm_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_down_frequency_) -
      reinterpret_cast<char*>(&config_id_)) + sizeof(count_down_frequency_));
  _internal_metadata_.Clear();
}

bool AnnounceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AnnounceData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 config_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 begin_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string center_system_text = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_center_system_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->center_system_text().data(), static_cast<int>(this->center_system_text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.AnnounceData.center_system_text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string count_down_text = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_count_down_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->count_down_text().data(), static_cast<int>(this->count_down_text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.AnnounceData.count_down_text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dungeon_confirm_text = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dungeon_confirm_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dungeon_confirm_text().data(), static_cast<int>(this->dungeon_confirm_text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.AnnounceData.dungeon_confirm_text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 center_system_frequency = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &center_system_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 count_down_frequency = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_down_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AnnounceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AnnounceData)
  return false;
#undef DO_
}

void AnnounceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AnnounceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 config_id = 1;
  if (this->config_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->config_id(), output);
  }

  // uint32 begin_time = 2;
  if (this->begin_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->begin_time(), output);
  }

  // uint32 end_time = 3;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->end_time(), output);
  }

  // string center_system_text = 4;
  if (this->center_system_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->center_system_text().data(), static_cast<int>(this->center_system_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AnnounceData.center_system_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->center_system_text(), output);
  }

  // string count_down_text = 5;
  if (this->count_down_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->count_down_text().data(), static_cast<int>(this->count_down_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AnnounceData.count_down_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->count_down_text(), output);
  }

  // string dungeon_confirm_text = 6;
  if (this->dungeon_confirm_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dungeon_confirm_text().data(), static_cast<int>(this->dungeon_confirm_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AnnounceData.dungeon_confirm_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->dungeon_confirm_text(), output);
  }

  // uint32 center_system_frequency = 7;
  if (this->center_system_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->center_system_frequency(), output);
  }

  // uint32 count_down_frequency = 8;
  if (this->count_down_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->count_down_frequency(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AnnounceData)
}

::google::protobuf::uint8* AnnounceData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AnnounceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 config_id = 1;
  if (this->config_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->config_id(), target);
  }

  // uint32 begin_time = 2;
  if (this->begin_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->begin_time(), target);
  }

  // uint32 end_time = 3;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->end_time(), target);
  }

  // string center_system_text = 4;
  if (this->center_system_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->center_system_text().data(), static_cast<int>(this->center_system_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AnnounceData.center_system_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->center_system_text(), target);
  }

  // string count_down_text = 5;
  if (this->count_down_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->count_down_text().data(), static_cast<int>(this->count_down_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AnnounceData.count_down_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->count_down_text(), target);
  }

  // string dungeon_confirm_text = 6;
  if (this->dungeon_confirm_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dungeon_confirm_text().data(), static_cast<int>(this->dungeon_confirm_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AnnounceData.dungeon_confirm_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->dungeon_confirm_text(), target);
  }

  // uint32 center_system_frequency = 7;
  if (this->center_system_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->center_system_frequency(), target);
  }

  // uint32 count_down_frequency = 8;
  if (this->count_down_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->count_down_frequency(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AnnounceData)
  return target;
}

size_t AnnounceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AnnounceData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string center_system_text = 4;
  if (this->center_system_text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->center_system_text());
  }

  // string count_down_text = 5;
  if (this->count_down_text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->count_down_text());
  }

  // string dungeon_confirm_text = 6;
  if (this->dungeon_confirm_text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dungeon_confirm_text());
  }

  // uint32 config_id = 1;
  if (this->config_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->config_id());
  }

  // uint32 begin_time = 2;
  if (this->begin_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->begin_time());
  }

  // uint32 end_time = 3;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  // uint32 center_system_frequency = 7;
  if (this->center_system_frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->center_system_frequency());
  }

  // uint32 count_down_frequency = 8;
  if (this->count_down_frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count_down_frequency());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnounceData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AnnounceData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnnounceData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnnounceData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AnnounceData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AnnounceData)
    MergeFrom(*source);
  }
}

void AnnounceData::MergeFrom(const AnnounceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AnnounceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.center_system_text().size() > 0) {

    center_system_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.center_system_text_);
  }
  if (from.count_down_text().size() > 0) {

    count_down_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.count_down_text_);
  }
  if (from.dungeon_confirm_text().size() > 0) {

    dungeon_confirm_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dungeon_confirm_text_);
  }
  if (from.config_id() != 0) {
    set_config_id(from.config_id());
  }
  if (from.begin_time() != 0) {
    set_begin_time(from.begin_time());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
  if (from.center_system_frequency() != 0) {
    set_center_system_frequency(from.center_system_frequency());
  }
  if (from.count_down_frequency() != 0) {
    set_count_down_frequency(from.count_down_frequency());
  }
}

void AnnounceData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AnnounceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnounceData::CopyFrom(const AnnounceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AnnounceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnounceData::IsInitialized() const {
  return true;
}

void AnnounceData::Swap(AnnounceData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnnounceData::InternalSwap(AnnounceData* other) {
  using std::swap;
  center_system_text_.Swap(&other->center_system_text_);
  count_down_text_.Swap(&other->count_down_text_);
  dungeon_confirm_text_.Swap(&other->dungeon_confirm_text_);
  swap(config_id_, other->config_id_);
  swap(begin_time_, other->begin_time_);
  swap(end_time_, other->end_time_);
  swap(center_system_frequency_, other->center_system_frequency_);
  swap(count_down_frequency_, other->count_down_frequency_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnnounceData::GetMetadata() const {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnnounceData

// uint32 config_id = 1;
void AnnounceData::clear_config_id() {
  config_id_ = 0u;
}
::google::protobuf::uint32 AnnounceData::config_id() const {
  // @@protoc_insertion_point(field_get:proto.AnnounceData.config_id)
  return config_id_;
}
void AnnounceData::set_config_id(::google::protobuf::uint32 value) {
  
  config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AnnounceData.config_id)
}

// uint32 begin_time = 2;
void AnnounceData::clear_begin_time() {
  begin_time_ = 0u;
}
::google::protobuf::uint32 AnnounceData::begin_time() const {
  // @@protoc_insertion_point(field_get:proto.AnnounceData.begin_time)
  return begin_time_;
}
void AnnounceData::set_begin_time(::google::protobuf::uint32 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:proto.AnnounceData.begin_time)
}

// uint32 end_time = 3;
void AnnounceData::clear_end_time() {
  end_time_ = 0u;
}
::google::protobuf::uint32 AnnounceData::end_time() const {
  // @@protoc_insertion_point(field_get:proto.AnnounceData.end_time)
  return end_time_;
}
void AnnounceData::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.AnnounceData.end_time)
}

// string center_system_text = 4;
void AnnounceData::clear_center_system_text() {
  center_system_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AnnounceData::center_system_text() const {
  // @@protoc_insertion_point(field_get:proto.AnnounceData.center_system_text)
  return center_system_text_.GetNoArena();
}
void AnnounceData::set_center_system_text(const ::std::string& value) {
  
  center_system_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AnnounceData.center_system_text)
}
#if LANG_CXX11
void AnnounceData::set_center_system_text(::std::string&& value) {
  
  center_system_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AnnounceData.center_system_text)
}
#endif
void AnnounceData::set_center_system_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  center_system_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AnnounceData.center_system_text)
}
void AnnounceData::set_center_system_text(const char* value, size_t size) {
  
  center_system_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AnnounceData.center_system_text)
}
::std::string* AnnounceData::mutable_center_system_text() {
  
  // @@protoc_insertion_point(field_mutable:proto.AnnounceData.center_system_text)
  return center_system_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AnnounceData::release_center_system_text() {
  // @@protoc_insertion_point(field_release:proto.AnnounceData.center_system_text)
  
  return center_system_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnnounceData::set_allocated_center_system_text(::std::string* center_system_text) {
  if (center_system_text != NULL) {
    
  } else {
    
  }
  center_system_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), center_system_text);
  // @@protoc_insertion_point(field_set_allocated:proto.AnnounceData.center_system_text)
}

// string count_down_text = 5;
void AnnounceData::clear_count_down_text() {
  count_down_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AnnounceData::count_down_text() const {
  // @@protoc_insertion_point(field_get:proto.AnnounceData.count_down_text)
  return count_down_text_.GetNoArena();
}
void AnnounceData::set_count_down_text(const ::std::string& value) {
  
  count_down_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AnnounceData.count_down_text)
}
#if LANG_CXX11
void AnnounceData::set_count_down_text(::std::string&& value) {
  
  count_down_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AnnounceData.count_down_text)
}
#endif
void AnnounceData::set_count_down_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  count_down_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AnnounceData.count_down_text)
}
void AnnounceData::set_count_down_text(const char* value, size_t size) {
  
  count_down_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AnnounceData.count_down_text)
}
::std::string* AnnounceData::mutable_count_down_text() {
  
  // @@protoc_insertion_point(field_mutable:proto.AnnounceData.count_down_text)
  return count_down_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AnnounceData::release_count_down_text() {
  // @@protoc_insertion_point(field_release:proto.AnnounceData.count_down_text)
  
  return count_down_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnnounceData::set_allocated_count_down_text(::std::string* count_down_text) {
  if (count_down_text != NULL) {
    
  } else {
    
  }
  count_down_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), count_down_text);
  // @@protoc_insertion_point(field_set_allocated:proto.AnnounceData.count_down_text)
}

// string dungeon_confirm_text = 6;
void AnnounceData::clear_dungeon_confirm_text() {
  dungeon_confirm_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AnnounceData::dungeon_confirm_text() const {
  // @@protoc_insertion_point(field_get:proto.AnnounceData.dungeon_confirm_text)
  return dungeon_confirm_text_.GetNoArena();
}
void AnnounceData::set_dungeon_confirm_text(const ::std::string& value) {
  
  dungeon_confirm_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AnnounceData.dungeon_confirm_text)
}
#if LANG_CXX11
void AnnounceData::set_dungeon_confirm_text(::std::string&& value) {
  
  dungeon_confirm_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AnnounceData.dungeon_confirm_text)
}
#endif
void AnnounceData::set_dungeon_confirm_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dungeon_confirm_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AnnounceData.dungeon_confirm_text)
}
void AnnounceData::set_dungeon_confirm_text(const char* value, size_t size) {
  
  dungeon_confirm_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AnnounceData.dungeon_confirm_text)
}
::std::string* AnnounceData::mutable_dungeon_confirm_text() {
  
  // @@protoc_insertion_point(field_mutable:proto.AnnounceData.dungeon_confirm_text)
  return dungeon_confirm_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AnnounceData::release_dungeon_confirm_text() {
  // @@protoc_insertion_point(field_release:proto.AnnounceData.dungeon_confirm_text)
  
  return dungeon_confirm_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnnounceData::set_allocated_dungeon_confirm_text(::std::string* dungeon_confirm_text) {
  if (dungeon_confirm_text != NULL) {
    
  } else {
    
  }
  dungeon_confirm_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dungeon_confirm_text);
  // @@protoc_insertion_point(field_set_allocated:proto.AnnounceData.dungeon_confirm_text)
}

// uint32 center_system_frequency = 7;
void AnnounceData::clear_center_system_frequency() {
  center_system_frequency_ = 0u;
}
::google::protobuf::uint32 AnnounceData::center_system_frequency() const {
  // @@protoc_insertion_point(field_get:proto.AnnounceData.center_system_frequency)
  return center_system_frequency_;
}
void AnnounceData::set_center_system_frequency(::google::protobuf::uint32 value) {
  
  center_system_frequency_ = value;
  // @@protoc_insertion_point(field_set:proto.AnnounceData.center_system_frequency)
}

// uint32 count_down_frequency = 8;
void AnnounceData::clear_count_down_frequency() {
  count_down_frequency_ = 0u;
}
::google::protobuf::uint32 AnnounceData::count_down_frequency() const {
  // @@protoc_insertion_point(field_get:proto.AnnounceData.count_down_frequency)
  return count_down_frequency_;
}
void AnnounceData::set_count_down_frequency(::google::protobuf::uint32 value) {
  
  count_down_frequency_ = value;
  // @@protoc_insertion_point(field_set:proto.AnnounceData.count_down_frequency)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoadActivityTerrainNotify::kActivityIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoadActivityTerrainNotify::LoadActivityTerrainNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.LoadActivityTerrainNotify)
}
LoadActivityTerrainNotify::LoadActivityTerrainNotify(const LoadActivityTerrainNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  activity_id_ = from.activity_id_;
  // @@protoc_insertion_point(copy_constructor:proto.LoadActivityTerrainNotify)
}

void LoadActivityTerrainNotify::SharedCtor() {
  activity_id_ = 0u;
  _cached_size_ = 0;
}

LoadActivityTerrainNotify::~LoadActivityTerrainNotify() {
  // @@protoc_insertion_point(destructor:proto.LoadActivityTerrainNotify)
  SharedDtor();
}

void LoadActivityTerrainNotify::SharedDtor() {
}

void LoadActivityTerrainNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadActivityTerrainNotify::descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoadActivityTerrainNotify& LoadActivityTerrainNotify::default_instance() {
  protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoadActivityTerrainNotify* LoadActivityTerrainNotify::New(::google::protobuf::Arena* arena) const {
  LoadActivityTerrainNotify* n = new LoadActivityTerrainNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoadActivityTerrainNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.LoadActivityTerrainNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activity_id_ = 0u;
  _internal_metadata_.Clear();
}

bool LoadActivityTerrainNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.LoadActivityTerrainNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 activity_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.LoadActivityTerrainNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.LoadActivityTerrainNotify)
  return false;
#undef DO_
}

void LoadActivityTerrainNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.LoadActivityTerrainNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 activity_id = 1;
  if (this->activity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.LoadActivityTerrainNotify)
}

::google::protobuf::uint8* LoadActivityTerrainNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.LoadActivityTerrainNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 activity_id = 1;
  if (this->activity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.LoadActivityTerrainNotify)
  return target;
}

size_t LoadActivityTerrainNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.LoadActivityTerrainNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 activity_id = 1;
  if (this->activity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->activity_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadActivityTerrainNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.LoadActivityTerrainNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadActivityTerrainNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoadActivityTerrainNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.LoadActivityTerrainNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.LoadActivityTerrainNotify)
    MergeFrom(*source);
  }
}

void LoadActivityTerrainNotify::MergeFrom(const LoadActivityTerrainNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.LoadActivityTerrainNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.activity_id() != 0) {
    set_activity_id(from.activity_id());
  }
}

void LoadActivityTerrainNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.LoadActivityTerrainNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadActivityTerrainNotify::CopyFrom(const LoadActivityTerrainNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.LoadActivityTerrainNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadActivityTerrainNotify::IsInitialized() const {
  return true;
}

void LoadActivityTerrainNotify::Swap(LoadActivityTerrainNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoadActivityTerrainNotify::InternalSwap(LoadActivityTerrainNotify* other) {
  using std::swap;
  swap(activity_id_, other->activity_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoadActivityTerrainNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoadActivityTerrainNotify

// uint32 activity_id = 1;
void LoadActivityTerrainNotify::clear_activity_id() {
  activity_id_ = 0u;
}
::google::protobuf::uint32 LoadActivityTerrainNotify::activity_id() const {
  // @@protoc_insertion_point(field_get:proto.LoadActivityTerrainNotify.activity_id)
  return activity_id_;
}
void LoadActivityTerrainNotify::set_activity_id(::google::protobuf::uint32 value) {
  
  activity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.LoadActivityTerrainNotify.activity_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerAnnounceNotify::kAnnounceDataListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerAnnounceNotify::ServerAnnounceNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerAnnounceNotify)
}
ServerAnnounceNotify::ServerAnnounceNotify(const ServerAnnounceNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      announce_data_list_(from.announce_data_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.ServerAnnounceNotify)
}

void ServerAnnounceNotify::SharedCtor() {
  _cached_size_ = 0;
}

ServerAnnounceNotify::~ServerAnnounceNotify() {
  // @@protoc_insertion_point(destructor:proto.ServerAnnounceNotify)
  SharedDtor();
}

void ServerAnnounceNotify::SharedDtor() {
}

void ServerAnnounceNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerAnnounceNotify::descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerAnnounceNotify& ServerAnnounceNotify::default_instance() {
  protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerAnnounceNotify* ServerAnnounceNotify::New(::google::protobuf::Arena* arena) const {
  ServerAnnounceNotify* n = new ServerAnnounceNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerAnnounceNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerAnnounceNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  announce_data_list_.Clear();
  _internal_metadata_.Clear();
}

bool ServerAnnounceNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerAnnounceNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.AnnounceData announce_data_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_announce_data_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerAnnounceNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerAnnounceNotify)
  return false;
#undef DO_
}

void ServerAnnounceNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerAnnounceNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.AnnounceData announce_data_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->announce_data_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->announce_data_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerAnnounceNotify)
}

::google::protobuf::uint8* ServerAnnounceNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerAnnounceNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.AnnounceData announce_data_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->announce_data_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->announce_data_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerAnnounceNotify)
  return target;
}

size_t ServerAnnounceNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerAnnounceNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.AnnounceData announce_data_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->announce_data_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->announce_data_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerAnnounceNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerAnnounceNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerAnnounceNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerAnnounceNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerAnnounceNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerAnnounceNotify)
    MergeFrom(*source);
  }
}

void ServerAnnounceNotify::MergeFrom(const ServerAnnounceNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerAnnounceNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  announce_data_list_.MergeFrom(from.announce_data_list_);
}

void ServerAnnounceNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerAnnounceNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerAnnounceNotify::CopyFrom(const ServerAnnounceNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerAnnounceNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerAnnounceNotify::IsInitialized() const {
  return true;
}

void ServerAnnounceNotify::Swap(ServerAnnounceNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerAnnounceNotify::InternalSwap(ServerAnnounceNotify* other) {
  using std::swap;
  announce_data_list_.InternalSwap(&other->announce_data_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerAnnounceNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerAnnounceNotify

// repeated .proto.AnnounceData announce_data_list = 1;
int ServerAnnounceNotify::announce_data_list_size() const {
  return announce_data_list_.size();
}
void ServerAnnounceNotify::clear_announce_data_list() {
  announce_data_list_.Clear();
}
const ::proto::AnnounceData& ServerAnnounceNotify::announce_data_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ServerAnnounceNotify.announce_data_list)
  return announce_data_list_.Get(index);
}
::proto::AnnounceData* ServerAnnounceNotify::mutable_announce_data_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ServerAnnounceNotify.announce_data_list)
  return announce_data_list_.Mutable(index);
}
::proto::AnnounceData* ServerAnnounceNotify::add_announce_data_list() {
  // @@protoc_insertion_point(field_add:proto.ServerAnnounceNotify.announce_data_list)
  return announce_data_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::AnnounceData >*
ServerAnnounceNotify::mutable_announce_data_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ServerAnnounceNotify.announce_data_list)
  return &announce_data_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::AnnounceData >&
ServerAnnounceNotify::announce_data_list() const {
  // @@protoc_insertion_point(field_list:proto.ServerAnnounceNotify.announce_data_list)
  return announce_data_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerAnnounceRevokeNotify::kConfigIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerAnnounceRevokeNotify::ServerAnnounceRevokeNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerAnnounceRevokeNotify)
}
ServerAnnounceRevokeNotify::ServerAnnounceRevokeNotify(const ServerAnnounceRevokeNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      config_id_list_(from.config_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.ServerAnnounceRevokeNotify)
}

void ServerAnnounceRevokeNotify::SharedCtor() {
  _cached_size_ = 0;
}

ServerAnnounceRevokeNotify::~ServerAnnounceRevokeNotify() {
  // @@protoc_insertion_point(destructor:proto.ServerAnnounceRevokeNotify)
  SharedDtor();
}

void ServerAnnounceRevokeNotify::SharedDtor() {
}

void ServerAnnounceRevokeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerAnnounceRevokeNotify::descriptor() {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerAnnounceRevokeNotify& ServerAnnounceRevokeNotify::default_instance() {
  protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerAnnounceRevokeNotify* ServerAnnounceRevokeNotify::New(::google::protobuf::Arena* arena) const {
  ServerAnnounceRevokeNotify* n = new ServerAnnounceRevokeNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerAnnounceRevokeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerAnnounceRevokeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_id_list_.Clear();
  _internal_metadata_.Clear();
}

bool ServerAnnounceRevokeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerAnnounceRevokeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 config_id_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_config_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_config_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerAnnounceRevokeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerAnnounceRevokeNotify)
  return false;
#undef DO_
}

void ServerAnnounceRevokeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerAnnounceRevokeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 config_id_list = 1;
  if (this->config_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _config_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->config_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->config_id_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ServerAnnounceRevokeNotify)
}

::google::protobuf::uint8* ServerAnnounceRevokeNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerAnnounceRevokeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 config_id_list = 1;
  if (this->config_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _config_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->config_id_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerAnnounceRevokeNotify)
  return target;
}

size_t ServerAnnounceRevokeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerAnnounceRevokeNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 config_id_list = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->config_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _config_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerAnnounceRevokeNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ServerAnnounceRevokeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerAnnounceRevokeNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerAnnounceRevokeNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ServerAnnounceRevokeNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ServerAnnounceRevokeNotify)
    MergeFrom(*source);
  }
}

void ServerAnnounceRevokeNotify::MergeFrom(const ServerAnnounceRevokeNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerAnnounceRevokeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_id_list_.MergeFrom(from.config_id_list_);
}

void ServerAnnounceRevokeNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ServerAnnounceRevokeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerAnnounceRevokeNotify::CopyFrom(const ServerAnnounceRevokeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerAnnounceRevokeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerAnnounceRevokeNotify::IsInitialized() const {
  return true;
}

void ServerAnnounceRevokeNotify::Swap(ServerAnnounceRevokeNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerAnnounceRevokeNotify::InternalSwap(ServerAnnounceRevokeNotify* other) {
  using std::swap;
  config_id_list_.InternalSwap(&other->config_id_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerAnnounceRevokeNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5factivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5factivity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerAnnounceRevokeNotify

// repeated uint32 config_id_list = 1;
int ServerAnnounceRevokeNotify::config_id_list_size() const {
  return config_id_list_.size();
}
void ServerAnnounceRevokeNotify::clear_config_id_list() {
  config_id_list_.Clear();
}
::google::protobuf::uint32 ServerAnnounceRevokeNotify::config_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ServerAnnounceRevokeNotify.config_id_list)
  return config_id_list_.Get(index);
}
void ServerAnnounceRevokeNotify::set_config_id_list(int index, ::google::protobuf::uint32 value) {
  config_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ServerAnnounceRevokeNotify.config_id_list)
}
void ServerAnnounceRevokeNotify::add_config_id_list(::google::protobuf::uint32 value) {
  config_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.ServerAnnounceRevokeNotify.config_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ServerAnnounceRevokeNotify::config_id_list() const {
  // @@protoc_insertion_point(field_list:proto.ServerAnnounceRevokeNotify.config_id_list)
  return config_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ServerAnnounceRevokeNotify::mutable_config_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ServerAnnounceRevokeNotify.config_id_list)
  return &config_id_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
