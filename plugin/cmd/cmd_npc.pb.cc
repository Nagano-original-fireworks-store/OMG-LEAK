// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_npc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cmd/cmd_npc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
class NpcTalkReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NpcTalkReq>
     _instance;
} _NpcTalkReq_default_instance_;
class NpcTalkRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NpcTalkRsp>
     _instance;
} _NpcTalkRsp_default_instance_;
class GetSceneNpcPositionReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetSceneNpcPositionReq>
     _instance;
} _GetSceneNpcPositionReq_default_instance_;
class GetSceneNpcPositionRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetSceneNpcPositionRsp>
     _instance;
} _GetSceneNpcPositionRsp_default_instance_;

namespace protobuf_cmd_2fcmd_5fnpc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcTalkReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcTalkReq, npc_entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcTalkReq, talk_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcTalkReq, talk_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcTalkRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcTalkRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcTalkRsp, npc_entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcTalkRsp, talk_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcTalkRsp, cur_talk_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSceneNpcPositionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSceneNpcPositionReq, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSceneNpcPositionReq, npc_id_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSceneNpcPositionRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSceneNpcPositionRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSceneNpcPositionRsp, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSceneNpcPositionRsp, npc_info_list_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(NpcTalkReq)},
  { 8, -1, sizeof(NpcTalkRsp)},
  { 17, -1, sizeof(GetSceneNpcPositionReq)},
  { 24, -1, sizeof(GetSceneNpcPositionRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_NpcTalkReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NpcTalkRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetSceneNpcPositionReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetSceneNpcPositionRsp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cmd/cmd_npc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::protobuf_define_2eproto::InitDefaults();
  _NpcTalkReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NpcTalkReq_default_instance_);_NpcTalkRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NpcTalkRsp_default_instance_);_GetSceneNpcPositionReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetSceneNpcPositionReq_default_instance_);_GetSceneNpcPositionRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetSceneNpcPositionRsp_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021cmd/cmd_npc.proto\022\005proto\032\014define.proto"
      "\"\277\001\n\nNpcTalkReq\022\025\n\rnpc_entity_id\030\001 \001(\r\022%"
      "\n\ttalk_type\030\002 \001(\0162\022.proto.NpcTalkType\022\017\n"
      "\007talk_id\030\003 \001(\r\"b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD"
      "_ID\020\365\003\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_R"
      "ELIABLE\020\001\022\023\n\017IS_ALLOW_CLIENT\020\001\032\002\020\001\"\277\001\n\nN"
      "pcTalkRsp\022\017\n\007retcode\030\001 \001(\005\022\025\n\rnpc_entity"
      "_id\030\002 \001(\r\022%\n\ttalk_type\030\003 \001(\0162\022.proto.Npc"
      "TalkType\022\023\n\013cur_talk_id\030\004 \001(\r\"M\n\005CmdId\022\010"
      "\n\004NONE\020\000\022\013\n\006CMD_ID\020\366\003\022\023\n\017ENET_CHANNEL_ID"
      "\020\000\022\024\n\020ENET_IS_RELIABLE\020\001\032\002\020\001\"\243\001\n\026GetScen"
      "eNpcPositionReq\022\020\n\010scene_id\030\001 \001(\r\022\023\n\013npc"
      "_id_list\030\002 \003(\r\"b\n\005CmdId\022\010\n\004NONE\020\000\022\013\n\006CMD"
      "_ID\020\370\003\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020ENET_IS_R"
      "ELIABLE\020\001\022\023\n\017IS_ALLOW_CLIENT\020\001\032\002\020\001\"\271\001\n\026G"
      "etSceneNpcPositionRsp\022\017\n\007retcode\030\001 \001(\005\022\020"
      "\n\010scene_id\030\002 \001(\r\022-\n\rnpc_info_list\030\003 \003(\0132"
      "\026.proto.NpcPositionInfo\"M\n\005CmdId\022\010\n\004NONE"
      "\020\000\022\013\n\006CMD_ID\020\371\003\022\023\n\017ENET_CHANNEL_ID\020\000\022\024\n\020"
      "ENET_IS_RELIABLE\020\001\032\002\020\001*]\n\013NpcTalkType\022\r\n"
      "\tTALK_NONE\020\000\022\016\n\nTALK_START\020\001\022\017\n\013TALK_CHO"
      "OSE\020\002\022\r\n\tTALK_NEXT\020\003\022\017\n\013TALK_FINISH\020\004b\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 885);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cmd/cmd_npc.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_define_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cmd_2fcmd_5fnpc_2eproto

const ::google::protobuf::EnumDescriptor* NpcTalkReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fnpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fnpc_2eproto::file_level_enum_descriptors[0];
}
bool NpcTalkReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 501:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NpcTalkReq_CmdId NpcTalkReq::NONE;
const NpcTalkReq_CmdId NpcTalkReq::CMD_ID;
const NpcTalkReq_CmdId NpcTalkReq::ENET_CHANNEL_ID;
const NpcTalkReq_CmdId NpcTalkReq::ENET_IS_RELIABLE;
const NpcTalkReq_CmdId NpcTalkReq::IS_ALLOW_CLIENT;
const NpcTalkReq_CmdId NpcTalkReq::CmdId_MIN;
const NpcTalkReq_CmdId NpcTalkReq::CmdId_MAX;
const int NpcTalkReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NpcTalkRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fnpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fnpc_2eproto::file_level_enum_descriptors[1];
}
bool NpcTalkRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 502:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NpcTalkRsp_CmdId NpcTalkRsp::NONE;
const NpcTalkRsp_CmdId NpcTalkRsp::CMD_ID;
const NpcTalkRsp_CmdId NpcTalkRsp::ENET_CHANNEL_ID;
const NpcTalkRsp_CmdId NpcTalkRsp::ENET_IS_RELIABLE;
const NpcTalkRsp_CmdId NpcTalkRsp::CmdId_MIN;
const NpcTalkRsp_CmdId NpcTalkRsp::CmdId_MAX;
const int NpcTalkRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GetSceneNpcPositionReq_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fnpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fnpc_2eproto::file_level_enum_descriptors[2];
}
bool GetSceneNpcPositionReq_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 504:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GetSceneNpcPositionReq_CmdId GetSceneNpcPositionReq::NONE;
const GetSceneNpcPositionReq_CmdId GetSceneNpcPositionReq::CMD_ID;
const GetSceneNpcPositionReq_CmdId GetSceneNpcPositionReq::ENET_CHANNEL_ID;
const GetSceneNpcPositionReq_CmdId GetSceneNpcPositionReq::ENET_IS_RELIABLE;
const GetSceneNpcPositionReq_CmdId GetSceneNpcPositionReq::IS_ALLOW_CLIENT;
const GetSceneNpcPositionReq_CmdId GetSceneNpcPositionReq::CmdId_MIN;
const GetSceneNpcPositionReq_CmdId GetSceneNpcPositionReq::CmdId_MAX;
const int GetSceneNpcPositionReq::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GetSceneNpcPositionRsp_CmdId_descriptor() {
  protobuf_cmd_2fcmd_5fnpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fnpc_2eproto::file_level_enum_descriptors[3];
}
bool GetSceneNpcPositionRsp_CmdId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 505:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GetSceneNpcPositionRsp_CmdId GetSceneNpcPositionRsp::NONE;
const GetSceneNpcPositionRsp_CmdId GetSceneNpcPositionRsp::CMD_ID;
const GetSceneNpcPositionRsp_CmdId GetSceneNpcPositionRsp::ENET_CHANNEL_ID;
const GetSceneNpcPositionRsp_CmdId GetSceneNpcPositionRsp::ENET_IS_RELIABLE;
const GetSceneNpcPositionRsp_CmdId GetSceneNpcPositionRsp::CmdId_MIN;
const GetSceneNpcPositionRsp_CmdId GetSceneNpcPositionRsp::CmdId_MAX;
const int GetSceneNpcPositionRsp::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NpcTalkType_descriptor() {
  protobuf_cmd_2fcmd_5fnpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fnpc_2eproto::file_level_enum_descriptors[4];
}
bool NpcTalkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NpcTalkReq::kNpcEntityIdFieldNumber;
const int NpcTalkReq::kTalkTypeFieldNumber;
const int NpcTalkReq::kTalkIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NpcTalkReq::NpcTalkReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fnpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.NpcTalkReq)
}
NpcTalkReq::NpcTalkReq(const NpcTalkReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&npc_entity_id_, &from.npc_entity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&talk_id_) -
    reinterpret_cast<char*>(&npc_entity_id_)) + sizeof(talk_id_));
  // @@protoc_insertion_point(copy_constructor:proto.NpcTalkReq)
}

void NpcTalkReq::SharedCtor() {
  ::memset(&npc_entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&talk_id_) -
      reinterpret_cast<char*>(&npc_entity_id_)) + sizeof(talk_id_));
  _cached_size_ = 0;
}

NpcTalkReq::~NpcTalkReq() {
  // @@protoc_insertion_point(destructor:proto.NpcTalkReq)
  SharedDtor();
}

void NpcTalkReq::SharedDtor() {
}

void NpcTalkReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcTalkReq::descriptor() {
  protobuf_cmd_2fcmd_5fnpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fnpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NpcTalkReq& NpcTalkReq::default_instance() {
  protobuf_cmd_2fcmd_5fnpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

NpcTalkReq* NpcTalkReq::New(::google::protobuf::Arena* arena) const {
  NpcTalkReq* n = new NpcTalkReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NpcTalkReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.NpcTalkReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&npc_entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&talk_id_) -
      reinterpret_cast<char*>(&npc_entity_id_)) + sizeof(talk_id_));
  _internal_metadata_.Clear();
}

bool NpcTalkReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.NpcTalkReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 npc_entity_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.NpcTalkType talk_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_talk_type(static_cast< ::proto::NpcTalkType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 talk_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &talk_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.NpcTalkReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.NpcTalkReq)
  return false;
#undef DO_
}

void NpcTalkReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.NpcTalkReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 npc_entity_id = 1;
  if (this->npc_entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npc_entity_id(), output);
  }

  // .proto.NpcTalkType talk_type = 2;
  if (this->talk_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->talk_type(), output);
  }

  // uint32 talk_id = 3;
  if (this->talk_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->talk_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.NpcTalkReq)
}

::google::protobuf::uint8* NpcTalkReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.NpcTalkReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 npc_entity_id = 1;
  if (this->npc_entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->npc_entity_id(), target);
  }

  // .proto.NpcTalkType talk_type = 2;
  if (this->talk_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->talk_type(), target);
  }

  // uint32 talk_id = 3;
  if (this->talk_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->talk_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.NpcTalkReq)
  return target;
}

size_t NpcTalkReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.NpcTalkReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 npc_entity_id = 1;
  if (this->npc_entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->npc_entity_id());
  }

  // .proto.NpcTalkType talk_type = 2;
  if (this->talk_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->talk_type());
  }

  // uint32 talk_id = 3;
  if (this->talk_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->talk_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcTalkReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.NpcTalkReq)
  GOOGLE_DCHECK_NE(&from, this);
  const NpcTalkReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NpcTalkReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.NpcTalkReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.NpcTalkReq)
    MergeFrom(*source);
  }
}

void NpcTalkReq::MergeFrom(const NpcTalkReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.NpcTalkReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.npc_entity_id() != 0) {
    set_npc_entity_id(from.npc_entity_id());
  }
  if (from.talk_type() != 0) {
    set_talk_type(from.talk_type());
  }
  if (from.talk_id() != 0) {
    set_talk_id(from.talk_id());
  }
}

void NpcTalkReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.NpcTalkReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcTalkReq::CopyFrom(const NpcTalkReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.NpcTalkReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcTalkReq::IsInitialized() const {
  return true;
}

void NpcTalkReq::Swap(NpcTalkReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NpcTalkReq::InternalSwap(NpcTalkReq* other) {
  using std::swap;
  swap(npc_entity_id_, other->npc_entity_id_);
  swap(talk_type_, other->talk_type_);
  swap(talk_id_, other->talk_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NpcTalkReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fnpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fnpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NpcTalkReq

// uint32 npc_entity_id = 1;
void NpcTalkReq::clear_npc_entity_id() {
  npc_entity_id_ = 0u;
}
::google::protobuf::uint32 NpcTalkReq::npc_entity_id() const {
  // @@protoc_insertion_point(field_get:proto.NpcTalkReq.npc_entity_id)
  return npc_entity_id_;
}
void NpcTalkReq::set_npc_entity_id(::google::protobuf::uint32 value) {
  
  npc_entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.NpcTalkReq.npc_entity_id)
}

// .proto.NpcTalkType talk_type = 2;
void NpcTalkReq::clear_talk_type() {
  talk_type_ = 0;
}
::proto::NpcTalkType NpcTalkReq::talk_type() const {
  // @@protoc_insertion_point(field_get:proto.NpcTalkReq.talk_type)
  return static_cast< ::proto::NpcTalkType >(talk_type_);
}
void NpcTalkReq::set_talk_type(::proto::NpcTalkType value) {
  
  talk_type_ = value;
  // @@protoc_insertion_point(field_set:proto.NpcTalkReq.talk_type)
}

// uint32 talk_id = 3;
void NpcTalkReq::clear_talk_id() {
  talk_id_ = 0u;
}
::google::protobuf::uint32 NpcTalkReq::talk_id() const {
  // @@protoc_insertion_point(field_get:proto.NpcTalkReq.talk_id)
  return talk_id_;
}
void NpcTalkReq::set_talk_id(::google::protobuf::uint32 value) {
  
  talk_id_ = value;
  // @@protoc_insertion_point(field_set:proto.NpcTalkReq.talk_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NpcTalkRsp::kRetcodeFieldNumber;
const int NpcTalkRsp::kNpcEntityIdFieldNumber;
const int NpcTalkRsp::kTalkTypeFieldNumber;
const int NpcTalkRsp::kCurTalkIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NpcTalkRsp::NpcTalkRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fnpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.NpcTalkRsp)
}
NpcTalkRsp::NpcTalkRsp(const NpcTalkRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_talk_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(cur_talk_id_));
  // @@protoc_insertion_point(copy_constructor:proto.NpcTalkRsp)
}

void NpcTalkRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_talk_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(cur_talk_id_));
  _cached_size_ = 0;
}

NpcTalkRsp::~NpcTalkRsp() {
  // @@protoc_insertion_point(destructor:proto.NpcTalkRsp)
  SharedDtor();
}

void NpcTalkRsp::SharedDtor() {
}

void NpcTalkRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcTalkRsp::descriptor() {
  protobuf_cmd_2fcmd_5fnpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fnpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NpcTalkRsp& NpcTalkRsp::default_instance() {
  protobuf_cmd_2fcmd_5fnpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

NpcTalkRsp* NpcTalkRsp::New(::google::protobuf::Arena* arena) const {
  NpcTalkRsp* n = new NpcTalkRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NpcTalkRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.NpcTalkRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_talk_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(cur_talk_id_));
  _internal_metadata_.Clear();
}

bool NpcTalkRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.NpcTalkRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 npc_entity_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.NpcTalkType talk_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_talk_type(static_cast< ::proto::NpcTalkType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_talk_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_talk_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.NpcTalkRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.NpcTalkRsp)
  return false;
#undef DO_
}

void NpcTalkRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.NpcTalkRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 npc_entity_id = 2;
  if (this->npc_entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->npc_entity_id(), output);
  }

  // .proto.NpcTalkType talk_type = 3;
  if (this->talk_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->talk_type(), output);
  }

  // uint32 cur_talk_id = 4;
  if (this->cur_talk_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cur_talk_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.NpcTalkRsp)
}

::google::protobuf::uint8* NpcTalkRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.NpcTalkRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 npc_entity_id = 2;
  if (this->npc_entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->npc_entity_id(), target);
  }

  // .proto.NpcTalkType talk_type = 3;
  if (this->talk_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->talk_type(), target);
  }

  // uint32 cur_talk_id = 4;
  if (this->cur_talk_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cur_talk_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.NpcTalkRsp)
  return target;
}

size_t NpcTalkRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.NpcTalkRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 npc_entity_id = 2;
  if (this->npc_entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->npc_entity_id());
  }

  // .proto.NpcTalkType talk_type = 3;
  if (this->talk_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->talk_type());
  }

  // uint32 cur_talk_id = 4;
  if (this->cur_talk_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_talk_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcTalkRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.NpcTalkRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const NpcTalkRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NpcTalkRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.NpcTalkRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.NpcTalkRsp)
    MergeFrom(*source);
  }
}

void NpcTalkRsp::MergeFrom(const NpcTalkRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.NpcTalkRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.npc_entity_id() != 0) {
    set_npc_entity_id(from.npc_entity_id());
  }
  if (from.talk_type() != 0) {
    set_talk_type(from.talk_type());
  }
  if (from.cur_talk_id() != 0) {
    set_cur_talk_id(from.cur_talk_id());
  }
}

void NpcTalkRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.NpcTalkRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcTalkRsp::CopyFrom(const NpcTalkRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.NpcTalkRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcTalkRsp::IsInitialized() const {
  return true;
}

void NpcTalkRsp::Swap(NpcTalkRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NpcTalkRsp::InternalSwap(NpcTalkRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(npc_entity_id_, other->npc_entity_id_);
  swap(talk_type_, other->talk_type_);
  swap(cur_talk_id_, other->cur_talk_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NpcTalkRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fnpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fnpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NpcTalkRsp

// int32 retcode = 1;
void NpcTalkRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 NpcTalkRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.NpcTalkRsp.retcode)
  return retcode_;
}
void NpcTalkRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.NpcTalkRsp.retcode)
}

// uint32 npc_entity_id = 2;
void NpcTalkRsp::clear_npc_entity_id() {
  npc_entity_id_ = 0u;
}
::google::protobuf::uint32 NpcTalkRsp::npc_entity_id() const {
  // @@protoc_insertion_point(field_get:proto.NpcTalkRsp.npc_entity_id)
  return npc_entity_id_;
}
void NpcTalkRsp::set_npc_entity_id(::google::protobuf::uint32 value) {
  
  npc_entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.NpcTalkRsp.npc_entity_id)
}

// .proto.NpcTalkType talk_type = 3;
void NpcTalkRsp::clear_talk_type() {
  talk_type_ = 0;
}
::proto::NpcTalkType NpcTalkRsp::talk_type() const {
  // @@protoc_insertion_point(field_get:proto.NpcTalkRsp.talk_type)
  return static_cast< ::proto::NpcTalkType >(talk_type_);
}
void NpcTalkRsp::set_talk_type(::proto::NpcTalkType value) {
  
  talk_type_ = value;
  // @@protoc_insertion_point(field_set:proto.NpcTalkRsp.talk_type)
}

// uint32 cur_talk_id = 4;
void NpcTalkRsp::clear_cur_talk_id() {
  cur_talk_id_ = 0u;
}
::google::protobuf::uint32 NpcTalkRsp::cur_talk_id() const {
  // @@protoc_insertion_point(field_get:proto.NpcTalkRsp.cur_talk_id)
  return cur_talk_id_;
}
void NpcTalkRsp::set_cur_talk_id(::google::protobuf::uint32 value) {
  
  cur_talk_id_ = value;
  // @@protoc_insertion_point(field_set:proto.NpcTalkRsp.cur_talk_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSceneNpcPositionReq::kSceneIdFieldNumber;
const int GetSceneNpcPositionReq::kNpcIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSceneNpcPositionReq::GetSceneNpcPositionReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fnpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetSceneNpcPositionReq)
}
GetSceneNpcPositionReq::GetSceneNpcPositionReq(const GetSceneNpcPositionReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      npc_id_list_(from.npc_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scene_id_ = from.scene_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GetSceneNpcPositionReq)
}

void GetSceneNpcPositionReq::SharedCtor() {
  scene_id_ = 0u;
  _cached_size_ = 0;
}

GetSceneNpcPositionReq::~GetSceneNpcPositionReq() {
  // @@protoc_insertion_point(destructor:proto.GetSceneNpcPositionReq)
  SharedDtor();
}

void GetSceneNpcPositionReq::SharedDtor() {
}

void GetSceneNpcPositionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSceneNpcPositionReq::descriptor() {
  protobuf_cmd_2fcmd_5fnpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fnpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSceneNpcPositionReq& GetSceneNpcPositionReq::default_instance() {
  protobuf_cmd_2fcmd_5fnpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetSceneNpcPositionReq* GetSceneNpcPositionReq::New(::google::protobuf::Arena* arena) const {
  GetSceneNpcPositionReq* n = new GetSceneNpcPositionReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetSceneNpcPositionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetSceneNpcPositionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  npc_id_list_.Clear();
  scene_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GetSceneNpcPositionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetSceneNpcPositionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 scene_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 npc_id_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_npc_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_npc_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetSceneNpcPositionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetSceneNpcPositionReq)
  return false;
#undef DO_
}

void GetSceneNpcPositionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetSceneNpcPositionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 scene_id = 1;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scene_id(), output);
  }

  // repeated uint32 npc_id_list = 2;
  if (this->npc_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _npc_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->npc_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->npc_id_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetSceneNpcPositionReq)
}

::google::protobuf::uint8* GetSceneNpcPositionReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetSceneNpcPositionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 scene_id = 1;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scene_id(), target);
  }

  // repeated uint32 npc_id_list = 2;
  if (this->npc_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _npc_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->npc_id_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetSceneNpcPositionReq)
  return target;
}

size_t GetSceneNpcPositionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetSceneNpcPositionReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 npc_id_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->npc_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _npc_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 scene_id = 1;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSceneNpcPositionReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetSceneNpcPositionReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSceneNpcPositionReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSceneNpcPositionReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetSceneNpcPositionReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetSceneNpcPositionReq)
    MergeFrom(*source);
  }
}

void GetSceneNpcPositionReq::MergeFrom(const GetSceneNpcPositionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetSceneNpcPositionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  npc_id_list_.MergeFrom(from.npc_id_list_);
  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
}

void GetSceneNpcPositionReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetSceneNpcPositionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSceneNpcPositionReq::CopyFrom(const GetSceneNpcPositionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetSceneNpcPositionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSceneNpcPositionReq::IsInitialized() const {
  return true;
}

void GetSceneNpcPositionReq::Swap(GetSceneNpcPositionReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSceneNpcPositionReq::InternalSwap(GetSceneNpcPositionReq* other) {
  using std::swap;
  npc_id_list_.InternalSwap(&other->npc_id_list_);
  swap(scene_id_, other->scene_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetSceneNpcPositionReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fnpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fnpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetSceneNpcPositionReq

// uint32 scene_id = 1;
void GetSceneNpcPositionReq::clear_scene_id() {
  scene_id_ = 0u;
}
::google::protobuf::uint32 GetSceneNpcPositionReq::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.GetSceneNpcPositionReq.scene_id)
  return scene_id_;
}
void GetSceneNpcPositionReq::set_scene_id(::google::protobuf::uint32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetSceneNpcPositionReq.scene_id)
}

// repeated uint32 npc_id_list = 2;
int GetSceneNpcPositionReq::npc_id_list_size() const {
  return npc_id_list_.size();
}
void GetSceneNpcPositionReq::clear_npc_id_list() {
  npc_id_list_.Clear();
}
::google::protobuf::uint32 GetSceneNpcPositionReq::npc_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetSceneNpcPositionReq.npc_id_list)
  return npc_id_list_.Get(index);
}
void GetSceneNpcPositionReq::set_npc_id_list(int index, ::google::protobuf::uint32 value) {
  npc_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GetSceneNpcPositionReq.npc_id_list)
}
void GetSceneNpcPositionReq::add_npc_id_list(::google::protobuf::uint32 value) {
  npc_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GetSceneNpcPositionReq.npc_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GetSceneNpcPositionReq::npc_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GetSceneNpcPositionReq.npc_id_list)
  return npc_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GetSceneNpcPositionReq::mutable_npc_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetSceneNpcPositionReq.npc_id_list)
  return &npc_id_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSceneNpcPositionRsp::kRetcodeFieldNumber;
const int GetSceneNpcPositionRsp::kSceneIdFieldNumber;
const int GetSceneNpcPositionRsp::kNpcInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSceneNpcPositionRsp::GetSceneNpcPositionRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fnpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetSceneNpcPositionRsp)
}
GetSceneNpcPositionRsp::GetSceneNpcPositionRsp(const GetSceneNpcPositionRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      npc_info_list_(from.npc_info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(scene_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GetSceneNpcPositionRsp)
}

void GetSceneNpcPositionRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(scene_id_));
  _cached_size_ = 0;
}

GetSceneNpcPositionRsp::~GetSceneNpcPositionRsp() {
  // @@protoc_insertion_point(destructor:proto.GetSceneNpcPositionRsp)
  SharedDtor();
}

void GetSceneNpcPositionRsp::SharedDtor() {
}

void GetSceneNpcPositionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSceneNpcPositionRsp::descriptor() {
  protobuf_cmd_2fcmd_5fnpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fnpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSceneNpcPositionRsp& GetSceneNpcPositionRsp::default_instance() {
  protobuf_cmd_2fcmd_5fnpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetSceneNpcPositionRsp* GetSceneNpcPositionRsp::New(::google::protobuf::Arena* arena) const {
  GetSceneNpcPositionRsp* n = new GetSceneNpcPositionRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetSceneNpcPositionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetSceneNpcPositionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  npc_info_list_.Clear();
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(scene_id_));
  _internal_metadata_.Clear();
}

bool GetSceneNpcPositionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetSceneNpcPositionRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 scene_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.NpcPositionInfo npc_info_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npc_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetSceneNpcPositionRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetSceneNpcPositionRsp)
  return false;
#undef DO_
}

void GetSceneNpcPositionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetSceneNpcPositionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 scene_id = 2;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scene_id(), output);
  }

  // repeated .proto.NpcPositionInfo npc_info_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->npc_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->npc_info_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetSceneNpcPositionRsp)
}

::google::protobuf::uint8* GetSceneNpcPositionRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetSceneNpcPositionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 scene_id = 2;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scene_id(), target);
  }

  // repeated .proto.NpcPositionInfo npc_info_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->npc_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->npc_info_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetSceneNpcPositionRsp)
  return target;
}

size_t GetSceneNpcPositionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetSceneNpcPositionRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.NpcPositionInfo npc_info_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->npc_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->npc_info_list(static_cast<int>(i)));
    }
  }

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 scene_id = 2;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSceneNpcPositionRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetSceneNpcPositionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSceneNpcPositionRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSceneNpcPositionRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetSceneNpcPositionRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetSceneNpcPositionRsp)
    MergeFrom(*source);
  }
}

void GetSceneNpcPositionRsp::MergeFrom(const GetSceneNpcPositionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetSceneNpcPositionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  npc_info_list_.MergeFrom(from.npc_info_list_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
}

void GetSceneNpcPositionRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetSceneNpcPositionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSceneNpcPositionRsp::CopyFrom(const GetSceneNpcPositionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetSceneNpcPositionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSceneNpcPositionRsp::IsInitialized() const {
  return true;
}

void GetSceneNpcPositionRsp::Swap(GetSceneNpcPositionRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSceneNpcPositionRsp::InternalSwap(GetSceneNpcPositionRsp* other) {
  using std::swap;
  npc_info_list_.InternalSwap(&other->npc_info_list_);
  swap(retcode_, other->retcode_);
  swap(scene_id_, other->scene_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetSceneNpcPositionRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fnpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fnpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetSceneNpcPositionRsp

// int32 retcode = 1;
void GetSceneNpcPositionRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GetSceneNpcPositionRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetSceneNpcPositionRsp.retcode)
  return retcode_;
}
void GetSceneNpcPositionRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetSceneNpcPositionRsp.retcode)
}

// uint32 scene_id = 2;
void GetSceneNpcPositionRsp::clear_scene_id() {
  scene_id_ = 0u;
}
::google::protobuf::uint32 GetSceneNpcPositionRsp::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.GetSceneNpcPositionRsp.scene_id)
  return scene_id_;
}
void GetSceneNpcPositionRsp::set_scene_id(::google::protobuf::uint32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetSceneNpcPositionRsp.scene_id)
}

// repeated .proto.NpcPositionInfo npc_info_list = 3;
int GetSceneNpcPositionRsp::npc_info_list_size() const {
  return npc_info_list_.size();
}
void GetSceneNpcPositionRsp::clear_npc_info_list() {
  npc_info_list_.Clear();
}
const ::proto::NpcPositionInfo& GetSceneNpcPositionRsp::npc_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetSceneNpcPositionRsp.npc_info_list)
  return npc_info_list_.Get(index);
}
::proto::NpcPositionInfo* GetSceneNpcPositionRsp::mutable_npc_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetSceneNpcPositionRsp.npc_info_list)
  return npc_info_list_.Mutable(index);
}
::proto::NpcPositionInfo* GetSceneNpcPositionRsp::add_npc_info_list() {
  // @@protoc_insertion_point(field_add:proto.GetSceneNpcPositionRsp.npc_info_list)
  return npc_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::NpcPositionInfo >*
GetSceneNpcPositionRsp::mutable_npc_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetSceneNpcPositionRsp.npc_info_list)
  return &npc_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::NpcPositionInfo >&
GetSceneNpcPositionRsp::npc_info_list() const {
  // @@protoc_insertion_point(field_list:proto.GetSceneNpcPositionRsp.npc_info_list)
  return npc_info_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
