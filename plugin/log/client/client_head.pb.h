// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log/client/client_head.proto

#ifndef PROTOBUF_log_2fclient_2fclient_5fhead_2eproto__INCLUDED
#define PROTOBUF_log_2fclient_2fclient_5fhead_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace proto_log {
class ClientLogHead;
class ClientLogHeadDefaultTypeInternal;
extern ClientLogHeadDefaultTypeInternal _ClientLogHead_default_instance_;
}  // namespace proto_log

namespace proto_log {

namespace protobuf_log_2fclient_2fclient_5fhead_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_log_2fclient_2fclient_5fhead_2eproto

// ===================================================================

class ClientLogHead : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto_log.ClientLogHead) */ {
 public:
  ClientLogHead();
  virtual ~ClientLogHead();

  ClientLogHead(const ClientLogHead& from);

  inline ClientLogHead& operator=(const ClientLogHead& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientLogHead(ClientLogHead&& from) noexcept
    : ClientLogHead() {
    *this = ::std::move(from);
  }

  inline ClientLogHead& operator=(ClientLogHead&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientLogHead& default_instance();

  static inline const ClientLogHead* internal_default_instance() {
    return reinterpret_cast<const ClientLogHead*>(
               &_ClientLogHead_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ClientLogHead* other);
  friend void swap(ClientLogHead& a, ClientLogHead& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientLogHead* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientLogHead* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientLogHead& from);
  void MergeFrom(const ClientLogHead& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientLogHead* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string event_time = 1;
  void clear_event_time();
  static const int kEventTimeFieldNumber = 1;
  const ::std::string& event_time() const;
  void set_event_time(const ::std::string& value);
  #if LANG_CXX11
  void set_event_time(::std::string&& value);
  #endif
  void set_event_time(const char* value);
  void set_event_time(const char* value, size_t size);
  ::std::string* mutable_event_time();
  ::std::string* release_event_time();
  void set_allocated_event_time(::std::string* event_time);

  // string log_serial_number = 2;
  void clear_log_serial_number();
  static const int kLogSerialNumberFieldNumber = 2;
  const ::std::string& log_serial_number() const;
  void set_log_serial_number(const ::std::string& value);
  #if LANG_CXX11
  void set_log_serial_number(::std::string&& value);
  #endif
  void set_log_serial_number(const char* value);
  void set_log_serial_number(const char* value, size_t size);
  ::std::string* mutable_log_serial_number();
  ::std::string* release_log_serial_number();
  void set_allocated_log_serial_number(::std::string* log_serial_number);

  // string action_name = 4;
  void clear_action_name();
  static const int kActionNameFieldNumber = 4;
  const ::std::string& action_name() const;
  void set_action_name(const ::std::string& value);
  #if LANG_CXX11
  void set_action_name(::std::string&& value);
  #endif
  void set_action_name(const char* value);
  void set_action_name(const char* value, size_t size);
  ::std::string* mutable_action_name();
  ::std::string* release_action_name();
  void set_allocated_action_name(::std::string* action_name);

  // string upload_ip = 5;
  void clear_upload_ip();
  static const int kUploadIpFieldNumber = 5;
  const ::std::string& upload_ip() const;
  void set_upload_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_upload_ip(::std::string&& value);
  #endif
  void set_upload_ip(const char* value);
  void set_upload_ip(const char* value, size_t size);
  ::std::string* mutable_upload_ip();
  ::std::string* release_upload_ip();
  void set_allocated_upload_ip(::std::string* upload_ip);

  // string product_id = 6;
  void clear_product_id();
  static const int kProductIdFieldNumber = 6;
  const ::std::string& product_id() const;
  void set_product_id(const ::std::string& value);
  #if LANG_CXX11
  void set_product_id(::std::string&& value);
  #endif
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  ::std::string* mutable_product_id();
  ::std::string* release_product_id();
  void set_allocated_product_id(::std::string* product_id);

  // string channel_id = 7;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 7;
  const ::std::string& channel_id() const;
  void set_channel_id(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_id(::std::string&& value);
  #endif
  void set_channel_id(const char* value);
  void set_channel_id(const char* value, size_t size);
  ::std::string* mutable_channel_id();
  ::std::string* release_channel_id();
  void set_allocated_channel_id(::std::string* channel_id);

  // string region_name = 8;
  void clear_region_name();
  static const int kRegionNameFieldNumber = 8;
  const ::std::string& region_name() const;
  void set_region_name(const ::std::string& value);
  #if LANG_CXX11
  void set_region_name(::std::string&& value);
  #endif
  void set_region_name(const char* value);
  void set_region_name(const char* value, size_t size);
  ::std::string* mutable_region_name();
  ::std::string* release_region_name();
  void set_allocated_region_name(::std::string* region_name);

  // string game_version = 9;
  void clear_game_version();
  static const int kGameVersionFieldNumber = 9;
  const ::std::string& game_version() const;
  void set_game_version(const ::std::string& value);
  #if LANG_CXX11
  void set_game_version(::std::string&& value);
  #endif
  void set_game_version(const char* value);
  void set_game_version(const char* value, size_t size);
  ::std::string* mutable_game_version();
  ::std::string* release_game_version();
  void set_allocated_game_version(::std::string* game_version);

  // string device_type = 10;
  void clear_device_type();
  static const int kDeviceTypeFieldNumber = 10;
  const ::std::string& device_type() const;
  void set_device_type(const ::std::string& value);
  #if LANG_CXX11
  void set_device_type(::std::string&& value);
  #endif
  void set_device_type(const char* value);
  void set_device_type(const char* value, size_t size);
  ::std::string* mutable_device_type();
  ::std::string* release_device_type();
  void set_allocated_device_type(::std::string* device_type);

  // string device_uuid = 11;
  void clear_device_uuid();
  static const int kDeviceUuidFieldNumber = 11;
  const ::std::string& device_uuid() const;
  void set_device_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_device_uuid(::std::string&& value);
  #endif
  void set_device_uuid(const char* value);
  void set_device_uuid(const char* value, size_t size);
  ::std::string* mutable_device_uuid();
  ::std::string* release_device_uuid();
  void set_allocated_device_uuid(::std::string* device_uuid);

  // string mac_addr = 12;
  void clear_mac_addr();
  static const int kMacAddrFieldNumber = 12;
  const ::std::string& mac_addr() const;
  void set_mac_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_mac_addr(::std::string&& value);
  #endif
  void set_mac_addr(const char* value);
  void set_mac_addr(const char* value, size_t size);
  ::std::string* mutable_mac_addr();
  ::std::string* release_mac_addr();
  void set_allocated_mac_addr(::std::string* mac_addr);

  // string account_name = 13;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 13;
  const ::std::string& account_name() const;
  void set_account_name(const ::std::string& value);
  #if LANG_CXX11
  void set_account_name(::std::string&& value);
  #endif
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  ::std::string* mutable_account_name();
  ::std::string* release_account_name();
  void set_allocated_account_name(::std::string* account_name);

  // string account_uuid = 14;
  void clear_account_uuid();
  static const int kAccountUuidFieldNumber = 14;
  const ::std::string& account_uuid() const;
  void set_account_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_account_uuid(::std::string&& value);
  #endif
  void set_account_uuid(const char* value);
  void set_account_uuid(const char* value, size_t size);
  ::std::string* mutable_account_uuid();
  ::std::string* release_account_uuid();
  void set_allocated_account_uuid(::std::string* account_uuid);

  // uint32 action_id = 3;
  void clear_action_id();
  static const int kActionIdFieldNumber = 3;
  ::google::protobuf::uint32 action_id() const;
  void set_action_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_log.ClientLogHead)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr event_time_;
  ::google::protobuf::internal::ArenaStringPtr log_serial_number_;
  ::google::protobuf::internal::ArenaStringPtr action_name_;
  ::google::protobuf::internal::ArenaStringPtr upload_ip_;
  ::google::protobuf::internal::ArenaStringPtr product_id_;
  ::google::protobuf::internal::ArenaStringPtr channel_id_;
  ::google::protobuf::internal::ArenaStringPtr region_name_;
  ::google::protobuf::internal::ArenaStringPtr game_version_;
  ::google::protobuf::internal::ArenaStringPtr device_type_;
  ::google::protobuf::internal::ArenaStringPtr device_uuid_;
  ::google::protobuf::internal::ArenaStringPtr mac_addr_;
  ::google::protobuf::internal::ArenaStringPtr account_name_;
  ::google::protobuf::internal::ArenaStringPtr account_uuid_;
  ::google::protobuf::uint32 action_id_;
  mutable int _cached_size_;
  friend struct protobuf_log_2fclient_2fclient_5fhead_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientLogHead

// string event_time = 1;
inline void ClientLogHead::clear_event_time() {
  event_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientLogHead::event_time() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogHead.event_time)
  return event_time_.GetNoArena();
}
inline void ClientLogHead::set_event_time(const ::std::string& value) {
  
  event_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogHead.event_time)
}
#if LANG_CXX11
inline void ClientLogHead::set_event_time(::std::string&& value) {
  
  event_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogHead.event_time)
}
#endif
inline void ClientLogHead::set_event_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  event_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogHead.event_time)
}
inline void ClientLogHead::set_event_time(const char* value, size_t size) {
  
  event_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogHead.event_time)
}
inline ::std::string* ClientLogHead::mutable_event_time() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogHead.event_time)
  return event_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientLogHead::release_event_time() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogHead.event_time)
  
  return event_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientLogHead::set_allocated_event_time(::std::string* event_time) {
  if (event_time != NULL) {
    
  } else {
    
  }
  event_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_time);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogHead.event_time)
}

// string log_serial_number = 2;
inline void ClientLogHead::clear_log_serial_number() {
  log_serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientLogHead::log_serial_number() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogHead.log_serial_number)
  return log_serial_number_.GetNoArena();
}
inline void ClientLogHead::set_log_serial_number(const ::std::string& value) {
  
  log_serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogHead.log_serial_number)
}
#if LANG_CXX11
inline void ClientLogHead::set_log_serial_number(::std::string&& value) {
  
  log_serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogHead.log_serial_number)
}
#endif
inline void ClientLogHead::set_log_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  log_serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogHead.log_serial_number)
}
inline void ClientLogHead::set_log_serial_number(const char* value, size_t size) {
  
  log_serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogHead.log_serial_number)
}
inline ::std::string* ClientLogHead::mutable_log_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogHead.log_serial_number)
  return log_serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientLogHead::release_log_serial_number() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogHead.log_serial_number)
  
  return log_serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientLogHead::set_allocated_log_serial_number(::std::string* log_serial_number) {
  if (log_serial_number != NULL) {
    
  } else {
    
  }
  log_serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_serial_number);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogHead.log_serial_number)
}

// uint32 action_id = 3;
inline void ClientLogHead::clear_action_id() {
  action_id_ = 0u;
}
inline ::google::protobuf::uint32 ClientLogHead::action_id() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogHead.action_id)
  return action_id_;
}
inline void ClientLogHead::set_action_id(::google::protobuf::uint32 value) {
  
  action_id_ = value;
  // @@protoc_insertion_point(field_set:proto_log.ClientLogHead.action_id)
}

// string action_name = 4;
inline void ClientLogHead::clear_action_name() {
  action_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientLogHead::action_name() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogHead.action_name)
  return action_name_.GetNoArena();
}
inline void ClientLogHead::set_action_name(const ::std::string& value) {
  
  action_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogHead.action_name)
}
#if LANG_CXX11
inline void ClientLogHead::set_action_name(::std::string&& value) {
  
  action_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogHead.action_name)
}
#endif
inline void ClientLogHead::set_action_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogHead.action_name)
}
inline void ClientLogHead::set_action_name(const char* value, size_t size) {
  
  action_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogHead.action_name)
}
inline ::std::string* ClientLogHead::mutable_action_name() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogHead.action_name)
  return action_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientLogHead::release_action_name() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogHead.action_name)
  
  return action_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientLogHead::set_allocated_action_name(::std::string* action_name) {
  if (action_name != NULL) {
    
  } else {
    
  }
  action_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action_name);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogHead.action_name)
}

// string upload_ip = 5;
inline void ClientLogHead::clear_upload_ip() {
  upload_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientLogHead::upload_ip() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogHead.upload_ip)
  return upload_ip_.GetNoArena();
}
inline void ClientLogHead::set_upload_ip(const ::std::string& value) {
  
  upload_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogHead.upload_ip)
}
#if LANG_CXX11
inline void ClientLogHead::set_upload_ip(::std::string&& value) {
  
  upload_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogHead.upload_ip)
}
#endif
inline void ClientLogHead::set_upload_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  upload_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogHead.upload_ip)
}
inline void ClientLogHead::set_upload_ip(const char* value, size_t size) {
  
  upload_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogHead.upload_ip)
}
inline ::std::string* ClientLogHead::mutable_upload_ip() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogHead.upload_ip)
  return upload_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientLogHead::release_upload_ip() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogHead.upload_ip)
  
  return upload_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientLogHead::set_allocated_upload_ip(::std::string* upload_ip) {
  if (upload_ip != NULL) {
    
  } else {
    
  }
  upload_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upload_ip);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogHead.upload_ip)
}

// string product_id = 6;
inline void ClientLogHead::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientLogHead::product_id() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogHead.product_id)
  return product_id_.GetNoArena();
}
inline void ClientLogHead::set_product_id(const ::std::string& value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogHead.product_id)
}
#if LANG_CXX11
inline void ClientLogHead::set_product_id(::std::string&& value) {
  
  product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogHead.product_id)
}
#endif
inline void ClientLogHead::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogHead.product_id)
}
inline void ClientLogHead::set_product_id(const char* value, size_t size) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogHead.product_id)
}
inline ::std::string* ClientLogHead::mutable_product_id() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogHead.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientLogHead::release_product_id() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogHead.product_id)
  
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientLogHead::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    
  } else {
    
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogHead.product_id)
}

// string channel_id = 7;
inline void ClientLogHead::clear_channel_id() {
  channel_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientLogHead::channel_id() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogHead.channel_id)
  return channel_id_.GetNoArena();
}
inline void ClientLogHead::set_channel_id(const ::std::string& value) {
  
  channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogHead.channel_id)
}
#if LANG_CXX11
inline void ClientLogHead::set_channel_id(::std::string&& value) {
  
  channel_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogHead.channel_id)
}
#endif
inline void ClientLogHead::set_channel_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogHead.channel_id)
}
inline void ClientLogHead::set_channel_id(const char* value, size_t size) {
  
  channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogHead.channel_id)
}
inline ::std::string* ClientLogHead::mutable_channel_id() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogHead.channel_id)
  return channel_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientLogHead::release_channel_id() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogHead.channel_id)
  
  return channel_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientLogHead::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id != NULL) {
    
  } else {
    
  }
  channel_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_id);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogHead.channel_id)
}

// string region_name = 8;
inline void ClientLogHead::clear_region_name() {
  region_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientLogHead::region_name() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogHead.region_name)
  return region_name_.GetNoArena();
}
inline void ClientLogHead::set_region_name(const ::std::string& value) {
  
  region_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogHead.region_name)
}
#if LANG_CXX11
inline void ClientLogHead::set_region_name(::std::string&& value) {
  
  region_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogHead.region_name)
}
#endif
inline void ClientLogHead::set_region_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogHead.region_name)
}
inline void ClientLogHead::set_region_name(const char* value, size_t size) {
  
  region_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogHead.region_name)
}
inline ::std::string* ClientLogHead::mutable_region_name() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogHead.region_name)
  return region_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientLogHead::release_region_name() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogHead.region_name)
  
  return region_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientLogHead::set_allocated_region_name(::std::string* region_name) {
  if (region_name != NULL) {
    
  } else {
    
  }
  region_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region_name);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogHead.region_name)
}

// string game_version = 9;
inline void ClientLogHead::clear_game_version() {
  game_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientLogHead::game_version() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogHead.game_version)
  return game_version_.GetNoArena();
}
inline void ClientLogHead::set_game_version(const ::std::string& value) {
  
  game_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogHead.game_version)
}
#if LANG_CXX11
inline void ClientLogHead::set_game_version(::std::string&& value) {
  
  game_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogHead.game_version)
}
#endif
inline void ClientLogHead::set_game_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  game_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogHead.game_version)
}
inline void ClientLogHead::set_game_version(const char* value, size_t size) {
  
  game_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogHead.game_version)
}
inline ::std::string* ClientLogHead::mutable_game_version() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogHead.game_version)
  return game_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientLogHead::release_game_version() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogHead.game_version)
  
  return game_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientLogHead::set_allocated_game_version(::std::string* game_version) {
  if (game_version != NULL) {
    
  } else {
    
  }
  game_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_version);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogHead.game_version)
}

// string device_type = 10;
inline void ClientLogHead::clear_device_type() {
  device_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientLogHead::device_type() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogHead.device_type)
  return device_type_.GetNoArena();
}
inline void ClientLogHead::set_device_type(const ::std::string& value) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogHead.device_type)
}
#if LANG_CXX11
inline void ClientLogHead::set_device_type(::std::string&& value) {
  
  device_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogHead.device_type)
}
#endif
inline void ClientLogHead::set_device_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogHead.device_type)
}
inline void ClientLogHead::set_device_type(const char* value, size_t size) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogHead.device_type)
}
inline ::std::string* ClientLogHead::mutable_device_type() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogHead.device_type)
  return device_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientLogHead::release_device_type() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogHead.device_type)
  
  return device_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientLogHead::set_allocated_device_type(::std::string* device_type) {
  if (device_type != NULL) {
    
  } else {
    
  }
  device_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_type);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogHead.device_type)
}

// string device_uuid = 11;
inline void ClientLogHead::clear_device_uuid() {
  device_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientLogHead::device_uuid() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogHead.device_uuid)
  return device_uuid_.GetNoArena();
}
inline void ClientLogHead::set_device_uuid(const ::std::string& value) {
  
  device_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogHead.device_uuid)
}
#if LANG_CXX11
inline void ClientLogHead::set_device_uuid(::std::string&& value) {
  
  device_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogHead.device_uuid)
}
#endif
inline void ClientLogHead::set_device_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogHead.device_uuid)
}
inline void ClientLogHead::set_device_uuid(const char* value, size_t size) {
  
  device_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogHead.device_uuid)
}
inline ::std::string* ClientLogHead::mutable_device_uuid() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogHead.device_uuid)
  return device_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientLogHead::release_device_uuid() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogHead.device_uuid)
  
  return device_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientLogHead::set_allocated_device_uuid(::std::string* device_uuid) {
  if (device_uuid != NULL) {
    
  } else {
    
  }
  device_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_uuid);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogHead.device_uuid)
}

// string mac_addr = 12;
inline void ClientLogHead::clear_mac_addr() {
  mac_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientLogHead::mac_addr() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogHead.mac_addr)
  return mac_addr_.GetNoArena();
}
inline void ClientLogHead::set_mac_addr(const ::std::string& value) {
  
  mac_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogHead.mac_addr)
}
#if LANG_CXX11
inline void ClientLogHead::set_mac_addr(::std::string&& value) {
  
  mac_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogHead.mac_addr)
}
#endif
inline void ClientLogHead::set_mac_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogHead.mac_addr)
}
inline void ClientLogHead::set_mac_addr(const char* value, size_t size) {
  
  mac_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogHead.mac_addr)
}
inline ::std::string* ClientLogHead::mutable_mac_addr() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogHead.mac_addr)
  return mac_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientLogHead::release_mac_addr() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogHead.mac_addr)
  
  return mac_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientLogHead::set_allocated_mac_addr(::std::string* mac_addr) {
  if (mac_addr != NULL) {
    
  } else {
    
  }
  mac_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_addr);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogHead.mac_addr)
}

// string account_name = 13;
inline void ClientLogHead::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientLogHead::account_name() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogHead.account_name)
  return account_name_.GetNoArena();
}
inline void ClientLogHead::set_account_name(const ::std::string& value) {
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogHead.account_name)
}
#if LANG_CXX11
inline void ClientLogHead::set_account_name(::std::string&& value) {
  
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogHead.account_name)
}
#endif
inline void ClientLogHead::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogHead.account_name)
}
inline void ClientLogHead::set_account_name(const char* value, size_t size) {
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogHead.account_name)
}
inline ::std::string* ClientLogHead::mutable_account_name() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogHead.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientLogHead::release_account_name() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogHead.account_name)
  
  return account_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientLogHead::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    
  } else {
    
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogHead.account_name)
}

// string account_uuid = 14;
inline void ClientLogHead::clear_account_uuid() {
  account_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientLogHead::account_uuid() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogHead.account_uuid)
  return account_uuid_.GetNoArena();
}
inline void ClientLogHead::set_account_uuid(const ::std::string& value) {
  
  account_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogHead.account_uuid)
}
#if LANG_CXX11
inline void ClientLogHead::set_account_uuid(::std::string&& value) {
  
  account_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogHead.account_uuid)
}
#endif
inline void ClientLogHead::set_account_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogHead.account_uuid)
}
inline void ClientLogHead::set_account_uuid(const char* value, size_t size) {
  
  account_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogHead.account_uuid)
}
inline ::std::string* ClientLogHead::mutable_account_uuid() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogHead.account_uuid)
  return account_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientLogHead::release_account_uuid() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogHead.account_uuid)
  
  return account_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientLogHead::set_allocated_account_uuid(::std::string* account_uuid) {
  if (account_uuid != NULL) {
    
  } else {
    
  }
  account_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_uuid);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogHead.account_uuid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace proto_log

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_log_2fclient_2fclient_5fhead_2eproto__INCLUDED
