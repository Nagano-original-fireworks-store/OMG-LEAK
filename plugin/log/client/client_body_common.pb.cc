// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log/client/client_body_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "log/client/client_body_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_log {
class ClientLogBodyLoginDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ClientLogBodyLogin>
     _instance;
} _ClientLogBodyLogin_default_instance_;
class ClientLogBodyPingDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ClientLogBodyPing>
     _instance;
} _ClientLogBodyPing_default_instance_;

namespace protobuf_log_2fclient_2fclient_5fbody_5fcommon_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogBodyLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogBodyLogin, action_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogBodyLogin, action_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogBodyLogin, action_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogBodyLogin, xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogBodyLogin, signal_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogBodyLogin, dns_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogBodyPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogBodyPing, xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogBodyPing, signal_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogBodyPing, ping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogBodyPing, servertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogBodyPing, serverip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogBodyPing, serverport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogBodyPing, pcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogBodyPing, plost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogBodyPing, dns_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(ClientLogBodyLogin)},
  { 11, -1, sizeof(ClientLogBodyPing)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClientLogBodyLogin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClientLogBodyPing_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "log/client/client_body_common.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ClientLogBodyLogin_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ClientLogBodyLogin_default_instance_);_ClientLogBodyPing_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ClientLogBodyPing_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n#log/client/client_body_common.proto\022\tp"
      "roto_log\"\204\001\n\022ClientLogBodyLogin\022\023\n\013actio"
      "n_type\030\001 \001(\t\022\025\n\raction_result\030\002 \001(\t\022\023\n\013a"
      "ction_time\030\003 \001(\r\022\n\n\002xg\030\004 \001(\t\022\024\n\014signal_l"
      "evel\030\005 \001(\r\022\013\n\003dns\030\006 \001(\t\"\251\001\n\021ClientLogBod"
      "yPing\022\n\n\002xg\030\001 \001(\t\022\024\n\014signal_level\030\002 \001(\r\022"
      "\014\n\004ping\030\003 \001(\r\022\022\n\nservertype\030\004 \001(\t\022\020\n\010ser"
      "verip\030\005 \001(\t\022\022\n\nserverport\030\006 \001(\t\022\016\n\006pcoun"
      "t\030\007 \001(\r\022\r\n\005plost\030\010 \001(\r\022\013\n\003dns\030\t \001(\tb\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 363);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "log/client/client_body_common.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_log_2fclient_2fclient_5fbody_5fcommon_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientLogBodyLogin::kActionTypeFieldNumber;
const int ClientLogBodyLogin::kActionResultFieldNumber;
const int ClientLogBodyLogin::kActionTimeFieldNumber;
const int ClientLogBodyLogin::kXgFieldNumber;
const int ClientLogBodyLogin::kSignalLevelFieldNumber;
const int ClientLogBodyLogin::kDnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientLogBodyLogin::ClientLogBodyLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_log_2fclient_2fclient_5fbody_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_log.ClientLogBodyLogin)
}
ClientLogBodyLogin::ClientLogBodyLogin(const ClientLogBodyLogin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.action_type().size() > 0) {
    action_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_type_);
  }
  action_result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.action_result().size() > 0) {
    action_result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_result_);
  }
  xg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.xg().size() > 0) {
    xg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xg_);
  }
  dns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dns().size() > 0) {
    dns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dns_);
  }
  ::memcpy(&action_time_, &from.action_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&signal_level_) -
    reinterpret_cast<char*>(&action_time_)) + sizeof(signal_level_));
  // @@protoc_insertion_point(copy_constructor:proto_log.ClientLogBodyLogin)
}

void ClientLogBodyLogin::SharedCtor() {
  action_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&action_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_level_) -
      reinterpret_cast<char*>(&action_time_)) + sizeof(signal_level_));
  _cached_size_ = 0;
}

ClientLogBodyLogin::~ClientLogBodyLogin() {
  // @@protoc_insertion_point(destructor:proto_log.ClientLogBodyLogin)
  SharedDtor();
}

void ClientLogBodyLogin::SharedDtor() {
  action_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dns_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClientLogBodyLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientLogBodyLogin::descriptor() {
  protobuf_log_2fclient_2fclient_5fbody_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_2fclient_2fclient_5fbody_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientLogBodyLogin& ClientLogBodyLogin::default_instance() {
  protobuf_log_2fclient_2fclient_5fbody_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientLogBodyLogin* ClientLogBodyLogin::New(::google::protobuf::Arena* arena) const {
  ClientLogBodyLogin* n = new ClientLogBodyLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientLogBodyLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_log.ClientLogBodyLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&action_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_level_) -
      reinterpret_cast<char*>(&action_time_)) + sizeof(signal_level_));
  _internal_metadata_.Clear();
}

bool ClientLogBodyLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_log.ClientLogBodyLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string action_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->action_type().data(), static_cast<int>(this->action_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto_log.ClientLogBodyLogin.action_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string action_result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action_result()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->action_result().data(), static_cast<int>(this->action_result().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto_log.ClientLogBodyLogin.action_result"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 action_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string xg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->xg().data(), static_cast<int>(this->xg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto_log.ClientLogBodyLogin.xg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 signal_level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signal_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dns = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dns()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dns().data(), static_cast<int>(this->dns().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto_log.ClientLogBodyLogin.dns"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_log.ClientLogBodyLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_log.ClientLogBodyLogin)
  return false;
#undef DO_
}

void ClientLogBodyLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_log.ClientLogBodyLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string action_type = 1;
  if (this->action_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->action_type().data(), static_cast<int>(this->action_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto_log.ClientLogBodyLogin.action_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->action_type(), output);
  }

  // string action_result = 2;
  if (this->action_result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->action_result().data(), static_cast<int>(this->action_result().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto_log.ClientLogBodyLogin.action_result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->action_result(), output);
  }

  // uint32 action_time = 3;
  if (this->action_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->action_time(), output);
  }

  // string xg = 4;
  if (this->xg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xg().data(), static_cast<int>(this->xg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto_log.ClientLogBodyLogin.xg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->xg(), output);
  }

  // uint32 signal_level = 5;
  if (this->signal_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->signal_level(), output);
  }

  // string dns = 6;
  if (this->dns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dns().data(), static_cast<int>(this->dns().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto_log.ClientLogBodyLogin.dns");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->dns(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_log.ClientLogBodyLogin)
}

::google::protobuf::uint8* ClientLogBodyLogin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto_log.ClientLogBodyLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string action_type = 1;
  if (this->action_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->action_type().data(), static_cast<int>(this->action_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto_log.ClientLogBodyLogin.action_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->action_type(), target);
  }

  // string action_result = 2;
  if (this->action_result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->action_result().data(), static_cast<int>(this->action_result().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto_log.ClientLogBodyLogin.action_result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->action_result(), target);
  }

  // uint32 action_time = 3;
  if (this->action_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->action_time(), target);
  }

  // string xg = 4;
  if (this->xg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xg().data(), static_cast<int>(this->xg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto_log.ClientLogBodyLogin.xg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->xg(), target);
  }

  // uint32 signal_level = 5;
  if (this->signal_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->signal_level(), target);
  }

  // string dns = 6;
  if (this->dns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dns().data(), static_cast<int>(this->dns().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto_log.ClientLogBodyLogin.dns");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->dns(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_log.ClientLogBodyLogin)
  return target;
}

size_t ClientLogBodyLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_log.ClientLogBodyLogin)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string action_type = 1;
  if (this->action_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->action_type());
  }

  // string action_result = 2;
  if (this->action_result().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->action_result());
  }

  // string xg = 4;
  if (this->xg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->xg());
  }

  // string dns = 6;
  if (this->dns().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dns());
  }

  // uint32 action_time = 3;
  if (this->action_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->action_time());
  }

  // uint32 signal_level = 5;
  if (this->signal_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->signal_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientLogBodyLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_log.ClientLogBodyLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientLogBodyLogin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientLogBodyLogin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_log.ClientLogBodyLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_log.ClientLogBodyLogin)
    MergeFrom(*source);
  }
}

void ClientLogBodyLogin::MergeFrom(const ClientLogBodyLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_log.ClientLogBodyLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action_type().size() > 0) {

    action_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_type_);
  }
  if (from.action_result().size() > 0) {

    action_result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_result_);
  }
  if (from.xg().size() > 0) {

    xg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xg_);
  }
  if (from.dns().size() > 0) {

    dns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dns_);
  }
  if (from.action_time() != 0) {
    set_action_time(from.action_time());
  }
  if (from.signal_level() != 0) {
    set_signal_level(from.signal_level());
  }
}

void ClientLogBodyLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_log.ClientLogBodyLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientLogBodyLogin::CopyFrom(const ClientLogBodyLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_log.ClientLogBodyLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLogBodyLogin::IsInitialized() const {
  return true;
}

void ClientLogBodyLogin::Swap(ClientLogBodyLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientLogBodyLogin::InternalSwap(ClientLogBodyLogin* other) {
  using std::swap;
  action_type_.Swap(&other->action_type_);
  action_result_.Swap(&other->action_result_);
  xg_.Swap(&other->xg_);
  dns_.Swap(&other->dns_);
  swap(action_time_, other->action_time_);
  swap(signal_level_, other->signal_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientLogBodyLogin::GetMetadata() const {
  protobuf_log_2fclient_2fclient_5fbody_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_2fclient_2fclient_5fbody_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientLogBodyLogin

// string action_type = 1;
void ClientLogBodyLogin::clear_action_type() {
  action_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClientLogBodyLogin::action_type() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyLogin.action_type)
  return action_type_.GetNoArena();
}
void ClientLogBodyLogin::set_action_type(const ::std::string& value) {
  
  action_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyLogin.action_type)
}
#if LANG_CXX11
void ClientLogBodyLogin::set_action_type(::std::string&& value) {
  
  action_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogBodyLogin.action_type)
}
#endif
void ClientLogBodyLogin::set_action_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogBodyLogin.action_type)
}
void ClientLogBodyLogin::set_action_type(const char* value, size_t size) {
  
  action_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogBodyLogin.action_type)
}
::std::string* ClientLogBodyLogin::mutable_action_type() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogBodyLogin.action_type)
  return action_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientLogBodyLogin::release_action_type() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogBodyLogin.action_type)
  
  return action_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientLogBodyLogin::set_allocated_action_type(::std::string* action_type) {
  if (action_type != NULL) {
    
  } else {
    
  }
  action_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action_type);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogBodyLogin.action_type)
}

// string action_result = 2;
void ClientLogBodyLogin::clear_action_result() {
  action_result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClientLogBodyLogin::action_result() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyLogin.action_result)
  return action_result_.GetNoArena();
}
void ClientLogBodyLogin::set_action_result(const ::std::string& value) {
  
  action_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyLogin.action_result)
}
#if LANG_CXX11
void ClientLogBodyLogin::set_action_result(::std::string&& value) {
  
  action_result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogBodyLogin.action_result)
}
#endif
void ClientLogBodyLogin::set_action_result(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogBodyLogin.action_result)
}
void ClientLogBodyLogin::set_action_result(const char* value, size_t size) {
  
  action_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogBodyLogin.action_result)
}
::std::string* ClientLogBodyLogin::mutable_action_result() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogBodyLogin.action_result)
  return action_result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientLogBodyLogin::release_action_result() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogBodyLogin.action_result)
  
  return action_result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientLogBodyLogin::set_allocated_action_result(::std::string* action_result) {
  if (action_result != NULL) {
    
  } else {
    
  }
  action_result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action_result);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogBodyLogin.action_result)
}

// uint32 action_time = 3;
void ClientLogBodyLogin::clear_action_time() {
  action_time_ = 0u;
}
::google::protobuf::uint32 ClientLogBodyLogin::action_time() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyLogin.action_time)
  return action_time_;
}
void ClientLogBodyLogin::set_action_time(::google::protobuf::uint32 value) {
  
  action_time_ = value;
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyLogin.action_time)
}

// string xg = 4;
void ClientLogBodyLogin::clear_xg() {
  xg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClientLogBodyLogin::xg() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyLogin.xg)
  return xg_.GetNoArena();
}
void ClientLogBodyLogin::set_xg(const ::std::string& value) {
  
  xg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyLogin.xg)
}
#if LANG_CXX11
void ClientLogBodyLogin::set_xg(::std::string&& value) {
  
  xg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogBodyLogin.xg)
}
#endif
void ClientLogBodyLogin::set_xg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  xg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogBodyLogin.xg)
}
void ClientLogBodyLogin::set_xg(const char* value, size_t size) {
  
  xg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogBodyLogin.xg)
}
::std::string* ClientLogBodyLogin::mutable_xg() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogBodyLogin.xg)
  return xg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientLogBodyLogin::release_xg() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogBodyLogin.xg)
  
  return xg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientLogBodyLogin::set_allocated_xg(::std::string* xg) {
  if (xg != NULL) {
    
  } else {
    
  }
  xg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xg);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogBodyLogin.xg)
}

// uint32 signal_level = 5;
void ClientLogBodyLogin::clear_signal_level() {
  signal_level_ = 0u;
}
::google::protobuf::uint32 ClientLogBodyLogin::signal_level() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyLogin.signal_level)
  return signal_level_;
}
void ClientLogBodyLogin::set_signal_level(::google::protobuf::uint32 value) {
  
  signal_level_ = value;
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyLogin.signal_level)
}

// string dns = 6;
void ClientLogBodyLogin::clear_dns() {
  dns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClientLogBodyLogin::dns() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyLogin.dns)
  return dns_.GetNoArena();
}
void ClientLogBodyLogin::set_dns(const ::std::string& value) {
  
  dns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyLogin.dns)
}
#if LANG_CXX11
void ClientLogBodyLogin::set_dns(::std::string&& value) {
  
  dns_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogBodyLogin.dns)
}
#endif
void ClientLogBodyLogin::set_dns(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogBodyLogin.dns)
}
void ClientLogBodyLogin::set_dns(const char* value, size_t size) {
  
  dns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogBodyLogin.dns)
}
::std::string* ClientLogBodyLogin::mutable_dns() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogBodyLogin.dns)
  return dns_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientLogBodyLogin::release_dns() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogBodyLogin.dns)
  
  return dns_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientLogBodyLogin::set_allocated_dns(::std::string* dns) {
  if (dns != NULL) {
    
  } else {
    
  }
  dns_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dns);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogBodyLogin.dns)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientLogBodyPing::kXgFieldNumber;
const int ClientLogBodyPing::kSignalLevelFieldNumber;
const int ClientLogBodyPing::kPingFieldNumber;
const int ClientLogBodyPing::kServertypeFieldNumber;
const int ClientLogBodyPing::kServeripFieldNumber;
const int ClientLogBodyPing::kServerportFieldNumber;
const int ClientLogBodyPing::kPcountFieldNumber;
const int ClientLogBodyPing::kPlostFieldNumber;
const int ClientLogBodyPing::kDnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientLogBodyPing::ClientLogBodyPing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_log_2fclient_2fclient_5fbody_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_log.ClientLogBodyPing)
}
ClientLogBodyPing::ClientLogBodyPing(const ClientLogBodyPing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  xg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.xg().size() > 0) {
    xg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xg_);
  }
  servertype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.servertype().size() > 0) {
    servertype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servertype_);
  }
  serverip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serverip().size() > 0) {
    serverip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverip_);
  }
  serverport_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serverport().size() > 0) {
    serverport_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverport_);
  }
  dns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dns().size() > 0) {
    dns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dns_);
  }
  ::memcpy(&signal_level_, &from.signal_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&plost_) -
    reinterpret_cast<char*>(&signal_level_)) + sizeof(plost_));
  // @@protoc_insertion_point(copy_constructor:proto_log.ClientLogBodyPing)
}

void ClientLogBodyPing::SharedCtor() {
  xg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servertype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverport_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&signal_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&plost_) -
      reinterpret_cast<char*>(&signal_level_)) + sizeof(plost_));
  _cached_size_ = 0;
}

ClientLogBodyPing::~ClientLogBodyPing() {
  // @@protoc_insertion_point(destructor:proto_log.ClientLogBodyPing)
  SharedDtor();
}

void ClientLogBodyPing::SharedDtor() {
  xg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servertype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverport_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dns_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClientLogBodyPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientLogBodyPing::descriptor() {
  protobuf_log_2fclient_2fclient_5fbody_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_2fclient_2fclient_5fbody_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientLogBodyPing& ClientLogBodyPing::default_instance() {
  protobuf_log_2fclient_2fclient_5fbody_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientLogBodyPing* ClientLogBodyPing::New(::google::protobuf::Arena* arena) const {
  ClientLogBodyPing* n = new ClientLogBodyPing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientLogBodyPing::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_log.ClientLogBodyPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servertype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverport_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&signal_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&plost_) -
      reinterpret_cast<char*>(&signal_level_)) + sizeof(plost_));
  _internal_metadata_.Clear();
}

bool ClientLogBodyPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_log.ClientLogBodyPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string xg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->xg().data(), static_cast<int>(this->xg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto_log.ClientLogBodyPing.xg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 signal_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signal_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ping = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string servertype = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servertype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->servertype().data(), static_cast<int>(this->servertype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto_log.ClientLogBodyPing.servertype"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serverip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serverip().data(), static_cast<int>(this->serverip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto_log.ClientLogBodyPing.serverip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serverport = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverport()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serverport().data(), static_cast<int>(this->serverport().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto_log.ClientLogBodyPing.serverport"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pcount = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 plost = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dns = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dns()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dns().data(), static_cast<int>(this->dns().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto_log.ClientLogBodyPing.dns"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_log.ClientLogBodyPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_log.ClientLogBodyPing)
  return false;
#undef DO_
}

void ClientLogBodyPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_log.ClientLogBodyPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string xg = 1;
  if (this->xg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xg().data(), static_cast<int>(this->xg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto_log.ClientLogBodyPing.xg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->xg(), output);
  }

  // uint32 signal_level = 2;
  if (this->signal_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->signal_level(), output);
  }

  // uint32 ping = 3;
  if (this->ping() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ping(), output);
  }

  // string servertype = 4;
  if (this->servertype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servertype().data(), static_cast<int>(this->servertype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto_log.ClientLogBodyPing.servertype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->servertype(), output);
  }

  // string serverip = 5;
  if (this->serverip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverip().data(), static_cast<int>(this->serverip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto_log.ClientLogBodyPing.serverip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->serverip(), output);
  }

  // string serverport = 6;
  if (this->serverport().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverport().data(), static_cast<int>(this->serverport().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto_log.ClientLogBodyPing.serverport");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->serverport(), output);
  }

  // uint32 pcount = 7;
  if (this->pcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pcount(), output);
  }

  // uint32 plost = 8;
  if (this->plost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->plost(), output);
  }

  // string dns = 9;
  if (this->dns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dns().data(), static_cast<int>(this->dns().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto_log.ClientLogBodyPing.dns");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->dns(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_log.ClientLogBodyPing)
}

::google::protobuf::uint8* ClientLogBodyPing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto_log.ClientLogBodyPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string xg = 1;
  if (this->xg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xg().data(), static_cast<int>(this->xg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto_log.ClientLogBodyPing.xg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->xg(), target);
  }

  // uint32 signal_level = 2;
  if (this->signal_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->signal_level(), target);
  }

  // uint32 ping = 3;
  if (this->ping() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ping(), target);
  }

  // string servertype = 4;
  if (this->servertype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servertype().data(), static_cast<int>(this->servertype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto_log.ClientLogBodyPing.servertype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->servertype(), target);
  }

  // string serverip = 5;
  if (this->serverip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverip().data(), static_cast<int>(this->serverip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto_log.ClientLogBodyPing.serverip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->serverip(), target);
  }

  // string serverport = 6;
  if (this->serverport().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverport().data(), static_cast<int>(this->serverport().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto_log.ClientLogBodyPing.serverport");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->serverport(), target);
  }

  // uint32 pcount = 7;
  if (this->pcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pcount(), target);
  }

  // uint32 plost = 8;
  if (this->plost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->plost(), target);
  }

  // string dns = 9;
  if (this->dns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dns().data(), static_cast<int>(this->dns().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto_log.ClientLogBodyPing.dns");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->dns(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_log.ClientLogBodyPing)
  return target;
}

size_t ClientLogBodyPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_log.ClientLogBodyPing)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string xg = 1;
  if (this->xg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->xg());
  }

  // string servertype = 4;
  if (this->servertype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servertype());
  }

  // string serverip = 5;
  if (this->serverip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverip());
  }

  // string serverport = 6;
  if (this->serverport().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverport());
  }

  // string dns = 9;
  if (this->dns().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dns());
  }

  // uint32 signal_level = 2;
  if (this->signal_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->signal_level());
  }

  // uint32 ping = 3;
  if (this->ping() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ping());
  }

  // uint32 pcount = 7;
  if (this->pcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pcount());
  }

  // uint32 plost = 8;
  if (this->plost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->plost());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientLogBodyPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_log.ClientLogBodyPing)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientLogBodyPing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientLogBodyPing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_log.ClientLogBodyPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_log.ClientLogBodyPing)
    MergeFrom(*source);
  }
}

void ClientLogBodyPing::MergeFrom(const ClientLogBodyPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_log.ClientLogBodyPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.xg().size() > 0) {

    xg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xg_);
  }
  if (from.servertype().size() > 0) {

    servertype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servertype_);
  }
  if (from.serverip().size() > 0) {

    serverip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverip_);
  }
  if (from.serverport().size() > 0) {

    serverport_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverport_);
  }
  if (from.dns().size() > 0) {

    dns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dns_);
  }
  if (from.signal_level() != 0) {
    set_signal_level(from.signal_level());
  }
  if (from.ping() != 0) {
    set_ping(from.ping());
  }
  if (from.pcount() != 0) {
    set_pcount(from.pcount());
  }
  if (from.plost() != 0) {
    set_plost(from.plost());
  }
}

void ClientLogBodyPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_log.ClientLogBodyPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientLogBodyPing::CopyFrom(const ClientLogBodyPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_log.ClientLogBodyPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLogBodyPing::IsInitialized() const {
  return true;
}

void ClientLogBodyPing::Swap(ClientLogBodyPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientLogBodyPing::InternalSwap(ClientLogBodyPing* other) {
  using std::swap;
  xg_.Swap(&other->xg_);
  servertype_.Swap(&other->servertype_);
  serverip_.Swap(&other->serverip_);
  serverport_.Swap(&other->serverport_);
  dns_.Swap(&other->dns_);
  swap(signal_level_, other->signal_level_);
  swap(ping_, other->ping_);
  swap(pcount_, other->pcount_);
  swap(plost_, other->plost_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientLogBodyPing::GetMetadata() const {
  protobuf_log_2fclient_2fclient_5fbody_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_2fclient_2fclient_5fbody_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientLogBodyPing

// string xg = 1;
void ClientLogBodyPing::clear_xg() {
  xg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClientLogBodyPing::xg() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyPing.xg)
  return xg_.GetNoArena();
}
void ClientLogBodyPing::set_xg(const ::std::string& value) {
  
  xg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyPing.xg)
}
#if LANG_CXX11
void ClientLogBodyPing::set_xg(::std::string&& value) {
  
  xg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogBodyPing.xg)
}
#endif
void ClientLogBodyPing::set_xg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  xg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogBodyPing.xg)
}
void ClientLogBodyPing::set_xg(const char* value, size_t size) {
  
  xg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogBodyPing.xg)
}
::std::string* ClientLogBodyPing::mutable_xg() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogBodyPing.xg)
  return xg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientLogBodyPing::release_xg() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogBodyPing.xg)
  
  return xg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientLogBodyPing::set_allocated_xg(::std::string* xg) {
  if (xg != NULL) {
    
  } else {
    
  }
  xg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xg);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogBodyPing.xg)
}

// uint32 signal_level = 2;
void ClientLogBodyPing::clear_signal_level() {
  signal_level_ = 0u;
}
::google::protobuf::uint32 ClientLogBodyPing::signal_level() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyPing.signal_level)
  return signal_level_;
}
void ClientLogBodyPing::set_signal_level(::google::protobuf::uint32 value) {
  
  signal_level_ = value;
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyPing.signal_level)
}

// uint32 ping = 3;
void ClientLogBodyPing::clear_ping() {
  ping_ = 0u;
}
::google::protobuf::uint32 ClientLogBodyPing::ping() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyPing.ping)
  return ping_;
}
void ClientLogBodyPing::set_ping(::google::protobuf::uint32 value) {
  
  ping_ = value;
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyPing.ping)
}

// string servertype = 4;
void ClientLogBodyPing::clear_servertype() {
  servertype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClientLogBodyPing::servertype() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyPing.servertype)
  return servertype_.GetNoArena();
}
void ClientLogBodyPing::set_servertype(const ::std::string& value) {
  
  servertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyPing.servertype)
}
#if LANG_CXX11
void ClientLogBodyPing::set_servertype(::std::string&& value) {
  
  servertype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogBodyPing.servertype)
}
#endif
void ClientLogBodyPing::set_servertype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  servertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogBodyPing.servertype)
}
void ClientLogBodyPing::set_servertype(const char* value, size_t size) {
  
  servertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogBodyPing.servertype)
}
::std::string* ClientLogBodyPing::mutable_servertype() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogBodyPing.servertype)
  return servertype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientLogBodyPing::release_servertype() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogBodyPing.servertype)
  
  return servertype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientLogBodyPing::set_allocated_servertype(::std::string* servertype) {
  if (servertype != NULL) {
    
  } else {
    
  }
  servertype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servertype);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogBodyPing.servertype)
}

// string serverip = 5;
void ClientLogBodyPing::clear_serverip() {
  serverip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClientLogBodyPing::serverip() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyPing.serverip)
  return serverip_.GetNoArena();
}
void ClientLogBodyPing::set_serverip(const ::std::string& value) {
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyPing.serverip)
}
#if LANG_CXX11
void ClientLogBodyPing::set_serverip(::std::string&& value) {
  
  serverip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogBodyPing.serverip)
}
#endif
void ClientLogBodyPing::set_serverip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogBodyPing.serverip)
}
void ClientLogBodyPing::set_serverip(const char* value, size_t size) {
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogBodyPing.serverip)
}
::std::string* ClientLogBodyPing::mutable_serverip() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogBodyPing.serverip)
  return serverip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientLogBodyPing::release_serverip() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogBodyPing.serverip)
  
  return serverip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientLogBodyPing::set_allocated_serverip(::std::string* serverip) {
  if (serverip != NULL) {
    
  } else {
    
  }
  serverip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverip);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogBodyPing.serverip)
}

// string serverport = 6;
void ClientLogBodyPing::clear_serverport() {
  serverport_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClientLogBodyPing::serverport() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyPing.serverport)
  return serverport_.GetNoArena();
}
void ClientLogBodyPing::set_serverport(const ::std::string& value) {
  
  serverport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyPing.serverport)
}
#if LANG_CXX11
void ClientLogBodyPing::set_serverport(::std::string&& value) {
  
  serverport_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogBodyPing.serverport)
}
#endif
void ClientLogBodyPing::set_serverport(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serverport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogBodyPing.serverport)
}
void ClientLogBodyPing::set_serverport(const char* value, size_t size) {
  
  serverport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogBodyPing.serverport)
}
::std::string* ClientLogBodyPing::mutable_serverport() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogBodyPing.serverport)
  return serverport_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientLogBodyPing::release_serverport() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogBodyPing.serverport)
  
  return serverport_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientLogBodyPing::set_allocated_serverport(::std::string* serverport) {
  if (serverport != NULL) {
    
  } else {
    
  }
  serverport_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverport);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogBodyPing.serverport)
}

// uint32 pcount = 7;
void ClientLogBodyPing::clear_pcount() {
  pcount_ = 0u;
}
::google::protobuf::uint32 ClientLogBodyPing::pcount() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyPing.pcount)
  return pcount_;
}
void ClientLogBodyPing::set_pcount(::google::protobuf::uint32 value) {
  
  pcount_ = value;
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyPing.pcount)
}

// uint32 plost = 8;
void ClientLogBodyPing::clear_plost() {
  plost_ = 0u;
}
::google::protobuf::uint32 ClientLogBodyPing::plost() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyPing.plost)
  return plost_;
}
void ClientLogBodyPing::set_plost(::google::protobuf::uint32 value) {
  
  plost_ = value;
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyPing.plost)
}

// string dns = 9;
void ClientLogBodyPing::clear_dns() {
  dns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClientLogBodyPing::dns() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyPing.dns)
  return dns_.GetNoArena();
}
void ClientLogBodyPing::set_dns(const ::std::string& value) {
  
  dns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyPing.dns)
}
#if LANG_CXX11
void ClientLogBodyPing::set_dns(::std::string&& value) {
  
  dns_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogBodyPing.dns)
}
#endif
void ClientLogBodyPing::set_dns(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogBodyPing.dns)
}
void ClientLogBodyPing::set_dns(const char* value, size_t size) {
  
  dns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogBodyPing.dns)
}
::std::string* ClientLogBodyPing::mutable_dns() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogBodyPing.dns)
  return dns_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientLogBodyPing::release_dns() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogBodyPing.dns)
  
  return dns_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientLogBodyPing::set_allocated_dns(::std::string* dns) {
  if (dns != NULL) {
    
  } else {
    
  }
  dns_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dns);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogBodyPing.dns)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_log

// @@protoc_insertion_point(global_scope)
