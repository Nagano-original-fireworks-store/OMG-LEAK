// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log/client/client_body_common.proto

#ifndef PROTOBUF_log_2fclient_2fclient_5fbody_5fcommon_2eproto__INCLUDED
#define PROTOBUF_log_2fclient_2fclient_5fbody_5fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace proto_log {
class ClientLogBodyLogin;
class ClientLogBodyLoginDefaultTypeInternal;
extern ClientLogBodyLoginDefaultTypeInternal _ClientLogBodyLogin_default_instance_;
class ClientLogBodyPing;
class ClientLogBodyPingDefaultTypeInternal;
extern ClientLogBodyPingDefaultTypeInternal _ClientLogBodyPing_default_instance_;
}  // namespace proto_log

namespace proto_log {

namespace protobuf_log_2fclient_2fclient_5fbody_5fcommon_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_log_2fclient_2fclient_5fbody_5fcommon_2eproto

// ===================================================================

class ClientLogBodyLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto_log.ClientLogBodyLogin) */ {
 public:
  ClientLogBodyLogin();
  virtual ~ClientLogBodyLogin();

  ClientLogBodyLogin(const ClientLogBodyLogin& from);

  inline ClientLogBodyLogin& operator=(const ClientLogBodyLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientLogBodyLogin(ClientLogBodyLogin&& from) noexcept
    : ClientLogBodyLogin() {
    *this = ::std::move(from);
  }

  inline ClientLogBodyLogin& operator=(ClientLogBodyLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientLogBodyLogin& default_instance();

  static inline const ClientLogBodyLogin* internal_default_instance() {
    return reinterpret_cast<const ClientLogBodyLogin*>(
               &_ClientLogBodyLogin_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ClientLogBodyLogin* other);
  friend void swap(ClientLogBodyLogin& a, ClientLogBodyLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientLogBodyLogin* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientLogBodyLogin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientLogBodyLogin& from);
  void MergeFrom(const ClientLogBodyLogin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientLogBodyLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string action_type = 1;
  void clear_action_type();
  static const int kActionTypeFieldNumber = 1;
  const ::std::string& action_type() const;
  void set_action_type(const ::std::string& value);
  #if LANG_CXX11
  void set_action_type(::std::string&& value);
  #endif
  void set_action_type(const char* value);
  void set_action_type(const char* value, size_t size);
  ::std::string* mutable_action_type();
  ::std::string* release_action_type();
  void set_allocated_action_type(::std::string* action_type);

  // string action_result = 2;
  void clear_action_result();
  static const int kActionResultFieldNumber = 2;
  const ::std::string& action_result() const;
  void set_action_result(const ::std::string& value);
  #if LANG_CXX11
  void set_action_result(::std::string&& value);
  #endif
  void set_action_result(const char* value);
  void set_action_result(const char* value, size_t size);
  ::std::string* mutable_action_result();
  ::std::string* release_action_result();
  void set_allocated_action_result(::std::string* action_result);

  // string xg = 4;
  void clear_xg();
  static const int kXgFieldNumber = 4;
  const ::std::string& xg() const;
  void set_xg(const ::std::string& value);
  #if LANG_CXX11
  void set_xg(::std::string&& value);
  #endif
  void set_xg(const char* value);
  void set_xg(const char* value, size_t size);
  ::std::string* mutable_xg();
  ::std::string* release_xg();
  void set_allocated_xg(::std::string* xg);

  // string dns = 6;
  void clear_dns();
  static const int kDnsFieldNumber = 6;
  const ::std::string& dns() const;
  void set_dns(const ::std::string& value);
  #if LANG_CXX11
  void set_dns(::std::string&& value);
  #endif
  void set_dns(const char* value);
  void set_dns(const char* value, size_t size);
  ::std::string* mutable_dns();
  ::std::string* release_dns();
  void set_allocated_dns(::std::string* dns);

  // uint32 action_time = 3;
  void clear_action_time();
  static const int kActionTimeFieldNumber = 3;
  ::google::protobuf::uint32 action_time() const;
  void set_action_time(::google::protobuf::uint32 value);

  // uint32 signal_level = 5;
  void clear_signal_level();
  static const int kSignalLevelFieldNumber = 5;
  ::google::protobuf::uint32 signal_level() const;
  void set_signal_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_log.ClientLogBodyLogin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr action_type_;
  ::google::protobuf::internal::ArenaStringPtr action_result_;
  ::google::protobuf::internal::ArenaStringPtr xg_;
  ::google::protobuf::internal::ArenaStringPtr dns_;
  ::google::protobuf::uint32 action_time_;
  ::google::protobuf::uint32 signal_level_;
  mutable int _cached_size_;
  friend struct protobuf_log_2fclient_2fclient_5fbody_5fcommon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientLogBodyPing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto_log.ClientLogBodyPing) */ {
 public:
  ClientLogBodyPing();
  virtual ~ClientLogBodyPing();

  ClientLogBodyPing(const ClientLogBodyPing& from);

  inline ClientLogBodyPing& operator=(const ClientLogBodyPing& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientLogBodyPing(ClientLogBodyPing&& from) noexcept
    : ClientLogBodyPing() {
    *this = ::std::move(from);
  }

  inline ClientLogBodyPing& operator=(ClientLogBodyPing&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientLogBodyPing& default_instance();

  static inline const ClientLogBodyPing* internal_default_instance() {
    return reinterpret_cast<const ClientLogBodyPing*>(
               &_ClientLogBodyPing_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ClientLogBodyPing* other);
  friend void swap(ClientLogBodyPing& a, ClientLogBodyPing& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientLogBodyPing* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientLogBodyPing* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientLogBodyPing& from);
  void MergeFrom(const ClientLogBodyPing& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientLogBodyPing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string xg = 1;
  void clear_xg();
  static const int kXgFieldNumber = 1;
  const ::std::string& xg() const;
  void set_xg(const ::std::string& value);
  #if LANG_CXX11
  void set_xg(::std::string&& value);
  #endif
  void set_xg(const char* value);
  void set_xg(const char* value, size_t size);
  ::std::string* mutable_xg();
  ::std::string* release_xg();
  void set_allocated_xg(::std::string* xg);

  // string servertype = 4;
  void clear_servertype();
  static const int kServertypeFieldNumber = 4;
  const ::std::string& servertype() const;
  void set_servertype(const ::std::string& value);
  #if LANG_CXX11
  void set_servertype(::std::string&& value);
  #endif
  void set_servertype(const char* value);
  void set_servertype(const char* value, size_t size);
  ::std::string* mutable_servertype();
  ::std::string* release_servertype();
  void set_allocated_servertype(::std::string* servertype);

  // string serverip = 5;
  void clear_serverip();
  static const int kServeripFieldNumber = 5;
  const ::std::string& serverip() const;
  void set_serverip(const ::std::string& value);
  #if LANG_CXX11
  void set_serverip(::std::string&& value);
  #endif
  void set_serverip(const char* value);
  void set_serverip(const char* value, size_t size);
  ::std::string* mutable_serverip();
  ::std::string* release_serverip();
  void set_allocated_serverip(::std::string* serverip);

  // string serverport = 6;
  void clear_serverport();
  static const int kServerportFieldNumber = 6;
  const ::std::string& serverport() const;
  void set_serverport(const ::std::string& value);
  #if LANG_CXX11
  void set_serverport(::std::string&& value);
  #endif
  void set_serverport(const char* value);
  void set_serverport(const char* value, size_t size);
  ::std::string* mutable_serverport();
  ::std::string* release_serverport();
  void set_allocated_serverport(::std::string* serverport);

  // string dns = 9;
  void clear_dns();
  static const int kDnsFieldNumber = 9;
  const ::std::string& dns() const;
  void set_dns(const ::std::string& value);
  #if LANG_CXX11
  void set_dns(::std::string&& value);
  #endif
  void set_dns(const char* value);
  void set_dns(const char* value, size_t size);
  ::std::string* mutable_dns();
  ::std::string* release_dns();
  void set_allocated_dns(::std::string* dns);

  // uint32 signal_level = 2;
  void clear_signal_level();
  static const int kSignalLevelFieldNumber = 2;
  ::google::protobuf::uint32 signal_level() const;
  void set_signal_level(::google::protobuf::uint32 value);

  // uint32 ping = 3;
  void clear_ping();
  static const int kPingFieldNumber = 3;
  ::google::protobuf::uint32 ping() const;
  void set_ping(::google::protobuf::uint32 value);

  // uint32 pcount = 7;
  void clear_pcount();
  static const int kPcountFieldNumber = 7;
  ::google::protobuf::uint32 pcount() const;
  void set_pcount(::google::protobuf::uint32 value);

  // uint32 plost = 8;
  void clear_plost();
  static const int kPlostFieldNumber = 8;
  ::google::protobuf::uint32 plost() const;
  void set_plost(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_log.ClientLogBodyPing)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr xg_;
  ::google::protobuf::internal::ArenaStringPtr servertype_;
  ::google::protobuf::internal::ArenaStringPtr serverip_;
  ::google::protobuf::internal::ArenaStringPtr serverport_;
  ::google::protobuf::internal::ArenaStringPtr dns_;
  ::google::protobuf::uint32 signal_level_;
  ::google::protobuf::uint32 ping_;
  ::google::protobuf::uint32 pcount_;
  ::google::protobuf::uint32 plost_;
  mutable int _cached_size_;
  friend struct protobuf_log_2fclient_2fclient_5fbody_5fcommon_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientLogBodyLogin

// string action_type = 1;
inline void ClientLogBodyLogin::clear_action_type() {
  action_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientLogBodyLogin::action_type() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyLogin.action_type)
  return action_type_.GetNoArena();
}
inline void ClientLogBodyLogin::set_action_type(const ::std::string& value) {
  
  action_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyLogin.action_type)
}
#if LANG_CXX11
inline void ClientLogBodyLogin::set_action_type(::std::string&& value) {
  
  action_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogBodyLogin.action_type)
}
#endif
inline void ClientLogBodyLogin::set_action_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogBodyLogin.action_type)
}
inline void ClientLogBodyLogin::set_action_type(const char* value, size_t size) {
  
  action_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogBodyLogin.action_type)
}
inline ::std::string* ClientLogBodyLogin::mutable_action_type() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogBodyLogin.action_type)
  return action_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientLogBodyLogin::release_action_type() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogBodyLogin.action_type)
  
  return action_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientLogBodyLogin::set_allocated_action_type(::std::string* action_type) {
  if (action_type != NULL) {
    
  } else {
    
  }
  action_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action_type);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogBodyLogin.action_type)
}

// string action_result = 2;
inline void ClientLogBodyLogin::clear_action_result() {
  action_result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientLogBodyLogin::action_result() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyLogin.action_result)
  return action_result_.GetNoArena();
}
inline void ClientLogBodyLogin::set_action_result(const ::std::string& value) {
  
  action_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyLogin.action_result)
}
#if LANG_CXX11
inline void ClientLogBodyLogin::set_action_result(::std::string&& value) {
  
  action_result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogBodyLogin.action_result)
}
#endif
inline void ClientLogBodyLogin::set_action_result(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogBodyLogin.action_result)
}
inline void ClientLogBodyLogin::set_action_result(const char* value, size_t size) {
  
  action_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogBodyLogin.action_result)
}
inline ::std::string* ClientLogBodyLogin::mutable_action_result() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogBodyLogin.action_result)
  return action_result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientLogBodyLogin::release_action_result() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogBodyLogin.action_result)
  
  return action_result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientLogBodyLogin::set_allocated_action_result(::std::string* action_result) {
  if (action_result != NULL) {
    
  } else {
    
  }
  action_result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action_result);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogBodyLogin.action_result)
}

// uint32 action_time = 3;
inline void ClientLogBodyLogin::clear_action_time() {
  action_time_ = 0u;
}
inline ::google::protobuf::uint32 ClientLogBodyLogin::action_time() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyLogin.action_time)
  return action_time_;
}
inline void ClientLogBodyLogin::set_action_time(::google::protobuf::uint32 value) {
  
  action_time_ = value;
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyLogin.action_time)
}

// string xg = 4;
inline void ClientLogBodyLogin::clear_xg() {
  xg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientLogBodyLogin::xg() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyLogin.xg)
  return xg_.GetNoArena();
}
inline void ClientLogBodyLogin::set_xg(const ::std::string& value) {
  
  xg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyLogin.xg)
}
#if LANG_CXX11
inline void ClientLogBodyLogin::set_xg(::std::string&& value) {
  
  xg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogBodyLogin.xg)
}
#endif
inline void ClientLogBodyLogin::set_xg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  xg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogBodyLogin.xg)
}
inline void ClientLogBodyLogin::set_xg(const char* value, size_t size) {
  
  xg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogBodyLogin.xg)
}
inline ::std::string* ClientLogBodyLogin::mutable_xg() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogBodyLogin.xg)
  return xg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientLogBodyLogin::release_xg() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogBodyLogin.xg)
  
  return xg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientLogBodyLogin::set_allocated_xg(::std::string* xg) {
  if (xg != NULL) {
    
  } else {
    
  }
  xg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xg);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogBodyLogin.xg)
}

// uint32 signal_level = 5;
inline void ClientLogBodyLogin::clear_signal_level() {
  signal_level_ = 0u;
}
inline ::google::protobuf::uint32 ClientLogBodyLogin::signal_level() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyLogin.signal_level)
  return signal_level_;
}
inline void ClientLogBodyLogin::set_signal_level(::google::protobuf::uint32 value) {
  
  signal_level_ = value;
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyLogin.signal_level)
}

// string dns = 6;
inline void ClientLogBodyLogin::clear_dns() {
  dns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientLogBodyLogin::dns() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyLogin.dns)
  return dns_.GetNoArena();
}
inline void ClientLogBodyLogin::set_dns(const ::std::string& value) {
  
  dns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyLogin.dns)
}
#if LANG_CXX11
inline void ClientLogBodyLogin::set_dns(::std::string&& value) {
  
  dns_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogBodyLogin.dns)
}
#endif
inline void ClientLogBodyLogin::set_dns(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogBodyLogin.dns)
}
inline void ClientLogBodyLogin::set_dns(const char* value, size_t size) {
  
  dns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogBodyLogin.dns)
}
inline ::std::string* ClientLogBodyLogin::mutable_dns() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogBodyLogin.dns)
  return dns_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientLogBodyLogin::release_dns() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogBodyLogin.dns)
  
  return dns_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientLogBodyLogin::set_allocated_dns(::std::string* dns) {
  if (dns != NULL) {
    
  } else {
    
  }
  dns_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dns);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogBodyLogin.dns)
}

// -------------------------------------------------------------------

// ClientLogBodyPing

// string xg = 1;
inline void ClientLogBodyPing::clear_xg() {
  xg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientLogBodyPing::xg() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyPing.xg)
  return xg_.GetNoArena();
}
inline void ClientLogBodyPing::set_xg(const ::std::string& value) {
  
  xg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyPing.xg)
}
#if LANG_CXX11
inline void ClientLogBodyPing::set_xg(::std::string&& value) {
  
  xg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogBodyPing.xg)
}
#endif
inline void ClientLogBodyPing::set_xg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  xg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogBodyPing.xg)
}
inline void ClientLogBodyPing::set_xg(const char* value, size_t size) {
  
  xg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogBodyPing.xg)
}
inline ::std::string* ClientLogBodyPing::mutable_xg() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogBodyPing.xg)
  return xg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientLogBodyPing::release_xg() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogBodyPing.xg)
  
  return xg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientLogBodyPing::set_allocated_xg(::std::string* xg) {
  if (xg != NULL) {
    
  } else {
    
  }
  xg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xg);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogBodyPing.xg)
}

// uint32 signal_level = 2;
inline void ClientLogBodyPing::clear_signal_level() {
  signal_level_ = 0u;
}
inline ::google::protobuf::uint32 ClientLogBodyPing::signal_level() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyPing.signal_level)
  return signal_level_;
}
inline void ClientLogBodyPing::set_signal_level(::google::protobuf::uint32 value) {
  
  signal_level_ = value;
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyPing.signal_level)
}

// uint32 ping = 3;
inline void ClientLogBodyPing::clear_ping() {
  ping_ = 0u;
}
inline ::google::protobuf::uint32 ClientLogBodyPing::ping() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyPing.ping)
  return ping_;
}
inline void ClientLogBodyPing::set_ping(::google::protobuf::uint32 value) {
  
  ping_ = value;
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyPing.ping)
}

// string servertype = 4;
inline void ClientLogBodyPing::clear_servertype() {
  servertype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientLogBodyPing::servertype() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyPing.servertype)
  return servertype_.GetNoArena();
}
inline void ClientLogBodyPing::set_servertype(const ::std::string& value) {
  
  servertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyPing.servertype)
}
#if LANG_CXX11
inline void ClientLogBodyPing::set_servertype(::std::string&& value) {
  
  servertype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogBodyPing.servertype)
}
#endif
inline void ClientLogBodyPing::set_servertype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  servertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogBodyPing.servertype)
}
inline void ClientLogBodyPing::set_servertype(const char* value, size_t size) {
  
  servertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogBodyPing.servertype)
}
inline ::std::string* ClientLogBodyPing::mutable_servertype() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogBodyPing.servertype)
  return servertype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientLogBodyPing::release_servertype() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogBodyPing.servertype)
  
  return servertype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientLogBodyPing::set_allocated_servertype(::std::string* servertype) {
  if (servertype != NULL) {
    
  } else {
    
  }
  servertype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servertype);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogBodyPing.servertype)
}

// string serverip = 5;
inline void ClientLogBodyPing::clear_serverip() {
  serverip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientLogBodyPing::serverip() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyPing.serverip)
  return serverip_.GetNoArena();
}
inline void ClientLogBodyPing::set_serverip(const ::std::string& value) {
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyPing.serverip)
}
#if LANG_CXX11
inline void ClientLogBodyPing::set_serverip(::std::string&& value) {
  
  serverip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogBodyPing.serverip)
}
#endif
inline void ClientLogBodyPing::set_serverip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogBodyPing.serverip)
}
inline void ClientLogBodyPing::set_serverip(const char* value, size_t size) {
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogBodyPing.serverip)
}
inline ::std::string* ClientLogBodyPing::mutable_serverip() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogBodyPing.serverip)
  return serverip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientLogBodyPing::release_serverip() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogBodyPing.serverip)
  
  return serverip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientLogBodyPing::set_allocated_serverip(::std::string* serverip) {
  if (serverip != NULL) {
    
  } else {
    
  }
  serverip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverip);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogBodyPing.serverip)
}

// string serverport = 6;
inline void ClientLogBodyPing::clear_serverport() {
  serverport_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientLogBodyPing::serverport() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyPing.serverport)
  return serverport_.GetNoArena();
}
inline void ClientLogBodyPing::set_serverport(const ::std::string& value) {
  
  serverport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyPing.serverport)
}
#if LANG_CXX11
inline void ClientLogBodyPing::set_serverport(::std::string&& value) {
  
  serverport_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogBodyPing.serverport)
}
#endif
inline void ClientLogBodyPing::set_serverport(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serverport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogBodyPing.serverport)
}
inline void ClientLogBodyPing::set_serverport(const char* value, size_t size) {
  
  serverport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogBodyPing.serverport)
}
inline ::std::string* ClientLogBodyPing::mutable_serverport() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogBodyPing.serverport)
  return serverport_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientLogBodyPing::release_serverport() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogBodyPing.serverport)
  
  return serverport_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientLogBodyPing::set_allocated_serverport(::std::string* serverport) {
  if (serverport != NULL) {
    
  } else {
    
  }
  serverport_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverport);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogBodyPing.serverport)
}

// uint32 pcount = 7;
inline void ClientLogBodyPing::clear_pcount() {
  pcount_ = 0u;
}
inline ::google::protobuf::uint32 ClientLogBodyPing::pcount() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyPing.pcount)
  return pcount_;
}
inline void ClientLogBodyPing::set_pcount(::google::protobuf::uint32 value) {
  
  pcount_ = value;
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyPing.pcount)
}

// uint32 plost = 8;
inline void ClientLogBodyPing::clear_plost() {
  plost_ = 0u;
}
inline ::google::protobuf::uint32 ClientLogBodyPing::plost() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyPing.plost)
  return plost_;
}
inline void ClientLogBodyPing::set_plost(::google::protobuf::uint32 value) {
  
  plost_ = value;
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyPing.plost)
}

// string dns = 9;
inline void ClientLogBodyPing::clear_dns() {
  dns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientLogBodyPing::dns() const {
  // @@protoc_insertion_point(field_get:proto_log.ClientLogBodyPing.dns)
  return dns_.GetNoArena();
}
inline void ClientLogBodyPing::set_dns(const ::std::string& value) {
  
  dns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_log.ClientLogBodyPing.dns)
}
#if LANG_CXX11
inline void ClientLogBodyPing::set_dns(::std::string&& value) {
  
  dns_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_log.ClientLogBodyPing.dns)
}
#endif
inline void ClientLogBodyPing::set_dns(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_log.ClientLogBodyPing.dns)
}
inline void ClientLogBodyPing::set_dns(const char* value, size_t size) {
  
  dns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_log.ClientLogBodyPing.dns)
}
inline ::std::string* ClientLogBodyPing::mutable_dns() {
  
  // @@protoc_insertion_point(field_mutable:proto_log.ClientLogBodyPing.dns)
  return dns_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientLogBodyPing::release_dns() {
  // @@protoc_insertion_point(field_release:proto_log.ClientLogBodyPing.dns)
  
  return dns_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientLogBodyPing::set_allocated_dns(::std::string* dns) {
  if (dns != NULL) {
    
  } else {
    
  }
  dns_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dns);
  // @@protoc_insertion_point(field_set_allocated:proto_log.ClientLogBodyPing.dns)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto_log

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_log_2fclient_2fclient_5fbody_5fcommon_2eproto__INCLUDED
