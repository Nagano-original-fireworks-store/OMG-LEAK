/***************************************************************************
 * 
 * Copyright (c) 2019 miHoYo.com, Inc. All Rights Reserved
 * 
 **************************************************************************/
 
/**
 * @file cmd/cmd_tower.proto
 * @作者 yifan.fang(yifan.fang@mihoyo.com)
 * @日期 2019/12/04 20:09:48
 * @brief 爬塔相关协议 [2401-2500]
 **/

syntax = "proto3";
import "define.proto";
package proto;

// 队伍镜像
message TowerTeam
{
    uint32 tower_team_id = 1;                   // 第几个爬塔队伍
    repeated uint64 avatar_guid_list = 2;       // 队员guid，第一个角色就是上场角色
}

// 关卡记录
message TowerLevelRecord
{
    uint32 level_id = 1;                        // 关卡ID
    repeated uint32 satisfied_cond_list = 2;    // 完成了的星级条件序号
}

// 爬塔进度
message TowerFloorRecord
{
    uint32 floor_id = 1;                        // 层ID
    map<uint32, uint32> passed_level_map = 2;   // 完成了的关卡的记录，也是首通奖励发过的关卡（key:关卡ID value:关卡星数）
    uint32 floor_star_reward_progress = 3;      // 星级奖励领取进度（1~3分别表示5星/10星/15星)
    repeated TowerLevelRecord passed_level_record_list = 4; // 完成了的关卡的记录，也是首通奖励发过的关卡
}

// 爬塔暂存信息
message TowerCurLevelRecord
{
    uint32 cur_floor_id = 1;                    // 第几层
    uint32 cur_level_index = 2;                 // 关卡组内序号，当前能打的关卡
    repeated TowerTeam tower_team_list = 3;     // 队伍镜像，guid是镜像角色的guid
    repeated uint32 buff_id_list = 4;           // 本层生效的爬塔增益buff
    bool is_empty = 5;                          // 是否没有暂存信息
}

// 爬塔所有信息，登录或爬塔排期变化时通知（S->C）
message TowerBriefDataNotify
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2401;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
    uint32 tower_schedule_id = 1;                           // 当前爬塔排期ID
    uint32 next_schedule_change_time = 2;                   // 下一个爬塔排期变化时间戳，没有的话为0
    uint32 total_star_num = 3;                              // 当前爬塔排期的总星数
    uint32 last_floor_index = 4;                            // 当前排期内打到的最高层是第几层
    uint32 last_level_index = 5;                            // 当前排期内打到的最高层的最后一关是第几关
}

// 每层的进度变化，一关第一次完成、星数变化、领取星级奖励、发放首通奖励后通知（S->C）
message TowerFloorRecordChangeNotify
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2402;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
    repeated TowerFloorRecord tower_floor_record_list = 1;
}

// 爬塔暂离记录变化通知，设置队伍、一关完成或失败后通知（S->C）
message TowerCurLevelRecordChangeNotify
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2403;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
    TowerCurLevelRecord cur_level_record = 1;    // 其中的is_empty为true表示没有当前关卡进度
}

// 爬塔每日奖励进度变化通知
message TowerDailyRewardProgressChangeNotify
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2404;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
    uint32 daily_floor_id = 1;                  // 今日最好成绩到第几层
    uint32 daily_level_index = 2;               // 今日最好成绩到第几关（按前一关发奖）
}

// 设置爬塔队伍，只能在非暂离状态设置，设置后进入暂离状态（C->S）
message TowerTeamSelectReq
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2406;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
    uint32 floor_id = 1;    // 只有在非暂离状态下才需要填这个字段
    repeated TowerTeam tower_team_list = 2;     // 要设置的队伍，guid是正式角色的guid
}

// 设置爬塔队伍的回复（S->C）
message TowerTeamSelectRsp
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2407;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
    int32 retcode = 1;
}

// 请求爬塔所有信息
message TowerAllDataReq
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2408;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

// 爬塔所有信息的回复
message TowerAllDataRsp
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2409;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
    uint32 tower_schedule_id = 1;                           // 当前爬塔排期ID
    repeated TowerFloorRecord tower_floor_record_list = 2;  // 爬塔每月进度中的每层记录（哪些层可以打）
    uint32 daily_floor_id = 3;                              // 今日最好成绩到第几层
    uint32 daily_level_index = 4;                           // 今日最好成绩到第几关（按前一关发奖）
    TowerCurLevelRecord cur_level_record = 5;               // 爬塔暂存信息，这个字段的is_empty为true的话表示非暂离状态
    uint32 next_schedule_change_time = 6;                   // 当前排期的结束时间或下一个爬塔排期开始时间，0表示没有
    map<uint32, uint32> floor_open_time_map = 7;            // 每层开启时间，0表示已经开启；key是floor_id
    int32 retcode = 8;
}

// 进入爬塔关卡，只能在暂离状态时进入（C->S）
message TowerEnterLevelReq
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2411;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
    uint32 enter_point_id = 1;    // 地城入口点ID
}

// 进入爬塔关卡的返回（S->C）
message TowerEnterLevelRsp
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2412;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
    int32 retcode = 1;
    uint32 floor_id = 2;    // 层ID
    uint32 level_index = 3; // 关卡组内序号
    repeated uint32 tower_buff_id_list = 4; // 可选buff
}

// 选择buff（C->S）
message TowerBuffSelectReq
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2413;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
    uint32 tower_buff_id = 1;
}

// 选择buff的返回（C->S）
message TowerBuffSelectRsp
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2414;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
    int32 retcode = 1;
    uint32 tower_buff_id = 2;
}

// 放弃爬塔请求，可以在关卡内或暂离状态时放弃（C->S）
message TowerSurrenderReq
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2421;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

// 放弃爬塔挑战的回复（S->C）
message TowerSurrenderRsp
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2422;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
    int32 retcode = 1;
}

// 领取星级奖励（C->S）
// 剩下的首通奖励、每日奖励、每月奖励暂时都通过邮件发送
message TowerGetFloorStarRewardReq
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2423;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
    uint32 floor_id = 1;    // 如果同时有多个星级可以领奖，会同时领
}

// 领取星级奖励的回复（S->C）
message TowerGetFloorStarRewardRsp
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2424;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
    int32 retcode = 1;
    uint32 floor_id = 2;
}

// 战斗结束通知（S->C）
message TowerLevelEndNotify
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2430;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
    enum ContinueStateType
    {
        CONTINUE_STATE_CAN_NOT_CONTINUE = 0;
        CONTINUE_STATE_CAN_ENTER_NEXT_LEVEL = 1;
        CONTINUE_STATE_CAN_ENTER_NEXT_FLOOR = 2;
    }
    bool is_success = 1;
    repeated uint32 finished_star_cond_list = 2;    // 如果通关的话，完成了哪些星级评价（TowerLevelExcelConfig.conds里从1开始的序号）
    repeated ItemParam reward_item_list = 3;    // 奖励
    uint32 continue_state = 4;  // 0:不能继续 1:能打下一关 2:能进下一层
    uint32 next_floor_id = 5;   // 如果打赢了一层的最后一关，且下一层可以打（开放时间、当前层的星数、当前层不是最后一层），下一层的floor_id
}

message TowerLevelStarCondData
{
    uint32 star_cond_index = 3; // 第几个星级评价条件，目前只会通知正计时的进度
    uint32 cond_value = 4;      // 进度值
    bool is_pause = 5;          // 如果是正计时，是否暂停计时
}

// 关卡进度变化通知
message TowerLevelStarCondNotify
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2431;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
    uint32 floor_id = 1;
    uint32 level_index = 2;
    repeated TowerLevelStarCondData cond_data_list = 3;
}

// 中场换人通知
message TowerMiddleLevelChangeTeamNotify
{
    enum CmdId
    {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2432;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

/* vim: set expandtab ts=4 sw=4 sts=4 tw=100: */
